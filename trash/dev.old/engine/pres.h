// Cutscene

unsigned char cutsi, cutc, cutf, cutff;
const unsigned char cutscene_text [] = {
	0x27, 0x4e, 0x4f, 0x57, 0x20, 0x54, 0x48, 0x45, 0x20, 0x53, 0x54, 0x52, 0x45, 0x45, 0x54, 0x53,
	0x20, 0x41, 0x52, 0x45, 0x20, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x27, 0x2a, 0x2d, 0x20, 0x59, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x20, 0x43, 0x48, 0x45, 0x52, 0x49, 0x4c, 0x2e, 0x2a, 0x27, 0x48, 0x41,
	0x54, 0x48, 0x20, 0x49, 0x20, 0x53, 0x45, 0x45, 0x4e, 0x20, 0x54, 0x48, 0x41, 0x54, 0x2c, 0x20,
	0x4d, 0x41, 0x27, 0x41, 0x4d, 0x27, 0x2a, 0x2d, 0x20, 0x53, 0x41, 0x49, 0x44, 0x20, 0x54, 0x48,
	0x45, 0x20, 0x4d, 0x41, 0x59, 0x4f, 0x52, 0x2c, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x54, 0x4f, 0x4f,
	0x4b, 0x20, 0x41, 0x2a, 0x42, 0x4c, 0x4f, 0x57, 0x20, 0x4f, 0x46, 0x46, 0x20, 0x48, 0x49, 0x53,
	0x20, 0x50, 0x49, 0x50, 0x45, 0x2e, 0x2a, 0x27, 0x42, 0x55, 0x54, 0x20, 0x59, 0x45, 0x52, 0x20,
	0x4a, 0x4f, 0x42, 0x20, 0x48, 0x45, 0x52, 0x45, 0x20, 0x49, 0x53, 0x20, 0x4e, 0x4f, 0x54, 0x20,
	0x4f, 0x56, 0x45, 0x52, 0x2c, 0x2a, 0x48, 0x45, 0x41, 0x44, 0x20, 0x54, 0x4f, 0x20, 0x54, 0x48,
	0x45, 0x20, 0x4f, 0x4c, 0x27, 0x20, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x2c, 0x20, 0x47,
	0x55, 0x52, 0x4c, 0x27, 0x2a, 0x48, 0x45, 0x20, 0x53, 0x41, 0x49, 0x44, 0x2e, 0x2a, 0x27, 0x57,
	0x48, 0x41, 0x44, 0x44, 0x41, 0x59, 0x41, 0x20, 0x4d, 0x45, 0x41, 0x4e, 0x2c, 0x20, 0x55, 0x47,
	0x4c, 0x59, 0x20, 0x4f, 0x4c, 0x44, 0x20, 0x4d, 0x41, 0x4e, 0x3f, 0x27, 0x2a, 0x2d, 0x20, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x53, 0x54, 0x45, 0x44, 0x20, 0x43, 0x48, 0x45, 0x52, 0x49, 0x4c, 0x2a,
	0x27, 0x54, 0x48, 0x45, 0x52, 0x45, 0x27, 0x52, 0x45, 0x20, 0x4d, 0x4f, 0x52, 0x45, 0x20, 0x4d,
	0x4f, 0x4e, 0x53, 0x54, 0x45, 0x52, 0x53, 0x20, 0x49, 0x4e, 0x2a, 0x54, 0x48, 0x45, 0x20, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x2e, 0x20, 0x59, 0x27, 0x4b, 0x4e, 0x4f, 0x57, 0x2c, 0x20,
	0x41, 0x20, 0x42, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x3a, 0x2a, 0x49, 0x27, 0x4c, 0x4c, 0x20, 0x53,
	0x41, 0x56, 0x45, 0x20, 0x41, 0x20, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x20, 0x49, 0x4e,
	0x20, 0x57, 0x41, 0x47, 0x45, 0x53, 0x2c, 0x2a, 0x42, 0x55, 0x54, 0x20, 0x53, 0x4f, 0x4d, 0x45,
	0x20, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x20, 0x49, 0x53, 0x20, 0x44, 0x55, 0x45, 0x2e,
	0x27, 0x2a, 0x2d, 0x20, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x20, 0x54, 0x48,
	0x45, 0x20, 0x4d, 0x41, 0x59, 0x4f, 0x52, 0x2e, 0x2a, 0x27, 0x49, 0x20, 0x53, 0x48, 0x41, 0x4c,
	0x4c, 0x20, 0x4b, 0x49, 0x4c, 0x4c, 0x20, 0x59, 0x4f, 0x55, 0x20, 0x57, 0x49, 0x54, 0x48, 0x20,
	0x4d, 0x59, 0x20, 0x42, 0x41, 0x52, 0x45, 0x2a, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x2c, 0x20, 0x54,
	0x48, 0x49, 0x53, 0x20, 0x49, 0x20, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x21, 0x27, 0x2a,
	0x2d, 0x20, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x44, 0x45, 0x44, 0x20, 0x43, 0x48, 0x45, 0x52, 0x49,
	0x4c, 0x2a, 0x27, 0x43, 0x41, 0x4c, 0x4d, 0x20, 0x44, 0x4f, 0x57, 0x4e, 0x20, 0x41, 0x4e, 0x44,
	0x20, 0x44, 0x4f, 0x20, 0x41, 0x53, 0x20, 0x49, 0x20, 0x53, 0x41, 0x59, 0x2e, 0x27, 0x2a, 0x2d,
	0x20, 0x4c, 0x41, 0x55, 0x47, 0x48, 0x45, 0x44, 0x20, 0x54, 0x48, 0x45, 0x20, 0x4d, 0x41, 0x59,
	0x4f, 0x52, 0x2e, 0x0
};

//  'NOW THE STREETS ARE CLEAN'*- YELLED CHERIL.*'HATH I SEEN THAT, MA'AM'*- SAID THE MAYOR, AND TOOK A*BLOW OFF HIS PIPE.*'BUT YER JOB HERE IS NOT OVER,*HEAD TO THE OL' FACTORY, GURL'*HE SAID.*'WHADDAYA MEAN, UGLY OLD MAN?'*- PROTESTED CHERIL*'THERE'RE MORE MONSTERS IN*THE FACTORY. Y'KNOW, A BUMMER:*I'LL SAVE A MILLION IN WAGES,*BUT SOME CLEANUP IS DUE.'*- EXPLAINED THE MAYOR.*'I SHALL KILL YOU WITH MY BARE*HANDS, THIS I PROMISE!'*- EXPLODED CHERIL*'CALM DOWN AND DO AS I SAY.'*- LAUGHED THE MAYOR.

void draw_cuts_tile (unsigned char x, unsigned char y, unsigned char tl) {
	rdc = (x >> 2) + ((y >> 2) << 3);
	rdb = ((x >> 1) & 1) + (((y >> 1) & 1) << 1);
	rda = attr_table [rdc];
	rda = (rda & bitmasks [rdb]) | (cuts1_pals [tl] << (rdb << 1));
	attr_table [rdc] = rda;
	
	gp_tmap = (unsigned char *) (cuts1_tmaps) + (tl << 2);
	gp_addr = ((y<<5) + x + 0x2000);
	vram_adr (gp_addr++);
	vram_put (*gp_tmap++);
	vram_put (*gp_tmap++);
	gp_addr+=31;
	vram_adr (gp_addr++);
	vram_put (*gp_tmap++);
	vram_put (*gp_tmap);	
}

void cutscene (void) {
	cls ();
	pal_bg (mypal_cutscene);

	// Draw cutscene graphics
	rdx = 8; rdy = 6;
	for (cutsi = 0; cutsi < 64; cutsi ++) attr_table [cutsi] = 0xff;
	for (cutsi = 0; cutsi < 32; cutsi ++) {
		draw_cuts_tile (rdx, rdy, cutsi);
		rdx += 2; if (rdx == 24) { rdx = 8; rdy += 2; }
	}
	vram_write (attr_table, 0x23c0, 64);

	pal_bright (0);
	ppu_on_all ();

	fade_delay = 4;
	fade_in ();

	// do
	gp_tmap = (unsigned char *) cutscene_text;
	cutf = 1;
	update_index = 0;
	clear_update_list ();
	rdx = 1; rdy = 16; cutff = 0;
	
	set_vram_update (UPDATE_LIST_SIZE, update_list);
	music_play (m_cuts);

	while (cutc = *gp_tmap ++) {
		if (cutc == '*') {
			rdy += 2;
			rdx = 1;
			if (rdy == 16 + 10) {
				while (1) {
					ppu_waitnmi ();
					
					clear_update_list ();	
					
					i = pad_poll (0);
					if (i & PAD_A || i & PAD_B) break;
					if (i & PAD_START) {
						cutf = 0;
						break;
					}
				}
				while (1) {
					ppu_waitnmi ();
					i = pad_poll (0);	
					if (!(i & PAD_A || i & PAD_B || i & PAD_START)) break;	
				}
				for (cutsi = 0; cutsi < 5; cutsi ++) {
					update_index = 0;
					gp_addr = 0x2000 + ((cutsi + cutsi + 16) << 5) + 1;
					for (rdx = 0; rdx < 30; rdx ++) {
						update_list [update_index ++] = MSB (gp_addr);
						update_list [update_index ++] = LSB (gp_addr ++);
						update_list [update_index ++] = 0;
					}
					ppu_waitnmi ();
				}
				rdy = 16;
				rdx = 1;
				cutff = 0;
				update_index = 0; 
				clear_update_list ();				
			}
		} else {
			gp_addr = 0x2000 + (rdy << 5) + rdx;
			update_list [update_index++] = MSB(gp_addr);		
			update_list [update_index++] = LSB(gp_addr);
			update_list [update_index++] = cutc - 32;
			rdx = rdx + 1;

			if (cutff) {
				if (update_index == 30) {
					ppu_waitnmi ();
					update_index = 0;
					clear_update_list ();
				}
			} else {
				for (cutsi = 0; cutsi < 4; cutsi ++) ppu_waitnmi ();
				update_index = 0;
				clear_update_list ();		
			}
		}

		i = pad_poll (0);
		if (i & PAD_A || i & PAD_B) cutff = 1;
		if (i & PAD_START || !cutf) { 
			cutf = 0;
			break;	
		}
	}

	music_stop ();
	set_vram_update (0, 0);
	clear_update_list ();
	update_index = 0;

	// Wait button
	while (cutf) {
		i = pad_poll (0);
		if (i & PAD_A || i & PAD_B || i & PAD_START) break;
		ppu_waitnmi ();
	}

	fade_out ();
	ppu_off ();
}

const unsigned char zone_clear [] = {
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5a, 0x4f, 0x4e, 0x45, 0x20, 0x43,
	0x4c, 0x45, 0x41, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xee
};
void stupid_animation (void) {
	// Play this when you kill all the baddies
	pal_bg (mypal_bw);

	// Print text
	gp_tmap = (unsigned char *) zone_clear;
	gp_addr = 0x2000 + (LINE_OF_TEXT << 5) + LINE_OF_TEXT_X;
	clear_update_list ();
	update_index = 0;
	while (1) {
		if ( (cutc = *gp_tmap ++) == 0xee) break;
		update_list [update_index++] = MSB (gp_addr);
		update_list [update_index++] = LSB (gp_addr ++);
		update_list [update_index++] = cutc - 32;
	}
	ppu_waitnmi ();
	clear_update_list ();
	update_index = 0;

	// Float jill a while
	cutsi = 60; cutc = 0;
	while (cutsi --) {
		if (!(cutsi & 0x0f)) cutc = 1 - cutc;
		psprid = 6 + cutc;
		render_player ();
		enems_move ();
		ppu_waitnmi ();
	}	

	// Fly jill out of here
	cutsi = 0;
	while (pry) {
		cutsi ++;
		if (!(cutsi & 0x0f)) cutc = 1 - cutc;
		psprid = 6 + cutc;
		pry --;
		prx += ((rand8 () & 1) << 1) - 1;
		render_player ();
		ppu_waitnmi ();
	}
}

const unsigned char level_str [] = {
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x20, 0x30, 0
};
const unsigned char dalefran_str [] = {
	0x44, 0x41, 0x4c, 0x45, 0x20, 0x46, 0x52, 0x41, 0x4e, 0x21, 0
};
void level_screen (void) {

	cls ();
	pal_bg (mypal_bw);

	pr_str (12, 13, (unsigned char *) level_str);
	vram_put (level + 3 + 16);
	pr_str (11, 15, (unsigned char *) dalefran_str);

	pal_bright (0);
	ppu_on_all ();
	fade_delay = 4;
	fade_in ();

	cutsi = 100;
	while (cutsi -- && !pad_poll (0)) {
		ppu_waitnmi ();
	}

	fade_out ();
	ppu_off ();
}
