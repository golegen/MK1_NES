;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_ppu_waitnmi
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_write
	.import		_memfill
	.import		_delay
	.export		_monococo_state_times
	.export		_palts0
	.export		_palss0
	.export		_behs0
	.export		_scr_0_00
	.export		_scr_0_01
	.export		_scr_0_02
	.export		_map_0
	.export		_map_0_locks
	.export		_enems_0
	.export		_hotspots_0
	.export		_sspl_00_a
	.export		_sspl_00_b
	.export		_sspl_01_a
	.export		_sspl_01_b
	.export		_sspl_02_a
	.export		_sspl_02_b
	.export		_sspl_03_a
	.export		_sspl_03_b
	.export		_sspl_04_a
	.export		_sspl_04_b
	.export		_sspl_05_a
	.export		_sspl_05_b
	.export		_sspl_06_a
	.export		_sspl_06_b
	.export		_ssen_00_a
	.export		_ssen_00_b
	.export		_ssen_01_a
	.export		_ssen_01_b
	.export		_ssen_02_a
	.export		_ssen_02_b
	.export		_ssen_03_a
	.export		_ssen_03_b
	.export		_ssen_04_a
	.export		_ssen_04_b
	.export		_ssen_05_a
	.export		_ssen_05_b
	.export		_ssplat_00
	.export		_ssplat_01
	.export		_ssfanty_00_a
	.export		_ssfanty_00_b
	.export		_ssfanty_01_a
	.export		_ssfanty_01_b
	.export		_sspezon_00
	.export		_sspezon_01
	.export		_sssaw_00
	.export		_sssaw_01
	.export		_ssexpl
	.export		_ssmono_00_a
	.export		_ssmono_00_b
	.export		_ssmono_01_a
	.export		_ssmono_01_b
	.export		_ssmono_02_a
	.export		_ssmono_02_b
	.export		_ssmono_03_a
	.export		_ssmono_03_b
	.export		_sseocc
	.export		_ssit_00
	.export		_ssit_01
	.export		_ssit_02
	.export		_ssit_03
	.export		_ts0_pals
	.export		_ts0_tmaps
	.export		_spr_player
	.export		_spr_enems0
	.export		_spr_hs
	.export		_spr_pl_empty
	.import		_m_ingame
	.export		_i
	.export		_pad_this_frame
	.export		_gpit
	.export		_gpjt
	.export		_gpitu
	.export		_gpaux
	.export		_rds16
	.export		_gp_gen
	.export		_gp_tmap
	.export		_gp_tma2
	.export		_gp_ram
	.export		_gp_ram_aux
	.export		_gp_addr
	.export		_rdx
	.export		_rdy
	.export		_rdt
	.export		_rdit
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdm
	.export		_rds
	.export		_rdct
	.export		_at1
	.export		_at2
	.export		_cx1
	.export		_cx2
	.export		_cy1
	.export		_cy2
	.export		_caux
	.export		_oam_index
	.export		_en_initial
	.export		_en_offs
	.export		_en_x
	.export		_en_y
	.export		_en_x1
	.export		_en_y1
	.export		_en_x2
	.export		_en_y2
	.export		_en_mx
	.export		_en_my
	.export		_en_t
	.export		_en_s
	.export		_en_facing
	.export		_en_life
	.export		_en_alive
	.export		_en_status
	.export		_en_rawv
	.export		_en_ct
	.export		_en_fr
	.export		_en_collx
	.export		_en_colly
	.export		_en_spr
	.export		_touched
	.export		_en_cttouched
	.export		_pregotten
	.export		_enf_x
	.export		_enf_vx
	.export		_enf_y
	.export		_enf_vy
	.export		_px
	.export		_py
	.export		_pvx
	.export		_pvy
	.export		_prx
	.export		_pry
	.export		_pfacing
	.export		_pfr
	.export		_pctfr
	.export		_psprid
	.export		_b_button
	.export		_pj
	.export		_pctj
	.export		_pjb
	.export		_pgotten
	.export		_ppossee
	.export		_psprint
	.export		_pushed_any
	.export		_pstate
	.export		_pctstate
	.export		_phit
	.export		_pgtmx
	.export		_pgtmy
	.export		_wall
	.export		_hitv
	.export		_hith
	.export		_pkilled
	.export		_bi
	.export		_coco_it
	.export		_hrx
	.export		_hry
	.export		_hrt
	.export		_do_process_breakable
	.export		_ft
	.export		_c_ts_pals
	.export		_c_ts_tmaps
	.export		_c_behs
	.export		_spr_enems
	.export		_half_life
	.export		_frame_counter
	.export		_n_pant
	.export		_on_pant
	.export		_olife
	.export		_okeys
	.export		_oobjs
	.export		_oammo
	.export		_okilled
	.export		_use_ct
	.export		_no_ct
	.export		_level
	.export		_game_over
	.export		_update_index
	.export		_update_list
	.export		_map_attr
	.export		_map_buff
	.export		_b_slots
	.export		_b_slots_i
	.export		_bst
	.export		_bx
	.export		_by
	.export		_bmx
	.export		_bmy
	.export		_coco_x
	.export		_coco_y
	.export		_coco_vx
	.export		_coco_vy
	.export		_coco_on
	.export		_coco_slots
	.export		_coco_slots_i
	.export		_brk_buff
	.export		_brkf
	.export		_brkx
	.export		_brky
	.export		_fader
	.export		_fade_delay
	.export		_hact
	.export		_lkact
	.export		_prx_old
	.export		_pry_old
	.export		_pobjs
	.export		_plife
	.export		_pcontinues
	.export		_pkill
	.export		_pice
	.export		_pnotsafe
	.export		_pkeys
	.export		_pammo
	.export		_pfiring
	.export		_n_pant_safe
	.export		_px_safe
	.export		_py_safe
	.export		_c_pal_bg
	.export		_c_pal_fg
	.export		_c_map
	.export		_c_locks
	.export		_c_enems
	.export		_c_hotspots
	.export		_c_max_bolts
	.export		_cm_two_points
	.export		_collide_in
	.export		_collide
	.export		_add_sign
	.export		_saturate
	.export		_pad_read
	.export		_distance
	.export		_fade_out
	.export		_fade_in
	.export		_clear_update_list
	.export		_cls
	.export		_ul_putc
	.export		_p_t
	.export		_bitmasks
	.export		_attr_table
	.export		_upd_attr_table
	.export		_draw_tile
	.export		_update_list_tile
	.export		_map_set
	.export		_get_byte
	.export		_draw_map_tile
	.export		_draw_scr
	.export		_pr_str
	.export		_bolts_load
	.export		_clear_cerrojo
	.export		_breakable_do_anim
	.export		_breakable_break
	.export		_hotspots_load
	.export		_hotspots_paint
	.export		_hotspots_create
	.export		_cocos_init
	.export		_cocos_shoot
	.export		_cocos_destroy
	.export		_cocos_do
	.export		_player_register_safe_spot
	.export		_player_init
	.export		_player_render
	.export		_player_kill
	.export		_player_process_tile
	.export		_fire_bullet
	.export		_bullets_destroy
	.export		_bullets_move
	.export		_player_move
	.export		_enems_kill
	.export		_enems_draw_chac_chac
	.export		_enems_load
	.export		_enems_move
	.export		_draw_game_frame
	.export		_hud_update
	.export		_cutsi
	.export		_cutc
	.export		_cutf
	.export		_cutff
	.export		_cuts_text
	.export		_game_init
	.export		_prepare_scr
	.export		_game_loop
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_monococo_state_times:
	.byte	$96
	.byte	$32
	.byte	$32
	.byte	$32
_palts0:
	.byte	$0F
	.byte	$0C
	.byte	$00
	.byte	$38
	.byte	$0F
	.byte	$18
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$1C
	.byte	$21
	.byte	$37
	.byte	$0F
	.byte	$0C
	.byte	$15
	.byte	$27
_palss0:
	.byte	$0F
	.byte	$04
	.byte	$24
	.byte	$27
	.byte	$0F
	.byte	$06
	.byte	$1A
	.byte	$29
	.byte	$0F
	.byte	$15
	.byte	$24
	.byte	$3D
	.byte	$0F
	.byte	$1D
	.byte	$18
	.byte	$3D
_behs0:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$44
	.byte	$02
	.byte	$04
	.byte	$18
	.byte	$09
	.byte	$28
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0B
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
_scr_0_00:
	.byte	$42
	.byte	$00
	.byte	$20
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$F0
	.byte	$00
	.byte	$F0
	.byte	$AA
	.byte	$07
	.byte	$07
	.byte	$F1
	.byte	$21
	.byte	$02
	.byte	$00
	.byte	$0F
	.byte	$F0
	.byte	$20
	.byte	$F0
	.byte	$99
	.byte	$00
	.byte	$04
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$22
	.byte	$00
	.byte	$07
	.byte	$F0
	.byte	$44
	.byte	$00
	.byte	$05
	.byte	$F0
	.byte	$22
	.byte	$00
	.byte	$09
	.byte	$F0
	.byte	$10
	.byte	$F1
	.byte	$00
	.byte	$02
	.byte	$F0
	.byte	$22
	.byte	$F0
	.byte	$33
	.byte	$00
	.byte	$0B
	.byte	$02
	.byte	$05
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$06
_scr_0_01:
	.byte	$48
	.byte	$00
	.byte	$0F
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$E0
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$E0
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$E0
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$F1
	.byte	$00
	.byte	$15
	.byte	$05
	.byte	$07
	.byte	$F0
	.byte	$10
	.byte	$F0
	.byte	$01
	.byte	$F1
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$F0
	.byte	$10
	.byte	$F0
	.byte	$0F
	.byte	$02
	.byte	$10
_scr_0_02:
	.byte	$47
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0D
	.byte	$F0
	.byte	$21
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$21
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$21
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$21
	.byte	$F1
	.byte	$11
	.byte	$17
	.byte	$07
	.byte	$06
	.byte	$F2
	.byte	$00
	.byte	$20
	.byte	$21
	.byte	$F1
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$06
	.byte	$F0
	.byte	$00
	.byte	$F1
	.byte	$22
	.byte	$21
	.byte	$F1
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$06
	.byte	$F0
	.byte	$00
	.byte	$F1
	.byte	$22
	.byte	$20
	.byte	$F1
	.byte	$00
	.byte	$07
	.byte	$F1
	.byte	$77
	.byte	$07
	.byte	$F0
	.byte	$77
	.byte	$F0
	.byte	$00
	.byte	$02
	.byte	$13
_map_0:
	.addr	_scr_0_00
	.addr	_scr_0_01
	.addr	_scr_0_02
_map_0_locks:
	.byte	$01
	.byte	$AF
_enems_0:
	.byte	$03
	.byte	$BD
	.byte	$B5
	.byte	$01
	.byte	$06
	.byte	$3D
	.byte	$3C
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$6B
	.byte	$9B
	.byte	$01
	.byte	$0B
	.byte	$3D
	.byte	$3C
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$CB
	.byte	$C3
	.byte	$00
	.byte	$09
	.byte	$9E
	.byte	$8E
	.byte	$04
	.byte	$0A
	.byte	$92
	.byte	$A2
	.byte	$02
_hotspots_0:
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$25
	.byte	$01
	.byte	$B7
_sspl_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$02
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$06
	.byte	$00
	.byte	$80
_sspl_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$02
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$06
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$05
	.byte	$40
	.byte	$80
_sspl_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$08
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$0B
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$0C
	.byte	$00
	.byte	$80
_sspl_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$08
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$07
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$0C
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$0B
	.byte	$40
	.byte	$80
_sspl_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$80
_sspl_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$0F
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$12
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$80
_sspl_03_a:
	.byte	$FC
	.byte	$F8
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$08
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$15
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$80
_sspl_03_b:
	.byte	$FC
	.byte	$F8
	.byte	$08
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$07
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$14
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$13
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$16
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$15
	.byte	$40
	.byte	$80
_sspl_04_a:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$17
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$19
	.byte	$00
	.byte	$80
_sspl_04_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$17
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$0F
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$19
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$18
	.byte	$40
	.byte	$80
_sspl_05_a:
	.byte	$FC
	.byte	$F8
	.byte	$1A
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$1B
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$1D
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1E
	.byte	$00
	.byte	$80
_sspl_05_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$1A
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$1C
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$1B
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1E
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$1D
	.byte	$40
	.byte	$80
_sspl_06_a:
	.byte	$FC
	.byte	$F8
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$20
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$23
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$24
	.byte	$00
	.byte	$80
_sspl_06_b:
	.byte	$FC
	.byte	$F8
	.byte	$20
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$1F
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$22
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$21
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$24
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$23
	.byte	$40
	.byte	$80
_ssen_00_a:
	.byte	$00
	.byte	$F8
	.byte	$25
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$26
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$28
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$29
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$2A
	.byte	$00
	.byte	$80
_ssen_00_b:
	.byte	$00
	.byte	$F8
	.byte	$26
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$25
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$27
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$2A
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$29
	.byte	$42
	.byte	$80
_ssen_01_a:
	.byte	$00
	.byte	$F8
	.byte	$25
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$26
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$2D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$2E
	.byte	$02
	.byte	$80
_ssen_01_b:
	.byte	$00
	.byte	$F8
	.byte	$26
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$25
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$2B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$2E
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$2D
	.byte	$42
	.byte	$80
_ssen_02_a:
	.byte	$00
	.byte	$F8
	.byte	$2F
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$30
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$32
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$33
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$34
	.byte	$02
	.byte	$80
_ssen_02_b:
	.byte	$00
	.byte	$F8
	.byte	$30
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$2F
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$32
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$31
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$34
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$33
	.byte	$42
	.byte	$80
_ssen_03_a:
	.byte	$00
	.byte	$F8
	.byte	$35
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$36
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$37
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$38
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$39
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3A
	.byte	$02
	.byte	$80
_ssen_03_b:
	.byte	$00
	.byte	$F8
	.byte	$36
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$35
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$37
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$3A
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$39
	.byte	$42
	.byte	$80
_ssen_04_a:
	.byte	$00
	.byte	$F8
	.byte	$3B
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$3C
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$3D
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3E
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$3F
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$02
	.byte	$80
_ssen_04_b:
	.byte	$00
	.byte	$F8
	.byte	$3C
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$3B
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$3E
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$3D
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$3F
	.byte	$42
	.byte	$80
_ssen_05_a:
	.byte	$00
	.byte	$F8
	.byte	$41
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$42
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$44
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$45
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$46
	.byte	$02
	.byte	$80
_ssen_05_b:
	.byte	$00
	.byte	$F8
	.byte	$42
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$41
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$43
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$46
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$45
	.byte	$42
	.byte	$80
_ssplat_00:
	.byte	$00
	.byte	$00
	.byte	$47
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$47
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$48
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$49
	.byte	$02
	.byte	$80
_ssplat_01:
	.byte	$00
	.byte	$00
	.byte	$47
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$47
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4A
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4B
	.byte	$02
	.byte	$80
_ssfanty_00_a:
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$4D
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4E
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4F
	.byte	$02
	.byte	$80
_ssfanty_00_b:
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$4C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4F
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4E
	.byte	$42
	.byte	$80
_ssfanty_01_a:
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$4D
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4E
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$80
_ssfanty_01_b:
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$4C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4E
	.byte	$42
	.byte	$80
_sspezon_00:
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$80
_sspezon_01:
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$56
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$57
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$58
	.byte	$02
	.byte	$80
_sssaw_00:
	.byte	$00
	.byte	$00
	.byte	$59
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5A
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$5A
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$59
	.byte	$C2
	.byte	$80
_sssaw_01:
	.byte	$00
	.byte	$00
	.byte	$5B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$5C
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$5B
	.byte	$C2
	.byte	$80
_ssexpl:
	.byte	$00
	.byte	$00
	.byte	$5D
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5E
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$5F
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$60
	.byte	$02
	.byte	$80
_ssmono_00_a:
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$62
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$63
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$64
	.byte	$01
	.byte	$80
_ssmono_00_b:
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$64
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$63
	.byte	$41
	.byte	$80
_ssmono_01_a:
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$65
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$66
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$67
	.byte	$01
	.byte	$80
_ssmono_01_b:
	.byte	$00
	.byte	$00
	.byte	$65
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$67
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$66
	.byte	$41
	.byte	$80
_ssmono_02_a:
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$69
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6A
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$6B
	.byte	$01
	.byte	$80
_ssmono_02_b:
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$68
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$6B
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$6A
	.byte	$41
	.byte	$80
_ssmono_03_a:
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$6D
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6E
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$6F
	.byte	$01
	.byte	$80
_ssmono_03_b:
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$6C
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$6F
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$6E
	.byte	$41
	.byte	$80
_sseocc:
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$23
	.byte	$08
	.byte	$00
	.byte	$70
	.byte	$63
	.byte	$00
	.byte	$08
	.byte	$70
	.byte	$A3
	.byte	$08
	.byte	$08
	.byte	$70
	.byte	$E3
	.byte	$80
_ssit_00:
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$71
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$72
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$72
	.byte	$40
	.byte	$80
_ssit_01:
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$74
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$75
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$76
	.byte	$00
	.byte	$80
_ssit_02:
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$79
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$7A
	.byte	$02
	.byte	$80
_ssit_03:
	.byte	$00
	.byte	$00
	.byte	$7B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$7C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$7D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$7E
	.byte	$02
	.byte	$80
_ts0_pals:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts0_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$50
	.byte	$51
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$5E
	.byte	$5F
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6F
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$6E
	.byte	$6E
	.byte	$6F
	.byte	$6F
	.byte	$72
	.byte	$70
	.byte	$73
	.byte	$73
	.byte	$74
	.byte	$74
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_spr_player:
	.addr	_sspl_00_a
	.addr	_sspl_01_a
	.addr	_sspl_02_a
	.addr	_sspl_03_a
	.addr	_sspl_04_a
	.addr	_sspl_05_a
	.addr	_sspl_06_a
	.word	$0000
	.addr	_sspl_00_b
	.addr	_sspl_01_b
	.addr	_sspl_02_b
	.addr	_sspl_03_b
	.addr	_sspl_04_b
	.addr	_sspl_05_b
	.addr	_sspl_06_b
	.word	$0000
_spr_enems0:
	.addr	_ssen_00_a
	.addr	_ssen_01_a
	.addr	_ssen_00_b
	.addr	_ssen_01_b
	.addr	_ssen_02_a
	.addr	_ssen_03_a
	.addr	_ssen_02_b
	.addr	_ssen_03_b
	.addr	_ssen_04_a
	.addr	_ssen_05_a
	.addr	_ssen_04_b
	.addr	_ssen_05_b
	.addr	_ssplat_00
	.addr	_ssplat_01
	.addr	_ssplat_00
	.addr	_ssplat_01
	.addr	_ssfanty_00_a
	.addr	_ssfanty_01_a
	.addr	_ssfanty_00_b
	.addr	_ssfanty_01_b
	.addr	_sspezon_00
	.addr	_sspezon_01
	.addr	_sssaw_00
	.addr	_sssaw_01
	.addr	_ssmono_00_a
	.addr	_ssmono_01_a
	.addr	_ssmono_00_b
	.addr	_ssmono_01_b
	.addr	_ssmono_02_a
	.addr	_ssmono_03_a
	.addr	_ssmono_02_b
	.addr	_ssmono_03_b
	.addr	_sseocc
	.addr	_ssexpl
_spr_hs:
	.word	$0000
	.addr	_ssit_00
	.addr	_ssit_01
	.addr	_ssit_02
	.addr	_ssit_03
_spr_pl_empty:
	.byte	$FC
	.byte	$F8
	.byte	$FF
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$FF
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$FF
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$FF
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$FF
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$FF
	.byte	$00
	.byte	$80
_bitmasks:
	.byte	$FC
	.byte	$F3
	.byte	$CF
	.byte	$3F
L0001:
	.byte	$4C,$49,$46,$45,$3A,$30,$30,$20,$20,$20,$49,$54,$45,$4D,$53,$3A
	.byte	$30,$30,$20,$20,$20,$4B,$45,$59,$53,$3A,$30,$30,$00,$53,$55,$50
	.byte	$50,$41,$54,$45,$53,$54,$52,$20,$2D,$20,$54,$48,$45,$20,$4D,$4F
	.byte	$4A,$4F,$4E,$20,$54,$57,$49,$4E,$53,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00
_pad_this_frame:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_gpitu:
	.res	1,$00
_gpaux:
	.res	1,$00
_rds16:
	.res	2,$00
_gp_gen:
	.res	2,$00
_gp_tmap:
	.res	2,$00
_gp_tma2:
	.res	2,$00
_gp_ram:
	.res	2,$00
_gp_ram_aux:
	.res	2,$00
_gp_addr:
	.res	2,$00
_rdx:
	.res	1,$00
_rdy:
	.res	1,$00
_rdt:
	.res	1,$00
_rdit:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdm:
	.res	1,$00
_rds:
	.res	1,$00
_rdct:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
_cx1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy1:
	.res	1,$00
_cy2:
	.res	1,$00
_caux:
	.res	1,$00
_oam_index:
	.res	1,$00
_en_initial:
	.res	1,$00
_en_offs:
	.res	1,$00
_en_x:
	.res	3,$00
_en_y:
	.res	3,$00
_en_x1:
	.res	3,$00
_en_y1:
	.res	3,$00
_en_x2:
	.res	3,$00
_en_y2:
	.res	3,$00
_en_mx:
	.res	3,$00
_en_my:
	.res	3,$00
_en_t:
	.res	3,$00
_en_s:
	.res	3,$00
_en_facing:
	.res	1,$00
_en_life:
	.res	3,$00
_en_alive:
	.res	3,$00
_en_status:
	.res	3,$00
_en_rawv:
	.res	3,$00
_en_ct:
	.res	3,$00
_en_fr:
	.res	1,$00
_en_collx:
	.res	1,$00
_en_colly:
	.res	1,$00
_en_spr:
	.res	1,$00
_touched:
	.res	1,$00
_en_cttouched:
	.res	3,$00
_pregotten:
	.res	1,$00
_enf_x:
	.res	6,$00
_enf_vx:
	.res	6,$00
_enf_y:
	.res	6,$00
_enf_vy:
	.res	6,$00
_px:
	.res	2,$00
_py:
	.res	2,$00
_pvx:
	.res	2,$00
_pvy:
	.res	2,$00
_prx:
	.res	1,$00
_pry:
	.res	1,$00
_pfacing:
	.res	1,$00
_pfr:
	.res	1,$00
_pctfr:
	.res	1,$00
_psprid:
	.res	1,$00
_b_button:
	.res	1,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_pjb:
	.res	1,$00
_pgotten:
	.res	1,$00
_ppossee:
	.res	1,$00
_psprint:
	.res	1,$00
_pushed_any:
	.res	1,$00
_pstate:
	.res	1,$00
_pctstate:
	.res	1,$00
_phit:
	.res	1,$00
_pgtmx:
	.res	2,$00
_pgtmy:
	.res	2,$00
_wall:
	.res	1,$00
_hitv:
	.res	1,$00
_hith:
	.res	1,$00
_pkilled:
	.res	1,$00
_bi:
	.res	1,$00
_coco_it:
	.res	1,$00
_hrx:
	.res	1,$00
_hry:
	.res	1,$00
_hrt:
	.res	1,$00
_do_process_breakable:
	.res	1,$00
_ft:
	.res	1,$00
_c_ts_pals:
	.res	2,$00
_c_ts_tmaps:
	.res	2,$00
_c_behs:
	.res	2,$00
_spr_enems:
	.res	2,$00
.segment	"BSS"
_half_life:
	.res	1,$00
_frame_counter:
	.res	1,$00
_n_pant:
	.res	1,$00
_on_pant:
	.res	1,$00
_olife:
	.res	1,$00
_okeys:
	.res	1,$00
_oobjs:
	.res	1,$00
_oammo:
	.res	1,$00
_okilled:
	.res	1,$00
_use_ct:
	.res	1,$00
_no_ct:
	.res	1,$00
_level:
	.res	1,$00
_game_over:
	.res	1,$00
_update_index:
	.res	1,$00
_update_list:
	.res	96,$00
_map_attr:
	.res	192,$00
_map_buff:
	.res	192,$00
_b_slots:
	.res	4,$00
_b_slots_i:
	.res	1,$00
_bst:
	.res	4,$00
_bx:
	.res	4,$00
_by:
	.res	4,$00
_bmx:
	.res	4,$00
_bmy:
	.res	4,$00
_coco_x:
	.res	6,$00
_coco_y:
	.res	6,$00
_coco_vx:
	.res	6,$00
_coco_vy:
	.res	6,$00
_coco_on:
	.res	3,$00
_coco_slots:
	.res	3,$00
_coco_slots_i:
	.res	1,$00
_brk_buff:
	.res	192,$00
_brkf:
	.res	4,$00
_brkx:
	.res	4,$00
_brky:
	.res	4,$00
_fader:
	.res	1,$00
_fade_delay:
	.res	1,$00
_hact:
	.res	3,$00
_lkact:
	.res	16,$00
_prx_old:
	.res	1,$00
_pry_old:
	.res	1,$00
_pobjs:
	.res	1,$00
_plife:
	.res	1,$00
_pcontinues:
	.res	1,$00
_pkill:
	.res	1,$00
_pice:
	.res	1,$00
_pnotsafe:
	.res	1,$00
_pkeys:
	.res	1,$00
_pammo:
	.res	1,$00
_pfiring:
	.res	1,$00
_n_pant_safe:
	.res	1,$00
_px_safe:
	.res	2,$00
_py_safe:
	.res	2,$00
_c_pal_bg:
	.res	2,$00
_c_pal_fg:
	.res	2,$00
_c_map:
	.res	2,$00
_c_locks:
	.res	2,$00
_c_enems:
	.res	2,$00
_c_hotspots:
	.res	2,$00
_c_max_bolts:
	.res	1,$00
_attr_table:
	.res	64,$00
_cutsi:
	.res	1,$00
_cutc:
	.res	1,$00
_cutf:
	.res	1,$00
_cutff:
	.res	1,$00
_cuts_text:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; if (cy1 > 12 || cy2 > 12) { at1 = at2 = 0; return; }
;
	lda     _cy1
	cmp     #$0D
	bcs     L0650
	lda     _cy2
	cmp     #$0D
	bcc     L064F
L0650:	lda     #$00
	sta     _at2
	sta     _at1
	rts
;
; caux = cy1 ? cy1 - 1 : 0;
;
L064F:	lda     _cy1
	beq     L065A
	lda     _cy1
	sec
	sbc     #$01
L065A:	sta     _caux
;
; at1 = map_attr [COORDS (cx1, caux)];
;
	ldx     #$00
	lda     _caux
	jsr     aslax4
	ora     _cx1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at1
;
; caux = cy2 ? cy2 - 1 : 0;
;
	lda     _cy2
	beq     L0668
	lda     _cy2
	sec
	sbc     #$01
L0668:	sta     _caux
;
; at2 = map_attr [COORDS (cx2, caux)];
;
	ldx     #$00
	lda     _caux
	jsr     aslax4
	ora     _cx2
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide_in (int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide_in: near

.segment	"CODE"

;
; return (x0 >= x1 && x0 <= x1 + 15 && y0 >= y1 && y0 <= y1 + 15); 
;
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L0674
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0F
	bcc     L0675
	inx
L0675:	jsr     tosicmp
	beq     L13EA
	bpl     L0674
L13EA:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L0674
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0F
	bcc     L0676
	inx
L0676:	jsr     tosicmp
	bmi     L0673
	beq     L0673
L0674:	ldx     #$00
	txa
	jmp     incsp8
L0673:	ldx     #$00
	lda     #$01
;
; }
;
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide: near

.segment	"CODE"

;
; return (x1 + 5 >= x2 && x1 <= x2 + 13 && y1 + 13 >= y2 && y1 <= y2 + 13);
;
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$05
	bcc     L067B
	inx
L067B:	ldy     #$01
	cmp     (sp),y
	txa
	sbc     #$00
	bcc     L067C
	ldy     #$03
	lda     (sp),y
	jsr     pusha0
	ldy     #$03
	lda     (sp),y
	clc
	adc     #$0D
	bcc     L067D
	ldx     #$01
L067D:	jsr     tosicmp
	beq     L13EB
	bcs     L067C
L13EB:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$0D
	bcc     L067E
	inx
L067E:	ldy     #$00
	cmp     (sp),y
	txa
	sbc     #$00
	bcc     L067C
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$0D
	bcc     L067F
	ldx     #$01
L067F:	jsr     tosicmp
	bcc     L067A
	beq     L067A
L067C:	ldx     #$00
	txa
	jmp     incsp4
L067A:	ldx     #$00
	lda     #$01
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ add_sign (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_sign: near

.segment	"CODE"

;
; return sign == 0 ? 0 : sign < 0 ? -value : value;
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L0684
	cmp     #$00
	jeq     incsp4
L0684:	iny
	lda     (sp),y
	tax
	cpx     #$80
	bcc     L0688
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L0688:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ saturate (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_saturate: near

.segment	"CODE"

;
; return v >= 0 ? (v > max ? max : v) : (v < -max ? -max : v);
;
	ldy     #$03
	lda     (sp),y
	bmi     L068E
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L0698
	beq     L0698
	ldy     #$01
	jmp     L13F2
L068E:	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jsr     tosicmp
	bpl     L0698
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L0698:	ldy     #$03
L13F2:	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ pad_read (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pad_read: near

.segment	"CODE"

;
; pad_this_frame = i;
;
	lda     _i
	sta     _pad_this_frame
;
; i = pad_poll (0);   // Read pads here.
;
	lda     #$00
	jsr     _pad_poll
	sta     _i
;
; pad_this_frame = (pad_this_frame ^ i) & i;
;
	eor     _pad_this_frame
	sta     ptr1
	lda     _i
	and     ptr1
	sta     _pad_this_frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ distance (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_distance: near

.segment	"CODE"

;
; rda = DELTA (prx, rdx); // dx
;
	ldx     #$00
	lda     _prx
	cmp     _rdx
	bcs     L06AB
	lda     _rdx
	sec
	sbc     _prx
	jmp     L13F9
L06AB:	lda     _prx
	sec
	sbc     _rdx
L13F9:	sta     _rda
;
; rdb = DELTA (pry, rdy); // dy
;
	lda     _pry
	cmp     _rdy
	bcs     L06B8
	lda     _rdy
	sec
	sbc     _pry
	jmp     L13FA
L06B8:	lda     _pry
	sec
	sbc     _rdy
L13FA:	sta     _rdb
;
; rdc = MIN (rda, rdb);
;
	lda     _rda
	cmp     _rdb
	bcs     L06C5
	lda     _rda
	jmp     L13F6
L06C5:	lda     _rdb
L13F6:	sta     _rdc
;
; return (rda + rdb - (rdc >> 1) - (rdc >> 2) + (rdc >> 4));
;
	lda     _rda
	clc
	adc     _rdb
	bcc     L13F3
	inx
L13F3:	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax1
	jsr     tossubax
	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax2
	jsr     tossubax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rdc
	jsr     asrax4
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for (fader = 4; fader > -1; fader --) {
;
	lda     #$04
L13FB:	sta     _fader
	tax
	bmi     L06D2
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 4; fader > -1; fader --) {
;
	lda     _fader
	sec
	sbc     #$01
	jmp     L13FB
;
; }
;
L06D2:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     #$00
L13FC:	sta     _fader
	sec
	sbc     #$05
	bvc     L06E8
	eor     #$80
L06E8:	bpl     L06E1
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     _fader
	clc
	adc     #$01
	jmp     L13FC
;
; }
;
L06E1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clear_update_list (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_update_list: near

.segment	"CODE"

;
; memfill (update_list, 0, UPDATE_LIST_SIZE*3);
;
	jsr     decsp3
	lda     #<(_update_list)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_update_list)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$60
	jsr     _memfill
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; vram_adr(0x2000); vram_fill(0x00,0x400);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ ul_putc (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_putc: near

.segment	"CODE"

;
; update_list [update_index++] = MSB (gp_addr);
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	sta     ptr1
	lda     #$00
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _gp_addr+1
	ldy     #$00
	sta     (ptr1),y
;
; update_list [update_index++] = LSB (gp_addr++);
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	tay
	lda     #$00
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	clc
	adc     #$01
	bcc     L0709
	inx
L0709:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldy     #$00
	jsr     staspidx
;
; update_list [update_index++] = n;
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	sta     ptr1
	lda     #$00
	adc     #>(_update_list)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ p_t (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t: near

.segment	"CODE"

;
; gp_addr = (y << 5) + x + 0x2000;
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     tmp1
	bcc     L13FD
	inx
L13FD:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; ul_putc ((n/10)+16);
;
	ldx     #$00
	lda     (sp,x)
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$10
	jsr     pusha
	jsr     _ul_putc
;
; ul_putc ((n%10)+16);
;
	ldx     #$00
	lda     (sp,x)
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	jsr     pusha
	jsr     _ul_putc
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ upd_attr_table (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_upd_attr_table: near

.segment	"CODE"

;
; rdc = (x >> 2) + ((y >> 2) << 3);
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     asrax2
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	dey
	lda     (sp),y
	jsr     asrax2
	jsr     aslax3
	clc
	adc     ptr1
	sta     _rdc
	txa
	adc     ptr1+1
;
; rdb = ((x >> 1) & 1) + (((y >> 1) & 1) << 1);
;
	iny
	ldx     #$00
	lda     (sp),y
	jsr     asrax1
	and     #$01
	sta     ptr1
	ldx     #$00
	dey
	lda     (sp),y
	jsr     asrax1
	and     #$01
	asl     a
	bcc     L1400
	clc
L1400:	adc     ptr1
	sta     _rdb
;
; rda = attr_table [rdc];
;
	ldy     _rdc
	lda     _attr_table,y
	sta     _rda
;
; rda = (rda & bitmasks [rdb]) | (c_ts_pals [tl] << (rdb << 1));
;
	ldy     _rdb
	lda     _bitmasks,y
	and     _rda
	jsr     pusha0
	lda     _c_ts_pals
	sta     ptr1
	lda     _c_ts_pals+1
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	tay
	lda     (ptr1),y
	jsr     pusha0
	lda     _rdb
	asl     a
	jsr     tosaslax
	jsr     tosorax
	sta     _rda
;
; attr_table [rdc] = rda;
;
	ldy     _rdc
	lda     _rda
	sta     _attr_table,y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile: near

.segment	"CODE"

;
; upd_attr_table (x, y, tl);
;
	jsr     decsp3
	ldy     #$05
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	jsr     _upd_attr_table
;
; gp_tmap = c_ts_tmaps + (tl << 2);
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((y<<5) + x + 0x2000);
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     tmp1
	bcc     L1401
	inx
L1401:	pha
	txa
	clc
	adc     #$20
	tax
	pla
	sta     _gp_addr
	stx     _gp_addr+1
;
; vram_adr (gp_addr++);
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0749
	inx
L0749:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L074C
	inx
L074C:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L074F
	inx
L074F:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; gp_addr += 31;
;
	lda     #$1F
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L0752
	inc     _gp_addr+1
;
; vram_adr (gp_addr++);
;
L0752:	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0755
	inx
L0755:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0758
	inx
L0758:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; vram_put (*gp_tmap); 
;
	lda     _gp_tmap
	sta     ptr1
	lda     _gp_tmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     _vram_put
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_tile (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_tile: near

.segment	"CODE"

;
; upd_attr_table (x, y, tl);
;
	jsr     decsp3
	ldy     #$05
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	jsr     _upd_attr_table
;
; gp_addr = 0x23c0 + rdc;
;
	lda     _rdc
	clc
	adc     #$C0
	sta     _gp_addr
	lda     #$00
	adc     #$23
	sta     _gp_addr+1
;
; ul_putc (rda);
;
	lda     _rda
	jsr     pusha
	jsr     _ul_putc
;
; gp_tmap = c_ts_tmaps + (tl << 2);
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((y<<5) + x + 0x2000);
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	ldx     tmp1
	bcc     L1402
	inx
L1402:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; ul_putc (*gp_tmap ++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L076D
	inx
L076D:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     pusha
	jsr     _ul_putc
;
; ul_putc (*gp_tmap ++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0770
	inx
L0770:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     pusha
	jsr     _ul_putc
;
; gp_addr += 30;
;
	lda     #$1E
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L0773
	inc     _gp_addr+1
;
; ul_putc (*gp_tmap ++);
;
L0773:	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0776
	inx
L0776:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     pusha
	jsr     _ul_putc
;
; ul_putc (*gp_tmap);
;
	lda     _gp_tmap
	sta     ptr1
	lda     _gp_tmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     pusha
	jsr     _ul_putc
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ map_set (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_map_set: near

.segment	"CODE"

;
; map_buff [x + (y << 4)] = n;
;
	ldx     #$00
	ldy     #$01
	lda     (sp),y
	jsr     aslax4
	clc
	iny
	adc     (sp),y
	bcc     L1407
	inx
	clc
L1407:	adc     #<(_map_buff)
	sta     ptr1
	txa
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
;
; map_attr [x + (y << 4)] = c_behs [n];
;
	ldx     #$00
	iny
	lda     (sp),y
	jsr     aslax4
	clc
	iny
	adc     (sp),y
	bcc     L1408
	inx
	clc
L1408:	adc     #<(_map_attr)
	tay
	txa
	adc     #>(_map_attr)
	tax
	tya
	jsr     pushax
	lda     _c_behs
	sta     ptr1
	lda     _c_behs+1
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; update_list_tile (x + x, TOP_ADJUST + y + y, n); 
;
	jsr     decsp3
	ldy     #$05
	lda     (sp),y
	clc
	adc     (sp),y
	ldy     #$02
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	clc
	adc     #$04
	sta     ptr1
	lda     (sp),y
	clc
	adc     ptr1
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	jsr     _update_list_tile
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_byte: near

.segment	"CODE"

;
; rdit --; return *gp_gen ++;
;
	lda     _rdit
	sec
	sbc     #$01
	sta     _rdit
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L078B
	inx
L078B:	sta     _gp_gen
	stx     _gp_gen+1
	ldx     #$00
	lda     (regsave,x)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_map_tile (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_map_tile: near

.segment	"CODE"

;
; map_buff [rdm] = t;  
;
	lda     #<(_map_buff)
	ldx     #>(_map_buff)
	clc
	adc     _rdm
	bcc     L078F
	inx
L078F:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (sp),y
	sta     (ptr1),y
;
; map_attr [rdm] = c_behs [t];
;
	lda     #<(_map_attr)
	ldx     #>(_map_attr)
	clc
	adc     _rdm
	bcc     L0793
	inx
L0793:	jsr     pushax
	lda     _c_behs
	sta     ptr1
	lda     _c_behs+1
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	tay
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; brk_buff [rdm] = 1;
;
	ldy     _rdm
	lda     #$01
	sta     _brk_buff,y
;
; rdm ++;
;
	lda     _rdm
	clc
	adc     #$01
	sta     _rdm
;
; draw_tile (rdx + rdx, rdy + rdy + TOP_ADJUST, t);
;
	jsr     decsp3
	lda     _rdx
	clc
	adc     _rdx
	ldy     #$02
	sta     (sp),y
	lda     _rdy
	clc
	adc     _rdy
	bcc     L140B
	clc
L140B:	adc     #$04
	dey
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	jsr     _draw_tile
;
; rdx = (rdx + 1) & 15; if (!rdx) rdy ++;
;
	lda     _rdx
	clc
	adc     #$01
	and     #$0F
	sta     _rdx
	lda     _rdx
	jne     incsp1
	lda     _rdy
	clc
	adc     #$01
	sta     _rdy
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ draw_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_scr: near

.segment	"CODE"

;
; rdx = rdy = rdm = 0;
;
	lda     #$00
	sta     _rdm
	sta     _rdy
	sta     _rdx
;
; gp_gen = c_map [n_pant];
;
	tax
	lda     _n_pant
	asl     a
	bcc     L140E
	inx
	clc
L140E:	adc     _c_map
	sta     ptr1
	txa
	adc     _c_map+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _gp_gen
	stx     _gp_gen+1
;
; if (rdit = *gp_gen ++) {
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L07B2
	inx
L07B2:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdit
	tax
	beq     L07AF
;
; while (rdit) {
;
L07B3:	lda     _rdit
	jeq     L07D7
;
; rdct = get_byte ();
;
	jsr     _get_byte
	sta     _rdct
;
; if (rdct & 0xf0) {
;
	and     #$F0
	beq     L07B8
;
; rdct = 1 + (rdct & 0x0f);
;
	lda     _rdct
	and     #$0F
	clc
	adc     #$01
	sta     _rdct
;
; while (rdct --) {
;
L07BE:	lda     _rdct
	pha
	sec
	sbc     #$01
	sta     _rdct
	pla
	tax
	beq     L07B3
;
; rdt = get_byte ();
;
	jsr     _get_byte
	sta     _rdt
;
; draw_map_tile (rdt >> 4);
;
	ldx     #$00
	lda     _rdt
	jsr     asrax4
	jsr     pusha
	jsr     _draw_map_tile
;
; if (rdy < 12) draw_map_tile (rdt & 15);
;
	lda     _rdy
	cmp     #$0C
	bcs     L07BE
	lda     _rdt
	and     #$0F
	jsr     pusha
	jsr     _draw_map_tile
;
; }
;
	jmp     L07BE
;
; rdt = rdct & 0x0f;
;
L07B8:	lda     _rdct
	and     #$0F
	sta     _rdt
;
; rdct = get_byte ();
;
	jsr     _get_byte
	sta     _rdct
;
; while (rdct --) draw_map_tile (rdt);
;
L07CE:	lda     _rdct
	pha
	sec
	sbc     #$01
	sta     _rdct
	pla
	tax
	beq     L07B3
	lda     _rdt
	jsr     pusha
	jsr     _draw_map_tile
	jmp     L07CE
;
; rdit = 96; while (rdit --) {
;
L07AF:	lda     #$60
	sta     _rdit
L07D6:	lda     _rdit
	pha
	sec
	sbc     #$01
	sta     _rdit
	pla
	tax
	beq     L07D7
;
; rdt = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L07DB
	inx
L07DB:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
;
; draw_map_tile (rdt >> 4);
;
	ldx     #$00
	lda     _rdt
	jsr     asrax4
	jsr     pusha
	jsr     _draw_map_tile
;
; draw_map_tile (rdt & 15);
;
	lda     _rdt
	and     #$0F
	jsr     pusha
	jsr     _draw_map_tile
;
; }
;
	jmp     L07D6
;
; gp_gen = c_locks;
;
L07D7:	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L07E4:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L07E5
;
; rda = *gp_gen ++; rdm = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L07E9
	inx
L07E9:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L07EC
	inx
L07EC:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdm
;
; if (n_pant == rda) {
;
	lda     _rda
	cmp     _n_pant
	bne     L07E4
;
; if (!lkact [gpit]) {
;
	ldy     _gpit
	lda     _lkact,y
	bne     L07E4
;
; rdy = (rdm >> 4); rdx = (rdm & 15);
;
	tax
	lda     _rdm
	jsr     asrax4
	sta     _rdy
	lda     _rdm
	and     #$0F
	sta     _rdx
;
; draw_map_tile (0);
;
	lda     #$00
	jsr     pusha
	jsr     _draw_map_tile
;
; } 
;
	jmp     L07E4
;
; vram_write (attr_table, 0x23c0, 64);
;
L07E5:	jsr     decsp4
	lda     #<(_attr_table)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_attr_table)
	sta     (sp),y
	lda     #$C0
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$23
	sta     (sp),y
	lda     #$40
	jmp     _vram_write

.endproc

; ---------------------------------------------------------------
; void __near__ pr_str (unsigned char, unsigned char, __near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pr_str: near

.segment	"CODE"

;
; vram_adr (((y << 5) | x) + 0x2000);
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	ora     ptr1
	pha
	lda     tmp1
	clc
	adc     #$20
	tax
	pla
	jsr     _vram_adr
;
; while (gpit = *s++) vram_put (gpit - 32); 
;
L0804:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0808
	inx
L0808:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     _gpit
	tax
	jeq     incsp4
	lda     _gpit
	sec
	sbc     #$20
	jsr     _vram_put
	jmp     L0804

.endproc

; ---------------------------------------------------------------
; void __near__ bolts_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bolts_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_locks);
;
	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L0812:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L0813
;
; lkact [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _lkact,y
;
; } 
;
	jmp     L0812
;
; }
;
L0813:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clear_cerrojo (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_cerrojo: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) c_locks;
;
	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L081E:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	jeq     incsp1
;
; rda = *gp_gen ++; rdb = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0823
	inx
L0823:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0826
	inx
L0826:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdb
;
; if (n_pant == rda && yx == rdb) {
;
	lda     _rda
	cmp     _n_pant
	bne     L081E
	lda     (sp),y
	cmp     _rdb
	bne     L081E
;
; lkact [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _lkact,y
;
; }
;
	jmp     L081E

.endproc

; ---------------------------------------------------------------
; void __near__ breakable_do_anim (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_breakable_do_anim: near

.segment	"CODE"

;
; do_process_breakable = 0;
;
	lda     #$00
	sta     _do_process_breakable
;
; gpit = BREAKABLE_MAX; while (gpit --) {
;
	lda     #$04
	sta     _gpit
L0834:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L0835
;
; if (brkf [gpit]) {
;
	ldy     _gpit
	lda     _brkf,y
	beq     L0834
;
; brkf [gpit] ++;
;
	lda     #<(_brkf)
	ldx     #>(_brkf)
	clc
	adc     _gpit
	bcc     L083D
	inx
L083D:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; if (brkf [gpit] == BREAKABLE_MAX_FRAMES) {
;
	ldy     _gpit
	lda     _brkf,y
	cmp     #$08
	bne     L083E
;
; brkf [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _brkf,y
;
; map_set (brkx [gpit], brky [gpit], BREAKABLE_ERASE); 
;
	jsr     decsp3
	ldy     _gpit
	lda     _brkx,y
	ldy     #$02
	sta     (sp),y
	ldy     _gpit
	lda     _brky,y
	ldy     #$01
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	jsr     _map_set
;
; } else {
;
	jmp     L0834
;
; do_process_breakable = 1;
;
L083E:	lda     #$01
	sta     _do_process_breakable
;
; }
;
	jmp     L0834
;
; }
;
L0835:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ breakable_break (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_breakable_break: near

.segment	"CODE"

;
; gpaux = x + (y << 4);
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax4
	clc
	ldy     #$01
	adc     (sp),y
	sta     _gpaux
;
; if (brk_buff [gpaux] < BREAKABLE_LIFE) {
;
	ldy     _gpaux
	lda     _brk_buff,y
	cmp     #$02
	bcs     L0855
;
; brk_buff [gpaux] ++;
;
	lda     #<(_brk_buff)
	ldx     #>(_brk_buff)
	clc
	adc     _gpaux
	bcc     L085B
	inx
L085B:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (sreg),y
;
; } else {
;
	jmp     incsp2
;
; gpit = BREAKABLE_MAX; while (gpit --) {
;
L0855:	lda     #$04
	sta     _gpit
L085F:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	jeq     incsp2
;
; if (!brkf [gpit]) {
;
	ldy     _gpit
	lda     _brkf,y
	bne     L085F
;
; do_process_breakable = 1;
;
	lda     #$01
	sta     _do_process_breakable
;
; brkf [gpit] = 1;
;
	ldy     _gpit
	sta     _brkf,y
;
; brkx [gpit] = x;
;
	lda     #<(_brkx)
	ldx     #>(_brkx)
	clc
	adc     _gpit
	bcc     L086E
	inx
L086E:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	dey
	sta     (ptr1),y
;
; brky [gpit] = y;
;
	lda     #<(_brky)
	ldx     #>(_brky)
	clc
	adc     _gpit
	bcc     L0872
	inx
L0872:	sta     ptr1
	stx     ptr1+1
	lda     (sp),y
	sta     (ptr1),y
;
; map_set (x, y, BREAKABLE_BREAKING); // Break tile!
;
	jsr     decsp3
	ldy     #$04
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	jsr     _map_set
;
; }
;
	jmp     L085F

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) c_hotspots;
;
	lda     _c_hotspots
	sta     _gp_gen
	lda     _c_hotspots+1
	sta     _gp_gen+1
;
; for (gpit = 0; gpit < MAP_W * MAP_H; gpit ++) {
;
	lda     #$00
L1412:	sta     _gpit
	cmp     #$03
	bcs     L087C
;
; hact [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _hact,y
;
; for (gpit = 0; gpit < MAP_W * MAP_H; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L1412
;
; }
;
L087C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_paint: near

.segment	"CODE"

;
; hrx, hry + SPRITE_ADJUST, 
;
	jsr     decsp3
	lda     _hrx
	ldy     #$02
	sta     (sp),y
	lda     _hry
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L1414
	sec
L1414:	sbc     #$10
	bcs     L1415
	sec
L1415:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [hrt]
;
	ldx     #$00
	lda     _hrt
	asl     a
	bcc     L1416
	inx
	clc
L1416:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [hrt]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_create: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_hotspots + (n_pant << 1));
;
	ldx     #$00
	lda     _n_pant
	asl     a
	bcc     L1418
	inx
	clc
L1418:	adc     _c_hotspots
	pha
	txa
	adc     _c_hotspots+1
	tax
	pla
	sta     _gp_gen
	stx     _gp_gen+1
;
; hrt = *gp_gen ++; rda = *gp_gen; 
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L089A
	inx
L089A:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _hrt
	lda     _gp_gen
	sta     ptr1
	lda     _gp_gen+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _rda
;
; if (hrt && hact [n_pant]) {
;
	lda     _hrt
	beq     L089D
	ldy     _n_pant
	lda     _hact,y
	beq     L089D
;
; hry = rda & 0xf0; hrx = rda << 4;
;
	lda     _rda
	and     #$F0
	sta     _hry
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _hrx
;
; hotspots_paint ();
;
	jmp     _hotspots_paint
;
; } else hrt = 0;
;
L089D:	sta     _hrt
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_init: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it --) {
;
	lda     #$03
	sta     _coco_it
L08AE:	lda     _coco_it
	pha
	sec
	sbc     #$01
	sta     _coco_it
	pla
	tax
	beq     L08AF
;
; coco_slots [coco_it] = coco_it;
;
	ldy     _coco_it
	lda     _coco_it
	sta     _coco_slots,y
;
; coco_on [coco_it] = 0;
;
	ldy     _coco_it
	lda     #$00
	sta     _coco_on,y
;
; }
;
	jmp     L08AE
;
; coco_slots_i = COCOS_MAX;
;
L08AF:	lda     #$03
	sta     _coco_slots_i
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_shoot (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_shoot: near

.segment	"CODE"

;
; rdct = distance ();
;
	jsr     _distance
	sta     _rdct
;
; if (rdct > COCO_FAIR_D && coco_slots_i) {
;
	cmp     #$21
	bcc     L08C0
	lda     _coco_slots_i
	bne     L08BF
L08C0:	rts
;
; coco_slots_i --; coco_it = coco_slots [coco_slots_i];
;
L08BF:	lda     _coco_slots_i
	sec
	sbc     #$01
	sta     _coco_slots_i
	ldy     _coco_slots_i
	lda     _coco_slots,y
	sta     _coco_it
;
; coco_x [coco_it] = rdx << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1421
	inx
	clc
L1421:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldx     #$00
	lda     _rdx
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_y [coco_it] = rdy << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1422
	inx
	clc
L1422:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	jsr     aslax2
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; rds16 = COCO_V * rda / rdct; coco_vx [coco_it] = ADD_SIGN2 (px, coco_x [coco_it], rds16);
;
	lda     #$C0
	jsr     pusha0
	lda     _rda
	jsr     tosumula0
	jsr     pushax
	lda     _rdct
	jsr     tosudiva0
	sta     _rds16
	stx     _rds16+1
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1423
	inx
	clc
L1423:	adc     #<(_coco_vx)
	tay
	txa
	adc     #>(_coco_vx)
	tax
	tya
	jsr     pushax
	lda     _px
	ldx     _px+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1424
	inx
	clc
L1424:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bne     L08D6
	ldx     #$00
	txa
	jmp     L08E3
L08D6:	lda     _px
	ldx     _px+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1425
	inx
	clc
L1425:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bmi     L08E0
	beq     L08E0
	lda     _rds16
	ldx     _rds16+1
	jmp     L08E3
L08E0:	lda     _rds16
	ldx     _rds16+1
	jsr     negax
L08E3:	ldy     #$00
	jsr     staxspidx
;
; rds16 = COCO_V * rdb / rdct; coco_vy [coco_it] = ADD_SIGN2 (py, coco_y [coco_it], rds16);
;
	lda     #$C0
	jsr     pusha0
	lda     _rdb
	jsr     tosumula0
	jsr     pushax
	lda     _rdct
	jsr     tosudiva0
	sta     _rds16
	stx     _rds16+1
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1426
	inx
	clc
L1426:	adc     #<(_coco_vy)
	tay
	txa
	adc     #>(_coco_vy)
	tax
	tya
	jsr     pushax
	lda     _py
	ldx     _py+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1427
	inx
	clc
L1427:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bne     L08F0
	ldx     #$00
	txa
	jmp     L08FD
L08F0:	lda     _py
	ldx     _py+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1428
	inx
	clc
L1428:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bmi     L08FA
	beq     L08FA
	lda     _rds16
	ldx     _rds16+1
	jmp     L08FD
L08FA:	lda     _rds16
	ldx     _rds16+1
	jsr     negax
L08FD:	ldy     #$00
	jsr     staxspidx
;
; coco_on [coco_it] = 1;
;
	ldy     _coco_it
	lda     #$01
	sta     _coco_on,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_destroy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_destroy: near

.segment	"CODE"

;
; coco_on [coco_it] = 0;
;
	ldy     _coco_it
	lda     #$00
	sta     _coco_on,y
;
; coco_slots [coco_slots_i] = coco_it; coco_slots_i ++;
;
	ldy     _coco_slots_i
	lda     _coco_it
	sta     _coco_slots,y
	lda     _coco_slots_i
	clc
	adc     #$01
	sta     _coco_slots_i
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_do: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it --) if (coco_on [coco_it]) {
;
	lda     #$03
	sta     _coco_it
L0912:	lda     _coco_it
	pha
	sec
	sbc     #$01
	sta     _coco_it
	pla
	tax
	bne     L1440
;
; }
;
	rts
;
; coco_it = COCOS_MAX; while (coco_it --) if (coco_on [coco_it]) {
;
L1440:	ldy     _coco_it
	lda     _coco_on,y
	beq     L0912
;
; coco_x [coco_it] += coco_vx [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1433
	inx
	clc
L1433:	adc     #<(_coco_x)
	tay
	txa
	adc     #>(_coco_x)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1434
	inx
	clc
L1434:	adc     #<(_coco_vx)
	sta     ptr1
	txa
	adc     #>(_coco_vx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; coco_y [coco_it] += coco_vy [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1435
	inx
	clc
L1435:	adc     #<(_coco_y)
	tay
	txa
	adc     #>(_coco_y)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1436
	inx
	clc
L1436:	adc     #<(_coco_vy)
	sta     ptr1
	txa
	adc     #>(_coco_vy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; if (coco_x [coco_it] < 0 || coco_x [coco_it] > 256<<6 || coco_y [coco_it] < 0 || coco_y [coco_it] > 192<<6) {
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1437
	inx
	clc
L1437:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	cpx     #$80
	bcs     L0922
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1438
	inx
	clc
L1438:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$40
	bvs     L0925
	eor     #$80
L0925:	bmi     L0922
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1439
	inx
	clc
L1439:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	cpx     #$80
	bcs     L0922
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L143A
	inx
	clc
L143A:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$30
	bvs     L0928
	eor     #$80
L0928:	bpl     L0921
;
; cocos_destroy ();
;
L0922:	jsr     _cocos_destroy
;
; continue;
;
	jmp     L0912
;
; rdx = coco_x [coco_it] >> 6;
;
L0921:	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L143B
	inx
	clc
L143B:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     _rdx
;
; rdy = coco_y [coco_it] >> 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L143C
	inx
	clc
L143C:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     _rdy
;
; oam_index = oam_spr (rdx, rdy + SPRITE_ADJUST, COCO_PATTERN, COCO_PALETTE, oam_index);
;
	jsr     decsp4
	lda     _rdx
	ldy     #$03
	sta     (sp),y
	lda     _rdy
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L143D
	sec
L143D:	sbc     #$10
	bcs     L143E
	sec
L143E:	sbc     #$01
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (pstate == EST_NORMAL && rdx >= prx + 1 && rdx <= prx + 7 && rdy + 7 >= pry && rdy <= pry + 12) {
;
	lda     _pstate
	jne     L0912
	lda     _rdx
	jsr     pusha0
	lda     _prx
	clc
	adc     #$01
	bcc     L093F
	ldx     #$01
L093F:	jsr     tosicmp
	jcc     L0912
	lda     _rdx
	jsr     pusha0
	lda     _prx
	clc
	adc     #$07
	bcc     L0940
	ldx     #$01
L0940:	jsr     tosicmp
	beq     L143F
	jcs     L0912
L143F:	ldx     #$00
	lda     _rdy
	clc
	adc     #$07
	bcc     L0941
	inx
L0941:	cmp     _pry
	txa
	sbc     #$00
	jcc     L0912
	lda     _rdy
	jsr     pusha0
	lda     _pry
	clc
	adc     #$0C
	bcc     L0942
	ldx     #$01
L0942:	jsr     tosicmp
	bcc     L093D
	jne     L0912
;
; pkill = 1;
;
L093D:	lda     #$01
	sta     _pkill
;
; cocos_destroy ();
;
	jsr     _cocos_destroy
;
; }
;
	jmp     L0912

.endproc

; ---------------------------------------------------------------
; void __near__ player_register_safe_spot (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_register_safe_spot: near

.segment	"CODE"

;
; px_safe = px;
;
	lda     _px
	sta     _px_safe
	lda     _px+1
	sta     _px_safe+1
;
; py_safe = py;
;
	lda     _py
	sta     _py_safe
	lda     _py+1
	sta     _py_safe+1
;
; n_pant_safe = n_pant;
;
	lda     _n_pant
	sta     _n_pant_safe
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; pvx = pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
	sta     _pvx
	sta     _pvx+1
;
; pfacing = 0;
;
	sta     _pfacing
;
; pfr = pctfr = 0;
;
	sta     _pctfr
	sta     _pfr
;
; pj = pctj = 0;
;
	sta     _pctj
	sta     _pj
;
; psprid = 0;
;
	sta     _psprid
;
; pobjs = 0;
;
	sta     _pobjs
;
; pkeys = 0;
;
	sta     _pkeys
;
; pgotten = 0;
;
	sta     _pgotten
;
; pfiring = 0;
;
	sta     _pfiring
;
; pkilled = 0;
;
	sta     _pkilled
;
; pstate = EST_NORMAL;
;
	sta     _pstate
;
; player_register_safe_spot ();
;
	jmp     _player_register_safe_spot

.endproc

; ---------------------------------------------------------------
; void __near__ player_render (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_render: near

.segment	"CODE"

;
; if (pstate == EST_NORMAL || half_life) {
;
	lda     _pstate
	beq     L096B
	lda     _half_life
	beq     L096A
;
; oam_meta_spr (prx, pry + SPRITE_ADJUST, 4, spr_player [psprid]); 
;
L096B:	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L1442
	sec
L1442:	sbc     #$10
	bcs     L1443
	sec
L1443:	sbc     #$01
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	ldx     #$00
	lda     _psprid
	asl     a
	bcc     L1444
	inx
	clc
L1444:	adc     #<(_spr_player)
	sta     ptr1
	txa
	adc     #>(_spr_player)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jmp     _oam_meta_spr
;
; oam_meta_spr (0, 240, 4, spr_pl_empty);
;
L096A:	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	lda     #$F0
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	lda     #<(_spr_pl_empty)
	ldx     #>(_spr_pl_empty)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ player_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_kill: near

.segment	"CODE"

;
; pkill = 0;
;
	lda     #$00
	sta     _pkill
;
; sfx_play (4, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (plife) plife --; else game_over = 1;
;
	lda     _plife
	beq     L0983
	lda     _plife
	sec
	sbc     #$01
	sta     _plife
	jmp     L0986
L0983:	lda     #$01
	sta     _game_over
;
; pstate = EST_PARP;
;
L0986:	lda     #$02
	sta     _pstate
;
; pctstate = 100; 
;
	lda     #$64
	sta     _pctstate
;
; px = px_safe;
;
	lda     _px_safe
	sta     _px
	lda     _px_safe+1
	sta     _px+1
;
; py = py_safe;
;
	lda     _py_safe
	sta     _py
	lda     _py_safe+1
	sta     _py+1
;
; n_pant = n_pant_safe;
;
	lda     _n_pant_safe
	sta     _n_pant
;
; music_pause (1);
;
	lda     #$01
	jsr     _music_pause
;
; delay (60);
;
	lda     #$3C
	jsr     _delay
;
; pvx = pvy = pj = 0;
;
	lda     #$00
	sta     _pj
	sta     _pvy
	sta     _pvy+1
	sta     _pvx
	sta     _pvx+1
;
; music_pause (0);
;
	jsr     _music_pause
;
; on_pant = 0xff;
;
	lda     #$FF
	sta     _on_pant
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_process_tile (int, int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_process_tile: near

.segment	"CODE"

;
; if (y0) y0 --;
;
	ldy     #$05
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L09A0
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$01
	bcs     L09A3
	dex
L09A3:	jsr     staxysp
;
; if (y1) y1 --;
;
L09A0:	ldy     #$01
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L09A4
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$01
	bcs     L09A7
	dex
L09A7:	jsr     stax0sp
;
; at == 11 
;
L09A4:	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; && b_button
;
	cpx     #$00
	jne     L09AF
	cmp     #$0B
	jne     L09AF
;
; ) {
;
	lda     _b_button
	jeq     L09AF
;
; b_button = 0;
;
	stx     _b_button
;
; x0 > 0 && x0 < 15 && y0 > 0 && y0 < 11 &&
;
	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$01
	txa
	sbc     #$00
	bvs     L09B1
	eor     #$80
L09B1:	jpl     L09AF
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$0F
	txa
	sbc     #$00
	bvc     L09B3
	eor     #$80
L09B3:	jpl     L09AF
	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$01
	txa
	sbc     #$00
	bvs     L09B4
	eor     #$80
L09B4:	bpl     L09AF
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$0B
	txa
	sbc     #$00
	bvc     L09B5
	eor     #$80
L09B5:	bpl     L09AF
;
; map_attr [COORDS (x1, y1)] == 0
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     aslax4
	ldy     #$02
	ora     (sp),y
	sta     ptr1
	txa
	iny
	ora     (sp),y
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
;
; ) {
;
	bne     L09AF
;
; sfx_play (1, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; map_set (x0, y0, 0);
;
	jsr     decsp3
	ldy     #$09
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	jsr     _map_set
;
; map_set (x1, y1, 14);
;
	jsr     decsp3
	ldy     #$05
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	lda     #$0E
	dey
	sta     (sp),y
	jsr     _map_set
;
; at == 10 &&
;
L09AF:	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L09C7
	cmp     #$0A
	bne     L09C7
;
; ) {
;
	lda     _pkeys
	beq     L09C7
;
; map_set (x0, y0, 0);
;
	jsr     decsp3
	iny
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	txa
	dey
	sta     (sp),y
	jsr     _map_set
;
; clear_cerrojo (COORDS(x0, y0));
;
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     aslax4
	ldy     #$06
	ora     (sp),y
	pha
	txa
	iny
	ora     (sp),y
	pla
	jsr     pusha
	jsr     _clear_cerrojo
;
; pkeys --;
;
	lda     _pkeys
	sec
	sbc     #$01
	sta     _pkeys
;
; sfx_play (1, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; } else {
;
	jmp     L09DA
;
; no_ct = 100;
;
L09C7:	lda     #$64
	sta     _no_ct
;
; }
;
L09DA:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ fire_bullet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fire_bullet: near

.segment	"CODE"

;
; if (b_slots_i == 0) return;
;
	lda     _b_slots_i
	beq     L09EB
;
; b_slots_i --; bi = b_slots [b_slots_i];
;
	lda     _b_slots_i
	sec
	sbc     #$01
	sta     _b_slots_i
	ldy     _b_slots_i
	lda     _b_slots,y
	sta     _bi
;
; bst [bi] = 1;
;
	ldy     _bi
	lda     #$01
	sta     _bst,y
;
; switch (pfacing) {
;
	lda     _pfacing
;
; } 
;
	beq     L0A00
	cmp     #$08
	bne     L09EB
;
; bx [bi] = prx - 4;
;
	lda     #<(_bx)
	ldx     #>(_bx)
	clc
	adc     _bi
	bcc     L09F0
	inx
L09F0:	sta     ptr1
	stx     ptr1+1
	lda     _prx
	sec
	sbc     #$04
	ldy     #$00
	sta     (ptr1),y
;
; bmx [bi] = -PLAYER_BULLET_SPEED;
;
	ldy     _bi
	lda     #$FC
;
; break; 
;
	jmp     L144B
;
; bx [bi] = prx + 12;
;
L0A00:	lda     #<(_bx)
	ldx     #>(_bx)
	clc
	adc     _bi
	bcc     L0A03
	inx
L0A03:	sta     ptr1
	stx     ptr1+1
	lda     _prx
	clc
	adc     #$0C
	ldy     #$00
	sta     (ptr1),y
;
; bmx [bi] = PLAYER_BULLET_SPEED;
;
	ldy     _bi
	lda     #$04
L144B:	sta     _bmx,y
;
; by [bi] = pry + PLAYER_BULLET_Y_OFFSET;
;
	ldy     _bi
	lda     _pry
	sta     _by,y
;
; bmy [bi] = 0;
;
	ldy     _bi
	lda     #$00
	sta     _bmy,y
;
; }
;
L09EB:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bullets_destroy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bullets_destroy: near

.segment	"CODE"

;
; bst [bi] = 0;
;
	ldy     _bi
	lda     #$00
	sta     _bst,y
;
; b_slots [b_slots_i] = bi; b_slots_i ++;
;
	ldy     _b_slots_i
	lda     _bi
	sta     _b_slots,y
	lda     _b_slots_i
	clc
	adc     #$01
	sta     _b_slots_i
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bullets_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bullets_move: near

.segment	"CODE"

;
; for (bi = 0; bi < MAX_BULLETS; bi ++) {
;
	lda     #$00
L144E:	sta     _bi
	cmp     #$04
	bcc     L144F
;
; }
;
	rts
;
; if (bst [bi]) {
;
L144F:	ldy     _bi
	lda     _bst,y
	jeq     L0A1F
;
; bx [bi] += bmx [bi];
;
	lda     #<(_bx)
	ldx     #>(_bx)
	clc
	adc     _bi
	bcc     L0A2B
	inx
L0A2B:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #<(_bmx)
	ldx     #>(_bmx)
	clc
	adc     _bi
	bcc     L0A2E
	inx
L0A2E:	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$00
	jsr     staspidx
;
; by [bi] += bmy [bi];
;
	lda     #<(_by)
	ldx     #>(_by)
	clc
	adc     _bi
	bcc     L0A31
	inx
L0A31:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #<(_bmy)
	ldx     #>(_bmy)
	clc
	adc     _bi
	bcc     L0A34
	inx
L0A34:	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$00
	jsr     staspidx
;
; bx [bi], SPRITE_ADJUST + by [bi], 
;
	jsr     decsp4
	ldy     _bi
	lda     _bx,y
	ldy     #$03
	sta     (sp),y
	ldy     _bi
	lda     _by,y
	clc
	adc     #$07
	ldy     #$02
	sta     (sp),y
;
; BULLET_PATTERN, BULLET_PALETTE,
;
	lda     #$00
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
;
; );
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; cx1 = ((bx [bi] + 4) >> 4);
;
	ldy     _bi
	ldx     #$00
	lda     _bx,y
	clc
	adc     #$04
	bcc     L0A47
	inx
L0A47:	jsr     shrax4
	sta     _cx1
;
; cy1 = ((by [bi] + 4 - 16) >> 4);
;
	ldy     _bi
	ldx     #$00
	lda     _by,y
	clc
	adc     #$04
	bcc     L0A4E
	inx
L0A4E:	sec
	sbc     #$10
	bcs     L0A4F
	dex
L0A4F:	jsr     shrax4
	sta     _cy1
;
; rdm = map_attr [COORDS (cx1, cy1)];
;
	ldx     #$00
	lda     _cy1
	jsr     aslax4
	ora     _cx1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _rdm
;
; if (rdm & 16) {
;
	and     #$10
	beq     L0A57
;
; breakable_break (cx1, cy1);
;
	jsr     decsp2
	lda     _cx1
	ldy     #$01
	sta     (sp),y
	lda     _cy1
	dey
	sta     (sp),y
	jsr     _breakable_break
;
; } else
;
	jmp     L144C
;
; bx [bi] < PLAYER_BULLET_SPEED ||
;
L0A57:	ldy     _bi
	lda     _bx,y
	cmp     #$04
	bcc     L144C
;
; bx [bi] > 255 - PLAYER_BULLET_SPEED ||
;
	ldy     _bi
	lda     _bx,y
	cmp     #$FC
	bcs     L144C
;
; by [bi] < PLAYER_BULLET_SPEED ||
;
	ldy     _bi
	lda     _by,y
	cmp     #$04
	bcc     L144C
;
; by [bi] > 191 - PLAYER_BULLET_SPEED ||
;
	ldy     _bi
	lda     _by,y
	cmp     #$BC
	bcs     L144C
;
; (rdm & 8)
;
	lda     _rdm
	and     #$08
;
; ) bullets_destroy (); 
;
	beq     L0A5E
L144C:	jsr     _bullets_destroy
;
; for (gpjt = 0; gpjt < 3; gpjt ++) {
;
L0A5E:	lda     #$00
L144D:	sta     _gpjt
	cmp     #$03
	jcs     L0A1F
;
; en_t [gpjt] >= FIRE_MIN_KILLABLE
;
	ldy     _gpjt
	lda     _en_t,y
;
; && en_t [gpjt] != 4
;
	cmp     #$01
	jcc     L0A6D
	ldy     _gpjt
	lda     _en_t,y
;
; && en_t [gpjt] != 8
;
	cmp     #$04
	jeq     L0A6D
	ldy     _gpjt
	lda     _en_t,y
;
; && (en_t [gpit] != 11 || en_mx [gpit] == 2)
;
	cmp     #$08
	jeq     L0A6D
	ldy     _gpit
	lda     _en_t,y
	cmp     #$0B
	bne     L0A74
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0A80
	inx
L0A80:	ldy     #$00
	jsr     ldaidx
	cmp     #$02
	jne     L0A6D
;
; if (collide_in (bx [bi] + 3, by [bi] + 3, en_x [gpjt], en_y [gpjt])) {
;
L0A74:	jsr     decsp8
	ldy     _bi
	ldx     #$00
	lda     _bx,y
	clc
	adc     #$03
	bcc     L0A88
	inx
L0A88:	ldy     #$06
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     _bi
	ldx     #$00
	lda     _by,y
	clc
	adc     #$03
	bcc     L0A8C
	inx
L0A8C:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     _gpjt
	lda     _en_x,y
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	ldy     _gpjt
	lda     _en_y,y
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _collide_in
	tax
	beq     L0A6D
;
; sfx_play (6, 2);
;
	lda     #$06
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; bullets_destroy ();
;
	jsr     _bullets_destroy
;
; en_cttouched [gpjt] = 8;
;
	ldy     _gpjt
	lda     #$08
	sta     _en_cttouched,y
;
; en_life [gpjt] --;      
;
	lda     #<(_en_life)
	ldx     #>(_en_life)
	clc
	adc     _gpjt
	bcc     L0A9D
	inx
L0A9D:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if (en_life [gpjt] == 0) { 
;
	ldy     _gpjt
	lda     _en_life,y
	bne     L0A1F
;
; en_t [gpjt] = 0;  
;
	ldy     _gpjt
	sta     _en_t,y
;
; pkilled ++;            
;
	lda     _pkilled
	clc
	adc     #$01
	sta     _pkilled
;
; break;
;
	jmp     L0A1F
;
; for (gpjt = 0; gpjt < 3; gpjt ++) {
;
L0A6D:	lda     _gpjt
	clc
	adc     #$01
	jmp     L144D
;
; for (bi = 0; bi < MAX_BULLETS; bi ++) {
;
L0A1F:	lda     _bi
	clc
	adc     #$01
	jmp     L144E

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; pad_read ();
;
	jsr     _pad_read
;
; b_button = (pad_this_frame & PAD_B);
;
	lda     _pad_this_frame
	and     #$02
	sta     _b_button
;
; hitv = hith = 0;
;
	lda     #$00
	sta     _hith
	sta     _hitv
;
; pushed_any = 0;
;
	sta     _pushed_any
;
; pnotsafe = 0;
;
	sta     _pnotsafe
;
; ppossee = 0;
;
	sta     _ppossee
;
; pice = 0;
;
	sta     _pice
;
; if (!pj) {
;
	lda     _pj
	bne     L0ABC
;
; pvy += PLAYER_G;
;
	lda     #$10
	clc
	adc     _pvy
	sta     _pvy
	bcc     L0ABB
	inc     _pvy+1
;
; if (pvy > PLAYER_VY_FALLING_MAX) pvy = PLAYER_VY_FALLING_MAX; 
;
L0ABB:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$01
	bvs     L0ABE
	eor     #$80
L0ABE:	bpl     L0ABC
	ldx     #$01
	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; if (pgotten) pvy = 0;   
;
L0ABC:	lda     _pgotten
	beq     L0AC1
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; cx1 = prx >> 4;
;
L0AC1:	tax
	lda     _prx
	jsr     asrax4
	sta     _cx1
;
; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L0ACA
	inx
L0ACA:	jsr     shrax4
	sta     _cx2
;
; py += pvy;
;
	lda     _pvy
	clc
	adc     _py
	sta     _py
	lda     _pvy+1
	adc     _py+1
	sta     _py+1
;
; if (py < 0) py = 0;
;
	ldx     _py+1
	cpx     #$80
	bcc     L0ACD
	lda     #$00
	sta     _py
	sta     _py+1
;
; prx = px >> FIXBITS;
;
L0ACD:	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
;
; pry = py >> FIXBITS;
;
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; rds16 = pvy + pgtmy;
;
	lda     _pvy
	clc
	adc     _pgtmy
	sta     _rds16
	lda     _pvy+1
	adc     _pgtmy+1
	tax
	stx     _rds16+1
;
; if (rds16 < 0)
;
	cpx     #$80
	jcc     L0AD7
;
; cy1 = cy2 = (pry + PLAYER_COLLISION_TOP) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$04
	bcc     L0ADD
	inx
L0ADD:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L0AE0
	lda     _at2
	and     #$08
	beq     L0ADF
;
; pvy = 0; pry = ((cy1 + 1) << 4) - PLAYER_COLLISION_TOP; py = pry << FIXBITS;
;
L0AE0:	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _cy1
	clc
	adc     #$01
	bcc     L0AEA
	inx
L0AEA:	jsr     shlax4
	sec
	sbc     #$04
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L0B65
L0ADF:	lda     _at1
	and     #$01
	bne     L0AF4
	lda     _at2
	and     #$01
	beq     L0AF3
;
; hitv = 1;
;
L0AF4:	lda     #$01
	sta     _hitv
;
; else if ((at1 & 2) || (at2 & 2)) {
;
	jmp     L0B65
L0AF3:	lda     _at1
	and     #$02
	bne     L0AFC
	lda     _at2
	and     #$02
	jeq     L0B65
;
; if (pctj > 2) pj = 0;
;
L0AFC:	lda     _pctj
	cmp     #$03
	jcc     L0B65
	lda     #$00
	sta     _pj
;
; } else if (rds16 > 0)
;
	jmp     L0B65
L0AD7:	lda     _rds16
	cmp     #$01
	lda     _rds16+1
	sbc     #$00
	bvs     L0B07
	eor     #$80
L0B07:	jpl     L0B65
;
; cy1 = cy2 = (pry + 16) >> 4; 
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L0B0C
	inx
L0B0C:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points (); 
;
	jsr     _cm_two_points
;
; pry + 4 < (cy1 << 4) &&
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$04
	bcc     L0B10
	inx
L0B10:	jsr     pushax
	ldx     #$00
	lda     _cy1
	jsr     aslax4
	jsr     tosicmp
	jcs     L0B0E
;
; ((at1 & 12) || (at2 & 12))
;
	lda     _at1
	and     #$0C
	bne     L0B0F
	lda     _at2
	and     #$0C
	jeq     L0B0E
;
; pvy = 0; pry = ((cy1 - 1) << 4);py = pry << FIXBITS;
;
L0B0F:	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _cy1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; ppossee = 1;
;
	sta     _ppossee
;
; pice = (at1 & 64) || (at2 & 64);
;
	lda     _at1
	and     #$40
	bne     L0B28
	lda     _at2
	and     #$40
	beq     L0B2B
L0B28:	lda     #$01
L0B2B:	sta     _pice
;
; if (at1 & 32) { if (at1 & 1) pgtmx = PLAYER_VX_CONVEYORS; else pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; }
;
	lda     _at1
	and     #$20
	beq     L0B2C
	lda     _at1
	and     #$01
	beq     L0B2E
	ldx     #$00
	lda     #$40
	jmp     L1456
L0B2E:	ldx     #$FF
	lda     #$C0
L1456:	sta     _pgtmx
	stx     _pgtmx+1
	lda     #$01
	sta     _pgotten
;
; if (at2 & 32) { if (at2 & 1) pgtmx = PLAYER_VX_CONVEYORS; else pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; }
;
L0B2C:	lda     _at2
	and     #$20
	beq     L0B37
	lda     _at2
	and     #$01
	beq     L0B39
	ldx     #$00
	lda     #$40
	jmp     L1457
L0B39:	ldx     #$FF
	lda     #$C0
L1457:	sta     _pgtmx
	stx     _pgtmx+1
	lda     #$01
	sta     _pgotten
;
; if (at1 & 16) { breakable_break (cx1, cy1 - 1); pnotsafe = 1; }
;
L0B37:	lda     _at1
	and     #$10
	beq     L0B42
	jsr     decsp2
	lda     _cx1
	ldy     #$01
	sta     (sp),y
	lda     _cy1
	sec
	sbc     #$01
	dey
	sta     (sp),y
	jsr     _breakable_break
	lda     #$01
	sta     _pnotsafe
;
; if (cx1 != cx2 && (at2 & 16)) { breakable_break (cx2, cy1 - 1); pnotsafe = 1; }
;
L0B42:	lda     _cx2
	cmp     _cx1
	beq     L0B4A
	lda     _at2
	and     #$10
	beq     L0B4A
	jsr     decsp2
	lda     _cx2
	ldy     #$01
	sta     (sp),y
	lda     _cy1
	sec
	sbc     #$01
	dey
	sta     (sp),y
	jsr     _breakable_break
	lda     #$01
	sta     _pnotsafe
;
; if ((at1 & 1) || (at2 & 1)) pnotsafe = 1; 
;
L0B4A:	lda     _at1
	and     #$01
	bne     L0B56
	lda     _at2
	and     #$01
	beq     L0B65
L0B56:	lda     #$01
	sta     _pnotsafe
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L0B65
L0B0E:	lda     _at1
	and     #$01
	bne     L0B5E
	lda     _at2
	and     #$01
	beq     L0B5D
;
; hitv = 1;
;
L0B5E:	lda     #$01
	sta     _hitv
;
; else {
;
	jmp     L0B65
;
; if ((at1 & 2) || (at2 & 2)) {
;
L0B5D:	lda     _at1
	and     #$02
	bne     L0B66
	lda     _at2
	and     #$02
	beq     L0B65
;
; pvy = PLAYER_VY_SINKING;
;
L0B66:	ldx     #$00
	lda     #$02
	sta     _pvy
	stx     _pvy+1
;
; ppossee = 1;
;
	lda     #$01
	sta     _ppossee
;
; if (i & PAD_A) {
;
L0B65:	lda     _i
	and     #$01
	jeq     L0B6E
;
; if (!pjb) {
;
	lda     _pjb
	bne     L0B82
;
; pjb = 1;
;
	lda     #$01
	sta     _pjb
;
; if (!pj) {
;
	lda     _pj
	bne     L0B82
;
; if (pgotten || ppossee || hitv) {
;
	lda     _pgotten
	bne     L0B77
	lda     _ppossee
	bne     L0B77
	lda     _hitv
	beq     L0B82
;
; sfx_play (7, 0);
;
L0B77:	lda     #$07
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pj = 1; pctj = 0; pvy = -PLAYER_VY_JUMP_INITIAL;
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
	ldx     #$FF
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; if (!(pgotten || hitv || pnotsafe)) {
;
	lda     _pgotten
	bne     L0B84
	lda     _hitv
	bne     L0B84
	lda     _pnotsafe
	beq     L0B85
L0B84:	lda     #$01
L0B85:	jsr     bnega
	beq     L0B82
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; if (pj) {
;
L0B82:	lda     _pj
	beq     L0B99
;
; if (pctj < PLAYER_AY_JUMP) pvy -= (PLAYER_AY_JUMP - (pctj));
;
	lda     _pctj
	cmp     #$0C
	bcs     L0B89
	lda     #$0C
	sec
	sbc     _pctj
	eor     #$FF
	sec
	adc     _pvy
	sta     _pvy
	lda     #$FF
	adc     _pvy+1
	sta     _pvy+1
;
; if (pvy < -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
L0B89:	lda     _pvy
	cmp     #$40
	lda     _pvy+1
	sbc     #$FF
	bvc     L0B91
	eor     #$80
L0B91:	bpl     L0B8F
	ldx     #$FF
	lda     #$40
	sta     _pvy
	stx     _pvy+1
;
; pctj ++; if (pctj == 16) pj = 0; 
;
L0B8F:	lda     _pctj
	clc
	adc     #$01
	sta     _pctj
	cmp     #$10
	bne     L0B99
	lda     #$00
	sta     _pj
;
; } else {
;
	jmp     L0B99
;
; pj = 0; pjb = 0;
;
L0B6E:	sta     _pj
	sta     _pjb
;
; if (!(i & PAD_LEFT || i & PAD_RIGHT)) {
;
L0B99:	lda     _i
	and     #$40
	bne     L0BA0
	lda     _i
	and     #$80
	beq     L0BA1
L0BA0:	lda     #$01
L0BA1:	jsr     bnega
	beq     L0BB8
;
; if (pvx > 0) {
;
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L0BA4
	eor     #$80
L0BA4:	bpl     L0BA2
;
; pvx -= pice ? PLAYER_RX_ICE : PLAYER_RX;
;
	lda     _pice
	beq     L0BA7
	lda     #$02
	jmp     L0BA9
L0BA7:	lda     #$10
L0BA9:	eor     #$FF
	sec
	adc     _pvx
	sta     _pvx
	lda     #$FF
	adc     _pvx+1
	sta     _pvx+1
;
; if (pvx < 0) pvx = 0;
;
	ldx     _pvx+1
	cpx     #$80
	bcc     L0BB8
;
; } else if (pvx < 0) {
;
	jmp     L1459
L0BA2:	ldx     _pvx+1
	cpx     #$80
	bcc     L0BB8
;
; pvx += pice ? PLAYER_RX_ICE : PLAYER_RX;
;
	lda     _pice
	beq     L0BB4
	lda     #$02
	jmp     L0BB6
L0BB4:	lda     #$10
L0BB6:	clc
	adc     _pvx
	sta     _pvx
	lda     #$00
	adc     _pvx+1
	sta     _pvx+1
;
; if (pvx > 0) pvx = 0;
;
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L0BBA
	eor     #$80
L0BBA:	bpl     L0BB8
L1459:	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; if (i & PAD_LEFT) {
;
L0BB8:	lda     _i
	and     #$40
	beq     L0BC1
;
; pfacing = CELL_FACING_LEFT;  
;
	lda     #$08
	sta     _pfacing
;
; if (pvx > -PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$81
	lda     _pvx+1
	sbc     #$FF
	bvs     L0BC3
	eor     #$80
L0BC3:	bpl     L0BC1
;
; pvx -= pice ? PLAYER_AX_ICE : PLAYER_AX;
;
	lda     _pice
	beq     L0BC6
	lda     #$04
	jmp     L0BC8
L0BC6:	lda     #$10
L0BC8:	eor     #$FF
	sec
	adc     _pvx
	sta     _pvx
	lda     #$FF
	adc     _pvx+1
	sta     _pvx+1
;
; if (i & PAD_RIGHT) {
;
L0BC1:	lda     _i
	and     #$80
	beq     L0BCE
;
; pfacing = CELL_FACING_RIGHT;
;
	lda     #$00
	sta     _pfacing
;
; if (pvx < PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$80
	lda     _pvx+1
	sbc     #$00
	bvc     L0BD0
	eor     #$80
L0BD0:	bpl     L0BCE
;
; pvx += pice ? PLAYER_AX_ICE : PLAYER_AX;
;
	lda     _pice
	beq     L0BD3
	lda     #$04
	jmp     L0BD5
L0BD3:	lda     #$10
L0BD5:	clc
	adc     _pvx
	sta     _pvx
	lda     #$00
	adc     _pvx+1
	sta     _pvx+1
;
; px += pvx;
;
L0BCE:	lda     _pvx
	clc
	adc     _px
	sta     _px
	lda     _pvx+1
	adc     _px+1
	sta     _px+1
;
; if (pgotten) px += pgtmx;
;
	lda     _pgotten
	beq     L0BD9
	lda     _pgtmx
	clc
	adc     _px
	sta     _px
	lda     _pgtmx+1
	adc     _px+1
	sta     _px+1
;
; if (px < (4<<FIXBITS)) prx = 4;
;
L0BD9:	lda     _px
	cmp     #$00
	lda     _px+1
	sbc     #$01
	bvc     L0BE0
	eor     #$80
L0BE0:	bpl     L0BDD
	lda     #$04
;
; else if (px > (244<<FIXBITS)) prx = 244; 
;
	jmp     L1454
L0BDD:	lda     _px
	cmp     #$01
	lda     _px+1
	sbc     #$3D
	bvs     L0BE7
	eor     #$80
L0BE7:	bpl     L0BE4
	lda     #$F4
;
; else prx = px >> FIXBITS;
;
	jmp     L1454
L0BE4:	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
L1454:	sta     _prx
;
; cy1 = (pry + PLAYER_COLLISION_TOP) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$04
	bcc     L0BF0
	inx
L0BF0:	jsr     shrax4
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L0BF4
	inx
L0BF4:	jsr     shrax4
	sta     _cy2
;
; rds16 = pvx + pgtmx;
;
	lda     _pvx
	clc
	adc     _pgtmx
	sta     _rds16
	lda     _pvx+1
	adc     _pgtmx+1
	sta     _rds16+1
;
; if (rds16)  {
;
	lda     _rds16
	ora     _rds16+1
	jeq     L0C32
;
; if (rds16 < 0) {
;
	ldx     _rds16+1
	cpx     #$80
	bcc     L0BF9
;
; cx1 = cx2 = prx >> 4; 
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx2
	sta     _cx1
;
; rda = (cx1 + 1) << 4;
;
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; rdm = cx1 - 1;
;
	lda     _cx1
	sec
	sbc     #$01
	bcs     L0C13
;
; } else {
;
	jmp     L0C13
;
; cx1 = cx2 = (prx + 8) >> 4;
;
L0BF9:	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L0C0A
	inx
L0C0A:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 - 1) << 4) + 8;
;
	ldx     #$00
	lda     _cx1
	sec
	sbc     #$01
	bcs     L0C0F
	dex
L0C0F:	jsr     shlax4
	clc
	adc     #$08
	sta     _rda
;
; rdm = cx1 + 1;
;
	lda     _cx1
	clc
	adc     #$01
L0C13:	sta     _rdm
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L0C16
	lda     _at2
	and     #$08
	jeq     L0C15
;
; pvx = 0; prx = rda; px = prx << FIXBITS; pfiring = 1;
;
L0C16:	ldx     #$00
	txa
	sta     _pvx
	sta     _pvx+1
	lda     _rda
	sta     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
	lda     #$01
	sta     _pfiring
;
; if (at1 & 2) player_process_tile (at1, cx1, cy1, rdm, cy1);
;
	lda     _at1
	ldx     #$00
	and     #$02
	beq     L0C22
	ldy     #$0A
	jsr     subysp
	lda     _at1
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _rdm
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _player_process_tile
;
; if (at2 & 2) player_process_tile (at2, cx1, cy2, rdm, cy2);
;
L0C22:	lda     _at2
	ldx     #$00
	and     #$02
	beq     L0C32
	ldy     #$0A
	jsr     subysp
	lda     _at2
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy2
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _rdm
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy2
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _player_process_tile
;
; } else {
;
	jmp     L0C32
;
; hith = ((at1 & 1) || (at2 & 1));
;
L0C15:	lda     _at1
	and     #$01
	bne     L0C35
	lda     _at2
	and     #$01
	beq     L0C38
L0C35:	lda     #$01
L0C38:	sta     _hith
;
; phit = 0;
;
L0C32:	lda     #$00
	sta     _phit
;
; if (hitv) { phit = 1; pvy = ADD_SIGN (-pvy, PLAYER_V_REBOUND); } 
;
	lda     _hitv
	beq     L0C3B
	lda     #$01
	sta     _phit
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L0C43
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0C48
	eor     #$80
L0C48:	bpl     L0C49
	ldx     #$00
	lda     #$E0
	jmp     L0C50
L0C49:	ldx     #$FF
	lda     #$20
	jmp     L0C50
L0C43:	tax
L0C50:	sta     _pvy
	stx     _pvy+1
;
; if (hith) { phit = 1; pvx = ADD_SIGN (-pvx, PLAYER_V_REBOUND); }
;
L0C3B:	lda     _hith
	beq     L0C53
	lda     #$01
	sta     _phit
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L0C5B
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0C60
	eor     #$80
L0C60:	bpl     L0C61
	ldx     #$00
	lda     #$E0
	jmp     L0C68
L0C61:	ldx     #$FF
	lda     #$20
	jmp     L0C68
L0C5B:	tax
L0C68:	sta     _pvx
	stx     _pvx+1
;
; if (pstate != EST_PARP) if (phit) pkill = 1;
;
L0C53:	lda     _pstate
	cmp     #$02
	beq     L0C6D
	lda     _phit
	beq     L0C6D
	lda     #$01
	sta     _pkill
;
; if (b_button) {
;
L0C6D:	lda     _b_button
	beq     L0C71
;
; fire_bullet ();
;
	jsr     _fire_bullet
;
; if (ppossee || pgotten) {
;
L0C71:	lda     _ppossee
	bne     L0C75
	lda     _pgotten
	beq     L0C74
;
; if (pvx > PLAYER_VX_MIN || pvx < -PLAYER_VX_MIN) {
;
L0C75:	lda     _pvx
	cmp     #$41
	lda     _pvx+1
	sbc     #$00
	bvs     L0C7A
	eor     #$80
L0C7A:	bmi     L0C78
	lda     _pvx
	cmp     #$C0
	lda     _pvx+1
	sbc     #$FF
	bvc     L0C7C
	eor     #$80
L0C7C:	bpl     L0C77
;
; psprid = CELL_WALK_CYCLE + ((prx >> 3) & 3);
;
L0C78:	ldx     #$00
	lda     _prx
	jsr     asrax3
	and     #$03
	clc
	adc     #$01
	bcc     L1455
;
; } else {
;
	jmp     L1455
;
; psprid = CELL_IDLE;
;
L0C77:	lda     #$00
;
; } else {
;
	jmp     L1455
;
; if (pvy < PLAYER_VY_FALLING_MIN)
;
L0C74:	lda     _pvy
	cmp     #$40
	lda     _pvy+1
	sbc     #$00
	bvc     L0C89
	eor     #$80
L0C89:	bpl     L0C87
;
; psprid = CELL_ASCENDING;
;
	lda     #$05
;
; else
;
	jmp     L1455
;
; psprid = CELL_DESCENDING; 
;
L0C87:	lda     #$06
L1455:	sta     _psprid
;
; psprid += pfacing;
;
	lda     _pfacing
	clc
	adc     _psprid
	sta     _psprid
;
; prx_old = prx;
;
	lda     _prx
	sta     _prx_old
;
; pry_old = pry;
;
	lda     _pry
	sta     _pry_old
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_kill (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_kill: near

.segment	"CODE"

;
; en_t [gpit] = 0;
;
	lda     #<(_en_t)
	ldx     #>(_en_t)
	ldy     #$00
	clc
	adc     (sp),y
	bcc     L0C98
	inx
L0C98:	sta     ptr1
	stx     ptr1+1
	tya
	sta     (ptr1),y
;
; pkilled ++;
;
	lda     _pkilled
	clc
	adc     #$01
	sta     _pkilled
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ enems_draw_chac_chac (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_draw_chac_chac: near

.segment	"CODE"

;
; map_set (en_x [gpit], en_y [gpit], a1);
;
	jsr     decsp3
	ldy     _gpit
	lda     _en_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _gpit
	lda     _en_y,y
	ldy     #$01
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	jsr     _map_set
;
; map_set (en_x [gpit], en_y [gpit] + 1, a2);
;
	jsr     decsp3
	ldy     _gpit
	lda     _en_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _gpit
	lda     _en_y,y
	clc
	adc     #$01
	ldy     #$01
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	jsr     _map_set
;
; map_set (en_x [gpit], en_y [gpit] + 2, a3);
;
	jsr     decsp3
	ldy     _gpit
	lda     _en_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _gpit
	lda     _en_y,y
	clc
	adc     #$02
	ldy     #$01
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	jsr     _map_set
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_enems + (n_pant << 2) + (n_pant << 3));
;
	ldx     #$00
	lda     _n_pant
	jsr     aslax2
	clc
	adc     _c_enems
	sta     ptr1
	txa
	adc     _c_enems+1
	sta     ptr1+1
	ldx     #$00
	lda     _n_pant
	jsr     aslax3
	clc
	adc     ptr1
	sta     _gp_gen
	txa
	adc     ptr1+1
	sta     _gp_gen+1
;
; gpit = 3; while (gpit --) {
;
	lda     #$03
	sta     _gpit
L0CBE:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	bne     L146C
;
; }
;
	rts
;
; en_t [gpit] = *gp_gen ++;
;
L146C:	lda     #<(_en_t)
	ldx     #>(_en_t)
	clc
	adc     _gpit
	bcc     L0CC3
	inx
L0CC3:	jsr     pushax
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0CC5
	inx
L0CC5:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	jsr     staspidx
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0CC8
	inx
L0CC8:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
;
; en_y1 [gpit] = rda & 0xf0;
;
	lda     #<(_en_y1)
	ldx     #>(_en_y1)
	clc
	adc     _gpit
	bcc     L0CCB
	inx
L0CCB:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	and     #$F0
	sta     (ptr1),y
;
; en_x1 [gpit] = rda << 4;
;
	lda     #<(_en_x1)
	ldx     #>(_en_x1)
	clc
	adc     _gpit
	bcc     L0CCF
	inx
L0CCF:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0CD3
	inx
L0CD3:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
;
; en_y2 [gpit] = rda & 0xf0;
;
	lda     #<(_en_y2)
	ldx     #>(_en_y2)
	clc
	adc     _gpit
	bcc     L0CD6
	inx
L0CD6:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	and     #$F0
	sta     (ptr1),y
;
; en_x2 [gpit] = rda << 4;
;
	lda     #<(_en_x2)
	ldx     #>(_en_x2)
	clc
	adc     _gpit
	bcc     L0CDA
	inx
L0CDA:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0CDE
	inx
L0CDE:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
;
; en_x [gpit] = en_x1 [gpit];
;
	lda     #<(_en_x)
	ldx     #>(_en_x)
	clc
	adc     _gpit
	bcc     L0CE1
	inx
L0CE1:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x1,y
	ldy     #$00
	sta     (ptr1),y
;
; en_y [gpit] = en_y1 [gpit];
;
	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _gpit
	bcc     L0CE7
	inx
L0CE7:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_y1,y
	ldy     #$00
	sta     (ptr1),y
;
; en_mx [gpit] = ADD_SIGN2 (en_x2 [gpit], en_x1 [gpit], rda);
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0CED
	inx
L0CED:	jsr     pushax
	ldy     _gpit
	ldx     #$00
	lda     _en_x2,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x1,y
	cpx     ptr1+1
	bne     L0CF6
	cmp     ptr1
	bne     L0CF6
	txa
	jmp     L0D06
L0CF6:	ldy     _gpit
	lda     _en_x2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_x1,y
	jsr     tosicmp0
	bcc     L0D03
	beq     L0D03
	lda     _rda
	jmp     L0D06
L0D03:	ldx     #$00
	lda     _rda
	jsr     negax
L0D06:	ldy     #$00
	jsr     staspidx
;
; en_my [gpit] = ADD_SIGN2 (en_y2 [gpit], en_y1 [gpit], rda);
;
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0D0C
	inx
L0D0C:	jsr     pushax
	ldy     _gpit
	ldx     #$00
	lda     _en_y2,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_y1,y
	cpx     ptr1+1
	bne     L0D15
	cmp     ptr1
	bne     L0D15
	txa
	jmp     L0D25
L0D15:	ldy     _gpit
	lda     _en_y2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_y1,y
	jsr     tosicmp0
	bcc     L0D22
	beq     L0D22
	lda     _rda
	jmp     L0D25
L0D22:	ldx     #$00
	lda     _rda
	jsr     negax
L0D25:	ldy     #$00
	jsr     staspidx
;
; switch (en_t [gpit]) {
;
	ldy     _gpit
	lda     _en_t,y
;
; }
;
	cmp     #$01
	beq     L0D35
	cmp     #$02
	beq     L0D35
	cmp     #$03
	beq     L0D35
	cmp     #$04
	beq     L0D35
	cmp     #$06
	jeq     L0D7A
	cmp     #$08
	jeq     L0D8F
	cmp     #$09
	jeq     L0DEF
	cmp     #$0A
	jeq     L0E01
	cmp     #$0B
	jeq     L0E20
	jmp     L0D2D
;
; en_s [gpit] = (en_t [gpit] - 1) << 2;
;
L0D35:	lda     #<(_en_s)
	ldx     #>(_en_s)
	clc
	adc     _gpit
	bcc     L0D38
	inx
L0D38:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_t,y
	sec
	sbc     #$01
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; if (rda == 1) {
;
	lda     _rda
	cmp     #$01
	bne     L0D3E
;
; en_status [gpit] = 1; 
;
	ldy     _gpit
	sta     _en_status,y
;
; } else {
;
	jmp     L0D44
;
; en_status [gpit] = 0;
;
L0D3E:	ldy     _gpit
	lda     #$00
	sta     _en_status,y
;
; en_mx [gpit] >>= 1;
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0D4B
	inx
L0D4B:	jsr     pushax
	ldy     #$00
	jsr     ldaidx
	jsr     asrax1
	jsr     staspidx
;
; en_my [gpit] >>= 1;
;
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0D4F
	inx
L0D4F:	jsr     pushax
	ldy     #$00
	jsr     ldaidx
	jsr     asrax1
	jsr     staspidx
;
; if (en_x1 [gpit] > en_x2 [gpit]) { rda = en_x1 [gpit]; en_x1 [gpit] = en_x2 [gpit]; en_x2 [gpit] = rda; }
;
L0D44:	ldy     _gpit
	lda     _en_x1,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_x2,y
	jsr     tosicmp0
	bcc     L0D51
	beq     L0D51
	ldy     _gpit
	lda     _en_x1,y
	sta     _rda
	lda     #<(_en_x1)
	ldx     #>(_en_x1)
	clc
	adc     _gpit
	bcc     L0D5D
	inx
L0D5D:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x2,y
	ldy     #$00
	sta     (ptr1),y
	ldy     _gpit
	lda     _rda
	sta     _en_x2,y
;
; if (en_y1 [gpit] > en_y2 [gpit]) { rda = en_y1 [gpit]; en_y1 [gpit] = en_y2 [gpit]; en_y2 [gpit] = rda; }
;
L0D51:	ldy     _gpit
	lda     _en_y1,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_y2,y
	jsr     tosicmp0
	jcc     L0D2D
	jeq     L0D2D
	ldy     _gpit
	lda     _en_y1,y
	sta     _rda
	lda     #<(_en_y1)
	ldx     #>(_en_y1)
	clc
	adc     _gpit
	bcc     L0D71
	inx
L0D71:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_y2,y
	ldy     #$00
	sta     (ptr1),y
	ldy     _gpit
	lda     _rda
	sta     _en_y2,y
;
; break;
;
	jmp     L0D2D
;
; enf_x [gpit] = en_x [gpit] << 6;
;
L0D7A:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L1467
	inx
	clc
L1467:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldy     _gpit
	ldx     #$00
	lda     _en_x,y
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_y [gpit] = en_y [gpit] << 6;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L1468
	inx
	clc
L1468:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	ldy     _gpit
	ldx     #$00
	lda     _en_y,y
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_vx [gpit] = enf_vy [gpit] = 0;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L1469
	inx
	clc
L1469:	adc     #<(_enf_vx)
	tay
	txa
	adc     #>(_enf_vx)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L146A
	inx
	clc
L146A:	adc     #<(_enf_vy)
	tay
	txa
	adc     #>(_enf_vy)
	tax
	tya
	jsr     pushax
	ldx     #$00
	txa
	tay
	jsr     staxspidx
	jsr     staxspidx
;
; en_alive [gpit] = 0; 
;
	ldy     _gpit
	sta     _en_alive,y
;
; break;
;
	jmp     L0D2D
;
; rda = ABS (en_mx [gpit]); if (!rda) rda = ABS (en_my [gpit]);
;
L0D8F:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0D95
	inx
L0D95:	ldy     #$00
	jsr     ldaidx
	asl     a
	bcc     L0D96
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0D9A
	inx
L0D9A:	jsr     ldaidx
	jsr     negax
L0DA0:	cmp     #$80
	bcc     L0DA1
	jmp     L0DA1
L0D96:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0D9F
	inx
L0D9F:	jsr     ldaidx
	cmp     #$80
	bcc     L0DA0
L0DA1:	sta     _rda
	lda     _rda
	bne     L0DA2
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0DA9
	inx
L0DA9:	jsr     ldaidx
	asl     a
	bcc     L0DAA
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0DAE
	inx
L0DAE:	jsr     ldaidx
	jsr     negax
L0DB4:	cmp     #$80
	bcc     L0DB5
	jmp     L0DB5
L0DAA:	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0DB3
	inx
L0DB3:	jsr     ldaidx
	cmp     #$80
	bcc     L0DB4
L0DB5:	sta     _rda
;
; rda --;
;
L0DA2:	lda     _rda
	sec
	sbc     #$01
	sta     _rda
;
; rdb = (en_x1 [gpit] != en_x2 [gpit]) ? 
;
	ldy     _gpit
	ldx     #$00
	lda     _en_x1,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x2,y
	cpx     ptr1+1
	bne     L146B
	cmp     ptr1
;
; SGNC (en_x2 [gpit], en_x1 [gpit], SAW_V_DISPL) :
;
	beq     L0DBE
L146B:	ldy     _gpit
	lda     _en_x2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_x1,y
	jsr     tosicmp0
	bcs     L1465
	lda     #$FC
	jmp     L0DD9
;
; SGNC (en_y2 [gpit], en_y1 [gpit], SAW_V_DISPL);
;
L0DBE:	ldy     _gpit
	lda     _en_y2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_y1,y
	jsr     tosicmp0
	bcs     L1465
	lda     #$FC
	jmp     L0DD9
L1465:	lda     #$04
L0DD9:	sta     _rdb
;
; en_my [gpit] = rda; // EMERGING SENSE
;
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0DDE
	inx
L0DDE:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	ldy     #$00
	sta     (ptr1),y
;
; en_mx [gpit] = rdb; // MOVING SENSE
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0DE3
	inx
L0DE3:	sta     ptr1
	stx     ptr1+1
	lda     _rdb
	sta     (ptr1),y
;
; en_alive [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _en_alive,y
;
; en_ct [gpit] = SAW_EMERGING_STEPS;
;
	ldy     _gpit
	lda     #$0A
	sta     _en_ct,y
;
; break;
;
	jmp     L0D2D
;
; en_my [gpit] = PEZON_WAIT + (rda << 3); // Speed in colocador defines idle time! (x8)
;
L0DEF:	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0DF2
	inx
L0DF2:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rda
	jsr     aslax3
	clc
	adc     #$32
	ldy     #$00
	sta     (ptr1),y
;
; en_alive [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_alive,y
;
; en_mx [gpit] = en_my [gpit];
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0DFC
	inx
L0DFC:	jsr     pushax
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0DFF
	inx
L0DFF:	ldy     #$00
	jsr     ldaidx
;
; break;
;
	jmp     L1466
;
; en_my [gpit] = (rda << 4); // IDLE_1
;
L0E01:	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0E04
	inx
L0E04:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; en_x [gpit] = en_x1 [gpit] >> 4;
;
	lda     #<(_en_x)
	ldx     #>(_en_x)
	clc
	adc     _gpit
	bcc     L0E09
	inx
L0E09:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	ldx     #$00
	lda     _en_x1,y
	jsr     asrax4
	ldy     #$00
	sta     (ptr1),y
;
; en_y [gpit] = (en_y1 [gpit] >> 4) - 1;
;
	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _gpit
	bcc     L0E0F
	inx
L0E0F:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	ldx     #$00
	lda     _en_y1,y
	jsr     asrax4
	sec
	sbc     #$01
	ldy     #$00
	sta     (ptr1),y
;
; en_alive [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_alive,y
;
; en_mx [gpit] = en_my [gpit];
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0E1B
	inx
L0E1B:	jsr     pushax
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0E1E
	inx
L0E1E:	ldy     #$00
	jsr     ldaidx
;
; break;
;
	jmp     L1466
;
; en_mx [gpit] = 0; en_my [gpit] = MONOCOCO_BASE_TIME_HIDDEN - (rand8 () & 0x15);
;
L0E20:	ldy     _gpit
	lda     #$00
	sta     _en_mx,y
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0E27
	inx
L0E27:	jsr     pushax
	lda     #$96
	jsr     pusha0
	jsr     _rand8
	and     #$15
	jsr     tossuba0
	ldy     #$00
L1466:	jsr     staspidx
;
; en_life [gpit] = en_t [gpit] == 6 ? FANTY_LIFE_GAUGE : ENEMIES_LIFE_GAUGE;
;
L0D2D:	lda     #<(_en_life)
	ldx     #>(_en_life)
	clc
	adc     _gpit
	bcc     L0E2C
	inx
L0E2C:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_t,y
	cmp     #$06
	bne     L0E30
	lda     #$05
	jmp     L0E32
L0E30:	lda     #$02
L0E32:	ldy     #$00
	sta     (ptr1),y
;
; en_cttouched [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_cttouched,y
;
; }
;
	jmp     L0CBE

.endproc

; ---------------------------------------------------------------
; void __near__ enems_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_move: near

.segment	"CODE"

;
; pgotten = pgtmx = pgtmy = 0;
;
	lda     #$00
	sta     _pgtmy
	sta     _pgtmy+1
	sta     _pgtmx
	sta     _pgtmx+1
	sta     _pgotten
;
; touched = 0;
;
	sta     _touched
;
; en_initial ++; if (en_initial >= 3) en_initial = 0;
;
	lda     _en_initial
	clc
	adc     #$01
	sta     _en_initial
	cmp     #$03
	bcc     L0E40
	lda     #$00
	sta     _en_initial
;
; gpit = en_initial;
;
L0E40:	lda     _en_initial
	sta     _gpit
;
; gpjt = 3; while (gpjt --) {
;
	lda     #$03
	sta     _gpjt
L0E48:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	bne     L14E5
;
; }
;
	rts
;
; gpit += 2; if (gpit > 2) gpit -=3;
;
L14E5:	lda     #$02
	clc
	adc     _gpit
	sta     _gpit
	cmp     #$03
	bcc     L0E4D
	lda     _gpit
	sec
	sbc     #$03
	sta     _gpit
;
; if (en_cttouched [gpit]) {
;
L0E4D:	ldy     _gpit
	lda     _en_cttouched,y
	beq     L0E51
;
; en_cttouched [gpit] --;
;
	lda     #<(_en_cttouched)
	ldx     #>(_en_cttouched)
	clc
	adc     _gpit
	bcc     L0E57
	inx
L0E57:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; en_x [gpit], en_y [gpit] + SPRITE_ADJUST, 
;
	jsr     decsp3
	ldy     _gpit
	lda     _en_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _gpit
	lda     _en_y,y
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L14A9
	sec
L14A9:	sbc     #$10
	bcs     L14AA
	sec
L14AA:	sbc     #$01
	ldy     #$01
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [SPRITE_BADDIE_DYING]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [SPRITE_BADDIE_DYING]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$43
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; continue;
;
	jmp     L0E48
;
; if (en_t [gpit]) {
;
L0E51:	ldy     _gpit
	lda     _en_t,y
	jeq     L0E48
;
; pregotten = (prx + 7 >= en_x [gpit] && prx <= en_x [gpit] + 15);
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L0E6E
	inx
L0E6E:	jsr     pushax
	ldy     _gpit
	lda     _en_x,y
	jsr     tosicmp0
	bcc     L0E71
	lda     _prx
	jsr     pusha0
	ldy     _gpit
	lda     _en_x,y
	clc
	adc     #$0F
	bcc     L0E74
	ldx     #$01
L0E74:	jsr     tosicmp
	bcc     L0E6D
	beq     L0E6D
L0E71:	lda     #$00
	jmp     L0E75
L0E6D:	lda     #$01
L0E75:	sta     _pregotten
;
; en_fr = ((((en_mx [gpit]) ? en_x [gpit] : en_y [gpit]) + 8) >> 4) & 1;
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0E7D
	inx
L0E7D:	ldy     #$00
	jsr     ldaidx
	beq     L0E7E
	ldy     _gpit
	lda     _en_x,y
	jmp     L14A4
L0E7E:	ldy     _gpit
	lda     _en_y,y
L14A4:	ldx     #$00
	clc
	adc     #$08
	bcc     L0E86
	inx
L0E86:	jsr     shrax4
	and     #$01
	sta     _en_fr
;
; en_spr = 0xff; 
;
	lda     #$FF
	sta     _en_spr
;
; switch (en_t [gpit]) {
;
	ldy     _gpit
	lda     _en_t,y
;
; }
;
	cmp     #$01
	beq     L0E95
	cmp     #$02
	beq     L0E95
	cmp     #$03
	beq     L0E95
	cmp     #$04
	beq     L0E95
	cmp     #$06
	jeq     L0EDC
	cmp     #$08
	jeq     L1000
	cmp     #$09
	jeq     L10C1
	cmp     #$0A
	jeq     L111A
	cmp     #$0B
	jeq     L11A7
	jmp     L0E8D
;
; if (!en_status [gpit] || half_life) {
;
L0E95:	ldy     _gpit
	lda     _en_status,y
	beq     L0E97
	lda     _half_life
	jeq     L0E96
;
; en_x [gpit] += en_mx [gpit];
;
L0E97:	lda     #<(_en_x)
	ldx     #>(_en_x)
	clc
	adc     _gpit
	bcc     L0E9D
	inx
L0E9D:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0EA0
	inx
L0EA0:	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$00
	jsr     staspidx
;
; en_y [gpit] += en_my [gpit];
;
	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _gpit
	bcc     L0EA3
	inx
L0EA3:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0EA6
	inx
L0EA6:	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$00
	jsr     staspidx
;
; if (en_x [gpit] == en_x1 [gpit] || en_x [gpit] == en_x2 [gpit]) en_mx [gpit] = -en_mx [gpit];
;
	ldy     _gpit
	ldx     #$00
	lda     _en_x,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x1,y
	cpx     ptr1+1
	bne     L14DD
	cmp     ptr1
	beq     L0EA8
L14DD:	ldy     _gpit
	lda     _en_x,y
	sta     ptr1
	ldy     _gpit
	lda     _en_x2,y
	cpx     ptr1+1
	bne     L0EA7
	cmp     ptr1
	bne     L0EA7
L0EA8:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0EB4
	inx
L0EB4:	jsr     pushax
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0EB7
	inx
L0EB7:	ldy     #$00
	jsr     ldaidx
	jsr     negax
	jsr     staspidx
;
; if (en_y [gpit] == en_y1 [gpit] || en_y [gpit] == en_y2 [gpit]) en_my [gpit] = -en_my [gpit];      
;
L0EA7:	ldy     _gpit
	ldx     #$00
	lda     _en_y,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_y1,y
	cpx     ptr1+1
	bne     L14DF
	cmp     ptr1
	beq     L0EB9
L14DF:	ldy     _gpit
	lda     _en_y,y
	sta     ptr1
	ldy     _gpit
	lda     _en_y2,y
	cpx     ptr1+1
	bne     L0E96
	cmp     ptr1
	bne     L0E96
L0EB9:	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0EC5
	inx
L0EC5:	jsr     pushax
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0EC8
	inx
L0EC8:	ldy     #$00
	jsr     ldaidx
	jsr     negax
	jsr     staspidx
;
; en_facing = (en_mx [gpit] > 0 || en_my [gpit] > 0) ? 0 : 2;
;
L0E96:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L0ECD
	inx
L0ECD:	ldy     #$00
	jsr     ldaidx
	sec
	sbc     #$01
	bvs     L0ECE
	eor     #$80
L0ECE:	bmi     L0ECB
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L0ED0
	inx
L0ED0:	jsr     ldaidx
	sec
	sbc     #$01
	bvs     L0ED1
	eor     #$80
L0ED1:	bpl     L0ED3
L0ECB:	tya
	jmp     L0ED5
L0ED3:	lda     #$02
L0ED5:	sta     _en_facing
;
; en_spr = en_s [gpit] + en_fr + en_facing;
;
	ldy     _gpit
	lda     _en_s,y
	clc
	adc     _en_fr
	bcc     L14AB
	clc
L14AB:	adc     _en_facing
;
; break;
;
	jmp     L14E1
;
; rdx = en_x [gpit]; rdy = en_y [gpit]; rdt = distance ();
;
L0EDC:	ldy     _gpit
	lda     _en_x,y
	sta     _rdx
	ldy     _gpit
	lda     _en_y,y
	sta     _rdy
	jsr     _distance
	sta     _rdt
;
; switch (en_alive [gpit]) {
;
	ldy     _gpit
	lda     _en_alive,y
;
; }
;
	beq     L0EED
	cmp     #$01
	jeq     L0F07
	jmp     L0EEB
;
; enf_vx [gpit] = add_sign (en_x1 [gpit] - en_x [gpit], FANTY_V_RETREAT);
;
L0EED:	tax
	lda     _gpit
	asl     a
	bcc     L14AC
	inx
	clc
L14AC:	adc     #<(_enf_vx)
	tay
	txa
	adc     #>(_enf_vx)
	tax
	tya
	jsr     pushax
	jsr     decsp4
	ldy     _gpit
	lda     _en_x1,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_x,y
	jsr     tossuba0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _add_sign
	ldy     #$00
	jsr     staxspidx
;
; enf_vy [gpit] = add_sign (en_y1 [gpit] - en_y [gpit], FANTY_V_RETREAT);
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14AD
	inx
	clc
L14AD:	adc     #<(_enf_vy)
	tay
	txa
	adc     #>(_enf_vy)
	tax
	tya
	jsr     pushax
	jsr     decsp4
	ldy     _gpit
	lda     _en_y1,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_y,y
	jsr     tossuba0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _add_sign
	ldy     #$00
	jsr     staxspidx
;
; if (rdt < FANTY_DISTANCE) en_alive [gpit] = 1;
;
	lda     _rdt
	cmp     #$50
	jcs     L0EEB
	ldy     _gpit
	lda     #$01
;
; break;
;
	jmp     L14A5
;
; enf_vx [gpit] = saturate (enf_vx [gpit] + add_sign (prx - en_x [gpit], FANTY_A), FANTY_MAXV);
;
L0F07:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14AE
	inx
	clc
L14AE:	adc     #<(_enf_vx)
	tay
	txa
	adc     #>(_enf_vx)
	tax
	tya
	jsr     pushax
	jsr     decsp4
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14AF
	inx
	clc
L14AF:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	jsr     decsp4
	lda     _prx
	jsr     pusha0
	ldy     _gpit
	lda     _en_x,y
	jsr     tossuba0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _add_sign
	jsr     tosaddax
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$30
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _saturate
	ldy     #$00
	jsr     staxspidx
;
; enf_vy [gpit] = saturate (enf_vy [gpit] + add_sign (pry - en_y [gpit], FANTY_A), FANTY_MAXV);
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14B0
	inx
	clc
L14B0:	adc     #<(_enf_vy)
	tay
	txa
	adc     #>(_enf_vy)
	tax
	tya
	jsr     pushax
	jsr     decsp4
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14B1
	inx
	clc
L14B1:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	jsr     decsp4
	lda     _pry
	jsr     pusha0
	ldy     _gpit
	lda     _en_y,y
	jsr     tossuba0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$04
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _add_sign
	jsr     tosaddax
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$30
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _saturate
	ldy     #$00
	jsr     staxspidx
;
; if (rdt > FANTY_DISTANCE) {
;
	lda     _rdt
	cmp     #$51
	bcc     L0EEB
;
; enf_x [gpit] = en_x [gpit] << 6;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14B2
	inx
	clc
L14B2:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldy     _gpit
	ldx     #$00
	lda     _en_x,y
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_y [gpit] = en_y [gpit] << 6;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14B3
	inx
	clc
L14B3:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	ldy     _gpit
	ldx     #$00
	lda     _en_y,y
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; en_alive [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
L14A5:	sta     _en_alive,y
;
; enf_x [gpit] += enf_vx [gpit]; 
;
L0EEB:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14B4
	inx
	clc
L14B4:	adc     #<(_enf_x)
	tay
	txa
	adc     #>(_enf_x)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14B5
	inx
	clc
L14B5:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; if (enf_x [gpit] < 0) enf_x [gpit] = 0;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14B6
	inx
	clc
L14B6:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	cpx     #$80
	bcc     L0F30
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14B7
	inx
	clc
L14B7:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; if (enf_x [gpit] > 15360) enf_x [gpit] = 15360;
;
L0F30:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14B8
	inx
	clc
L14B8:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$3C
	bvs     L0F39
	eor     #$80
L0F39:	bpl     L0F36
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14B9
	inx
	clc
L14B9:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	tya
	sta     (ptr1),y
	iny
	lda     #$3C
	sta     (ptr1),y
;
; en_x [gpit] = enf_x [gpit] >> 6;
;
L0F36:	lda     #<(_en_x)
	ldx     #>(_en_x)
	clc
	adc     _gpit
	bcc     L0F3F
	inx
L0F3F:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14BA
	inx
	clc
L14BA:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     (sreg),y
;
; if (enf_vx [gpit]) {
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14BB
	inx
	clc
L14BB:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	jeq     L0F71
;
; cy1 = (en_y [gpit] + 4) >> 4;
;
	ldy     _gpit
	ldx     #$00
	lda     _en_y,y
	clc
	adc     #$04
	bcc     L0F4A
	inx
L0F4A:	jsr     shrax4
	sta     _cy1
;
; cy2 = (en_y [gpit] + 11) >> 4;
;
	ldy     _gpit
	ldx     #$00
	lda     _en_y,y
	clc
	adc     #$0B
	bcc     L0F50
	inx
L0F50:	jsr     shrax4
	sta     _cy2
;
; if (enf_vx [gpit] > 0) {
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14BC
	inx
	clc
L14BC:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0F54
	eor     #$80
L0F54:	bpl     L0F51
;
; cx1 = cx2 = (en_x [gpit] + 11) >> 4;
;
	ldy     _gpit
	ldx     #$00
	lda     _en_x,y
	clc
	adc     #$0B
	bcc     L0F5B
	inx
L0F5B:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cx2
	sec
	sbc     #$01
	bcs     L0F60
	dex
L0F60:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L14A6
;
; cx1 = cx2 = (en_x [gpit] + 4) >> 4;
;
L0F51:	ldy     _gpit
	ldx     #$00
	lda     _en_x,y
	clc
	adc     #$04
	bcc     L0F69
	inx
L0F69:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cx1
	clc
	adc     #$01
	bcc     L0F6E
	inx
L0F6E:	jsr     shlax4
	sec
	sbc     #$04
L14A6:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (FANTY_OBSTACLE (at1) || FANTY_OBSTACLE (at2)) {
;
	lda     _at1
	cmp     #$02
	bcs     L0F72
	lda     _at2
	cmp     #$02
	bcc     L0F71
;
; enf_vx [gpit] = -enf_vx [gpit];
;
L0F72:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14BD
	inx
	clc
L14BD:	adc     #<(_enf_vx)
	sta     sreg
	txa
	adc     #>(_enf_vx)
	sta     sreg+1
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14BE
	inx
	clc
L14BE:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     negax
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; en_x [gpit] = rda; 
;
	ldy     _gpit
	lda     _rda
	sta     _en_x,y
;
; enf_x [gpit] = rda << 6;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14BF
	inx
	clc
L14BF:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_y [gpit] += enf_vy [gpit]; 
;
L0F71:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14C0
	inx
	clc
L14C0:	adc     #<(_enf_y)
	tay
	txa
	adc     #>(_enf_y)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14C1
	inx
	clc
L14C1:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; if (enf_y [gpit] < 0) enf_y [gpit] = 0;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14C2
	inx
	clc
L14C2:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	cpx     #$80
	bcc     L0F87
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14C3
	inx
	clc
L14C3:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; if (enf_y [gpit] > 11264) enf_y [gpit] = 11264;
;
L0F87:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14C4
	inx
	clc
L14C4:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$2C
	bvs     L0F90
	eor     #$80
L0F90:	bpl     L0F8D
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14C5
	inx
	clc
L14C5:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	tya
	sta     (ptr1),y
	iny
	lda     #$2C
	sta     (ptr1),y
;
; en_y [gpit] = enf_y [gpit] >> 6;
;
L0F8D:	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _gpit
	bcc     L0F96
	inx
L0F96:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14C6
	inx
	clc
L14C6:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     (sreg),y
;
; if (enf_vy [gpit]) {
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14C7
	inx
	clc
L14C7:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	jeq     L0F99
;
; cx1 = (en_x [gpit] + 4) >> 4;
;
	ldy     _gpit
	ldx     #$00
	lda     _en_x,y
	clc
	adc     #$04
	bcc     L0FA1
	inx
L0FA1:	jsr     shrax4
	sta     _cx1
;
; cx2 = (en_x [gpit] + 11) >> 4;
;
	ldy     _gpit
	ldx     #$00
	lda     _en_x,y
	clc
	adc     #$0B
	bcc     L0FA7
	inx
L0FA7:	jsr     shrax4
	sta     _cx2
;
; if (enf_vy [gpit] > 0) { 
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14C8
	inx
	clc
L14C8:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0FAB
	eor     #$80
L0FAB:	bpl     L0FA8
;
; cy1 = cy2 = (en_y [gpit] + 11) >> 4;
;
	ldy     _gpit
	ldx     #$00
	lda     _en_y,y
	clc
	adc     #$0B
	bcc     L0FB2
	inx
L0FB2:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L0FB7
	dex
L0FB7:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L14A7
;
; cy1 = cy2 = (en_y [gpit] + 4) >> 4;
;
L0FA8:	ldy     _gpit
	ldx     #$00
	lda     _en_y,y
	clc
	adc     #$04
	bcc     L0FC0
	inx
L0FC0:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L0FC5
	inx
L0FC5:	jsr     shlax4
	sec
	sbc     #$04
L14A7:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (FANTY_OBSTACLE (at1) || FANTY_OBSTACLE (at2)) {
;
	lda     _at1
	cmp     #$02
	bcs     L0FC9
	lda     _at2
	cmp     #$02
	bcc     L0F99
;
; enf_vy [gpit] = -enf_vy [gpit];
;
L0FC9:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14C9
	inx
	clc
L14C9:	adc     #<(_enf_vy)
	sta     sreg
	txa
	adc     #>(_enf_vy)
	sta     sreg+1
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14CA
	inx
	clc
L14CA:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     negax
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; en_y [gpit] = rda;
;
	ldy     _gpit
	lda     _rda
	sta     _en_y,y
;
; enf_y [gpit] = rda << 6;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14CB
	inx
	clc
L14CB:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; cx1 = (en_x [gpit] + 8) >> 4;
;
L0F99:	ldy     _gpit
	ldx     #$00
	lda     _en_x,y
	clc
	adc     #$08
	bcc     L0FDF
	inx
L0FDF:	jsr     shrax4
	sta     _cx1
;
; cy1 = (en_y [gpit] + 8) >> 4;
;
	ldy     _gpit
	ldx     #$00
	lda     _en_y,y
	clc
	adc     #$08
	bcc     L0FE5
	inx
L0FE5:	jsr     shrax4
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (at1 & 1) {
;
	lda     _at1
	and     #$01
	beq     L0FE7
;
; en_cttouched [gpit] = 8;
;
	ldy     _gpit
	lda     #$08
	sta     _en_cttouched,y
;
; enems_kill (gpit);
;
	lda     _gpit
	jsr     pusha
	jsr     _enems_kill
;
; en_fr = (en_x [gpit] >> 3) & 1;
;
L0FE7:	ldy     _gpit
	ldx     #$00
	lda     _en_x,y
	jsr     asrax3
	and     #$01
	sta     _en_fr
;
; en_spr = FANTY_BASE_SPRID + en_fr + ((en_x [gpit] < prx) ? 0 : 2);
;
	clc
	adc     #$10
	sta     ptr1
	ldy     _gpit
	lda     _en_x,y
	cmp     _prx
	bcs     L0FFB
	lda     #$00
	jmp     L0FFD
L0FFB:	lda     #$02
L0FFD:	clc
	adc     ptr1
	jcc     L14E1
;
; break;
;
	jmp     L14E1
;
; rda = (en_x1 [gpit] == en_x2 [gpit]);
;
L1000:	ldy     _gpit
	ldx     #$00
	lda     _en_x1,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x2,y
	cpx     ptr1+1
	bne     L149D
	cmp     ptr1
L149D:	jsr     booleq
	sta     _rda
;
; switch (en_alive [gpit]) {
;
	ldy     _gpit
	lda     _en_alive,y
;
; }
;
	beq     L100E
	cmp     #$01
	jeq     L103B
	cmp     #$02
	jeq     L1057
	cmp     #$03
	jeq     L1084
	jmp     L100C
;
; if (rda) {
;
L100E:	lda     _rda
	beq     L100F
;
; en_y [gpit] -= en_mx [gpit];
;
	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _gpit
	bcc     L1013
	inx
L1013:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L1016
	inx
L1016:	ldy     #$00
	jsr     ldaidx
	jsr     tossubax
	ldy     #$00
	jsr     staspidx
;
; if (en_y [gpit] == en_y1 [gpit]) {
;
	ldy     _gpit
	ldx     #$00
	lda     _en_y,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_y1,y
	cpx     ptr1+1
	jne     L100C
	cmp     ptr1
	jne     L100C
;
; en_alive [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _en_alive,y
;
; en_ct [gpit] = SAW_EMERGING_STEPS;
;
	ldy     _gpit
	lda     #$0A
	sta     _en_ct,y
;
; } else {
;
	jmp     L100C
;
; en_x [gpit] -= en_mx [gpit];
;
L100F:	lda     #<(_en_x)
	ldx     #>(_en_x)
	clc
	adc     _gpit
	bcc     L1028
	inx
L1028:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L102B
	inx
L102B:	ldy     #$00
	jsr     ldaidx
	jsr     tossubax
	ldy     #$00
	jsr     staspidx
;
; if (en_x [gpit] == en_x1 [gpit]) {
;
	ldy     _gpit
	ldx     #$00
	lda     _en_x,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x1,y
	cpx     ptr1+1
	jne     L100C
	cmp     ptr1
	jne     L100C
;
; en_alive [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _en_alive,y
;
; en_ct [gpit] = SAW_EMERGING_STEPS;
;
	ldy     _gpit
	lda     #$0A
	sta     _en_ct,y
;
; break;
;
	jmp     L100C
;
; if (half_life) {
;
L103B:	lda     _half_life
	jeq     L100C
;
; if (en_ct [gpit] --) {
;
	lda     #<(_en_ct)
	ldx     #>(_en_ct)
	clc
	adc     _gpit
	bcc     L1041
	inx
L1041:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	pha
	sec
	sbc     #$01
	sta     (sreg),y
	pla
	tax
	beq     L103E
;
; if (rda) {
;
	lda     _rda
	beq     L1042
;
; en_x [gpit] += en_my [gpit];
;
	lda     #<(_en_x)
	ldx     #>(_en_x)
	clc
	adc     _gpit
	bcc     L1046
	inx
L1046:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L1049
	inx
L1049:	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$00
	jsr     staspidx
;
; } else {
;
	jmp     L100C
;
; en_y [gpit] += en_my [gpit];
;
L1042:	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _gpit
	bcc     L104D
	inx
L104D:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L1050
	inx
L1050:	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$00
	jsr     staspidx
;
; } else {
;
	jmp     L100C
;
; en_alive [gpit] = 2;
;
L103E:	ldy     _gpit
	lda     #$02
;
; break;
;
	jmp     L14E2
;
; if (rda) {
;
L1057:	lda     _rda
	beq     L1058
;
; en_y [gpit] += en_mx [gpit];
;
	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _gpit
	bcc     L105C
	inx
L105C:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L105F
	inx
L105F:	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$00
	jsr     staspidx
;
; if (en_y [gpit] == en_y2 [gpit]) {
;
	ldy     _gpit
	ldx     #$00
	lda     _en_y,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_y2,y
	cpx     ptr1+1
	jne     L100C
	cmp     ptr1
	jne     L100C
;
; en_alive [gpit] = 3;
;
	ldy     _gpit
	lda     #$03
	sta     _en_alive,y
;
; en_ct [gpit] = SAW_EMERGING_STEPS;
;
	ldy     _gpit
	lda     #$0A
	sta     _en_ct,y
;
; } else {
;
	jmp     L100C
;
; en_x [gpit] += en_mx [gpit];
;
L1058:	lda     #<(_en_x)
	ldx     #>(_en_x)
	clc
	adc     _gpit
	bcc     L1071
	inx
L1071:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L1074
	inx
L1074:	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$00
	jsr     staspidx
;
; if (en_x [gpit] == en_x2 [gpit]) {
;
	ldy     _gpit
	ldx     #$00
	lda     _en_x,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x2,y
	cpx     ptr1+1
	jne     L100C
	cmp     ptr1
	jne     L100C
;
; en_alive [gpit] = 3;
;
	ldy     _gpit
	lda     #$03
	sta     _en_alive,y
;
; en_ct [gpit] = SAW_EMERGING_STEPS;
;
	ldy     _gpit
	lda     #$0A
	sta     _en_ct,y
;
; break;
;
	jmp     L100C
;
; if (half_life) {
;
L1084:	lda     _half_life
	jeq     L100C
;
; if (en_ct [gpit] --) {
;
	lda     #<(_en_ct)
	ldx     #>(_en_ct)
	clc
	adc     _gpit
	bcc     L108A
	inx
L108A:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	pha
	sec
	sbc     #$01
	sta     (sreg),y
	pla
	tax
	beq     L1087
;
; if (rda) {
;
	lda     _rda
	beq     L108B
;
; en_x [gpit] -= en_my [gpit];
;
	lda     #<(_en_x)
	ldx     #>(_en_x)
	clc
	adc     _gpit
	bcc     L108F
	inx
L108F:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L1092
	inx
L1092:	ldy     #$00
	jsr     ldaidx
	jsr     tossubax
	ldy     #$00
	jsr     staspidx
;
; } else {
;
	jmp     L100C
;
; en_y [gpit] -= en_my [gpit];
;
L108B:	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _gpit
	bcc     L1096
	inx
L1096:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L1099
	inx
L1099:	ldy     #$00
	jsr     ldaidx
	jsr     tossubax
	ldy     #$00
	jsr     staspidx
;
; } else {
;
	jmp     L100C
;
; en_alive [gpit] = 0;
;
L1087:	ldy     _gpit
L14E2:	sta     _en_alive,y
;
; if (rda) {
;
L100C:	lda     _rda
	beq     L109F
;
; rdx = en_x1 [gpit]; rdy = en_y [gpit];
;
	ldy     _gpit
	lda     _en_x1,y
	sta     _rdx
	ldy     _gpit
	lda     _en_y,y
;
; } else {
;
	jmp     L14A8
;
; rdx = en_x [gpit]; rdy = en_y1 [gpit];
;
L109F:	ldy     _gpit
	lda     _en_x,y
	sta     _rdx
	ldy     _gpit
	lda     _en_y1,y
L14A8:	sta     _rdy
;
; rdx, rdy + SPRITE_ADJUST,
;
	jsr     decsp3
	lda     _rdx
	ldy     #$02
	sta     (sp),y
	lda     _rdy
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L14CC
	sec
L14CC:	sbc     #$10
	bcs     L14CD
	sec
L14CD:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_OCCLUDING_FRAME]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_OCCLUDING_FRAME]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$41
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; en_spr = SAW_BASE_SPRID + half_life;
;
	lda     _half_life
	clc
	adc     #$16
;
; break;
;
	jmp     L14E1
;
; en_x1 [gpit], en_y1 [gpit] + SPRITE_ADJUST, 
;
L10C1:	jsr     decsp3
	ldy     _gpit
	lda     _en_x1,y
	ldy     #$02
	sta     (sp),y
	ldy     _gpit
	lda     _en_y1,y
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L14CE
	sec
L14CE:	sbc     #$10
	bcs     L14CF
	sec
L14CF:	sbc     #$01
	ldy     #$01
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_OCCLUDING_FRAME]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_OCCLUDING_FRAME]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$41
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; switch (en_alive [gpit]) {
;
	ldy     _gpit
	lda     _en_alive,y
;
; }
;
	beq     L10D7
	cmp     #$01
	jeq     L10ED
	jmp     L0E8D
;
; if (en_mx [gpit]) {
;
L10D7:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L10DB
	inx
L10DB:	ldy     #$00
	jsr     ldaidx
	beq     L10D8
;
; en_mx [gpit] --;
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L10DE
	inx
L10DE:	jsr     pushax
	ldy     #$00
	jsr     ldaidx
	sec
	sbc     #$01
	jsr     staspidx
;
; } else {
;
	jmp     L0E8D
;
; en_alive [gpit] = 1;
;
L10D8:	ldy     _gpit
	lda     #$01
	sta     _en_alive,y
;
; enf_y [gpit] = en_y1 [gpit] << 6;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14D0
	inx
	clc
L14D0:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	ldy     _gpit
	ldx     #$00
	lda     _en_y1,y
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_vy [gpit] = -PEZON_THRUST;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14D1
	inx
	clc
L14D1:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	lda     #$80
	dey
	sta     (ptr1),y
	iny
	lda     #$FE
	sta     (ptr1),y
;
; break;
;
	jmp     L0E8D
;
; enf_vy [gpit] += PEZON_G;
;
L10ED:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14D2
	inx
	clc
L14D2:	adc     #<(_enf_vy)
	tay
	txa
	adc     #>(_enf_vy)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     #$10
	bcc     L10F1
	inx
L10F1:	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; if (enf_vy [gpit] > PEZON_VY_FALLING_MAX) enf_vy [gpit] = PEZON_VY_FALLING_MAX;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14D3
	inx
	clc
L14D3:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$01
	bvs     L10F5
	eor     #$80
L10F5:	bpl     L10F2
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14D4
	inx
	clc
L14D4:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	tya
	sta     (ptr1),y
	iny
	tya
	sta     (ptr1),y
;
; enf_y [gpit] += enf_vy [gpit];
;
L10F2:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14D5
	inx
	clc
L14D5:	adc     #<(_enf_y)
	tay
	txa
	adc     #>(_enf_y)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14D6
	inx
	clc
L14D6:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; en_y [gpit] = enf_y [gpit] >> 6;
;
	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _gpit
	bcc     L10FF
	inx
L10FF:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14D7
	inx
	clc
L14D7:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     (sreg),y
;
; if (en_y [gpit] >= en_y1 [gpit]) {
;
	ldy     _gpit
	lda     _en_y,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_y1,y
	jsr     tosicmp0
	bcc     L1102
;
; en_alive [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_alive,y
;
; en_mx [gpit] = en_my [gpit];
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L110E
	inx
L110E:	jsr     pushax
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L1111
	inx
L1111:	ldy     #$00
	jsr     ldaidx
	jsr     staspidx
;
; } else {
;
	jmp     L0E8D
;
; en_spr = PEZONS_BASE_SPRID + (enf_vy [gpit] >= -64);
;
L1102:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L14D8
	inx
	clc
L14D8:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$C0
	txa
	sbc     #$FF
	bvs     L1117
	eor     #$80
L1117:	asl     a
	tya
	rol     a
	clc
	adc     #$14
;
; break;
;
	jmp     L14E1
;
; switch (en_alive [gpit]) {
;
L111A:	ldy     _gpit
	lda     _en_alive,y
;
; }
;
	beq     L1121
	cmp     #$01
	beq     L1137
	cmp     #$02
	jeq     L114D
	cmp     #$03
	jeq     L1163
	cmp     #$04
	jeq     L1179
	cmp     #$05
	jeq     L118F
	jmp     L0E8D
;
; if (en_mx [gpit]) en_mx [gpit] --; else {
;
L1121:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L1125
	inx
L1125:	ldy     #$00
	jsr     ldaidx
	beq     L1122
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L1128
	inx
L1128:	jsr     pushax
	ldy     #$00
	jsr     ldaidx
	sec
	sbc     #$01
	jsr     staspidx
	jmp     L0E8D
;
; enems_draw_chac_chac (CHAC_CHAC_BASE_TILE, CHAC_CHAC_BASE_TILE + 6, CHAC_CHAC_BASE_TILE + 1);
;
L1122:	jsr     decsp3
	lda     #$10
	ldy     #$02
	sta     (sp),y
	lda     #$16
	dey
	sta     (sp),y
	lda     #$11
	dey
	sta     (sp),y
	jsr     _enems_draw_chac_chac
;
; en_mx [gpit] = CHAC_CHAC_IDLE_2;
;
	ldy     _gpit
	lda     #$10
	sta     _en_mx,y
;
; en_alive [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _en_alive,y
;
; break;
;
	jmp     L0E8D
;
; if (en_mx [gpit]) en_mx [gpit] --; else {
;
L1137:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L113B
	inx
L113B:	ldy     #$00
	jsr     ldaidx
	beq     L1138
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L113E
	inx
L113E:	jsr     pushax
	ldy     #$00
	jsr     ldaidx
	sec
	sbc     #$01
	jsr     staspidx
	jmp     L0E8D
;
; enems_draw_chac_chac (CHAC_CHAC_BASE_TILE + 2, CHAC_CHAC_BASE_TILE + 6, CHAC_CHAC_BASE_TILE + 3);
;
L1138:	jsr     decsp3
	lda     #$12
	ldy     #$02
	sta     (sp),y
	lda     #$16
	dey
	sta     (sp),y
	lda     #$13
	dey
	sta     (sp),y
	jsr     _enems_draw_chac_chac
;
; en_mx [gpit] = CHAC_CHAC_IDLE_3;
;
	ldy     _gpit
	lda     #$01
	sta     _en_mx,y
;
; en_alive [gpit] = 2;
;
	ldy     _gpit
	lda     #$02
	sta     _en_alive,y
;
; break;
;
	jmp     L0E8D
;
; if (en_mx [gpit]) en_mx [gpit] --; else {
;
L114D:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L1151
	inx
L1151:	ldy     #$00
	jsr     ldaidx
	beq     L114E
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L1154
	inx
L1154:	jsr     pushax
	ldy     #$00
	jsr     ldaidx
	sec
	sbc     #$01
	jsr     staspidx
	jmp     L0E8D
;
; enems_draw_chac_chac (CHAC_CHAC_BASE_TILE + 5, CHAC_CHAC_BASE_TILE + 4, CHAC_CHAC_BASE_TILE + 5);
;
L114E:	jsr     decsp3
	lda     #$15
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #$15
	dey
	sta     (sp),y
	jsr     _enems_draw_chac_chac
;
; en_mx [gpit] = CHAC_CHAC_IDLE_4;
;
	ldy     _gpit
	lda     #$32
	sta     _en_mx,y
;
; en_alive [gpit] = 3;
;
	ldy     _gpit
	lda     #$03
	sta     _en_alive,y
;
; break;
;
	jmp     L0E8D
;
; if (en_mx [gpit]) en_mx [gpit] --; else {
;
L1163:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L1167
	inx
L1167:	ldy     #$00
	jsr     ldaidx
	beq     L1164
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L116A
	inx
L116A:	jsr     pushax
	ldy     #$00
	jsr     ldaidx
	sec
	sbc     #$01
	jsr     staspidx
	jmp     L0E8D
;
; enems_draw_chac_chac (CHAC_CHAC_BASE_TILE + 2, CHAC_CHAC_BASE_TILE + 6, CHAC_CHAC_BASE_TILE + 3);
;
L1164:	jsr     decsp3
	lda     #$12
	ldy     #$02
	sta     (sp),y
	lda     #$16
	dey
	sta     (sp),y
	lda     #$13
	dey
	sta     (sp),y
	jsr     _enems_draw_chac_chac
;
; en_mx [gpit] = CHAC_CHAC_IDLE_3;
;
	ldy     _gpit
	lda     #$01
	sta     _en_mx,y
;
; en_alive [gpit] = 4;
;
	ldy     _gpit
	lda     #$04
	sta     _en_alive,y
;
; break;
;
	jmp     L0E8D
;
; if (en_mx [gpit]) en_mx [gpit] --; else {
;
L1179:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L117D
	inx
L117D:	ldy     #$00
	jsr     ldaidx
	beq     L117A
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L1180
	inx
L1180:	jsr     pushax
	ldy     #$00
	jsr     ldaidx
	sec
	sbc     #$01
	jsr     staspidx
	jmp     L0E8D
;
; enems_draw_chac_chac (CHAC_CHAC_BASE_TILE, CHAC_CHAC_BASE_TILE + 6, CHAC_CHAC_BASE_TILE + 1);
;
L117A:	jsr     decsp3
	lda     #$10
	ldy     #$02
	sta     (sp),y
	lda     #$16
	dey
	sta     (sp),y
	lda     #$11
	dey
	sta     (sp),y
	jsr     _enems_draw_chac_chac
;
; en_mx [gpit] = CHAC_CHAC_IDLE_3;
;
	ldy     _gpit
	lda     #$01
	sta     _en_mx,y
;
; en_alive [gpit] = 5;
;
	ldy     _gpit
	lda     #$05
	sta     _en_alive,y
;
; break;
;
	jmp     L0E8D
;
; if (en_mx [gpit]) en_mx [gpit] --; else {
;
L118F:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L1193
	inx
L1193:	ldy     #$00
	jsr     ldaidx
	beq     L1190
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L1196
	inx
L1196:	jsr     pushax
	ldy     #$00
	jsr     ldaidx
	sec
	sbc     #$01
	jsr     staspidx
	jmp     L0E8D
;
; enems_draw_chac_chac (CHAC_CHAC_BASE_TILE + 6, CHAC_CHAC_BASE_TILE + 6, CHAC_CHAC_BASE_TILE + 6);
;
L1190:	jsr     decsp3
	lda     #$16
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	jsr     _enems_draw_chac_chac
;
; en_mx [gpit] = en_my [gpit];
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L119E
	inx
L119E:	jsr     pushax
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L11A1
	inx
L11A1:	ldy     #$00
	jsr     ldaidx
	jsr     staspidx
;
; en_alive [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_alive,y
;
; break;
;
	jmp     L0E8D
;
; MONOCOCO_COUNTER [gpit] --; if (!MONOCOCO_COUNTER [gpit]) {
;
L11A7:	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L11AA
	inx
L11AA:	jsr     pushax
	ldy     #$00
	jsr     ldaidx
	sec
	sbc     #$01
	jsr     staspidx
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L11AE
	inx
L11AE:	ldy     #$00
	jsr     ldaidx
	tax
	bne     L11AB
;
; MONOCOCO_STATE [gpit] = (MONOCOCO_STATE [gpit] + 1) & 3; MONOCOCO_COUNTER [gpit] = monococo_state_times [MONOCOCO_STATE [gpit]] - (rand8 () & 0x15);
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L11B1
	inx
L11B1:	jsr     pushax
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L11B5
	inx
L11B5:	ldy     #$00
	jsr     ldaidx
	clc
	adc     #$01
	and     #$03
	jsr     staspidx
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L11B9
	inx
L11B9:	jsr     pushax
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L11BD
	inx
L11BD:	ldy     #$00
	jsr     ldaidx
	sta     ptr1
	txa
	clc
	adc     #>(_monococo_state_times)
	sta     ptr1+1
	ldy     #<(_monococo_state_times)
	lda     (ptr1),y
	jsr     pusha0
	jsr     _rand8
	and     #$15
	jsr     tossuba0
	ldy     #$00
	jsr     staspidx
;
; if (MONOCOCO_STATE [gpit] == 2 && MONOCOCO_COUNTER [gpit] == MONOCOCO_FIRE_COCO_AT) {
;
L11AB:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L11C2
	inx
L11C2:	ldy     #$00
	jsr     ldaidx
	cmp     #$02
	bne     L11BF
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L11C5
	inx
L11C5:	jsr     ldaidx
	cmp     #$19
	bne     L11BF
;
; rdx = MONOCOCO_X [gpit] + 4; rdy = MONOCOCO_Y [gpit] + 4; cocos_shoot ();
;
	ldy     _gpit
	lda     _en_x,y
	clc
	adc     #$04
	sta     _rdx
	ldy     _gpit
	lda     _en_y,y
	clc
	adc     #$04
	sta     _rdy
	jsr     _cocos_shoot
;
; en_facing = (prx < rdx) << 1;
;
L11BF:	lda     _prx
	cmp     _rdx
	jsr     boolult
	asl     a
	sta     _en_facing
;
; en_spr = MONOCOCO_BASE_SPRID + en_facing;
;
	clc
	adc     #$18
	sta     _en_spr
;
; switch (MONOCOCO_STATE [gpit]) {
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L11DA
	inx
L11DA:	ldy     #$00
	jsr     ldaidx
;
; }
;
	cmp     #$00
	beq     L11DE
	cmp     #$01
	beq     L11E2
	cmp     #$02
	beq     L11E8
	cmp     #$03
	beq     L11E2
	jmp     L0E8D
;
; en_spr += 5;
;
L11DE:	lda     #$05
;
; break;
;
	jmp     L14E4
;
; en_spr += 4;
;
L11E2:	lda     #$04
;
; break;
;
	jmp     L14E4
;
; en_spr += ((frame_counter >> 5) & 1);
;
L11E8:	ldx     #$00
	lda     _frame_counter
	jsr     asrax4
	jsr     asrax1
	and     #$01
L14E4:	clc
	adc     _en_spr
L14E1:	sta     _en_spr
;
; if (en_spr != 0xff) {
;
L0E8D:	lda     _en_spr
	cmp     #$FF
	beq     L11ED
;
; en_x [gpit], en_y [gpit] + SPRITE_ADJUST, 
;
	jsr     decsp3
	ldy     _gpit
	lda     _en_x,y
	ldy     #$02
	sta     (sp),y
	ldy     _gpit
	lda     _en_y,y
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L14D9
	sec
L14D9:	sbc     #$10
	bcs     L14DA
	sec
L14DA:	sbc     #$01
	ldy     #$01
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [en_spr]
;
	ldx     #$00
	lda     _en_spr
	asl     a
	bcc     L14DB
	inx
	clc
L14DB:	adc     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [en_spr]
;
	txa
	adc     _spr_enems+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; if (en_t [gpit] == 4 && pregotten && !pgotten && !pj) {
;
L11ED:	ldy     _gpit
	lda     _en_t,y
	cmp     #$04
	jne     L1223
	lda     _pregotten
	jeq     L1223
	lda     _pgotten
	jne     L1223
	lda     _pj
	jne     L1223
;
; if (en_mx [gpit]) {
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L1207
	inx
L1207:	ldy     #$00
	jsr     ldaidx
	jeq     L1204
;
; if (pry + 16 >= en_y [gpit] && pry + 12 <= en_y [gpit]) {
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L120A
	inx
L120A:	jsr     pushax
	ldy     _gpit
	lda     _en_y,y
	jsr     tosicmp0
	bcc     L1204
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L120E
	inx
L120E:	jsr     pushax
	ldy     _gpit
	lda     _en_y,y
	jsr     tosicmp0
	bcc     L1209
	bne     L1204
;
; pgotten = 1;
;
L1209:	lda     #$01
	sta     _pgotten
;
; pgtmx = en_mx [gpit] << (6 - en_status [gpit]);
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L1217
	inx
L1217:	ldy     #$00
	jsr     ldaidx
	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmx
	stx     _pgtmx+1
;
; py = (en_y [gpit] - 16) << 6; pry = py >> 6;
;
	ldy     _gpit
	ldx     #$00
	lda     _en_y,y
	sec
	sbc     #$10
	bcs     L1220
	dex
L1220:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; (en_my [gpit] < 0 && pry + 17 >= en_y [gpit] && pry + 12 <= en_y [gpit]) ||
;
L1204:	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L1227
	inx
L1227:	ldy     #$00
	jsr     ldaidx
	asl     a
	bcc     L14A2
	ldx     #$00
	lda     _pry
	clc
	adc     #$11
	bcc     L1229
	inx
L1229:	jsr     pushax
	ldy     _gpit
	lda     _en_y,y
	jsr     tosicmp0
	bcc     L14A2
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L122C
	inx
L122C:	jsr     pushax
	ldy     _gpit
	lda     _en_y,y
	jsr     tosicmp0
	bcc     L1224
	beq     L1224
;
; (en_my [gpit] > 0 && pry + 16 + en_my [gpit] >= en_y [gpit] && pry + 12 <= en_y [gpit])
;
L14A2:	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L1232
	inx
L1232:	ldy     #$00
	jsr     ldaidx
	sec
	sbc     #$01
	bvs     L1233
	eor     #$80
L1233:	jpl     L1223
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L1235
	inx
L1235:	jsr     pushax
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L1237
	inx
L1237:	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	jsr     pushax
	ldy     _gpit
	lda     _en_y,y
	jsr     tosicmp0
	bcc     L1223
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L123A
	inx
L123A:	jsr     pushax
	ldy     _gpit
	lda     _en_y,y
	jsr     tosicmp0
	bcc     L1224
	bne     L1223
;
; pgotten = 1;
;
L1224:	lda     #$01
	sta     _pgotten
;
; pgtmy = en_my [gpit] << (6 - en_status [gpit]);
;
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L1244
	inx
L1244:	ldy     #$00
	jsr     ldaidx
	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmy
	stx     _pgtmy+1
;
; py = (en_y [gpit] - 16) << 6; pry = py >> 6;
;
	ldy     _gpit
	ldx     #$00
	lda     _en_y,y
	sec
	sbc     #$10
	bcs     L124D
	dex
L124D:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; !touched &&
;
L1223:	lda     _touched
	jne     L0E48
;
; pstate == EST_NORMAL && 
;
	lda     _pstate
	jne     L0E48
;
; collide (prx, pry, en_x [gpit], en_y [gpit])
;
	jsr     decsp4
	lda     _prx
	ldy     #$03
	sta     (sp),y
	lda     _pry
	dey
	sta     (sp),y
	ldy     _gpit
	lda     _en_x,y
	ldy     #$01
	sta     (sp),y
	ldy     _gpit
	lda     _en_y,y
	ldy     #$00
	sta     (sp),y
;
; ) {
;
	jsr     _collide
	tax
	jeq     L0E48
;
; if (en_t [gpit] != 4)
;
	ldy     _gpit
	lda     _en_t,y
	cmp     #$04
	jeq     L0E48
;
; if (en_t [gpit] != 8 || en_alive [gpit])
;
	ldy     _gpit
	lda     _en_t,y
	cmp     #$08
	bne     L1263
	ldy     _gpit
	lda     _en_alive,y
	jeq     L0E48
;
; if (en_t [gpit] != 10)
;
L1263:	ldy     _gpit
	lda     _en_t,y
	cmp     #$0A
	jeq     L0E48
;
; if (en_t [gpit] != 11 || en_mx [gpit] == 2)
;
	ldy     _gpit
	lda     _en_t,y
	cmp     #$0B
	bne     L126E
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L1272
	inx
L1272:	ldy     #$00
	jsr     ldaidx
	cmp     #$02
	jne     L0E48
;
; touched = 1;
;
L126E:	lda     #$01
	sta     _touched
;
; en_life [gpit] --; 
;
	lda     #<(_en_life)
	ldx     #>(_en_life)
	clc
	adc     _gpit
	bcc     L1278
	inx
L1278:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; en_life [gpit] == 0
;
	ldy     _gpit
	lda     _en_life,y
;
; && en_t [gpit] != 8
;
	bne     L1279
	ldy     _gpit
	lda     _en_t,y
;
; ) {
;
	cmp     #$08
	beq     L1279
;
; enems_kill (gpit);
;
	lda     _gpit
	jsr     pusha
	jsr     _enems_kill
;
; pkill = 1;
;
L1279:	lda     #$01
	sta     _pkill
;
; } 
;
	jmp     L0E48

.endproc

; ---------------------------------------------------------------
; void __near__ draw_game_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_game_frame: near

.segment	"CODE"

;
; pr_str (2, 3, "LIFE:00   ITEMS:00   KEYS:00");
;
	jsr     decsp4
	lda     #$02
	ldy     #$03
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	lda     #<(L0001)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001)
	sta     (sp),y
	jsr     _pr_str
;
; pr_str (2, 28, "SUPPATESTR - THE MOJON TWINS");
;
	jsr     decsp4
	lda     #$02
	ldy     #$03
	sta     (sp),y
	lda     #$1C
	dey
	sta     (sp),y
	lda     #<(L0001+29)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0001+29)
	sta     (sp),y
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ hud_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_update: near

.segment	"CODE"

;
; if (oobjs != pobjs) {
;
	lda     _pobjs
	cmp     _oobjs
	beq     L128F
;
; oobjs = pobjs;
;
	lda     _pobjs
	sta     _oobjs
;
; p_t (OBJECTS_X, OBJECTS_Y, pobjs);
;
	jsr     decsp3
	lda     #$12
	ldy     #$02
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _pobjs
	dey
	sta     (sp),y
	jsr     _p_t
;
; if (okeys != pkeys) {
;
L128F:	lda     _pkeys
	cmp     _okeys
	beq     L1297
;
; okeys = pkeys;
;
	lda     _pkeys
	sta     _okeys
;
; p_t (KEYS_X, KEYS_Y, pkeys);
;
	jsr     decsp3
	lda     #$1C
	ldy     #$02
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _pkeys
	dey
	sta     (sp),y
	jsr     _p_t
;
; if (olife != plife) {
;
L1297:	lda     _plife
	cmp     _olife
	beq     L129F
;
; olife = plife;
;
	lda     _plife
	sta     _olife
;
; p_t (LIFE_X, LIFE_Y, plife);
;
	jsr     decsp3
	lda     #$07
	ldy     #$02
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _plife
	dey
	sta     (sp),y
	jmp     _p_t
;
; }
;
L129F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_init: near

.segment	"CODE"

;
; game_over = 0;
;
	lda     #$00
	sta     _game_over
;
; c_pal_bg =   palts0;
;
	lda     #<(_palts0)
	sta     _c_pal_bg
	lda     #>(_palts0)
	sta     _c_pal_bg+1
;
; c_pal_fg =   palss0;
;
	lda     #<(_palss0)
	sta     _c_pal_fg
	lda     #>(_palss0)
	sta     _c_pal_fg+1
;
; c_ts_tmaps =  ts0_tmaps;
;
	lda     #<(_ts0_tmaps)
	sta     _c_ts_tmaps
	lda     #>(_ts0_tmaps)
	sta     _c_ts_tmaps+1
;
; c_ts_pals =  ts0_pals;
;
	lda     #<(_ts0_pals)
	sta     _c_ts_pals
	lda     #>(_ts0_pals)
	sta     _c_ts_pals+1
;
; c_behs =   behs0;
;
	lda     #<(_behs0)
	sta     _c_behs
	lda     #>(_behs0)
	sta     _c_behs+1
;
; spr_enems =  spr_enems0;
;
	lda     #<(_spr_enems0)
	sta     _spr_enems
	lda     #>(_spr_enems0)
	sta     _spr_enems+1
;
; c_map =   map_0;
;
	lda     #<(_map_0)
	sta     _c_map
	lda     #>(_map_0)
	sta     _c_map+1
;
; c_locks =   map_0_locks;
;
	lda     #<(_map_0_locks)
	sta     _c_locks
	lda     #>(_map_0_locks)
	sta     _c_locks+1
;
; c_max_bolts =  N_BOLTS_0;
;
	lda     #$01
	sta     _c_max_bolts
;
; c_enems =   enems_0;
;
	lda     #<(_enems_0)
	sta     _c_enems
	lda     #>(_enems_0)
	sta     _c_enems+1
;
; c_hotspots =  hotspots_0;
;
	lda     #<(_hotspots_0)
	sta     _c_hotspots
	lda     #>(_hotspots_0)
	sta     _c_hotspots+1
;
; pal_bg (c_pal_bg);
;
	lda     _c_pal_bg
	ldx     _c_pal_bg+1
	jsr     _pal_bg
;
; pal_spr (c_pal_fg);
;
	lda     _c_pal_fg
	ldx     _c_pal_fg+1
	jsr     _pal_spr
;
; cls ();
;
	jsr     _cls
;
; draw_game_frame ();
;
	jsr     _draw_game_frame
;
; n_pant = SCR_INI;
;
	lda     #$01
	sta     _n_pant
;
; hotspots_load ();
;
	jsr     _hotspots_load
;
; bolts_load ();
;
	jsr     _bolts_load
;
; player_init ();
;
	jsr     _player_init
;
; px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
;
	ldx     #$05
	lda     #$00
	sta     _px
	stx     _px+1
;
; py = (PLAYER_INI_Y << 4) << FIXBITS;
;
	ldx     #$0C
	sta     _py
	stx     _py+1
;
; pobjs = 0;
;
	sta     _pobjs
;
; pkeys = 0;
;
	sta     _pkeys
;
; half_life = 0;
;
	sta     _half_life
;
; frame_counter = 0;
;
	sta     _frame_counter
;
; olife = oammo = oobjs = okeys = 0xff;
;
	lda     #$FF
	sta     _okeys
	sta     _oobjs
	sta     _oammo
	sta     _olife
;
; okilled = 0xff;
;
	sta     _okilled
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ prepare_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_scr: near

.segment	"CODE"

;
; if (!ft) fade_out (); else ft = 0;
;
	lda     _ft
	bne     L12E2
	jsr     _fade_out
	jmp     L12E5
L12E2:	lda     #$00
	sta     _ft
;
; enems_load ();
;
L12E5:	jsr     _enems_load
;
; hotspots_create (); 
;
	jsr     _hotspots_create
;
; cocos_init ();
;
	jsr     _cocos_init
;
; ppu_off ();
;
	jsr     _ppu_off
;
; draw_scr ();
;
	jsr     _draw_scr
;
; do_process_breakable = 0;
;
	lda     #$00
	sta     _do_process_breakable
;
; gpit = BREAKABLE_MAX; while (gpit --) brkf [gpit] = 0;
;
	lda     #$04
	sta     _gpit
L12F1:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L12F2
	ldy     _gpit
	lda     #$00
	sta     _brkf,y
	jmp     L12F1
;
; for (gpit = 0; gpit < MAX_BULLETS; gpit ++) {
;
L12F2:	sta     _gpit
	cmp     #$04
	bcs     L12F9
;
; b_slots [gpit] = gpit; bst [gpit] = 0;
;
	ldy     _gpit
	lda     _gpit
	sta     _b_slots,y
	ldy     _gpit
	lda     #$00
	sta     _bst,y
;
; for (gpit = 0; gpit < MAX_BULLETS; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L12F2
;
; b_slots_i = MAX_BULLETS;
;
L12F9:	lda     #$04
	sta     _b_slots_i
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; oam_index = 4+24; // 4 + what the player takes.
;
	lda     #$1C
	sta     _oam_index
;
; prx = px >> FIXBITS; pry = py >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_render ();
;
	jsr     _player_render
;
; enems_move ();
;
	jsr     _enems_move
;
; if (hrt) hotspots_paint ();
;
	lda     _hrt
	beq     L1313
	jsr     _hotspots_paint
;
; player_render ();
;
L1313:	jsr     _player_render
;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; hud_update ();
;
	jsr     _hud_update
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; music_play (m_ingame);
;
	lda     #<(_m_ingame)
	ldx     #>(_m_ingame)
	jsr     _music_play
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; set_vram_update (UPDATE_LIST_SIZE, update_list);
;
	lda     #$20
	jsr     pusha
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; on_pant = 99; ft = 1; fade_delay = 1;
;
	lda     #$63
	sta     _on_pant
	lda     #$01
	sta     _ft
	sta     _fade_delay
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; oam_index = 0;
;
	lda     #$00
	sta     _oam_index
;
; half_life = 1 - half_life;
;
L132F:	lda     #$01
	sec
	sbc     _half_life
	sta     _half_life
;
; frame_counter ++;
;
	lda     _frame_counter
	clc
	adc     #$01
	sta     _frame_counter
;
; if (on_pant != n_pant) {
;
	lda     _n_pant
	cmp     _on_pant
	beq     L1335
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; hud_update ();
;
L1335:	jsr     _hud_update
;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; if (prx == 4 && pvx < 0) {
;
	lda     _prx
	cmp     #$04
	bne     L133F
	ldx     _pvx+1
	cpx     #$80
	bcc     L133F
;
; n_pant --;
;
	lda     _n_pant
	sec
	sbc     #$01
	sta     _n_pant
;
; px = 244 << FIXBITS;
;
	ldx     #$3D
	lda     #$00
	sta     _px
	stx     _px+1
;
; } else if (prx == 244 && pvx > 0) {
;
	jmp     L135E
L133F:	lda     _prx
	cmp     #$F4
	bne     L1347
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L134A
	eor     #$80
L134A:	bpl     L1347
;
; n_pant ++;
;
	lda     _n_pant
	clc
	adc     #$01
	sta     _n_pant
;
; px = 4 << FIXBITS;
;
	ldx     #$01
	lda     #$00
	sta     _px
	stx     _px+1
;
; } else if (pry == 0 && pvy < 0 && n_pant >= MAP_W) {
;
	jmp     L135E
L1347:	lda     _pry
	bne     L1350
	ldx     _pvy+1
	cpx     #$80
	bcc     L1350
	lda     _n_pant
	cmp     #$03
	bcc     L1350
;
; n_pant -= MAP_W;
;
	lda     _n_pant
	sec
	sbc     #$03
	sta     _n_pant
;
; py = 192 << FIXBITS;
;
	ldx     #$30
	lda     #$00
	sta     _py
	stx     _py+1
;
; if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
	lda     _pvy
	cmp     #$41
	lda     _pvy+1
	sbc     #$FF
	bvs     L135A
	eor     #$80
L135A:	bpl     L135E
	ldx     #$FF
	lda     #$40
	sta     _pvy
	stx     _pvy+1
;
; } else if (pry >= 192 && pvy > 0) {
;
	jmp     L135E
L1350:	lda     _pry
	cmp     #$C0
	bcc     L135E
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L1361
	eor     #$80
L1361:	bpl     L135E
;
; n_pant += MAP_W;
;
	lda     #$03
	clc
	adc     _n_pant
	sta     _n_pant
;
; py = 0;
;
	lda     #$00
	sta     _py
	sta     _py+1
;
; if (pkill) player_kill ();
;
L135E:	lda     _pkill
	beq     L1367
	jsr     _player_kill
;
; if (game_over) break;   
;
L1367:	lda     _game_over
	jne     L1330
;
; if (on_pant != n_pant) {
;
	lda     _n_pant
	cmp     _on_pant
	beq     L136C
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; if (pobjs == PLAYER_MAX_OBJECTS) 
;
L136C:	lda     _pobjs
	cmp     #$01
	bne     L1371
;
; music_stop ();
;
	jsr     _music_stop
;
; delay (50);
;
	lda     #$32
	jsr     _delay
;
; fade_out ();
;
	jsr     _fade_out
;
; break;
;
	jmp     L1330
;
; oam_index = 4+24; // 4 + what the player takes.
;
L1371:	lda     #$1C
	sta     _oam_index
;
; if (pstate) {
;
	lda     _pstate
	beq     L137C
;
; pctstate --;
;
	lda     _pctstate
	sec
	sbc     #$01
	sta     _pctstate
;
; if (!pctstate) pstate = EST_NORMAL;
;
	lda     _pctstate
	bne     L137C
	sta     _pstate
;
; player_move ();
;
L137C:	jsr     _player_move
;
; if (hrt) {
;
	lda     _hrt
	jeq     L1384
;
; hotspots_paint ();
;
	jsr     _hotspots_paint
;
; if (collide_in (prx + 4, pry + 8, hrx, hry)) {
;
	jsr     decsp8
	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L1387
	inx
L1387:	ldy     #$06
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L1389
	inx
L1389:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _hrx
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _hry
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _collide_in
	tax
	beq     L1384
;
; switch (hrt) {
;
	lda     _hrt
;
; }
;
	cmp     #$01
	beq     L1390
	cmp     #$02
	beq     L1395
	cmp     #$03
	beq     L139A
	jmp     L138E
;
; pobjs ++;
;
L1390:	lda     _pobjs
	clc
	adc     #$01
	sta     _pobjs
;
; rda = 2;
;
	lda     #$02
;
; break;
;
	jmp     L14EB
;
; pkeys ++;
;
L1395:	lda     _pkeys
	clc
	adc     #$01
	sta     _pkeys
;
; rda = 2;
;
	lda     #$02
;
; break;
;
	jmp     L14EB
;
; plife += PLAYER_REFILL;
;
L139A:	inc     _plife
;
; rda = 3;
;
L14EB:	sta     _rda
;
; sfx_play (rda, 1);
;
L138E:	lda     _rda
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; hrt = 0;
;
	lda     #$00
	sta     _hrt
;
; hact [n_pant] = 0;
;
	ldy     _n_pant
	sta     _hact,y
;
; bullets_move ();
;
L1384:	jsr     _bullets_move
;
; cocos_do ();
;
	jsr     _cocos_do
;
; enems_move ();
;
	jsr     _enems_move
;
; if (do_process_breakable) breakable_do_anim ();
;
	lda     _do_process_breakable
	beq     L13AB
	jsr     _breakable_do_anim
;
; player_render ();
;
L13AB:	jsr     _player_render
;
; if (i & PAD_START) {
;
	lda     _i
	and     #$08
	jeq     L132F
;
; while (pad_poll (0) & PAD_START);
;
L13B1:	lda     #$00
	jsr     _pad_poll
	and     #$08
	bne     L13B1
;
; music_pause (1);
;
	lda     #$01
	jsr     _music_pause
;
; sfx_play (0, 1);
;
	lda     #$00
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; pal_bright (3);
;
	lda     #$03
	jsr     _pal_bright
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; while (!(pad_poll (0) & PAD_START));
;
L13BD:	lda     #$00
	jsr     _pad_poll
	and     #$08
	beq     L13BD
;
; pal_bright (4);
;
	lda     #$04
	jsr     _pal_bright
;
; music_pause (0);
;
	lda     #$00
	jsr     _music_pause
;
; while (pad_poll (0) & PAD_START);
;
L13C6:	lda     #$00
	jsr     _pad_poll
	and     #$08
	bne     L13C6
;
; sfx_play (0, 1);
;
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; }
;
	jmp     L132F
;
; music_stop ();
;
L1330:	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; set_vram_update (0, 0);
;
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
;
; ppu_off ();
;
	jsr     _ppu_off
;
; oam_clear ();
;
	jmp     _oam_clear

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; bank_spr (1);
;
	lda     #$01
	jsr     _bank_spr
;
; bank_bg (0);
;
	lda     #$00
	jsr     _bank_bg
;
; ppu_off ();
;
	jsr     _ppu_off
;
; plife = PLAYER_LIFE;
;
L13DA:	lda     #$05
	sta     _plife
;
; scroll (0, 8);
;
	jsr     push0
	lda     #$08
	jsr     _scroll
;
; game_init (); 
;
	jsr     _game_init
;
; game_loop ();
;
	jsr     _game_loop
;
; if (game_over) {
;
	lda     _game_over
;
; break;
;
	bne     L13DA
;
; }
;
	jmp     L13DA

.endproc

