// script data and interpreter
// generated by msc3nes by the mojon twins

const unsigned char script_pool [] = {
/*            0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F */
/* 0000 */ 0x5c, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, 0xac, 0x00, 0x00, 0x00, 
/* 0001 */ 0xb7, 0x00, 0xf1, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x27, 0x01, 0x00, 0x00, 0x32, 0x01, 0x00, 0x00, 
/* 0002 */ 0x3d, 0x01, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x84, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
/* 0003 */ 0xbf, 0x01, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0xd5, 0x01, 0x00, 0x00, 0xe0, 0x01, 0xf0, 0x01, 
/* 0004 */ 0xf8, 0x01, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 
/* 0005 */ 0x53, 0x02, 0x5d, 0x02, 0x68, 0x02, 0xbf, 0x02, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x12, 0x08, 0x00, 
/* 0006 */ 0xff, 0x20, 0x86, 0x87, 0x00, 0xf2, 0xff, 0x2d, 0xf0, 0xff, 0xe3, 0x1b, 0x50, 0x55, 0x53, 0x48, 
/* 0007 */ 0x20, 0x54, 0x48, 0x45, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x45, 0x20, 0x54, 0x4f, 0x20, 0x54, 
/* 0008 */ 0x48, 0x45, 0x20, 0x42, 0x41, 0x53, 0x45, 0x00, 0x01, 0x0c, 0x00, 0x01, 0x0d, 0x02, 0x01, 0x0e, 
/* 0009 */ 0x02, 0x01, 0x00, 0x00, 0xff, 0xff, 0x09, 0x12, 0x08, 0x01, 0xff, 0x20, 0x86, 0x87, 0x00, 0xff, 
/* 000A */ 0xff, 0x09, 0x12, 0x08, 0x02, 0xff, 0x20, 0x86, 0x87, 0x00, 0xff, 0xff, 0x09, 0x12, 0x08, 0x03, 
/* 000B */ 0xff, 0x20, 0x86, 0x87, 0x00, 0xff, 0xff, 0x09, 0x12, 0x08, 0x04, 0xff, 0x20, 0x86, 0x87, 0x00, 
/* 000C */ 0xff, 0x2e, 0xf0, 0xff, 0x20, 0x01, 0x08, 0x17, 0x20, 0x02, 0x08, 0x18, 0x51, 0x01, 0x71, 0x3f, 
/* 000D */ 0xaf, 0x01, 0x10, 0x00, 0xe3, 0x18, 0x46, 0x49, 0x52, 0x53, 0x54, 0x20, 0x46, 0x4c, 0x4f, 0x4f, 
/* 000E */ 0x52, 0x20, 0x41, 0x4c, 0x4d, 0x4f, 0x53, 0x54, 0x20, 0x44, 0x4f, 0x4e, 0x45, 0x21, 0x00, 0xff, 
/* 000F */ 0xff, 0x29, 0x10, 0x10, 0x00, 0x21, 0x01, 0x3f, 0x22, 0x61, 0xaf, 0xff, 0x01, 0x10, 0x01, 0xe3, 
/* 0010 */ 0x18, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x20, 0x4d, 0x4f, 0x54, 0x4f, 0x20, 0x53, 0x45, 0x4d, 0x49, 
/* 0011 */ 0x4e, 0x55, 0x45, 0x56, 0x41, 0x21, 0x20, 0x20, 0x20, 0x00, 0xff, 0xff, 0x09, 0x12, 0x08, 0x09, 
/* 0012 */ 0xff, 0x20, 0x86, 0x87, 0x00, 0xff, 0xff, 0x09, 0x12, 0x08, 0x08, 0xff, 0x20, 0x86, 0x87, 0x00, 
/* 0013 */ 0xff, 0xff, 0x09, 0x12, 0x08, 0x07, 0xff, 0x20, 0x86, 0x87, 0x00, 0xff, 0xff, 0x09, 0x12, 0x08, 
/* 0014 */ 0x06, 0xff, 0x20, 0x86, 0x87, 0x00, 0xff, 0xff, 0x09, 0x12, 0x08, 0x05, 0xff, 0x20, 0x86, 0x87, 
/* 0015 */ 0x00, 0xff, 0x30, 0xf0, 0xff, 0xe3, 0x1c, 0x59, 0x4f, 0x55, 0x20, 0x47, 0x45, 0x54, 0x20, 0x54, 
/* 0016 */ 0x4f, 0x20, 0x54, 0x48, 0x45, 0x20, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x20, 0x46, 0x4c, 0x4f, 
/* 0017 */ 0x4f, 0x52, 0x21, 0x00, 0x01, 0x0c, 0x09, 0x01, 0x0d, 0x0e, 0x01, 0x0e, 0x01, 0x01, 0x00, 0x05, 
/* 0018 */ 0x70, 0x63, 0xff, 0xff, 0x09, 0x12, 0x08, 0x0a, 0xff, 0x20, 0x86, 0x87, 0x00, 0xff, 0x2f, 0xf0, 
/* 0019 */ 0xff, 0xe3, 0x1b, 0x59, 0x4f, 0x55, 0x20, 0x47, 0x45, 0x54, 0x20, 0x54, 0x4f, 0x20, 0x54, 0x48, 
/* 001A */ 0x45, 0x20, 0x54, 0x48, 0x49, 0x52, 0x44, 0x20, 0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x21, 0x00, 0x01, 
/* 001B */ 0x0c, 0x0a, 0x01, 0x0d, 0x02, 0x01, 0x0e, 0x01, 0x01, 0x00, 0x0a, 0x70, 0x63, 0xff, 0xff, 0x09, 
/* 001C */ 0x12, 0x08, 0x0b, 0xff, 0x20, 0x86, 0x87, 0x00, 0xff, 0xff, 0x09, 0x12, 0x08, 0x0c, 0xff, 0x20, 
/* 001D */ 0x86, 0x87, 0x00, 0xff, 0xff, 0x09, 0x12, 0x08, 0x0d, 0xff, 0x20, 0x86, 0x87, 0x00, 0xff, 0xff, 
/* 001E */ 0x0e, 0x12, 0x08, 0x12, 0xff, 0x20, 0x86, 0x87, 0x00, 0x51, 0x10, 0xc0, 0x1f, 0xcf, 0xff, 0xff, 
/* 001F */ 0x06, 0x20, 0x01, 0x0c, 0xff, 0xf1, 0xff, 0xff, 0x09, 0x12, 0x08, 0x11, 0xff, 0x20, 0x86, 0x87, 
/* 0020 */ 0x00, 0xff, 0xff, 0x09, 0x12, 0x08, 0x10, 0xff, 0x20, 0x86, 0x87, 0x00, 0xff, 0xff, 0x09, 0x12, 
/* 0021 */ 0x08, 0x0f, 0xff, 0x20, 0x86, 0x87, 0x00, 0xff, 0xff, 0x09, 0x12, 0x08, 0x0e, 0xff, 0x20, 0x86, 
/* 0022 */ 0x87, 0x00, 0xff, 0x2e, 0xf0, 0xff, 0xe3, 0x1a, 0x59, 0x4f, 0x55, 0x20, 0x47, 0x45, 0x54, 0x20, 
/* 0023 */ 0x54, 0x4f, 0x20, 0x54, 0x48, 0x45, 0x20, 0x4c, 0x41, 0x53, 0x54, 0x20, 0x46, 0x4c, 0x4f, 0x4f, 
/* 0024 */ 0x52, 0x21, 0x00, 0x01, 0x0c, 0x13, 0x01, 0x0d, 0x0d, 0x01, 0x0e, 0x01, 0x01, 0x00, 0x0e, 0x70, 
/* 0025 */ 0x63, 0xff, 0xff, 0x08, 0xf0, 0xff, 0x70, 0x63, 0x01, 0x08, 0x00, 0xff, 0xff, 0x09, 0xf0, 0xff, 
/* 0026 */ 0x01, 0x0a, 0x00, 0x01, 0x0b, 0x00, 0xff, 0xff, 0x0f, 0x60, 0x10, 0x01, 0x0d, 0xff, 0x10, 0x0a, 
/* 0027 */ 0x01, 0xe0, 0x03, 0x20, 0x82, 0x83, 0x1e, 0xff, 0x37, 0x10, 0x0a, 0x89, 0x10, 0x0b, 0x00, 0xff, 
/* 0028 */ 0x01, 0x0b, 0x01, 0x20, 0x86, 0x87, 0x00, 0xe0, 0x07, 0x10, 0x08, 0x01, 0x01, 0x05, 0x0d, 0xe3, 
/* 0029 */ 0x1d, 0x47, 0x41, 0x54, 0x45, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 
/* 002A */ 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0xff, 
/* 002B */ 0x04, 0x60, 0xff, 0xf2, 0xff, 0x08, 0x20, 0x84, 0x85, 0xff, 0xe0, 0x02, 0x6f, 0xff, 0xff, 0x12, 
/* 002C */ 0xf0, 0xff, 0xe0, 0x02, 0xe4, 0x00, 0x70, 0x63, 0x31, 0x01, 0x01, 0x08, 0x00, 0x6d, 0x8c, 0x8d, 
/* 002D */ 0x8e, 0xff, 0xff
};

#ifdef CLEAR_FLAGS
void msc_clear_flags (void) {
    memfill (flags, 0, MAX_FLAGS);
}
#endif

unsigned char read_byte (void) {
	return *script ++;
}

unsigned char read_vbyte (void) {
	sc_c = *script ++;
	if (sc_c & 128) return flags [sc_c & 127];
	return sc_c;
}

void readxy (void) {
	sc_x = read_vbyte ();
	sc_y = read_vbyte ();
}

void reloc_player (void) {
	prx = read_vbyte () << 4;        px = prx << FIXBITS;
	pry = (read_vbyte () << 4) + 16; py = pry << FIXBITS;
	player_stop ();
}

void run_script (unsigned char whichs) {
	// read address offset from index
	gp_gen = (unsigned char *) script_pool + whichs + whichs;
	rda = *gp_gen ++; rdb = *gp_gen;
	script_result = 0;
	sc_continuar = 0;
	if (!(rda | rdb)) return;
	script = (unsigned char *) script_pool + rda + (rdb << 8);

	// todo : update selected item flag

	while ((sc_c = read_byte ()) != 0xff) {
		next_script = script + sc_c;
		sc_terminado = sc_continuar = 0;
		while (!sc_terminado) {
			switch (read_byte ()) {
				case 0x10:
					// IF FLAG sc_x = sc_n
					// Opcode: 10 sc_x sc_n
					readxy ();
					sc_terminado = (flags [sc_x] != sc_y);
					break;
				case 0x12:
					// IF FLAG sc_x > sc_n
					// Opcode: 12 sc_x sc_n
					readxy ();
					sc_terminado = (flags [sc_x] <= sc_y);
					break;
				case 0x20:
					// IF PLAYER_TOUCHES x, y
					// Opcode: 20 sc_x sc_y
					readxy ();
					sc_x <<= 4; sc_y = 16 + (sc_y << 4);
					sc_terminado = (!(prx + 7 >= sc_x && prx <= sc_x + 15 && pry + 15 >= sc_y && pry <= sc_y + 15));
					break;
				case 0x21:
					// IF PLAYER_IN_X x1, x2
					// Opcode: 21 x1 x2
					sc_x = read_byte ();
					sc_y = read_byte ();
					sc_terminado = (!(prx >= sc_x && prx <= sc_y));
					break;
				case 0x22:
					// IF PLAYER_IN_Y y1, y2
					// Opcode: 22 y1 y2
					sc_x = read_byte ();
					sc_y = read_byte ();
					sc_terminado = (!(pry >= sc_x && pry <= sc_y));
					break;
				case 0x60:
					 // IF JUST_PUSHED
					 // Opcode: 60
					 sc_terminado = (!just_pushed);
					 break;
				case 0xF0:
					 // IF TRUE
					 // Opcode: F0
					 break;
				case 0xff:
					// then
					// opcode: ff
					sc_terminado = sc_continuar = 1;
					break;
			}
		}

		if (sc_continuar) {
			sc_terminado = 0;
			while (!sc_terminado) {
				switch (read_byte ()) {
					case 0x01:
						// SET FLAG sc_x = sc_n
						// Opcode: 01 sc_x sc_n
						readxy ();
						flags [sc_x] = sc_y;
						break;
					case 0x10:
						// INC FLAG sc_x, sc_n
						// Opcode: 10 sc_x sc_n
						readxy ();
						flags [sc_x] += sc_y;
						break;
					case 0x20:
						// SET TILE (sc_x, sc_y) = sc_n
						// Opcode: 20 sc_x sc_y sc_n
						readxy ();
						_x = sc_x; _y = sc_y; _t = read_vbyte (); map_set ();
						break;
					case 0x31:
						// DEC LIFE sc_n
						// Opcode: 31 sc_n
						plife -= read_vbyte ();
						break;
					case 0x51:
						// SET_FIRE_ZONE x1, y1, x2, y2
						// Opcode: 51 x1 y1 x2 y2
						fzx1 = read_byte ();
						fzy1 = read_byte ();
						fzx2 = read_byte ();
						fzy2 = read_byte ();
						f_zone_ac = 1;
						break;
					case 0x6D:
						// WARP_TO sc_n sc_x sc_y
						// Opcode: 6D sc_n
						n_pant = read_vbyte ();
						on_pant = 0xfe;
						reloc_player ();
						return;
					case 0x6F:
						// REENTER
						// Opcode: 6F
						//do_respawn = 0;
						on_pant = 0xfe; 
						return;
					case 0x70:
						// SET_TIMER a, b
						// Opcode: 0x70 a b
						timer = read_vbyte ();
						timer_frames = 50;
						timer_zero = 0;
						break;
					case 0xE0:
						// SOUND sc_n
						// Opcode: E0 sc_n
						sfx_play (read_vbyte (), 1);
						break;
					case 0xE3:
                        // TEXT
                        // Opcode: E3 length characters* 0
                        _x = LINE_OF_TEXT_X; _y = LINE_OF_TEXT; gp_gen = script;
						sc_n = read_byte (); script += (sc_n + 1);
                        pr_ul_str ();
						break;
					case 0xE4:
						// EXTERN sc_n
						// Opcode: 0xE4 sc_n
						do_extern_action (read_byte ());
						break;
					case 0xF1:
						// WIN
						script_result = 1;
						return;
					case 0xF2:
						// BREAK
						return;
					case 0xff:
						sc_terminado = 1;
						break;
				}
			}
		}
		script = next_script;
	}
}
