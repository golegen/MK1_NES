;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_ppu_waitnmi
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_write
	.import		_unrle_vram
	.import		_memfill
	.import		_delay
	.export		_chac_chacs_times
	.export		_chac_chacs_t1
	.export		_chac_chacs_t2
	.export		_chac_chacs_t3
	.export		_palss0
	.export		_palts0
	.export		_palts1
	.export		_palts2
	.export		_behs0
	.export		_behs1
	.export		_behs2
	.export		_scr_0_00
	.export		_scr_0_01
	.export		_scr_0_02
	.export		_scr_0_03
	.export		_scr_0_04
	.export		_scr_0_05
	.export		_scr_0_06
	.export		_scr_0_07
	.export		_scr_0_08
	.export		_scr_0_09
	.export		_scr_0_0a
	.export		_scr_0_0b
	.export		_scr_0_0c
	.export		_scr_0_0d
	.export		_scr_0_0e
	.export		_scr_0_0f
	.export		_scr_0_10
	.export		_scr_0_11
	.export		_scr_0_12
	.export		_scr_0_13
	.export		_scr_0_14
	.export		_scr_0_15
	.export		_scr_0_16
	.export		_scr_0_17
	.export		_map_0
	.export		_map_0_locks
	.export		_enems_0
	.export		_hotspots_0
	.export		_scr_1_00
	.export		_scr_1_01
	.export		_scr_1_02
	.export		_scr_1_03
	.export		_scr_1_04
	.export		_scr_1_05
	.export		_scr_1_06
	.export		_scr_1_07
	.export		_scr_1_08
	.export		_scr_1_09
	.export		_scr_1_0a
	.export		_scr_1_0b
	.export		_scr_1_0c
	.export		_scr_1_0d
	.export		_scr_1_0e
	.export		_scr_1_0f
	.export		_scr_1_10
	.export		_scr_1_11
	.export		_scr_1_12
	.export		_scr_1_13
	.export		_scr_1_14
	.export		_scr_1_15
	.export		_scr_1_16
	.export		_scr_1_17
	.export		_map_1
	.export		_map_1_locks
	.export		_enems_1
	.export		_hotspots_1
	.export		_scr_2_00
	.export		_scr_2_01
	.export		_scr_2_02
	.export		_scr_2_03
	.export		_scr_2_04
	.export		_scr_2_05
	.export		_scr_2_06
	.export		_scr_2_07
	.export		_scr_2_08
	.export		_scr_2_09
	.export		_scr_2_0a
	.export		_scr_2_0b
	.export		_scr_2_0c
	.export		_scr_2_0d
	.export		_scr_2_0e
	.export		_scr_2_0f
	.export		_scr_2_10
	.export		_scr_2_11
	.export		_scr_2_12
	.export		_scr_2_13
	.export		_scr_2_14
	.export		_scr_2_15
	.export		_scr_2_16
	.export		_scr_2_17
	.export		_map_2
	.export		_map_2_locks
	.export		_enems_2
	.export		_hotspots_2
	.export		_sspl_00_a
	.export		_sspl_00_b
	.export		_sspl_01_a
	.export		_sspl_01_b
	.export		_sspl_02_a
	.export		_sspl_02_b
	.export		_sspl_03_a
	.export		_sspl_03_b
	.export		_sspl_04_a
	.export		_sspl_04_b
	.export		_ssen_00_a
	.export		_ssen_00_b
	.export		_ssen_01_a
	.export		_ssen_01_b
	.export		_ssen_02_a
	.export		_ssen_02_b
	.export		_ssen_03_a
	.export		_ssen_03_b
	.export		_ssen_04_a
	.export		_ssen_04_b
	.export		_ssen_05_a
	.export		_ssen_05_b
	.export		_ssen_06_a
	.export		_ssen_06_b
	.export		_ssen_07_a
	.export		_ssen_07_b
	.export		_ssen_08_a
	.export		_ssen_08_b
	.export		_ssen_09_a
	.export		_ssen_09_b
	.export		_ssen_0A_a
	.export		_ssen_0A_b
	.export		_ssen_0B_a
	.export		_ssen_0B_b
	.export		_ssen_0C_a
	.export		_ssen_0C_b
	.export		_ssen_0D_a
	.export		_ssen_0D_b
	.export		_ssen_0E_a
	.export		_ssen_0E_b
	.export		_ssen_0F_a
	.export		_ssen_0F_b
	.export		_ssen_10
	.export		_ssen_11_a
	.export		_ssen_11_b
	.export		_ssen_12_a
	.export		_ssen_12_b
	.export		_ssen_13_a
	.export		_ssen_13_b
	.export		_ssen_14_a
	.export		_ssen_14_b
	.export		_ssen_15_a
	.export		_ssen_15_b
	.export		_ssen_16_a
	.export		_ssen_16_b
	.export		_ssit_00
	.export		_ssit_01
	.export		_ssit_02
	.export		_ssit_03
	.export		_ssit_04
	.export		_ssending_00
	.export		_ts0_pals
	.export		_ts0_tmaps
	.export		_ts1_pals
	.export		_ts1_tmaps
	.export		_ts2_pals
	.export		_ts2_tmaps
	.export		_spr_player
	.export		_spr_enems0
	.export		_spr_enems1
	.export		_spr_enems2
	.export		_spr_hs
	.export		_l_scr_ini
	.export		_l_ini_x
	.export		_l_ini_y
	.export		_l_map_w
	.export		_l_player_max_objects
	.export		_l_player_max_enems
	.export		_l_pal_bg
	.export		_l_pal_fg
	.export		_l_ts_tmaps
	.export		_l_ts_pals
	.export		_l_behs
	.export		_l_spr_enems
	.export		_l_map
	.export		_l_decos
	.export		_l_locks
	.export		_l_n_bolts
	.export		_l_enems
	.export		_l_hotspots
	.export		_l_music
	.export		_title_rle
	.export		_hud_rle
	.export		__x
	.export		__y
	.export		__n
	.export		__t
	.export		_i
	.export		_pad_this_frame
	.export		_gpit
	.export		_gpjt
	.export		_gpitu
	.export		_gpaux
	.export		_rds16
	.export		_gp_gen
	.export		_gp_tmap
	.export		_gp_tma2
	.export		_gp_ram
	.export		_gp_ram_aux
	.export		_gp_addr
	.export		_rdx
	.export		_rdy
	.export		_rdt
	.export		_rdit
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdd
	.export		_rdm
	.export		_rds
	.export		_rdct
	.export		_ticker
	.export		_at1
	.export		_at2
	.export		_cx1
	.export		_cx2
	.export		_cy1
	.export		_cy2
	.export		_caux
	.export		_oam_index
	.export		_oam_index_aux
	.export		_en_initial
	.export		_en_offs
	.export		_en_fr
	.export		_en_collx
	.export		_en_colly
	.export		_en_spr
	.export		_touched
	.export		_en_cttouched
	.export		_en_flags
	.export		_en_is_alive
	.export		_pregotten
	.export		__en_t
	.export		__en_s
	.export		__en_x
	.export		__en_y
	.export		__en_x1
	.export		__en_y1
	.export		__en_x2
	.export		__en_y2
	.export		__en_mx
	.export		__en_my
	.export		__en_ct
	.export		__en_facing
	.export		__enf_x
	.export		__enf_y
	.export		__enf_vx
	.export		__enf_vy
	.export		_en_life
	.export		_en_alive
	.export		_en_status
	.export		_en_rawv
	.export		_en_ct
	.export		_px
	.export		_py
	.export		_pvx
	.export		_pvy
	.export		_prx
	.export		_pry
	.export		_pfacing
	.export		_pfr
	.export		_pctfr
	.export		_psprid
	.export		_a_button
	.export		_b_button
	.export		_pj
	.export		_pctj
	.export		_pjb
	.export		_pgotten
	.export		_ppossee
	.export		_psprint
	.export		_pstate
	.export		_pctstate
	.export		_phit
	.export		_pgtmx
	.export		_pgtmy
	.export		_wall
	.export		_hitv
	.export		_hith
	.export		_pkilled
	.export		_prx_old
	.export		_pry_old
	.export		_pobjs
	.export		_plife
	.export		_pcontinues
	.export		_pkill
	.export		_pice
	.export		_pnotsafe
	.export		_pkeys
	.export		_pammo
	.export		_pfiring
	.export		_n_pant_safe
	.export		_px_safe
	.export		_py_safe
	.export		_hrx
	.export		_hry
	.export		_hrt
	.export		_do_process_breakable
	.export		_ft
	.export		_c_map_w
	.export		_c_ts_pals
	.export		_c_ts_tmaps
	.export		_c_behs
	.export		_spr_enems
	.export		_c_pal_bg
	.export		_c_pal_fg
	.export		_c_map
	.export		_c_decos
	.export		_c_locks
	.export		_c_enems
	.export		_c_hotspots
	.export		_c_max_bolts
	.export		_first_game
	.export		_half_life
	.export		_frame_counter
	.export		_n_pant
	.export		_on_pant
	.export		_olife
	.export		_okeys
	.export		_oobjs
	.export		_oammo
	.export		_okilled
	.export		_no_ct
	.export		_level
	.export		_game_over
	.export		_win_level
	.export		_paused
	.export		_c_max_enems
	.export		_update_index
	.export		_update_list
	.export		_map_attr
	.export		_map_buff
	.export		_fader
	.export		_fade_delay
	.export		_hact
	.export		_lkact
	.export		_flags
	.export		_en_x
	.export		_en_y
	.export		_en_x1
	.export		_en_y1
	.export		_en_x2
	.export		_en_y2
	.export		_en_mx
	.export		_en_my
	.export		_en_t
	.export		_en_s
	.export		_en_facing
	.export		_enf_x
	.export		_enf_vx
	.export		_enf_y
	.export		_enf_vy
	.export		_en_spr_id
	.export		_ep_x
	.export		_ep_y
	.export		_ep_mx
	.export		_ep_my
	.export		_ep_dead
	.export		_max_chac_chacs
	.export		_chac_chacs_yx
	.export		_chac_chacs_state
	.export		_chac_chacs_idlewait
	.export		_chac_chacs_ct
	.export		_chac_chacs_stack
	.export		_chac_chacs_top
	.export		_res_on
	.export		_res_disable
	.export		_res_ct
	.export		_res_subct
	.export		_cfx
	.export		_mode_no_resonators
	.export		_game_mode
	.export		_shaker_ct
	.export		_chac_chacs_add
	.export		_cm_two_points
	.export		_collide_in
	.export		_collide
	.export		_add_sign
	.export		_saturate
	.export		_pad_read
	.export		_distance
	.export		_jump_start
	.export		_fade_out
	.export		_fade_in
	.export		_clear_update_list
	.export		_cls
	.export		_ul_putc
	.export		_p_t
	.export		_bitmasks
	.export		_attr_table
	.export		_upd_attr_table
	.export		_draw_tile
	.export		_update_list_tile
	.export		_map_set
	.export		_get_byte
	.export		_add_tile
	.export		_draw_scr
	.export		_pr_str
	.export		_hotspots_load
	.export		_hotspots_paint
	.export		_hotspots_create
	.export		_chac_chacs_do
	.export		_player_register_safe_spot
	.export		_player_stop
	.export		_player_init
	.export		_player_render
	.export		_player_to_pixels
	.export		_player_kill
	.export		_player_process_tile
	.export		_player_move
	.export		_enems_persistent_load
	.export		_enems_persistent_update
	.export		_enems_persistent_deaths_load
	.export		_enems_update_unsigned_char_arrays
	.export		_enems_facing
	.export		_enems_load
	.export		_enems_kill
	.export		_enems_hit
	.export		_enems_move
	.export		_draw_game_frame
	.export		_hud_update
	.export		_bat_in
	.export		_bat_out
	.export		_pres
	.export		_title
	.export		_scr_game_over
	.export		_scr_the_end
	.export		_game_init
	.export		_prepare_scr
	.export		_game_loop
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_chac_chacs_times:
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$32
	.byte	$01
	.byte	$01
_chac_chacs_t1:
	.byte	$26
	.byte	$20
	.byte	$22
	.byte	$25
	.byte	$22
	.byte	$20
_chac_chacs_t2:
	.byte	$26
	.byte	$26
	.byte	$26
	.byte	$24
	.byte	$26
	.byte	$26
_chac_chacs_t3:
	.byte	$26
	.byte	$21
	.byte	$23
	.byte	$25
	.byte	$23
	.byte	$21
_palss0:
	.byte	$0F
	.byte	$1D
	.byte	$14
	.byte	$24
	.byte	$0F
	.byte	$1D
	.byte	$00
	.byte	$10
	.byte	$0F
	.byte	$1D
	.byte	$23
	.byte	$33
	.byte	$0F
	.byte	$1D
	.byte	$17
	.byte	$27
_palts0:
	.byte	$0F
	.byte	$05
	.byte	$00
	.byte	$10
	.byte	$0F
	.byte	$08
	.byte	$17
	.byte	$38
	.byte	$0F
	.byte	$0B
	.byte	$1A
	.byte	$3A
	.byte	$0F
	.byte	$03
	.byte	$22
	.byte	$31
_palts1:
	.byte	$0F
	.byte	$05
	.byte	$00
	.byte	$26
	.byte	$0F
	.byte	$0C
	.byte	$08
	.byte	$18
	.byte	$0F
	.byte	$05
	.byte	$15
	.byte	$25
	.byte	$0F
	.byte	$0C
	.byte	$1C
	.byte	$2C
_palts2:
	.byte	$0F
	.byte	$05
	.byte	$00
	.byte	$26
	.byte	$0F
	.byte	$08
	.byte	$18
	.byte	$29
	.byte	$0F
	.byte	$0B
	.byte	$1A
	.byte	$39
	.byte	$0F
	.byte	$0B
	.byte	$18
	.byte	$38
_behs0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$04
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$04
	.byte	$0A
_behs1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$04
	.byte	$28
	.byte	$29
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$04
	.byte	$28
	.byte	$29
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$0A
_behs2:
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$08
	.byte	$0A
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$08
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
_scr_0_00:
	.byte	$05
	.byte	$50
	.byte	$84
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$50
	.byte	$12
	.byte	$05
	.byte	$12
	.byte	$30
	.byte	$05
	.byte	$10
	.byte	$42
	.byte	$06
	.byte	$05
	.byte	$32
	.byte	$10
	.byte	$05
	.byte	$00
	.byte	$52
	.byte	$15
	.byte	$42
	.byte	$00
	.byte	$05
	.byte	$22
	.byte	$1D
	.byte	$1C
	.byte	$15
	.byte	$42
	.byte	$00
	.byte	$05
	.byte	$42
	.byte	$10
	.byte	$15
	.byte	$42
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$22
	.byte	$20
	.byte	$15
	.byte	$22
	.byte	$20
	.byte	$05
	.byte	$40
	.byte	$0E
	.byte	$00
	.byte	$15
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$05
	.byte	$7D
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$05
	.byte	$70
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$0F
	.byte	$70
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$1D
	.byte	$A4
_scr_0_01:
	.byte	$A4
	.byte	$40
	.byte	$32
	.byte	$50
	.byte	$05
	.byte	$40
	.byte	$06
	.byte	$32
	.byte	$40
	.byte	$05
	.byte	$40
	.byte	$05
	.byte	$32
	.byte	$10
	.byte	$22
	.byte	$05
	.byte	$12
	.byte	$20
	.byte	$05
	.byte	$32
	.byte	$00
	.byte	$32
	.byte	$05
	.byte	$32
	.byte	$00
	.byte	$05
	.byte	$12
	.byte	$20
	.byte	$12
	.byte	$17
	.byte	$05
	.byte	$27
	.byte	$12
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$22
	.byte	$05
	.byte	$42
	.byte	$05
	.byte	$0C
	.byte	$03
	.byte	$40
	.byte	$12
	.byte	$05
	.byte	$42
	.byte	$6D
	.byte	$20
	.byte	$05
	.byte	$47
	.byte	$10
	.byte	$03
	.byte	$50
	.byte	$06
	.byte	$05
	.byte	$60
	.byte	$03
	.byte	$40
	.byte	$06
	.byte	$09
	.byte	$05
	.byte	$40
	.byte	$A4
	.byte	$47
_scr_0_02:
	.byte	$D0
	.byte	$12
	.byte	$B0
	.byte	$32
	.byte	$90
	.byte	$22
	.byte	$27
	.byte	$70
	.byte	$72
	.byte	$70
	.byte	$82
	.byte	$70
	.byte	$27
	.byte	$52
	.byte	$60
	.byte	$72
	.byte	$80
	.byte	$52
	.byte	$27
	.byte	$80
	.byte	$37
	.byte	$30
	.byte	$22
	.byte	$A0
	.byte	$62
	.byte	$60
	.byte	$A7
	.byte	$30
	.byte	$09
_scr_0_03:
	.byte	$22
	.byte	$40
	.byte	$09
	.byte	$06
	.byte	$59
	.byte	$42
	.byte	$10
	.byte	$09
	.byte	$06
	.byte	$58
	.byte	$06
	.byte	$37
	.byte	$12
	.byte	$00
	.byte	$06
	.byte	$68
	.byte	$09
	.byte	$32
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$18
	.byte	$09
	.byte	$06
	.byte	$19
	.byte	$16
	.byte	$42
	.byte	$07
	.byte	$02
	.byte	$09
	.byte	$68
	.byte	$06
	.byte	$52
	.byte	$07
	.byte	$06
	.byte	$68
	.byte	$09
	.byte	$62
	.byte	$19
	.byte	$58
	.byte	$09
	.byte	$62
	.byte	$16
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$06
	.byte	$18
	.byte	$09
	.byte	$57
	.byte	$19
	.byte	$68
	.byte	$09
	.byte	$40
	.byte	$19
	.byte	$06
	.byte	$07
	.byte	$48
	.byte	$09
	.byte	$06
	.byte	$30
	.byte	$19
	.byte	$16
	.byte	$09
	.byte	$07
	.byte	$48
	.byte	$29
	.byte	$36
	.byte	$19
	.byte	$06
	.byte	$09
	.byte	$27
	.byte	$18
	.byte	$09
_scr_0_04:
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$05
	.byte	$94
	.byte	$05
	.byte	$17
	.byte	$C0
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$C0
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$0D
	.byte	$05
	.byte	$20
	.byte	$2D
	.byte	$20
	.byte	$15
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$05
	.byte	$80
	.byte	$15
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$05
	.byte	$80
	.byte	$15
	.byte	$12
	.byte	$10
	.byte	$05
	.byte	$1D
	.byte	$60
	.byte	$15
	.byte	$22
	.byte	$00
	.byte	$05
	.byte	$50
	.byte	$22
	.byte	$15
	.byte	$22
	.byte	$00
	.byte	$05
	.byte	$40
	.byte	$09
	.byte	$22
	.byte	$15
	.byte	$22
	.byte	$00
	.byte	$05
	.byte	$30
	.byte	$09
	.byte	$06
	.byte	$22
	.byte	$15
	.byte	$12
	.byte	$10
	.byte	$05
	.byte	$30
	.byte	$06
	.byte	$19
	.byte	$12
	.byte	$15
	.byte	$30
	.byte	$05
	.byte	$20
	.byte	$64
_scr_0_05:
	.byte	$94
	.byte	$05
	.byte	$47
	.byte	$60
	.byte	$22
	.byte	$05
	.byte	$42
	.byte	$60
	.byte	$22
	.byte	$05
	.byte	$42
	.byte	$05
	.byte	$30
	.byte	$4D
	.byte	$05
	.byte	$12
	.byte	$10
	.byte	$02
	.byte	$05
	.byte	$20
	.byte	$0D
	.byte	$20
	.byte	$12
	.byte	$05
	.byte	$12
	.byte	$10
	.byte	$02
	.byte	$05
	.byte	$70
	.byte	$02
	.byte	$05
	.byte	$02
	.byte	$30
	.byte	$05
	.byte	$80
	.byte	$05
	.byte	$40
	.byte	$05
	.byte	$10
	.byte	$6D
	.byte	$05
	.byte	$40
	.byte	$05
	.byte	$80
	.byte	$05
	.byte	$40
	.byte	$05
	.byte	$80
	.byte	$05
	.byte	$40
	.byte	$05
	.byte	$00
	.byte	$0E
	.byte	$60
	.byte	$05
	.byte	$40
	.byte	$94
	.byte	$05
	.byte	$1D
	.byte	$00
	.byte	$1D
_scr_0_06:
	.byte	$A7
	.byte	$30
	.byte	$09
	.byte	$B2
	.byte	$00
	.byte	$29
	.byte	$B2
	.byte	$10
	.byte	$09
	.byte	$06
	.byte	$02
	.byte	$47
	.byte	$52
	.byte	$20
	.byte	$06
	.byte	$A2
	.byte	$20
	.byte	$02
	.byte	$06
	.byte	$92
	.byte	$00
	.byte	$32
	.byte	$06
	.byte	$00
	.byte	$42
	.byte	$17
	.byte	$10
	.byte	$42
	.byte	$06
	.byte	$20
	.byte	$03
	.byte	$40
	.byte	$52
	.byte	$06
	.byte	$20
	.byte	$03
	.byte	$40
	.byte	$52
	.byte	$09
	.byte	$20
	.byte	$03
	.byte	$40
	.byte	$27
	.byte	$22
	.byte	$09
	.byte	$20
	.byte	$03
	.byte	$30
	.byte	$47
	.byte	$12
	.byte	$09
	.byte	$07
	.byte	$10
	.byte	$BD
	.byte	$09
_scr_0_07:
	.byte	$09
	.byte	$16
	.byte	$59
	.byte	$06
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$18
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$88
	.byte	$06
	.byte	$28
	.byte	$16
	.byte	$98
	.byte	$09
	.byte	$18
	.byte	$16
	.byte	$09
	.byte	$48
	.byte	$16
	.byte	$28
	.byte	$06
	.byte	$28
	.byte	$06
	.byte	$09
	.byte	$98
	.byte	$09
	.byte	$06
	.byte	$18
	.byte	$16
	.byte	$98
	.byte	$06
	.byte	$28
	.byte	$19
	.byte	$08
	.byte	$8D
	.byte	$06
	.byte	$18
	.byte	$06
	.byte	$19
	.byte	$D8
	.byte	$09
	.byte	$06
	.byte	$D8
	.byte	$09
	.byte	$06
	.byte	$07
	.byte	$A8
	.byte	$06
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$07
	.byte	$88
	.byte	$06
	.byte	$09
	.byte	$07
	.byte	$09
	.byte	$06
	.byte	$19
	.byte	$18
	.byte	$87
	.byte	$19
_scr_0_08:
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$2A
	.byte	$64
	.byte	$05
	.byte	$20
	.byte	$02
	.byte	$05
	.byte	$9A
	.byte	$05
	.byte	$10
	.byte	$12
	.byte	$05
	.byte	$19
	.byte	$7A
	.byte	$05
	.byte	$10
	.byte	$12
	.byte	$05
	.byte	$3A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$05
	.byte	$10
	.byte	$12
	.byte	$05
	.byte	$9A
	.byte	$05
	.byte	$20
	.byte	$02
	.byte	$05
	.byte	$1A
	.byte	$09
	.byte	$6A
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$0A
	.byte	$06
	.byte	$09
	.byte	$6A
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$94
	.byte	$05
	.byte	$22
	.byte	$00
	.byte	$05
	.byte	$9A
	.byte	$05
	.byte	$32
	.byte	$05
	.byte	$0A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$05
	.byte	$32
	.byte	$05
	.byte	$9A
	.byte	$05
	.byte	$32
	.byte	$05
	.byte	$1A
	.byte	$74
_scr_0_09:
	.byte	$94
	.byte	$05
	.byte	$30
	.byte	$07
	.byte	$9A
	.byte	$05
	.byte	$32
	.byte	$07
	.byte	$9A
	.byte	$05
	.byte	$32
	.byte	$07
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$05
	.byte	$04
	.byte	$2A
	.byte	$05
	.byte	$32
	.byte	$07
	.byte	$4A
	.byte	$05
	.byte	$3A
	.byte	$05
	.byte	$32
	.byte	$07
	.byte	$4A
	.byte	$05
	.byte	$2A
	.byte	$04
	.byte	$05
	.byte	$32
	.byte	$07
	.byte	$4A
	.byte	$05
	.byte	$3A
	.byte	$05
	.byte	$32
	.byte	$07
	.byte	$74
	.byte	$1A
	.byte	$05
	.byte	$32
	.byte	$07
	.byte	$9A
	.byte	$05
	.byte	$32
	.byte	$07
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$0A
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$07
	.byte	$8A
	.byte	$09
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$07
	.byte	$94
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$07
_scr_0_0a:
	.byte	$07
	.byte	$10
	.byte	$BD
	.byte	$09
	.byte	$07
	.byte	$10
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$20
	.byte	$06
	.byte	$37
	.byte	$60
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$09
	.byte	$07
	.byte	$12
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$10
	.byte	$16
	.byte	$07
	.byte	$12
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$10
	.byte	$16
	.byte	$07
	.byte	$22
	.byte	$10
	.byte	$17
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$16
	.byte	$07
	.byte	$12
	.byte	$30
	.byte	$62
	.byte	$06
	.byte	$09
	.byte	$07
	.byte	$02
	.byte	$30
	.byte	$72
	.byte	$06
	.byte	$09
	.byte	$07
	.byte	$30
	.byte	$32
	.byte	$27
	.byte	$22
	.byte	$09
	.byte	$07
	.byte	$20
	.byte	$A2
	.byte	$06
	.byte	$07
	.byte	$10
	.byte	$B2
	.byte	$09
	.byte	$57
	.byte	$10
	.byte	$67
	.byte	$09
_scr_0_0b:
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$06
	.byte	$49
	.byte	$06
	.byte	$39
	.byte	$98
	.byte	$09
	.byte	$06
	.byte	$19
	.byte	$06
	.byte	$C8
	.byte	$29
	.byte	$18
	.byte	$06
	.byte	$A8
	.byte	$09
	.byte	$06
	.byte	$28
	.byte	$09
	.byte	$0C
	.byte	$88
	.byte	$19
	.byte	$38
	.byte	$16
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$48
	.byte	$09
	.byte	$06
	.byte	$A8
	.byte	$09
	.byte	$0C
	.byte	$06
	.byte	$19
	.byte	$0C
	.byte	$A8
	.byte	$06
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$07
	.byte	$0C
	.byte	$38
	.byte	$06
	.byte	$09
	.byte	$16
	.byte	$09
	.byte	$06
	.byte	$18
	.byte	$29
	.byte	$07
	.byte	$0C
	.byte	$A8
	.byte	$39
	.byte	$07
	.byte	$0C
	.byte	$98
	.byte	$19
	.byte	$06
	.byte	$19
	.byte	$77
	.byte	$18
	.byte	$07
	.byte	$09
_scr_0_0c:
	.byte	$05
	.byte	$32
	.byte	$05
	.byte	$1A
	.byte	$74
	.byte	$05
	.byte	$00
	.byte	$22
	.byte	$05
	.byte	$1A
	.byte	$20
	.byte	$42
	.byte	$05
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$0D
	.byte	$0A
	.byte	$30
	.byte	$32
	.byte	$05
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$0D
	.byte	$50
	.byte	$12
	.byte	$05
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$90
	.byte	$05
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$0E
	.byte	$60
	.byte	$05
	.byte	$10
	.byte	$03
	.byte	$B0
	.byte	$05
	.byte	$10
	.byte	$03
	.byte	$50
	.byte	$0E
	.byte	$40
	.byte	$05
	.byte	$00
	.byte	$32
	.byte	$90
	.byte	$05
	.byte	$52
	.byte	$40
	.byte	$04
	.byte	$2A
	.byte	$05
	.byte	$32
	.byte	$01
	.byte	$5A
	.byte	$04
	.byte	$2A
	.byte	$05
	.byte	$00
	.byte	$22
	.byte	$04
	.byte	$4C
	.byte	$14
	.byte	$1A
	.byte	$04
_scr_0_0d:
	.byte	$94
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$07
	.byte	$22
	.byte	$60
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$12
	.byte	$05
	.byte	$1D
	.byte	$10
	.byte	$22
	.byte	$05
	.byte	$12
	.byte	$20
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$20
	.byte	$32
	.byte	$05
	.byte	$22
	.byte	$30
	.byte	$05
	.byte	$10
	.byte	$42
	.byte	$05
	.byte	$22
	.byte	$30
	.byte	$05
	.byte	$5D
	.byte	$02
	.byte	$05
	.byte	$22
	.byte	$60
	.byte	$42
	.byte	$05
	.byte	$22
	.byte	$70
	.byte	$32
	.byte	$05
	.byte	$12
	.byte	$90
	.byte	$12
	.byte	$09
	.byte	$05
	.byte	$02
	.byte	$30
	.byte	$7A
	.byte	$09
	.byte	$06
	.byte	$05
	.byte	$40
	.byte	$6A
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$05
	.byte	$40
	.byte	$A4
	.byte	$47
_scr_0_0e:
	.byte	$57
	.byte	$10
	.byte	$67
	.byte	$09
	.byte	$E0
	.byte	$09
	.byte	$50
	.byte	$77
	.byte	$16
	.byte	$70
	.byte	$52
	.byte	$06
	.byte	$09
	.byte	$30
	.byte	$52
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$06
	.byte	$09
	.byte	$10
	.byte	$37
	.byte	$42
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$00
	.byte	$A2
	.byte	$03
	.byte	$10
	.byte	$09
	.byte	$00
	.byte	$A2
	.byte	$03
	.byte	$10
	.byte	$09
	.byte	$20
	.byte	$67
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$40
	.byte	$22
	.byte	$30
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$50
	.byte	$03
	.byte	$30
	.byte	$32
	.byte	$06
	.byte	$B7
	.byte	$22
	.byte	$09
_scr_0_0f:
	.byte	$29
	.byte	$06
	.byte	$19
	.byte	$06
	.byte	$19
	.byte	$06
	.byte	$09
	.byte	$06
	.byte	$18
	.byte	$36
	.byte	$C8
	.byte	$16
	.byte	$B8
	.byte	$06
	.byte	$08
	.byte	$06
	.byte	$09
	.byte	$B8
	.byte	$09
	.byte	$06
	.byte	$19
	.byte	$B8
	.byte	$09
	.byte	$08
	.byte	$06
	.byte	$09
	.byte	$D8
	.byte	$06
	.byte	$09
	.byte	$D8
	.byte	$19
	.byte	$D8
	.byte	$19
	.byte	$D8
	.byte	$06
	.byte	$09
	.byte	$C8
	.byte	$07
	.byte	$19
	.byte	$07
	.byte	$A8
	.byte	$07
	.byte	$06
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$07
	.byte	$28
	.byte	$67
	.byte	$16
	.byte	$09
_scr_0_10:
	.byte	$05
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$74
	.byte	$1A
	.byte	$04
	.byte	$05
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$8A
	.byte	$15
	.byte	$12
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$7A
	.byte	$04
	.byte	$15
	.byte	$32
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$0A
	.byte	$15
	.byte	$32
	.byte	$01
	.byte	$8A
	.byte	$15
	.byte	$32
	.byte	$01
	.byte	$8A
	.byte	$15
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$8A
	.byte	$15
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$0A
	.byte	$15
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$01
	.byte	$8A
	.byte	$15
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$01
	.byte	$8A
	.byte	$15
	.byte	$12
	.byte	$10
	.byte	$01
	.byte	$8A
	.byte	$15
	.byte	$22
	.byte	$00
	.byte	$A4
_scr_0_11:
	.byte	$A4
	.byte	$00
	.byte	$37
	.byte	$05
	.byte	$8A
	.byte	$01
	.byte	$00
	.byte	$32
	.byte	$05
	.byte	$8A
	.byte	$01
	.byte	$42
	.byte	$05
	.byte	$4A
	.byte	$4D
	.byte	$47
	.byte	$05
	.byte	$8A
	.byte	$01
	.byte	$42
	.byte	$05
	.byte	$2D
	.byte	$5A
	.byte	$01
	.byte	$42
	.byte	$05
	.byte	$8A
	.byte	$01
	.byte	$00
	.byte	$32
	.byte	$05
	.byte	$8A
	.byte	$01
	.byte	$20
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$1A
	.byte	$4D
	.byte	$1A
	.byte	$01
	.byte	$20
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$8A
	.byte	$01
	.byte	$20
	.byte	$03
	.byte	$02
	.byte	$05
	.byte	$8A
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$A4
	.byte	$20
	.byte	$17
_scr_0_12:
	.byte	$B7
	.byte	$22
	.byte	$09
	.byte	$32
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$42
	.byte	$09
	.byte	$06
	.byte	$42
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$42
	.byte	$06
	.byte	$09
	.byte	$67
	.byte	$20
	.byte	$22
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$52
	.byte	$03
	.byte	$20
	.byte	$47
	.byte	$06
	.byte	$52
	.byte	$03
	.byte	$40
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$42
	.byte	$00
	.byte	$03
	.byte	$40
	.byte	$03
	.byte	$10
	.byte	$09
	.byte	$50
	.byte	$03
	.byte	$40
	.byte	$03
	.byte	$10
	.byte	$09
	.byte	$30
	.byte	$57
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$16
	.byte	$12
	.byte	$30
	.byte	$03
	.byte	$40
	.byte	$03
	.byte	$16
	.byte	$09
	.byte	$22
	.byte	$20
	.byte	$03
	.byte	$40
	.byte	$16
	.byte	$19
	.byte	$97
	.byte	$59
_scr_0_13:
	.byte	$19
	.byte	$06
	.byte	$28
	.byte	$09
	.byte	$06
	.byte	$69
	.byte	$06
	.byte	$09
	.byte	$06
	.byte	$B8
	.byte	$19
	.byte	$16
	.byte	$18
	.byte	$09
	.byte	$98
	.byte	$19
	.byte	$38
	.byte	$09
	.byte	$88
	.byte	$06
	.byte	$09
	.byte	$48
	.byte	$09
	.byte	$16
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$28
	.byte	$06
	.byte	$09
	.byte	$A8
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$D8
	.byte	$09
	.byte	$06
	.byte	$C8
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$68
	.byte	$19
	.byte	$06
	.byte	$09
	.byte	$28
	.byte	$19
	.byte	$0C
	.byte	$C8
	.byte	$19
	.byte	$07
	.byte	$1C
	.byte	$88
	.byte	$0C
	.byte	$07
	.byte	$29
	.byte	$67
	.byte	$18
	.byte	$27
	.byte	$19
_scr_0_14:
	.byte	$05
	.byte	$22
	.byte	$00
	.byte	$A4
	.byte	$05
	.byte	$12
	.byte	$10
	.byte	$01
	.byte	$9A
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$01
	.byte	$9A
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$12
	.byte	$01
	.byte	$9A
	.byte	$05
	.byte	$00
	.byte	$22
	.byte	$A4
	.byte	$05
	.byte	$00
	.byte	$22
	.byte	$01
	.byte	$9A
	.byte	$24
	.byte	$12
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$10
	.byte	$0C
	.byte	$10
	.byte	$01
	.byte	$9A
	.byte	$10
	.byte	$0C
	.byte	$10
	.byte	$01
	.byte	$5A
	.byte	$F7
	.byte	$F8
	.byte	$38
_scr_0_15:
	.byte	$A4
	.byte	$20
	.byte	$17
	.byte	$9A
	.byte	$01
	.byte	$10
	.byte	$09
	.byte	$12
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$0A
	.byte	$01
	.byte	$10
	.byte	$06
	.byte	$09
	.byte	$02
	.byte	$9A
	.byte	$01
	.byte	$10
	.byte	$27
	.byte	$9A
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$22
	.byte	$A4
	.byte	$20
	.byte	$12
	.byte	$9A
	.byte	$01
	.byte	$40
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$0A
	.byte	$01
	.byte	$22
	.byte	$10
	.byte	$9A
	.byte	$01
	.byte	$32
	.byte	$00
	.byte	$D7
	.byte	$02
	.byte	$00
	.byte	$D8
	.byte	$17
	.byte	$F8
_scr_0_16:
	.byte	$97
	.byte	$09
	.byte	$36
	.byte	$09
	.byte	$32
	.byte	$00
	.byte	$12
	.byte	$10
	.byte	$06
	.byte	$58
	.byte	$72
	.byte	$09
	.byte	$48
	.byte	$16
	.byte	$27
	.byte	$42
	.byte	$06
	.byte	$68
	.byte	$62
	.byte	$00
	.byte	$06
	.byte	$68
	.byte	$22
	.byte	$00
	.byte	$12
	.byte	$03
	.byte	$19
	.byte	$0C
	.byte	$38
	.byte	$09
	.byte	$06
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$09
	.byte	$08
	.byte	$16
	.byte	$0C
	.byte	$06
	.byte	$09
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$09
	.byte	$38
	.byte	$09
	.byte	$38
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$09
	.byte	$88
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$0F
	.byte	$88
	.byte	$87
	.byte	$68
	.byte	$06
	.byte	$09
	.byte	$16
	.byte	$09
	.byte	$06
	.byte	$19
	.byte	$06
	.byte	$67
_scr_0_17:
	.byte	$19
	.byte	$56
	.byte	$09
	.byte	$18
	.byte	$26
	.byte	$19
	.byte	$D8
	.byte	$06
	.byte	$19
	.byte	$16
	.byte	$68
	.byte	$06
	.byte	$38
	.byte	$09
	.byte	$28
	.byte	$09
	.byte	$58
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$06
	.byte	$38
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$06
	.byte	$0C
	.byte	$09
	.byte	$06
	.byte	$38
	.byte	$06
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$48
	.byte	$06
	.byte	$58
	.byte	$06
	.byte	$28
	.byte	$06
	.byte	$A8
	.byte	$06
	.byte	$38
	.byte	$09
	.byte	$48
	.byte	$0C
	.byte	$06
	.byte	$28
	.byte	$06
	.byte	$48
	.byte	$06
	.byte	$19
	.byte	$06
	.byte	$09
	.byte	$06
	.byte	$38
	.byte	$06
	.byte	$D8
	.byte	$19
	.byte	$B8
	.byte	$0C
	.byte	$09
	.byte	$06
	.byte	$09
	.byte	$D7
	.byte	$19
_map_0:
	.addr	_scr_0_00
	.addr	_scr_0_01
	.addr	_scr_0_02
	.addr	_scr_0_03
	.addr	_scr_0_04
	.addr	_scr_0_05
	.addr	_scr_0_06
	.addr	_scr_0_07
	.addr	_scr_0_08
	.addr	_scr_0_09
	.addr	_scr_0_0a
	.addr	_scr_0_0b
	.addr	_scr_0_0c
	.addr	_scr_0_0d
	.addr	_scr_0_0e
	.addr	_scr_0_0f
	.addr	_scr_0_10
	.addr	_scr_0_11
	.addr	_scr_0_12
	.addr	_scr_0_13
	.addr	_scr_0_14
	.addr	_scr_0_15
	.addr	_scr_0_16
	.addr	_scr_0_17
_map_0_locks:
	.byte	$00
	.byte	$A7
	.byte	$16
	.byte	$96
_enems_0:
	.byte	$03
	.byte	$28
	.byte	$89
	.byte	$02
	.byte	$01
	.byte	$4C
	.byte	$4B
	.byte	$01
	.byte	$02
	.byte	$B8
	.byte	$BF
	.byte	$02
	.byte	$02
	.byte	$82
	.byte	$87
	.byte	$02
	.byte	$04
	.byte	$31
	.byte	$71
	.byte	$01
	.byte	$03
	.byte	$2B
	.byte	$5B
	.byte	$01
	.byte	$02
	.byte	$B9
	.byte	$B1
	.byte	$02
	.byte	$00
	.byte	$22
	.byte	$78
	.byte	$02
	.byte	$01
	.byte	$5B
	.byte	$1B
	.byte	$01
	.byte	$02
	.byte	$3E
	.byte	$3A
	.byte	$02
	.byte	$01
	.byte	$79
	.byte	$7C
	.byte	$01
	.byte	$03
	.byte	$9A
	.byte	$BB
	.byte	$01
	.byte	$02
	.byte	$3B
	.byte	$39
	.byte	$01
	.byte	$00
	.byte	$B9
	.byte	$BE
	.byte	$02
	.byte	$00
	.byte	$B3
	.byte	$33
	.byte	$01
	.byte	$02
	.byte	$39
	.byte	$34
	.byte	$02
	.byte	$03
	.byte	$79
	.byte	$54
	.byte	$02
	.byte	$03
	.byte	$3B
	.byte	$BB
	.byte	$01
	.byte	$04
	.byte	$2C
	.byte	$AC
	.byte	$01
	.byte	$02
	.byte	$35
	.byte	$31
	.byte	$01
	.byte	$00
	.byte	$B1
	.byte	$B7
	.byte	$02
	.byte	$03
	.byte	$3D
	.byte	$9D
	.byte	$01
	.byte	$03
	.byte	$23
	.byte	$65
	.byte	$01
	.byte	$03
	.byte	$2A
	.byte	$68
	.byte	$01
	.byte	$03
	.byte	$46
	.byte	$76
	.byte	$02
	.byte	$02
	.byte	$79
	.byte	$7E
	.byte	$02
	.byte	$01
	.byte	$BE
	.byte	$B9
	.byte	$04
	.byte	$03
	.byte	$28
	.byte	$B8
	.byte	$02
	.byte	$02
	.byte	$27
	.byte	$77
	.byte	$02
	.byte	$01
	.byte	$74
	.byte	$71
	.byte	$01
	.byte	$02
	.byte	$B1
	.byte	$B4
	.byte	$01
	.byte	$03
	.byte	$49
	.byte	$8B
	.byte	$02
	.byte	$01
	.byte	$BD
	.byte	$B9
	.byte	$01
	.byte	$02
	.byte	$B5
	.byte	$BA
	.byte	$02
	.byte	$03
	.byte	$26
	.byte	$58
	.byte	$02
	.byte	$01
	.byte	$8C
	.byte	$87
	.byte	$02
	.byte	$03
	.byte	$2C
	.byte	$9C
	.byte	$01
	.byte	$00
	.byte	$31
	.byte	$C3
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$58
	.byte	$53
	.byte	$01
	.byte	$03
	.byte	$89
	.byte	$29
	.byte	$01
	.byte	$00
	.byte	$35
	.byte	$49
	.byte	$01
	.byte	$01
	.byte	$89
	.byte	$83
	.byte	$01
	.byte	$02
	.byte	$52
	.byte	$55
	.byte	$02
	.byte	$03
	.byte	$B2
	.byte	$B9
	.byte	$01
	.byte	$04
	.byte	$3C
	.byte	$38
	.byte	$02
	.byte	$04
	.byte	$37
	.byte	$B7
	.byte	$02
	.byte	$00
	.byte	$5E
	.byte	$9E
	.byte	$01
	.byte	$04
	.byte	$36
	.byte	$B6
	.byte	$01
	.byte	$04
	.byte	$37
	.byte	$3D
	.byte	$01
	.byte	$03
	.byte	$25
	.byte	$B5
	.byte	$02
	.byte	$01
	.byte	$3A
	.byte	$36
	.byte	$02
	.byte	$02
	.byte	$51
	.byte	$53
	.byte	$01
	.byte	$03
	.byte	$87
	.byte	$83
	.byte	$02
	.byte	$02
	.byte	$89
	.byte	$84
	.byte	$02
	.byte	$03
	.byte	$36
	.byte	$32
	.byte	$01
	.byte	$01
	.byte	$BB
	.byte	$B5
	.byte	$02
	.byte	$00
	.byte	$32
	.byte	$A3
	.byte	$02
	.byte	$01
	.byte	$46
	.byte	$4B
	.byte	$02
	.byte	$02
	.byte	$8B
	.byte	$88
	.byte	$01
	.byte	$01
	.byte	$55
	.byte	$5E
	.byte	$02
	.byte	$02
	.byte	$AB
	.byte	$A5
	.byte	$01
	.byte	$04
	.byte	$24
	.byte	$A4
	.byte	$01
	.byte	$03
	.byte	$22
	.byte	$59
	.byte	$01
	.byte	$02
	.byte	$9D
	.byte	$92
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$6D
	.byte	$3D
	.byte	$01
	.byte	$02
	.byte	$BE
	.byte	$B9
	.byte	$02
	.byte	$03
	.byte	$57
	.byte	$27
	.byte	$01
	.byte	$02
	.byte	$BB
	.byte	$B2
	.byte	$02
	.byte	$01
	.byte	$85
	.byte	$89
	.byte	$02
	.byte	$02
	.byte	$49
	.byte	$44
	.byte	$02
_hotspots_0:
	.byte	$04
	.byte	$B4
	.byte	$02
	.byte	$5C
	.byte	$04
	.byte	$5A
	.byte	$03
	.byte	$3C
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$B9
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$37
	.byte	$04
	.byte	$58
	.byte	$03
	.byte	$A9
	.byte	$04
	.byte	$BE
	.byte	$03
	.byte	$BE
	.byte	$04
	.byte	$BB
	.byte	$04
	.byte	$BB
	.byte	$03
	.byte	$87
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$B6
	.byte	$04
	.byte	$9C
	.byte	$02
	.byte	$2E
	.byte	$04
	.byte	$A8
	.byte	$04
	.byte	$9E
_scr_1_00:
	.byte	$F4
	.byte	$04
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$10
	.byte	$02
	.byte	$24
	.byte	$E0
	.byte	$04
	.byte	$20
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$04
	.byte	$B0
	.byte	$02
	.byte	$0E
	.byte	$14
	.byte	$20
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$14
	.byte	$D0
	.byte	$14
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$14
	.byte	$D0
	.byte	$14
	.byte	$30
	.byte	$18
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$14
	.byte	$09
	.byte	$C0
	.byte	$14
	.byte	$06
	.byte	$27
	.byte	$90
	.byte	$04
_scr_1_01:
	.byte	$F4
	.byte	$14
	.byte	$0B
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$1D
	.byte	$20
	.byte	$05
	.byte	$16
	.byte	$10
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$0D
	.byte	$0E
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$02
	.byte	$20
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$0E
	.byte	$15
	.byte	$00
	.byte	$07
	.byte	$05
	.byte	$20
	.byte	$07
	.byte	$25
	.byte	$07
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$15
	.byte	$10
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$04
	.byte	$25
	.byte	$00
	.byte	$15
	.byte	$06
	.byte	$10
	.byte	$06
	.byte	$00
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$74
	.byte	$10
	.byte	$64
	.byte	$5B
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$4B
	.byte	$04
	.byte	$50
	.byte	$04
	.byte	$05
	.byte	$0A
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$34
	.byte	$40
_scr_1_02:
	.byte	$F4
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$05
	.byte	$16
	.byte	$10
	.byte	$05
	.byte	$06
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$02
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$06
	.byte	$10
	.byte	$07
	.byte	$05
	.byte	$06
	.byte	$10
	.byte	$07
	.byte	$05
	.byte	$00
	.byte	$07
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$00
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$25
	.byte	$10
	.byte	$06
	.byte	$00
	.byte	$06
	.byte	$10
	.byte	$06
	.byte	$10
	.byte	$15
	.byte	$00
	.byte	$24
	.byte	$10
	.byte	$94
	.byte	$00
	.byte	$1B
	.byte	$04
	.byte	$00
	.byte	$05
	.byte	$04
	.byte	$7B
	.byte	$04
	.byte	$05
	.byte	$10
	.byte	$04
	.byte	$0A
	.byte	$05
	.byte	$04
	.byte	$70
	.byte	$04
	.byte	$05
	.byte	$10
	.byte	$34
	.byte	$30
	.byte	$01
	.byte	$20
	.byte	$14
_scr_1_03:
	.byte	$F4
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$02
	.byte	$01
	.byte	$10
	.byte	$12
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$20
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$C0
	.byte	$04
	.byte	$40
	.byte	$05
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$04
	.byte	$30
	.byte	$15
	.byte	$70
	.byte	$07
	.byte	$04
	.byte	$20
	.byte	$25
	.byte	$80
	.byte	$04
	.byte	$10
	.byte	$1D
	.byte	$1E
	.byte	$0D
	.byte	$5E
	.byte	$10
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$0D
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$0E
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$30
	.byte	$04
	.byte	$05
	.byte	$0A
	.byte	$0E
	.byte	$A0
	.byte	$07
	.byte	$34
	.byte	$37
	.byte	$59
	.byte	$10
	.byte	$04
_scr_1_04:
	.byte	$04
	.byte	$06
	.byte	$C0
	.byte	$14
	.byte	$06
	.byte	$05
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$40
	.byte	$44
	.byte	$27
	.byte	$40
	.byte	$27
	.byte	$14
	.byte	$03
	.byte	$14
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$44
	.byte	$A0
	.byte	$24
	.byte	$03
	.byte	$04
	.byte	$17
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$47
	.byte	$44
	.byte	$A0
	.byte	$14
	.byte	$03
	.byte	$14
	.byte	$20
	.byte	$5D
	.byte	$10
	.byte	$44
	.byte	$20
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0D
	.byte	$07
	.byte	$00
	.byte	$14
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$20
	.byte	$0E
	.byte	$30
	.byte	$0D
	.byte	$10
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$07
	.byte	$10
	.byte	$04
	.byte	$05
	.byte	$20
	.byte	$0D
	.byte	$10
	.byte	$14
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$20
	.byte	$04
	.byte	$15
	.byte	$07
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$06
	.byte	$04
_scr_1_05:
	.byte	$04
	.byte	$50
	.byte	$34
	.byte	$30
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$50
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$90
	.byte	$08
	.byte	$10
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$5A
	.byte	$34
	.byte	$40
	.byte	$A4
	.byte	$40
	.byte	$04
	.byte	$30
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$70
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$50
	.byte	$03
	.byte	$00
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$30
	.byte	$04
	.byte	$20
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$30
	.byte	$04
	.byte	$05
	.byte	$20
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$00
	.byte	$07
	.byte	$04
	.byte	$37
	.byte	$44
_scr_1_06:
	.byte	$10
	.byte	$34
	.byte	$70
	.byte	$14
	.byte	$20
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$80
	.byte	$01
	.byte	$F0
	.byte	$F0
	.byte	$04
	.byte	$B0
	.byte	$08
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$8A
	.byte	$04
	.byte	$40
	.byte	$D4
	.byte	$E0
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$F0
	.byte	$E0
	.byte	$04
	.byte	$ED
_scr_1_07:
	.byte	$C4
	.byte	$10
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$A0
	.byte	$05
	.byte	$04
	.byte	$C0
	.byte	$15
	.byte	$04
	.byte	$C0
	.byte	$24
	.byte	$90
	.byte	$08
	.byte	$10
	.byte	$1D
	.byte	$04
	.byte	$20
	.byte	$6A
	.byte	$24
	.byte	$1D
	.byte	$A4
	.byte	$3D
	.byte	$0E
	.byte	$04
	.byte	$90
	.byte	$0E
	.byte	$04
	.byte	$0E
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$A0
	.byte	$02
	.byte	$04
	.byte	$0E
	.byte	$00
	.byte	$04
	.byte	$80
	.byte	$04
	.byte	$10
	.byte	$01
	.byte	$10
	.byte	$04
	.byte	$80
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$8D
	.byte	$64
_scr_1_08:
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$20
	.byte	$04
	.byte	$15
	.byte	$10
	.byte	$0D
	.byte	$00
	.byte	$06
	.byte	$14
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$10
	.byte	$07
	.byte	$34
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$02
	.byte	$14
	.byte	$00
	.byte	$06
	.byte	$04
	.byte	$20
	.byte	$04
	.byte	$0B
	.byte	$01
	.byte	$10
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$20
	.byte	$04
	.byte	$30
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$14
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$10
	.byte	$0B
	.byte	$20
	.byte	$05
	.byte	$04
	.byte	$00
	.byte	$06
	.byte	$14
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$15
	.byte	$30
	.byte	$15
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$14
	.byte	$00
	.byte	$06
	.byte	$94
	.byte	$06
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$14
	.byte	$06
	.byte	$B0
	.byte	$06
	.byte	$14
	.byte	$02
	.byte	$B0
	.byte	$02
	.byte	$14
	.byte	$10
	.byte	$0E
	.byte	$10
	.byte	$18
	.byte	$19
	.byte	$10
	.byte	$06
	.byte	$10
	.byte	$14
	.byte	$10
	.byte	$02
	.byte	$70
	.byte	$02
	.byte	$10
	.byte	$04
_scr_1_09:
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$30
	.byte	$54
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$20
	.byte	$07
	.byte	$01
	.byte	$30
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$80
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$20
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$07
	.byte	$60
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$00
	.byte	$07
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$20
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$70
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$07
	.byte	$03
	.byte	$20
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$70
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$20
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$60
	.byte	$05
	.byte	$14
	.byte	$10
	.byte	$04
	.byte	$00
	.byte	$07
	.byte	$24
	.byte	$10
	.byte	$44
_scr_1_0a:
	.byte	$F4
	.byte	$00
	.byte	$12
	.byte	$20
	.byte	$12
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$02
	.byte	$F0
	.byte	$10
	.byte	$04
	.byte	$0E
	.byte	$5D
	.byte	$1E
	.byte	$0D
	.byte	$0E
	.byte	$10
	.byte	$0D
	.byte	$0E
	.byte	$04
	.byte	$00
	.byte	$0D
	.byte	$0E
	.byte	$1D
	.byte	$1E
	.byte	$10
	.byte	$0E
	.byte	$20
	.byte	$0E
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0D
	.byte	$0E
	.byte	$50
	.byte	$07
	.byte	$20
	.byte	$04
	.byte	$20
	.byte	$0E
	.byte	$A0
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$30
	.byte	$04
	.byte	$0D
	.byte	$0E
	.byte	$7D
	.byte	$04
	.byte	$05
	.byte	$20
	.byte	$04
	.byte	$0D
	.byte	$04
	.byte	$0E
	.byte	$1D
	.byte	$0E
	.byte	$2D
	.byte	$0E
	.byte	$04
	.byte	$15
	.byte	$10
	.byte	$04
	.byte	$0E
	.byte	$14
	.byte	$1E
	.byte	$04
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$D4
	.byte	$0E
	.byte	$14
_scr_1_0b:
	.byte	$F4
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$10
	.byte	$04
	.byte	$12
	.byte	$01
	.byte	$12
	.byte	$04
	.byte	$80
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$2E
	.byte	$0D
	.byte	$0E
	.byte	$2D
	.byte	$0E
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$20
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$20
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$50
	.byte	$0E
	.byte	$70
	.byte	$04
	.byte	$A0
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$06
	.byte	$80
	.byte	$04
	.byte	$40
	.byte	$06
	.byte	$3D
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$06
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$1D
	.byte	$30
	.byte	$04
	.byte	$40
	.byte	$06
	.byte	$04
	.byte	$0E
	.byte	$04
	.byte	$0D
	.byte	$0E
	.byte	$30
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$34
	.byte	$0E
	.byte	$04
	.byte	$07
	.byte	$20
	.byte	$04
	.byte	$40
	.byte	$04
_scr_1_0c:
	.byte	$04
	.byte	$D0
	.byte	$14
	.byte	$0E
	.byte	$20
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$14
	.byte	$02
	.byte	$B0
	.byte	$02
	.byte	$14
	.byte	$10
	.byte	$06
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$0E
	.byte	$10
	.byte	$14
	.byte	$10
	.byte	$02
	.byte	$70
	.byte	$02
	.byte	$10
	.byte	$14
	.byte	$06
	.byte	$20
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$04
	.byte	$06
	.byte	$02
	.byte	$B0
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$20
	.byte	$7A
	.byte	$20
	.byte	$04
	.byte	$06
	.byte	$10
	.byte	$09
	.byte	$76
	.byte	$08
	.byte	$10
	.byte	$04
	.byte	$06
	.byte	$05
	.byte	$20
	.byte	$02
	.byte	$30
	.byte	$02
	.byte	$20
	.byte	$05
	.byte	$04
	.byte	$0D
	.byte	$15
	.byte	$90
	.byte	$15
	.byte	$04
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$10
	.byte	$2D
	.byte	$0E
	.byte	$1D
	.byte	$0E
	.byte	$24
_scr_1_0d:
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$24
	.byte	$10
	.byte	$54
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$20
	.byte	$02
	.byte	$01
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$07
	.byte	$20
	.byte	$04
	.byte	$60
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$30
	.byte	$04
	.byte	$60
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$07
	.byte	$20
	.byte	$04
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$2E
	.byte	$0D
	.byte	$10
	.byte	$04
	.byte	$30
	.byte	$02
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$0D
	.byte	$10
	.byte	$04
	.byte	$B0
	.byte	$0D
	.byte	$10
	.byte	$0D
	.byte	$A4
	.byte	$0E
	.byte	$0D
	.byte	$10
	.byte	$0D
	.byte	$60
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$0D
	.byte	$1A
	.byte	$0D
	.byte	$B0
	.byte	$0E
	.byte	$1D
	.byte	$2E
	.byte	$3D
	.byte	$1E
	.byte	$0D
	.byte	$2E
_scr_1_0e:
	.byte	$F4
	.byte	$30
	.byte	$02
	.byte	$20
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$F0
	.byte	$30
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$F0
	.byte	$00
	.byte	$0D
	.byte	$1E
	.byte	$0D
	.byte	$30
	.byte	$0E
	.byte	$0D
	.byte	$2E
	.byte	$0D
	.byte	$2E
	.byte	$02
	.byte	$00
	.byte	$0E
	.byte	$40
	.byte	$0E
	.byte	$12
	.byte	$00
	.byte	$0E
	.byte	$50
	.byte	$05
	.byte	$A0
	.byte	$1E
	.byte	$0D
	.byte	$2E
	.byte	$10
	.byte	$1E
	.byte	$0D
	.byte	$2E
	.byte	$0D
	.byte	$04
	.byte	$10
	.byte	$0E
	.byte	$60
	.byte	$0E
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$0E
	.byte	$60
	.byte	$05
	.byte	$80
	.byte	$0E
	.byte	$2D
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$2D
	.byte	$2E
	.byte	$0D
	.byte	$1E
_scr_1_0f:
	.byte	$44
	.byte	$30
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$30
	.byte	$04
	.byte	$20
	.byte	$07
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$30
	.byte	$04
	.byte	$30
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$30
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$30
	.byte	$04
	.byte	$07
	.byte	$20
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$1E
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$30
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$0E
	.byte	$00
	.byte	$0E
	.byte	$30
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$70
	.byte	$06
	.byte	$04
	.byte	$40
	.byte	$A4
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$30
	.byte	$02
	.byte	$01
	.byte	$80
	.byte	$04
	.byte	$B0
	.byte	$2A
	.byte	$04
	.byte	$1D
	.byte	$1E
	.byte	$6D
	.byte	$0E
	.byte	$34
_scr_1_10:
	.byte	$1D
	.byte	$0E
	.byte	$04
	.byte	$10
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$04
	.byte	$1E
	.byte	$34
	.byte	$0E
	.byte	$0B
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$04
	.byte	$0E
	.byte	$24
	.byte	$0B
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$20
	.byte	$0E
	.byte	$54
	.byte	$40
	.byte	$04
	.byte	$10
	.byte	$0E
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$20
	.byte	$04
	.byte	$00
	.byte	$0E
	.byte	$04
	.byte	$20
	.byte	$64
	.byte	$10
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$20
	.byte	$02
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$02
	.byte	$0B
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$07
	.byte	$60
	.byte	$0E
	.byte	$0D
	.byte	$10
	.byte	$34
	.byte	$20
	.byte	$18
	.byte	$20
	.byte	$04
	.byte	$0E
	.byte	$20
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$14
	.byte	$05
	.byte	$30
	.byte	$04
	.byte	$05
	.byte	$40
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$20
	.byte	$04
	.byte	$15
	.byte	$20
	.byte	$25
	.byte	$14
	.byte	$25
	.byte	$10
	.byte	$F4
_scr_1_11:
	.byte	$04
	.byte	$0D
	.byte	$0E
	.byte	$C4
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$F0
	.byte	$50
	.byte	$03
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$F0
	.byte	$50
	.byte	$1E
	.byte	$5A
	.byte	$1E
	.byte	$10
	.byte	$06
	.byte	$F4
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$0B
	.byte	$46
	.byte	$0B
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$40
	.byte	$03
	.byte	$46
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$80
	.byte	$02
	.byte	$40
	.byte	$26
	.byte	$20
	.byte	$05
	.byte	$30
	.byte	$05
	.byte	$20
	.byte	$46
	.byte	$F4
_scr_1_12:
	.byte	$F4
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$02
	.byte	$F0
	.byte	$30
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$40
	.byte	$06
	.byte	$0C
	.byte	$B0
	.byte	$36
	.byte	$38
	.byte	$49
	.byte	$0A
	.byte	$16
	.byte	$F4
	.byte	$00
	.byte	$02
	.byte	$56
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$16
	.byte	$20
	.byte	$36
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$30
	.byte	$02
	.byte	$40
	.byte	$26
	.byte	$20
	.byte	$06
	.byte	$70
	.byte	$46
	.byte	$10
	.byte	$F4
_scr_1_13:
	.byte	$F4
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$40
	.byte	$01
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$20
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$16
	.byte	$C0
	.byte	$14
	.byte	$0E
	.byte	$2D
	.byte	$17
	.byte	$1E
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$06
	.byte	$10
	.byte	$04
	.byte	$36
	.byte	$0E
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$0E
	.byte	$02
	.byte	$1D
	.byte	$00
	.byte	$07
	.byte	$36
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$0E
	.byte	$0D
	.byte	$10
	.byte	$06
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$16
	.byte	$30
	.byte	$04
	.byte	$0E
	.byte	$07
	.byte	$00
	.byte	$06
	.byte	$30
	.byte	$36
	.byte	$20
	.byte	$04
	.byte	$20
	.byte	$06
	.byte	$94
	.byte	$00
	.byte	$04
	.byte	$27
	.byte	$04
_scr_1_14:
	.byte	$F4
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$0E
	.byte	$0D
	.byte	$4E
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$04
	.byte	$00
	.byte	$0E
	.byte	$20
	.byte	$02
	.byte	$80
	.byte	$04
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$04
	.byte	$E0
	.byte	$06
	.byte	$20
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$E0
	.byte	$06
	.byte	$50
	.byte	$26
	.byte	$50
	.byte	$F6
	.byte	$F4
_scr_1_15:
	.byte	$F4
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$30
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$F0
	.byte	$50
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$40
	.byte	$B7
	.byte	$40
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$F0
	.byte	$50
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$F0
	.byte	$40
	.byte	$0D
	.byte	$0E
	.byte	$2D
	.byte	$1A
	.byte	$2D
	.byte	$0E
	.byte	$0D
	.byte	$10
	.byte	$16
	.byte	$0E
	.byte	$06
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$16
	.byte	$0E
	.byte	$1D
	.byte	$06
	.byte	$0E
	.byte	$06
	.byte	$00
	.byte	$44
	.byte	$0E
	.byte	$34
	.byte	$1E
	.byte	$34
_scr_1_16:
	.byte	$F4
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$20
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$F0
	.byte	$50
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$F0
	.byte	$30
	.byte	$0E
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$4E
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$0E
	.byte	$1D
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$0E
	.byte	$01
	.byte	$0E
	.byte	$02
	.byte	$0E
	.byte	$0D
	.byte	$20
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$0E
	.byte	$10
	.byte	$34
	.byte	$B0
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$06
	.byte	$0C
	.byte	$70
	.byte	$05
	.byte	$04
	.byte	$30
	.byte	$16
	.byte	$28
	.byte	$06
	.byte	$20
	.byte	$F4
_scr_1_17:
	.byte	$94
	.byte	$00
	.byte	$04
	.byte	$20
	.byte	$04
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$06
	.byte	$10
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$04
	.byte	$20
	.byte	$06
	.byte	$58
	.byte	$0A
	.byte	$06
	.byte	$20
	.byte	$04
	.byte	$0D
	.byte	$1E
	.byte	$0D
	.byte	$1E
	.byte	$0D
	.byte	$0E
	.byte	$0D
	.byte	$2E
	.byte	$20
	.byte	$04
	.byte	$0D
	.byte	$02
	.byte	$00
	.byte	$0E
	.byte	$01
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$0E
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$10
	.byte	$04
	.byte	$0E
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$20
	.byte	$04
	.byte	$D0
	.byte	$06
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$6A
	.byte	$06
	.byte	$30
	.byte	$F4
	.byte	$04
_map_1:
	.addr	_scr_1_00
	.addr	_scr_1_01
	.addr	_scr_1_02
	.addr	_scr_1_03
	.addr	_scr_1_04
	.addr	_scr_1_05
	.addr	_scr_1_06
	.addr	_scr_1_07
	.addr	_scr_1_08
	.addr	_scr_1_09
	.addr	_scr_1_0a
	.addr	_scr_1_0b
	.addr	_scr_1_0c
	.addr	_scr_1_0d
	.addr	_scr_1_0e
	.addr	_scr_1_0f
	.addr	_scr_1_10
	.addr	_scr_1_11
	.addr	_scr_1_12
	.addr	_scr_1_13
	.addr	_scr_1_14
	.addr	_scr_1_15
	.addr	_scr_1_16
	.addr	_scr_1_17
_map_1_locks:
	.byte	$10
	.byte	$59
_enems_1:
	.byte	$02
	.byte	$21
	.byte	$A1
	.byte	$02
	.byte	$00
	.byte	$21
	.byte	$91
	.byte	$01
	.byte	$00
	.byte	$B8
	.byte	$BF
	.byte	$04
	.byte	$03
	.byte	$48
	.byte	$98
	.byte	$02
	.byte	$01
	.byte	$53
	.byte	$73
	.byte	$01
	.byte	$06
	.byte	$3C
	.byte	$3D
	.byte	$00
	.byte	$03
	.byte	$43
	.byte	$A3
	.byte	$01
	.byte	$00
	.byte	$54
	.byte	$5D
	.byte	$01
	.byte	$01
	.byte	$8B
	.byte	$4B
	.byte	$04
	.byte	$06
	.byte	$3E
	.byte	$2E
	.byte	$00
	.byte	$00
	.byte	$79
	.byte	$7C
	.byte	$04
	.byte	$03
	.byte	$8C
	.byte	$87
	.byte	$02
	.byte	$01
	.byte	$99
	.byte	$B9
	.byte	$01
	.byte	$01
	.byte	$7C
	.byte	$77
	.byte	$01
	.byte	$03
	.byte	$54
	.byte	$5E
	.byte	$02
	.byte	$02
	.byte	$73
	.byte	$71
	.byte	$01
	.byte	$04
	.byte	$4C
	.byte	$46
	.byte	$01
	.byte	$01
	.byte	$B7
	.byte	$BA
	.byte	$01
	.byte	$04
	.byte	$5C
	.byte	$53
	.byte	$01
	.byte	$01
	.byte	$B9
	.byte	$B1
	.byte	$02
	.byte	$02
	.byte	$BE
	.byte	$BA
	.byte	$01
	.byte	$02
	.byte	$B8
	.byte	$86
	.byte	$01
	.byte	$02
	.byte	$B4
	.byte	$82
	.byte	$01
	.byte	$04
	.byte	$59
	.byte	$53
	.byte	$01
	.byte	$03
	.byte	$69
	.byte	$64
	.byte	$01
	.byte	$00
	.byte	$81
	.byte	$8E
	.byte	$02
	.byte	$00
	.byte	$45
	.byte	$68
	.byte	$00
	.byte	$01
	.byte	$45
	.byte	$95
	.byte	$01
	.byte	$01
	.byte	$BB
	.byte	$BD
	.byte	$01
	.byte	$02
	.byte	$B8
	.byte	$B7
	.byte	$01
	.byte	$03
	.byte	$32
	.byte	$3B
	.byte	$01
	.byte	$02
	.byte	$85
	.byte	$8B
	.byte	$01
	.byte	$00
	.byte	$68
	.byte	$67
	.byte	$01
	.byte	$02
	.byte	$38
	.byte	$32
	.byte	$01
	.byte	$00
	.byte	$26
	.byte	$58
	.byte	$04
	.byte	$00
	.byte	$8C
	.byte	$87
	.byte	$02
	.byte	$03
	.byte	$AD
	.byte	$2D
	.byte	$02
	.byte	$02
	.byte	$71
	.byte	$91
	.byte	$01
	.byte	$00
	.byte	$4B
	.byte	$44
	.byte	$00
	.byte	$02
	.byte	$8E
	.byte	$85
	.byte	$02
	.byte	$01
	.byte	$B4
	.byte	$BD
	.byte	$02
	.byte	$03
	.byte	$59
	.byte	$5E
	.byte	$01
	.byte	$01
	.byte	$8A
	.byte	$83
	.byte	$02
	.byte	$02
	.byte	$5D
	.byte	$58
	.byte	$02
	.byte	$02
	.byte	$B7
	.byte	$BB
	.byte	$01
	.byte	$06
	.byte	$55
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$87
	.byte	$82
	.byte	$01
	.byte	$00
	.byte	$BF
	.byte	$B2
	.byte	$02
	.byte	$06
	.byte	$B4
	.byte	$A4
	.byte	$00
	.byte	$02
	.byte	$6B
	.byte	$8B
	.byte	$01
	.byte	$00
	.byte	$25
	.byte	$B5
	.byte	$02
	.byte	$01
	.byte	$9C
	.byte	$9E
	.byte	$01
	.byte	$00
	.byte	$54
	.byte	$53
	.byte	$01
	.byte	$02
	.byte	$BA
	.byte	$B3
	.byte	$02
	.byte	$02
	.byte	$B8
	.byte	$B1
	.byte	$01
	.byte	$03
	.byte	$5C
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$BB
	.byte	$BA
	.byte	$01
	.byte	$06
	.byte	$62
	.byte	$52
	.byte	$00
	.byte	$00
	.byte	$46
	.byte	$4B
	.byte	$02
	.byte	$02
	.byte	$9A
	.byte	$94
	.byte	$01
	.byte	$01
	.byte	$37
	.byte	$32
	.byte	$01
	.byte	$02
	.byte	$99
	.byte	$97
	.byte	$01
	.byte	$04
	.byte	$49
	.byte	$89
	.byte	$01
	.byte	$03
	.byte	$22
	.byte	$4D
	.byte	$02
	.byte	$02
	.byte	$9D
	.byte	$92
	.byte	$02
	.byte	$04
	.byte	$5E
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$5D
	.byte	$38
	.byte	$01
	.byte	$02
	.byte	$AC
	.byte	$A8
	.byte	$01
	.byte	$03
	.byte	$57
	.byte	$37
	.byte	$00
	.byte	$04
	.byte	$AA
	.byte	$A2
	.byte	$01
	.byte	$00
	.byte	$85
	.byte	$89
	.byte	$02
	.byte	$02
	.byte	$49
	.byte	$44
	.byte	$02
_hotspots_1:
	.byte	$04
	.byte	$B3
	.byte	$04
	.byte	$77
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$55
	.byte	$03
	.byte	$A8
	.byte	$04
	.byte	$9B
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$BD
	.byte	$04
	.byte	$A7
	.byte	$02
	.byte	$7A
	.byte	$04
	.byte	$B3
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$33
	.byte	$04
	.byte	$84
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$52
	.byte	$03
	.byte	$6A
	.byte	$04
	.byte	$53
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$6C
	.byte	$04
	.byte	$31
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$51
	.byte	$04
	.byte	$8E
_scr_2_00:
	.byte	$F6
	.byte	$A6
	.byte	$19
	.byte	$28
	.byte	$26
	.byte	$19
	.byte	$28
	.byte	$06
	.byte	$29
	.byte	$38
	.byte	$19
	.byte	$08
	.byte	$09
	.byte	$48
	.byte	$19
	.byte	$48
	.byte	$06
	.byte	$09
	.byte	$78
	.byte	$09
	.byte	$28
	.byte	$39
	.byte	$D8
	.byte	$06
	.byte	$28
	.byte	$09
	.byte	$38
	.byte	$39
	.byte	$28
	.byte	$06
	.byte	$E8
	.byte	$06
	.byte	$09
	.byte	$D8
	.byte	$26
	.byte	$68
	.byte	$16
	.byte	$09
	.byte	$28
	.byte	$26
	.byte	$4C
	.byte	$06
	.byte	$19
	.byte	$06
	.byte	$09
	.byte	$06
	.byte	$18
	.byte	$06
	.byte	$67
	.byte	$39
	.byte	$16
	.byte	$17
	.byte	$00
_scr_2_01:
	.byte	$16
	.byte	$29
	.byte	$02
	.byte	$90
	.byte	$08
	.byte	$29
	.byte	$08
	.byte	$12
	.byte	$80
	.byte	$18
	.byte	$09
	.byte	$28
	.byte	$02
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$50
	.byte	$58
	.byte	$22
	.byte	$20
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$49
	.byte	$18
	.byte	$22
	.byte	$50
	.byte	$68
	.byte	$32
	.byte	$40
	.byte	$78
	.byte	$32
	.byte	$30
	.byte	$78
	.byte	$42
	.byte	$20
	.byte	$88
	.byte	$42
	.byte	$10
	.byte	$88
	.byte	$52
	.byte	$00
	.byte	$98
	.byte	$1C
	.byte	$32
	.byte	$F7
	.byte	$00
_scr_2_02:
	.byte	$00
	.byte	$09
	.byte	$16
	.byte	$D0
	.byte	$06
	.byte	$09
	.byte	$70
	.byte	$0B
	.byte	$40
	.byte	$09
	.byte	$90
	.byte	$0B
	.byte	$1A
	.byte	$50
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$F0
	.byte	$20
	.byte	$12
	.byte	$20
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$60
	.byte	$32
	.byte	$B0
	.byte	$32
	.byte	$20
	.byte	$0B
	.byte	$30
	.byte	$0B
	.byte	$00
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$F0
	.byte	$F0
	.byte	$50
	.byte	$1C
	.byte	$30
	.byte	$22
	.byte	$20
	.byte	$F7
	.byte	$27
	.byte	$02
	.byte	$82
	.byte	$89
	.byte	$28
	.byte	$02
	.byte	$87
	.byte	$8D
	.byte	$00
_scr_2_03:
	.byte	$B0
	.byte	$32
	.byte	$B0
	.byte	$32
	.byte	$1A
	.byte	$0B
	.byte	$90
	.byte	$22
	.byte	$20
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$70
	.byte	$12
	.byte	$E0
	.byte	$03
	.byte	$80
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$20
	.byte	$03
	.byte	$70
	.byte	$02
	.byte	$50
	.byte	$03
	.byte	$10
	.byte	$1B
	.byte	$20
	.byte	$32
	.byte	$00
	.byte	$1B
	.byte	$00
	.byte	$03
	.byte	$50
	.byte	$42
	.byte	$30
	.byte	$03
	.byte	$40
	.byte	$62
	.byte	$20
	.byte	$03
	.byte	$40
	.byte	$62
	.byte	$20
	.byte	$03
	.byte	$F7
	.byte	$27
	.byte	$02
	.byte	$82
	.byte	$8D
	.byte	$28
	.byte	$02
	.byte	$83
	.byte	$8C
	.byte	$00
_scr_2_04:
	.byte	$22
	.byte	$30
	.byte	$03
	.byte	$70
	.byte	$22
	.byte	$30
	.byte	$03
	.byte	$70
	.byte	$12
	.byte	$30
	.byte	$22
	.byte	$60
	.byte	$02
	.byte	$30
	.byte	$42
	.byte	$A0
	.byte	$42
	.byte	$B0
	.byte	$22
	.byte	$50
	.byte	$0B
	.byte	$D0
	.byte	$0B
	.byte	$20
	.byte	$0B
	.byte	$30
	.byte	$1B
	.byte	$30
	.byte	$0B
	.byte	$F0
	.byte	$50
	.byte	$12
	.byte	$C0
	.byte	$32
	.byte	$80
	.byte	$F7
	.byte	$27
	.byte	$03
	.byte	$82
	.byte	$87
	.byte	$88
	.byte	$A9
	.byte	$8D
	.byte	$00
_scr_2_05:
	.byte	$50
	.byte	$05
	.byte	$22
	.byte	$05
	.byte	$A0
	.byte	$0B
	.byte	$22
	.byte	$0B
	.byte	$B0
	.byte	$32
	.byte	$60
	.byte	$0B
	.byte	$30
	.byte	$22
	.byte	$60
	.byte	$1B
	.byte	$30
	.byte	$02
	.byte	$0C
	.byte	$02
	.byte	$50
	.byte	$0B
	.byte	$00
	.byte	$0B
	.byte	$C4
	.byte	$20
	.byte	$12
	.byte	$10
	.byte	$2D
	.byte	$10
	.byte	$12
	.byte	$40
	.byte	$12
	.byte	$60
	.byte	$12
	.byte	$40
	.byte	$1C
	.byte	$60
	.byte	$1C
	.byte	$40
	.byte	$11
	.byte	$60
	.byte	$11
	.byte	$30
	.byte	$0E
	.byte	$11
	.byte	$0E
	.byte	$40
	.byte	$0E
	.byte	$11
	.byte	$0E
	.byte	$00
	.byte	$F7
	.byte	$A7
	.byte	$26
	.byte	$A8
	.byte	$2A
	.byte	$00
_scr_2_06:
	.byte	$F0
	.byte	$F0
	.byte	$10
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$E0
	.byte	$01
	.byte	$0C
	.byte	$50
	.byte	$1C
	.byte	$30
	.byte	$F4
	.byte	$20
	.byte	$15
	.byte	$62
	.byte	$15
	.byte	$40
	.byte	$1B
	.byte	$62
	.byte	$1B
	.byte	$70
	.byte	$42
	.byte	$F0
	.byte	$F0
	.byte	$40
	.byte	$F7
	.byte	$27
	.byte	$04
	.byte	$83
	.byte	$84
	.byte	$8C
	.byte	$8D
	.byte	$00
_scr_2_07:
	.byte	$30
	.byte	$62
	.byte	$30
	.byte	$05
	.byte	$30
	.byte	$62
	.byte	$30
	.byte	$05
	.byte	$20
	.byte	$01
	.byte	$00
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$05
	.byte	$20
	.byte	$01
	.byte	$10
	.byte	$22
	.byte	$10
	.byte	$01
	.byte	$20
	.byte	$05
	.byte	$10
	.byte	$0C
	.byte	$01
	.byte	$0C
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$0C
	.byte	$01
	.byte	$0C
	.byte	$10
	.byte	$05
	.byte	$E4
	.byte	$0B
	.byte	$60
	.byte	$03
	.byte	$20
	.byte	$32
	.byte	$05
	.byte	$60
	.byte	$03
	.byte	$30
	.byte	$22
	.byte	$05
	.byte	$10
	.byte	$0E
	.byte	$30
	.byte	$03
	.byte	$10
	.byte	$0E
	.byte	$10
	.byte	$12
	.byte	$05
	.byte	$60
	.byte	$03
	.byte	$50
	.byte	$02
	.byte	$05
	.byte	$20
	.byte	$1C
	.byte	$10
	.byte	$03
	.byte	$1C
	.byte	$40
	.byte	$05
	.byte	$C7
	.byte	$10
	.byte	$05
	.byte	$00
_scr_2_08:
	.byte	$26
	.byte	$0B
	.byte	$74
	.byte	$0B
	.byte	$24
	.byte	$16
	.byte	$02
	.byte	$05
	.byte	$42
	.byte	$20
	.byte	$05
	.byte	$22
	.byte	$06
	.byte	$12
	.byte	$05
	.byte	$22
	.byte	$40
	.byte	$0B
	.byte	$22
	.byte	$09
	.byte	$12
	.byte	$05
	.byte	$12
	.byte	$70
	.byte	$12
	.byte	$09
	.byte	$12
	.byte	$05
	.byte	$A0
	.byte	$02
	.byte	$06
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$90
	.byte	$0B
	.byte	$00
	.byte	$09
	.byte	$10
	.byte	$0B
	.byte	$34
	.byte	$0B
	.byte	$10
	.byte	$0B
	.byte	$34
	.byte	$06
	.byte	$10
	.byte	$62
	.byte	$0A
	.byte	$05
	.byte	$38
	.byte	$06
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$22
	.byte	$05
	.byte	$38
	.byte	$06
	.byte	$22
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$22
	.byte	$0B
	.byte	$38
	.byte	$19
	.byte	$47
	.byte	$26
	.byte	$07
	.byte	$09
	.byte	$37
	.byte	$16
	.byte	$19
	.byte	$07
	.byte	$19
	.byte	$16
	.byte	$39
	.byte	$27
	.byte	$A9
	.byte	$3C
	.byte	$A7
	.byte	$74
	.byte	$A8
	.byte	$77
	.byte	$00
_scr_2_09:
	.byte	$F4
	.byte	$22
	.byte	$0B
	.byte	$10
	.byte	$42
	.byte	$40
	.byte	$02
	.byte	$50
	.byte	$22
	.byte	$50
	.byte	$02
	.byte	$50
	.byte	$22
	.byte	$70
	.byte	$0B
	.byte	$40
	.byte	$12
	.byte	$70
	.byte	$1B
	.byte	$30
	.byte	$02
	.byte	$60
	.byte	$54
	.byte	$0B
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$0B
	.byte	$40
	.byte	$68
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$1B
	.byte	$30
	.byte	$68
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$2B
	.byte	$20
	.byte	$68
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$3B
	.byte	$10
	.byte	$67
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$4B
	.byte	$00
	.byte	$F7
	.byte	$28
	.byte	$02
	.byte	$12
	.byte	$23
	.byte	$00
_scr_2_0a:
	.byte	$F4
	.byte	$10
	.byte	$05
	.byte	$00
	.byte	$22
	.byte	$40
	.byte	$32
	.byte	$10
	.byte	$05
	.byte	$00
	.byte	$12
	.byte	$40
	.byte	$42
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$02
	.byte	$0B
	.byte	$5A
	.byte	$05
	.byte	$12
	.byte	$10
	.byte	$05
	.byte	$90
	.byte	$05
	.byte	$12
	.byte	$10
	.byte	$05
	.byte	$90
	.byte	$05
	.byte	$1A
	.byte	$10
	.byte	$05
	.byte	$00
	.byte	$0B
	.byte	$2A
	.byte	$0B
	.byte	$30
	.byte	$05
	.byte	$30
	.byte	$0B
	.byte	$90
	.byte	$0B
	.byte	$F0
	.byte	$10
	.byte	$02
	.byte	$60
	.byte	$32
	.byte	$30
	.byte	$42
	.byte	$10
	.byte	$52
	.byte	$20
	.byte	$F7
	.byte	$A8
	.byte	$82
	.byte	$A7
	.byte	$8D
	.byte	$00
_scr_2_0b:
	.byte	$F4
	.byte	$52
	.byte	$30
	.byte	$A2
	.byte	$60
	.byte	$52
	.byte	$0B
	.byte	$12
	.byte	$10
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$30
	.byte	$32
	.byte	$05
	.byte	$02
	.byte	$A0
	.byte	$03
	.byte	$1A
	.byte	$05
	.byte	$B0
	.byte	$03
	.byte	$10
	.byte	$05
	.byte	$80
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$03
	.byte	$10
	.byte	$0B
	.byte	$B0
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$40
	.byte	$1C
	.byte	$20
	.byte	$1C
	.byte	$20
	.byte	$03
	.byte	$F7
	.byte	$A7
	.byte	$82
	.byte	$00
_scr_2_0c:
	.byte	$F4
	.byte	$F2
	.byte	$62
	.byte	$80
	.byte	$32
	.byte	$B0
	.byte	$12
	.byte	$03
	.byte	$20
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$80
	.byte	$03
	.byte	$90
	.byte	$0B
	.byte	$1A
	.byte	$00
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$D0
	.byte	$03
	.byte	$B0
	.byte	$02
	.byte	$10
	.byte	$03
	.byte	$30
	.byte	$22
	.byte	$30
	.byte	$12
	.byte	$10
	.byte	$03
	.byte	$20
	.byte	$92
	.byte	$10
	.byte	$03
	.byte	$1C
	.byte	$00
	.byte	$52
	.byte	$1C
	.byte	$12
	.byte	$F7
	.byte	$00
_scr_2_0d:
	.byte	$F4
	.byte	$A0
	.byte	$23
	.byte	$C0
	.byte	$23
	.byte	$B0
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$03
	.byte	$C0
	.byte	$23
	.byte	$0B
	.byte	$2A
	.byte	$0B
	.byte	$70
	.byte	$23
	.byte	$10
	.byte	$52
	.byte	$40
	.byte	$23
	.byte	$10
	.byte	$42
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$10
	.byte	$23
	.byte	$10
	.byte	$62
	.byte	$30
	.byte	$23
	.byte	$10
	.byte	$82
	.byte	$10
	.byte	$23
	.byte	$10
	.byte	$92
	.byte	$00
	.byte	$23
	.byte	$10
	.byte	$F7
	.byte	$00
_scr_2_0e:
	.byte	$F4
	.byte	$40
	.byte	$15
	.byte	$32
	.byte	$90
	.byte	$1B
	.byte	$22
	.byte	$C0
	.byte	$12
	.byte	$03
	.byte	$50
	.byte	$0A
	.byte	$0B
	.byte	$40
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$30
	.byte	$0E
	.byte	$0A
	.byte	$80
	.byte	$03
	.byte	$30
	.byte	$02
	.byte	$50
	.byte	$17
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$0E
	.byte	$00
	.byte	$02
	.byte	$50
	.byte	$19
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$40
	.byte	$07
	.byte	$06
	.byte	$09
	.byte	$10
	.byte	$03
	.byte	$0E
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$0E
	.byte	$30
	.byte	$07
	.byte	$26
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$19
	.byte	$16
	.byte	$09
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$2C
	.byte	$02
	.byte	$00
	.byte	$27
	.byte	$49
	.byte	$77
	.byte	$29
	.byte	$02
	.byte	$35
	.byte	$36
	.byte	$00
_scr_2_0f:
	.byte	$B4
	.byte	$0B
	.byte	$10
	.byte	$05
	.byte	$20
	.byte	$62
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$30
	.byte	$32
	.byte	$30
	.byte	$0B
	.byte	$10
	.byte	$05
	.byte	$B0
	.byte	$0F
	.byte	$10
	.byte	$05
	.byte	$8A
	.byte	$0B
	.byte	$1A
	.byte	$0B
	.byte	$1A
	.byte	$05
	.byte	$80
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$80
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$80
	.byte	$0B
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$60
	.byte	$22
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$05
	.byte	$50
	.byte	$22
	.byte	$20
	.byte	$0B
	.byte	$10
	.byte	$05
	.byte	$40
	.byte	$32
	.byte	$20
	.byte	$0F
	.byte	$10
	.byte	$05
	.byte	$B7
	.byte	$0B
	.byte	$10
	.byte	$05
	.byte	$28
	.byte	$02
	.byte	$19
	.byte	$89
	.byte	$00
_scr_2_10:
	.byte	$89
	.byte	$26
	.byte	$29
	.byte	$26
	.byte	$59
	.byte	$16
	.byte	$58
	.byte	$26
	.byte	$29
	.byte	$16
	.byte	$78
	.byte	$16
	.byte	$49
	.byte	$06
	.byte	$07
	.byte	$68
	.byte	$09
	.byte	$16
	.byte	$19
	.byte	$36
	.byte	$68
	.byte	$49
	.byte	$06
	.byte	$19
	.byte	$06
	.byte	$07
	.byte	$18
	.byte	$16
	.byte	$18
	.byte	$79
	.byte	$16
	.byte	$18
	.byte	$09
	.byte	$28
	.byte	$69
	.byte	$26
	.byte	$58
	.byte	$09
	.byte	$36
	.byte	$29
	.byte	$16
	.byte	$07
	.byte	$48
	.byte	$19
	.byte	$16
	.byte	$59
	.byte	$06
	.byte	$07
	.byte	$38
	.byte	$09
	.byte	$36
	.byte	$39
	.byte	$26
	.byte	$07
	.byte	$28
	.byte	$16
	.byte	$19
	.byte	$16
	.byte	$49
	.byte	$16
	.byte	$27
	.byte	$00
_scr_2_11:
	.byte	$59
	.byte	$26
	.byte	$39
	.byte	$26
	.byte	$48
	.byte	$09
	.byte	$16
	.byte	$19
	.byte	$26
	.byte	$08
	.byte	$16
	.byte	$58
	.byte	$29
	.byte	$16
	.byte	$28
	.byte	$16
	.byte	$68
	.byte	$19
	.byte	$06
	.byte	$48
	.byte	$06
	.byte	$18
	.byte	$16
	.byte	$38
	.byte	$09
	.byte	$58
	.byte	$06
	.byte	$28
	.byte	$09
	.byte	$F8
	.byte	$F8
	.byte	$08
	.byte	$06
	.byte	$88
	.byte	$06
	.byte	$48
	.byte	$09
	.byte	$88
	.byte	$06
	.byte	$E8
	.byte	$06
	.byte	$78
	.byte	$09
	.byte	$28
	.byte	$0E
	.byte	$18
	.byte	$06
	.byte	$F7
	.byte	$00
_scr_2_12:
	.byte	$0B
	.byte	$E4
	.byte	$05
	.byte	$22
	.byte	$50
	.byte	$52
	.byte	$05
	.byte	$12
	.byte	$70
	.byte	$42
	.byte	$05
	.byte	$02
	.byte	$00
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$60
	.byte	$12
	.byte	$00
	.byte	$05
	.byte	$70
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$03
	.byte	$60
	.byte	$12
	.byte	$50
	.byte	$03
	.byte	$0E
	.byte	$40
	.byte	$42
	.byte	$30
	.byte	$03
	.byte	$10
	.byte	$05
	.byte	$10
	.byte	$52
	.byte	$30
	.byte	$03
	.byte	$10
	.byte	$05
	.byte	$20
	.byte	$32
	.byte	$40
	.byte	$03
	.byte	$10
	.byte	$05
	.byte	$40
	.byte	$03
	.byte	$50
	.byte	$03
	.byte	$10
	.byte	$05
	.byte	$7C
	.byte	$30
	.byte	$03
	.byte	$10
	.byte	$F7
	.byte	$00
_scr_2_13:
	.byte	$F4
	.byte	$20
	.byte	$15
	.byte	$0B
	.byte	$60
	.byte	$03
	.byte	$40
	.byte	$2B
	.byte	$60
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$B0
	.byte	$32
	.byte	$A0
	.byte	$42
	.byte	$40
	.byte	$A7
	.byte	$20
	.byte	$17
	.byte	$A1
	.byte	$10
	.byte	$0E
	.byte	$90
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$80
	.byte	$0E
	.byte	$40
	.byte	$03
	.byte	$20
	.byte	$0E
	.byte	$30
	.byte	$2E
	.byte	$30
	.byte	$03
	.byte	$10
	.byte	$F1
	.byte	$A9
	.byte	$25
	.byte	$A7
	.byte	$33
	.byte	$A8
	.byte	$34
	.byte	$00
_scr_2_14:
	.byte	$F4
	.byte	$10
	.byte	$0B
	.byte	$10
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$10
	.byte	$0B
	.byte	$10
	.byte	$02
	.byte	$30
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$40
	.byte	$12
	.byte	$20
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$40
	.byte	$12
	.byte	$20
	.byte	$03
	.byte	$00
	.byte	$1B
	.byte	$00
	.byte	$03
	.byte	$40
	.byte	$F7
	.byte	$F1
	.byte	$40
	.byte	$03
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$32
	.byte	$40
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$10
	.byte	$22
	.byte	$40
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$20
	.byte	$12
	.byte	$20
	.byte	$1C
	.byte	$03
	.byte	$30
	.byte	$03
	.byte	$1C
	.byte	$10
	.byte	$03
	.byte	$F1
	.byte	$00
_scr_2_15:
	.byte	$F4
	.byte	$30
	.byte	$0B
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$0B
	.byte	$42
	.byte	$60
	.byte	$02
	.byte	$30
	.byte	$32
	.byte	$60
	.byte	$03
	.byte	$40
	.byte	$22
	.byte	$60
	.byte	$03
	.byte	$70
	.byte	$F7
	.byte	$31
	.byte	$0B
	.byte	$41
	.byte	$0B
	.byte	$41
	.byte	$22
	.byte	$30
	.byte	$03
	.byte	$20
	.byte	$02
	.byte	$28
	.byte	$01
	.byte	$12
	.byte	$40
	.byte	$03
	.byte	$30
	.byte	$02
	.byte	$28
	.byte	$02
	.byte	$50
	.byte	$03
	.byte	$40
	.byte	$02
	.byte	$18
	.byte	$60
	.byte	$0C
	.byte	$50
	.byte	$02
	.byte	$08
	.byte	$F1
	.byte	$28
	.byte	$02
	.byte	$24
	.byte	$2A
	.byte	$27
	.byte	$02
	.byte	$74
	.byte	$7A
	.byte	$00
_scr_2_16:
	.byte	$0B
	.byte	$D1
	.byte	$0B
	.byte	$01
	.byte	$D8
	.byte	$11
	.byte	$E8
	.byte	$01
	.byte	$1A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$98
	.byte	$01
	.byte	$C8
	.byte	$21
	.byte	$28
	.byte	$0E
	.byte	$98
	.byte	$11
	.byte	$D8
	.byte	$11
	.byte	$68
	.byte	$0E
	.byte	$58
	.byte	$01
	.byte	$E8
	.byte	$01
	.byte	$E8
	.byte	$11
	.byte	$DC
	.byte	$01
	.byte	$0B
	.byte	$D1
	.byte	$0B
	.byte	$00
_scr_2_17:
	.byte	$B4
	.byte	$0B
	.byte	$10
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$42
	.byte	$60
	.byte	$0A
	.byte	$06
	.byte	$10
	.byte	$42
	.byte	$70
	.byte	$06
	.byte	$20
	.byte	$22
	.byte	$80
	.byte	$06
	.byte	$01
	.byte	$20
	.byte	$03
	.byte	$80
	.byte	$0A
	.byte	$09
	.byte	$01
	.byte	$20
	.byte	$03
	.byte	$60
	.byte	$22
	.byte	$06
	.byte	$01
	.byte	$20
	.byte	$03
	.byte	$50
	.byte	$32
	.byte	$09
	.byte	$01
	.byte	$32
	.byte	$40
	.byte	$32
	.byte	$0E
	.byte	$06
	.byte	$01
	.byte	$42
	.byte	$30
	.byte	$22
	.byte	$29
	.byte	$01
	.byte	$42
	.byte	$30
	.byte	$12
	.byte	$19
	.byte	$16
	.byte	$01
	.byte	$42
	.byte	$20
	.byte	$16
	.byte	$29
	.byte	$16
	.byte	$47
	.byte	$29
	.byte	$26
	.byte	$29
	.byte	$16
	.byte	$00
_map_2:
	.addr	_scr_2_00
	.addr	_scr_2_01
	.addr	_scr_2_02
	.addr	_scr_2_03
	.addr	_scr_2_04
	.addr	_scr_2_05
	.addr	_scr_2_06
	.addr	_scr_2_07
	.addr	_scr_2_08
	.addr	_scr_2_09
	.addr	_scr_2_0a
	.addr	_scr_2_0b
	.addr	_scr_2_0c
	.addr	_scr_2_0d
	.addr	_scr_2_0e
	.addr	_scr_2_0f
	.addr	_scr_2_10
	.addr	_scr_2_11
	.addr	_scr_2_12
	.addr	_scr_2_13
	.addr	_scr_2_14
	.addr	_scr_2_15
	.addr	_scr_2_16
	.addr	_scr_2_17
_map_2_locks:
	.byte	$0F
	.byte	$3C
	.byte	$0F
	.byte	$AC
_enems_2:
	.byte	$01
	.byte	$A3
	.byte	$A7
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$27
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$B6
	.byte	$BD
	.byte	$01
	.byte	$03
	.byte	$19
	.byte	$7A
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$59
	.byte	$5B
	.byte	$01
	.byte	$01
	.byte	$35
	.byte	$33
	.byte	$01
	.byte	$02
	.byte	$B4
	.byte	$BB
	.byte	$02
	.byte	$02
	.byte	$B2
	.byte	$BD
	.byte	$02
	.byte	$03
	.byte	$5D
	.byte	$72
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$95
	.byte	$AB
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$55
	.byte	$01
	.byte	$01
	.byte	$5B
	.byte	$5D
	.byte	$01
	.byte	$02
	.byte	$54
	.byte	$59
	.byte	$01
	.byte	$03
	.byte	$85
	.byte	$9B
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$24
	.byte	$4A
	.byte	$02
	.byte	$03
	.byte	$72
	.byte	$8A
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$AA
	.byte	$A3
	.byte	$01
	.byte	$02
	.byte	$64
	.byte	$68
	.byte	$01
	.byte	$03
	.byte	$AC
	.byte	$8C
	.byte	$01
	.byte	$04
	.byte	$B9
	.byte	$79
	.byte	$02
	.byte	$03
	.byte	$36
	.byte	$5D
	.byte	$02
	.byte	$01
	.byte	$A2
	.byte	$A5
	.byte	$01
	.byte	$02
	.byte	$37
	.byte	$3C
	.byte	$01
	.byte	$01
	.byte	$68
	.byte	$64
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$39
	.byte	$37
	.byte	$01
	.byte	$01
	.byte	$6C
	.byte	$6E
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$63
	.byte	$61
	.byte	$01
	.byte	$02
	.byte	$46
	.byte	$48
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$76
	.byte	$78
	.byte	$01
	.byte	$03
	.byte	$92
	.byte	$BE
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$4B
	.byte	$43
	.byte	$02
	.byte	$02
	.byte	$B3
	.byte	$BA
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$39
	.byte	$69
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$35
	.byte	$75
	.byte	$01
	.byte	$01
	.byte	$B7
	.byte	$B2
	.byte	$01
	.byte	$01
	.byte	$B9
	.byte	$BB
	.byte	$02
	.byte	$01
	.byte	$33
	.byte	$35
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$B9
	.byte	$BD
	.byte	$01
	.byte	$01
	.byte	$5D
	.byte	$56
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$53
	.byte	$56
	.byte	$01
	.byte	$01
	.byte	$5C
	.byte	$59
	.byte	$01
	.byte	$01
	.byte	$B5
	.byte	$BA
	.byte	$01
	.byte	$02
	.byte	$52
	.byte	$5D
	.byte	$02
	.byte	$03
	.byte	$95
	.byte	$A9
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$28
	.byte	$78
	.byte	$01
	.byte	$04
	.byte	$59
	.byte	$5D
	.byte	$01
	.byte	$04
	.byte	$63
	.byte	$A3
	.byte	$01
	.byte	$04
	.byte	$51
	.byte	$5D
	.byte	$02
	.byte	$02
	.byte	$B8
	.byte	$B1
	.byte	$02
	.byte	$01
	.byte	$AB
	.byte	$A9
	.byte	$01
_hotspots_2:
	.byte	$04
	.byte	$6B
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$37
	.byte	$04
	.byte	$B7
	.byte	$04
	.byte	$77
	.byte	$04
	.byte	$32
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$B6
	.byte	$04
	.byte	$65
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$32
	.byte	$04
	.byte	$5E
	.byte	$02
	.byte	$3B
	.byte	$04
	.byte	$97
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$43
	.byte	$04
	.byte	$4A
	.byte	$04
	.byte	$97
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$BC
	.byte	$04
	.byte	$34
	.byte	$00
	.byte	$10
_sspl_00_a:
	.byte	$FC
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$0D
	.byte	$00
	.byte	$80
_sspl_00_b:
	.byte	$FC
	.byte	$00
	.byte	$0B
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$0D
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$0C
	.byte	$40
	.byte	$80
_sspl_01_a:
	.byte	$FC
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_sspl_01_b:
	.byte	$FC
	.byte	$00
	.byte	$0F
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$0E
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$40
	.byte	$80
_sspl_02_a:
	.byte	$FC
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$0D
	.byte	$00
	.byte	$80
_sspl_02_b:
	.byte	$FC
	.byte	$00
	.byte	$0B
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$0D
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$0C
	.byte	$40
	.byte	$80
_sspl_03_a:
	.byte	$FC
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$80
_sspl_03_b:
	.byte	$FC
	.byte	$00
	.byte	$0F
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$0E
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$13
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$12
	.byte	$40
	.byte	$80
_sspl_04_a:
	.byte	$FC
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0B
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$15
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$80
_sspl_04_b:
	.byte	$FC
	.byte	$00
	.byte	$0B
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$14
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$16
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$15
	.byte	$40
	.byte	$80
_ssen_00_a:
	.byte	$00
	.byte	$00
	.byte	$17
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$18
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$19
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$1A
	.byte	$01
	.byte	$80
_ssen_00_b:
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$17
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$1A
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$19
	.byte	$41
	.byte	$80
_ssen_01_a:
	.byte	$00
	.byte	$00
	.byte	$1B
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$1C
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$1D
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$1E
	.byte	$01
	.byte	$80
_ssen_01_b:
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$1B
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$1E
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$1D
	.byte	$41
	.byte	$80
_ssen_02_a:
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$20
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$21
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$22
	.byte	$02
	.byte	$80
_ssen_02_b:
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$1F
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$22
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$42
	.byte	$80
_ssen_03_a:
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$24
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$25
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$26
	.byte	$02
	.byte	$80
_ssen_03_b:
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$23
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$26
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$25
	.byte	$42
	.byte	$80
_ssen_04_a:
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$28
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$29
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$2A
	.byte	$03
	.byte	$80
_ssen_04_b:
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$27
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$2A
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$29
	.byte	$43
	.byte	$80
_ssen_05_a:
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$2D
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$2E
	.byte	$03
	.byte	$80
_ssen_05_b:
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$2B
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$2E
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$2D
	.byte	$43
	.byte	$80
_ssen_06_a:
	.byte	$00
	.byte	$00
	.byte	$2F
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$30
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$31
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$32
	.byte	$02
	.byte	$80
_ssen_06_b:
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$2F
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$32
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$31
	.byte	$42
	.byte	$80
_ssen_07_a:
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$35
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$36
	.byte	$02
	.byte	$80
_ssen_07_b:
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$33
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$36
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$35
	.byte	$42
	.byte	$80
_ssen_08_a:
	.byte	$00
	.byte	$00
	.byte	$37
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$38
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$39
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$3A
	.byte	$03
	.byte	$80
_ssen_08_b:
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$37
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$3A
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$39
	.byte	$43
	.byte	$80
_ssen_09_a:
	.byte	$00
	.byte	$00
	.byte	$3B
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$3D
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$3E
	.byte	$03
	.byte	$80
_ssen_09_b:
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$3B
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$3E
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$3D
	.byte	$43
	.byte	$80
_ssen_0A_a:
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$40
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$41
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$42
	.byte	$03
	.byte	$80
_ssen_0A_b:
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$3F
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$42
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$41
	.byte	$43
	.byte	$80
_ssen_0B_a:
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$44
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$45
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$46
	.byte	$03
	.byte	$80
_ssen_0B_b:
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$43
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$46
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$45
	.byte	$43
	.byte	$80
_ssen_0C_a:
	.byte	$00
	.byte	$00
	.byte	$47
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$48
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$49
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4A
	.byte	$02
	.byte	$80
_ssen_0C_b:
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$47
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4A
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$49
	.byte	$42
	.byte	$80
_ssen_0D_a:
	.byte	$00
	.byte	$00
	.byte	$4B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$48
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4C
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4D
	.byte	$02
	.byte	$80
_ssen_0D_b:
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$4B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$42
	.byte	$80
_ssen_0E_a:
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$4F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$50
	.byte	$40
	.byte	$80
_ssen_0E_b:
	.byte	$00
	.byte	$00
	.byte	$4F
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$4E
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$50
	.byte	$40
	.byte	$80
_ssen_0F_a:
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$50
	.byte	$40
	.byte	$80
_ssen_0F_b:
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$51
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$50
	.byte	$40
	.byte	$80
_ssen_10:
	.byte	$01
	.byte	$01
	.byte	$53
	.byte	$01
	.byte	$09
	.byte	$01
	.byte	$54
	.byte	$01
	.byte	$01
	.byte	$09
	.byte	$55
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$56
	.byte	$01
	.byte	$80
_ssen_11_a:
	.byte	$00
	.byte	$00
	.byte	$57
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$58
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$59
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$5A
	.byte	$03
	.byte	$80
_ssen_11_b:
	.byte	$00
	.byte	$00
	.byte	$58
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$57
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$5A
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$59
	.byte	$43
	.byte	$80
_ssen_12_a:
	.byte	$00
	.byte	$00
	.byte	$5B
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$5C
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$5D
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$5E
	.byte	$03
	.byte	$80
_ssen_12_b:
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$5B
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$5E
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$5D
	.byte	$43
	.byte	$80
_ssen_13_a:
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$60
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$61
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$62
	.byte	$02
	.byte	$80
_ssen_13_b:
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$5F
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$62
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$61
	.byte	$42
	.byte	$80
_ssen_14_a:
	.byte	$00
	.byte	$00
	.byte	$63
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$64
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$65
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$66
	.byte	$02
	.byte	$80
_ssen_14_b:
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$63
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$66
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$65
	.byte	$42
	.byte	$80
_ssen_15_a:
	.byte	$00
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$67
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$68
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$68
	.byte	$40
	.byte	$80
_ssen_15_b:
	.byte	$00
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$67
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$68
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$68
	.byte	$40
	.byte	$80
_ssen_16_a:
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$69
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$6A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$6A
	.byte	$40
	.byte	$80
_ssen_16_b:
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$69
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$6A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$6A
	.byte	$40
	.byte	$80
_ssit_00:
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$6C
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$6D
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$6D
	.byte	$40
	.byte	$80
_ssit_01:
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$6F
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$70
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$71
	.byte	$01
	.byte	$80
_ssit_02:
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$72
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$73
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$74
	.byte	$02
	.byte	$80
_ssit_03:
	.byte	$00
	.byte	$00
	.byte	$75
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$75
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$76
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$77
	.byte	$02
	.byte	$80
_ssit_04:
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$79
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$7A
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$7B
	.byte	$01
	.byte	$80
_ssending_00:
	.byte	$08
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$7D
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$7F
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$80
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$81
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$82
	.byte	$00
	.byte	$20
	.byte	$08
	.byte	$83
	.byte	$00
	.byte	$28
	.byte	$08
	.byte	$84
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$85
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$86
	.byte	$00
	.byte	$18
	.byte	$10
	.byte	$87
	.byte	$00
	.byte	$20
	.byte	$10
	.byte	$88
	.byte	$00
	.byte	$28
	.byte	$10
	.byte	$89
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$8A
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$8B
	.byte	$00
	.byte	$18
	.byte	$18
	.byte	$8C
	.byte	$00
	.byte	$20
	.byte	$18
	.byte	$8D
	.byte	$00
	.byte	$28
	.byte	$18
	.byte	$8E
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$8F
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$90
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$91
	.byte	$00
	.byte	$18
	.byte	$20
	.byte	$92
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$94
	.byte	$00
	.byte	$08
	.byte	$28
	.byte	$95
	.byte	$00
	.byte	$10
	.byte	$28
	.byte	$96
	.byte	$00
	.byte	$18
	.byte	$28
	.byte	$97
	.byte	$00
	.byte	$20
	.byte	$28
	.byte	$98
	.byte	$00
	.byte	$28
	.byte	$28
	.byte	$99
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$9A
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$9B
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$9C
	.byte	$00
	.byte	$18
	.byte	$30
	.byte	$9D
	.byte	$00
	.byte	$20
	.byte	$30
	.byte	$9E
	.byte	$00
	.byte	$28
	.byte	$30
	.byte	$9F
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$A0
	.byte	$00
	.byte	$08
	.byte	$38
	.byte	$A1
	.byte	$00
	.byte	$10
	.byte	$38
	.byte	$A2
	.byte	$00
	.byte	$18
	.byte	$38
	.byte	$A3
	.byte	$00
	.byte	$20
	.byte	$38
	.byte	$A4
	.byte	$00
	.byte	$28
	.byte	$38
	.byte	$A5
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$A6
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$A7
	.byte	$00
	.byte	$28
	.byte	$40
	.byte	$A8
	.byte	$00
	.byte	$30
	.byte	$40
	.byte	$A9
	.byte	$00
	.byte	$08
	.byte	$48
	.byte	$AA
	.byte	$00
	.byte	$10
	.byte	$48
	.byte	$AB
	.byte	$00
	.byte	$28
	.byte	$48
	.byte	$AC
	.byte	$00
	.byte	$30
	.byte	$48
	.byte	$AD
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$AE
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$AF
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$B0
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$B1
	.byte	$00
	.byte	$08
	.byte	$58
	.byte	$B2
	.byte	$00
	.byte	$10
	.byte	$58
	.byte	$B3
	.byte	$00
	.byte	$80
_ts0_pals:
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
_ts0_tmaps:
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$72
	.byte	$73
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$1E
	.byte	$1E
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$78
	.byte	$77
	.byte	$79
	.byte	$7A
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$7F
	.byte	$80
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$89
	.byte	$89
	.byte	$89
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$8F
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$72
	.byte	$73
	.byte	$72
	.byte	$9F
	.byte	$1E
	.byte	$1C
	.byte	$1C
	.byte	$1E
	.byte	$75
	.byte	$A0
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$A1
	.byte	$A2
	.byte	$79
	.byte	$7A
	.byte	$79
	.byte	$7A
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$7F
	.byte	$80
	.byte	$80
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$89
	.byte	$89
	.byte	$B0
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$8F
	.byte	$B1
	.byte	$91
	.byte	$92
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
_ts1_pals:
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
_ts1_tmaps:
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$45
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B6
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$44
	.byte	$44
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$BF
	.byte	$BF
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C4
	.byte	$C5
	.byte	$C5
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$4D
	.byte	$CF
	.byte	$45
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$50
	.byte	$D0
	.byte	$52
	.byte	$53
	.byte	$D1
	.byte	$D2
	.byte	$B8
	.byte	$B6
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$6E
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$44
	.byte	$DA
	.byte	$BD
	.byte	$BE
	.byte	$DB
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$BF
	.byte	$DB
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$DC
	.byte	$C5
	.byte	$DD
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$DE
	.byte	$DF
	.byte	$CA
	.byte	$CB
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$CC
	.byte	$CD
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
_ts2_pals:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts2_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B6
	.byte	$74
	.byte	$1E
	.byte	$1E
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$75
	.byte	$76
	.byte	$E4
	.byte	$E4
	.byte	$E5
	.byte	$E5
	.byte	$E6
	.byte	$E7
	.byte	$E6
	.byte	$E7
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$7F
	.byte	$80
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$E8
	.byte	$E8
	.byte	$00
	.byte	$00
	.byte	$E9
	.byte	$EA
	.byte	$EB
	.byte	$EC
	.byte	$C4
	.byte	$C4
	.byte	$C5
	.byte	$C5
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C7
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$D1
	.byte	$D2
	.byte	$B8
	.byte	$B6
	.byte	$1E
	.byte	$1C
	.byte	$1C
	.byte	$1E
	.byte	$75
	.byte	$A0
	.byte	$75
	.byte	$76
	.byte	$E4
	.byte	$ED
	.byte	$E5
	.byte	$E5
	.byte	$E6
	.byte	$E7
	.byte	$E6
	.byte	$ED
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$7F
	.byte	$80
	.byte	$80
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$E8
	.byte	$ED
	.byte	$00
	.byte	$00
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$F1
	.byte	$C4
	.byte	$DC
	.byte	$C5
	.byte	$DD
	.byte	$C6
	.byte	$C6
	.byte	$C7
	.byte	$C7
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$F2
	.byte	$F3
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F4
	.byte	$F5
	.byte	$F6
	.byte	$F6
	.byte	$F7
	.byte	$F8
	.byte	$F9
	.byte	$FA
	.byte	$F6
	.byte	$F6
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$F6
	.byte	$F6
	.byte	$F6
	.byte	$F6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_spr_player:
	.addr	_sspl_00_a
	.addr	_sspl_00_a
	.addr	_sspl_01_a
	.addr	_sspl_02_a
	.addr	_sspl_03_a
	.addr	_sspl_04_a
	.word	$0000
	.word	$0000
	.addr	_sspl_00_b
	.addr	_sspl_00_b
	.addr	_sspl_01_b
	.addr	_sspl_02_b
	.addr	_sspl_03_b
	.addr	_sspl_04_b
	.word	$0000
	.word	$0000
_spr_enems0:
	.addr	_ssen_00_a
	.addr	_ssen_01_a
	.word	$0000
	.word	$0000
	.addr	_ssen_00_b
	.addr	_ssen_01_b
	.word	$0000
	.word	$0000
	.addr	_ssen_02_a
	.addr	_ssen_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen_02_b
	.addr	_ssen_03_b
	.word	$0000
	.word	$0000
	.addr	_ssen_04_a
	.addr	_ssen_05_a
	.word	$0000
	.word	$0000
	.addr	_ssen_04_b
	.addr	_ssen_05_b
	.word	$0000
	.word	$0000
	.addr	_ssen_0E_a
	.addr	_ssen_0F_a
	.word	$0000
	.word	$0000
	.addr	_ssen_0E_b
	.addr	_ssen_0F_b
	.word	$0000
	.word	$0000
	.addr	_ssen_0C_a
	.addr	_ssen_0D_a
	.word	$0000
	.word	$0000
	.addr	_ssen_0C_b
	.addr	_ssen_0D_b
	.word	$0000
	.word	$0000
	.addr	_ssen_10
_spr_enems1:
	.addr	_ssen_06_a
	.addr	_ssen_07_a
	.word	$0000
	.word	$0000
	.addr	_ssen_06_b
	.addr	_ssen_07_b
	.word	$0000
	.word	$0000
	.addr	_ssen_08_a
	.addr	_ssen_09_a
	.word	$0000
	.word	$0000
	.addr	_ssen_08_b
	.addr	_ssen_09_b
	.word	$0000
	.word	$0000
	.addr	_ssen_0A_a
	.addr	_ssen_0B_a
	.word	$0000
	.word	$0000
	.addr	_ssen_0A_b
	.addr	_ssen_0B_b
	.word	$0000
	.word	$0000
	.addr	_ssen_0E_a
	.addr	_ssen_0F_a
	.word	$0000
	.word	$0000
	.addr	_ssen_0E_b
	.addr	_ssen_0F_b
	.word	$0000
	.word	$0000
	.addr	_ssen_0C_a
	.addr	_ssen_0D_a
	.word	$0000
	.word	$0000
	.addr	_ssen_0C_b
	.addr	_ssen_0D_b
	.word	$0000
	.word	$0000
	.addr	_ssen_10
_spr_enems2:
	.addr	_ssen_11_a
	.addr	_ssen_12_a
	.word	$0000
	.word	$0000
	.addr	_ssen_11_b
	.addr	_ssen_12_b
	.word	$0000
	.word	$0000
	.addr	_ssen_13_a
	.addr	_ssen_14_a
	.word	$0000
	.word	$0000
	.addr	_ssen_13_b
	.addr	_ssen_14_b
	.word	$0000
	.word	$0000
	.addr	_ssen_15_a
	.addr	_ssen_16_a
	.word	$0000
	.word	$0000
	.addr	_ssen_15_b
	.addr	_ssen_16_b
	.word	$0000
	.word	$0000
	.addr	_ssen_0E_a
	.addr	_ssen_0F_a
	.word	$0000
	.word	$0000
	.addr	_ssen_0E_b
	.addr	_ssen_0F_b
	.word	$0000
	.word	$0000
	.addr	_ssen_0C_a
	.addr	_ssen_0D_a
	.word	$0000
	.word	$0000
	.addr	_ssen_0C_b
	.addr	_ssen_0D_b
	.word	$0000
	.word	$0000
	.addr	_ssen_10
_spr_hs:
	.word	$0000
	.word	$0000
	.addr	_ssit_01
	.addr	_ssit_00
	.addr	_ssit_02
	.addr	_ssit_03
_l_scr_ini:
	.byte	$14
	.byte	$14
	.byte	$08
_l_ini_x:
	.byte	$02
	.byte	$02
	.byte	$02
_l_ini_y:
	.byte	$07
	.byte	$0A
	.byte	$03
_l_map_w:
	.byte	$04
	.byte	$04
	.byte	$08
_l_player_max_objects:
	.byte	$00
	.byte	$00
	.byte	$00
_l_player_max_enems:
	.byte	$36
	.byte	$31
	.byte	$2E
_l_pal_bg:
	.addr	_palts0
	.addr	_palts1
	.addr	_palts2
_l_pal_fg:
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
_l_ts_tmaps:
	.addr	_ts0_tmaps
	.addr	_ts1_tmaps
	.addr	_ts2_tmaps
_l_ts_pals:
	.addr	_ts0_pals
	.addr	_ts1_pals
	.addr	_ts2_pals
_l_behs:
	.addr	_behs0
	.addr	_behs1
	.addr	_behs2
_l_spr_enems:
	.addr	_spr_enems0
	.addr	_spr_enems1
	.addr	_spr_enems2
_l_map:
	.addr	_map_0
	.addr	_map_1
	.addr	_map_2
_l_decos:
	.byte	$00
	.byte	$00
	.byte	$01
_l_locks:
	.addr	_map_0_locks
	.addr	_map_1_locks
	.addr	_map_2_locks
_l_n_bolts:
	.byte	$02
	.byte	$01
	.byte	$02
_l_enems:
	.addr	_enems_0
	.addr	_enems_1
	.addr	_enems_2
_l_hotspots:
	.addr	_hotspots_0
	.addr	_hotspots_1
	.addr	_hotspots_2
_l_music:
	.byte	$00
	.byte	$01
	.byte	$00
_title_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$3F
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$01
	.byte	$1F
	.byte	$00
	.byte	$01
	.byte	$1F
	.byte	$45
	.byte	$46
	.byte	$48
	.byte	$49
	.byte	$48
	.byte	$49
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$48
	.byte	$49
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$48
	.byte	$49
	.byte	$4C
	.byte	$4D
	.byte	$47
	.byte	$45
	.byte	$4A
	.byte	$4B
	.byte	$4A
	.byte	$4B
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$4A
	.byte	$4B
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$4A
	.byte	$4B
	.byte	$4E
	.byte	$4F
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$50
	.byte	$51
	.byte	$45
	.byte	$46
	.byte	$54
	.byte	$55
	.byte	$58
	.byte	$59
	.byte	$5C
	.byte	$5D
	.byte	$60
	.byte	$61
	.byte	$64
	.byte	$59
	.byte	$5C
	.byte	$5D
	.byte	$60
	.byte	$66
	.byte	$68
	.byte	$00
	.byte	$6A
	.byte	$6B
	.byte	$50
	.byte	$51
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$52
	.byte	$53
	.byte	$47
	.byte	$45
	.byte	$56
	.byte	$57
	.byte	$5A
	.byte	$5B
	.byte	$5E
	.byte	$5F
	.byte	$62
	.byte	$63
	.byte	$65
	.byte	$5B
	.byte	$5E
	.byte	$5F
	.byte	$62
	.byte	$67
	.byte	$69
	.byte	$00
	.byte	$6C
	.byte	$6D
	.byte	$52
	.byte	$53
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$47
	.byte	$45
	.byte	$44
	.byte	$01
	.byte	$1F
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$42
	.byte	$43
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$01
	.byte	$63
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$6E
	.byte	$6F
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$70
	.byte	$71
	.byte	$00
	.byte	$01
	.byte	$43
	.byte	$F0
	.byte	$01
	.byte	$07
	.byte	$F5
	.byte	$01
	.byte	$07
	.byte	$FF
	.byte	$FF
	.byte	$FA
	.byte	$01
	.byte	$03
	.byte	$FE
	.byte	$FF
	.byte	$F5
	.byte	$01
	.byte	$07
	.byte	$05
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$55
	.byte	$15
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$51
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$01
	.byte	$00
_hud_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$5F
	.byte	$08
	.byte	$09
	.byte	$01
	.byte	$1D
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$03
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$05
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$04
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$3E
	.byte	$09
	.byte	$01
	.byte	$1D
	.byte	$3F
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$00
_bitmasks:
	.byte	$FC
	.byte	$F3
	.byte	$CF
	.byte	$3F
L0001:
	.byte	$53,$45,$4C,$45,$43,$54,$20,$41,$4E,$44,$20,$50,$55,$53,$48,$20
	.byte	$53,$54,$41,$52,$54,$21,$00,$4C,$45,$56,$45,$4C,$20,$41,$5B,$52
	.byte	$5D,$00,$4C,$45,$56,$45,$4C,$20,$42,$5B,$52,$5D,$00,$4C,$45,$56
	.byte	$45,$4C,$20,$41,$00,$4C,$45,$56,$45,$4C,$20,$42,$00,$47,$41,$4D
	.byte	$45,$20,$4F,$56,$45,$52,$21,$00,$54,$48,$45,$20,$20,$45,$4E,$44
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
__x:
	.res	1,$00
__y:
	.res	1,$00
__n:
	.res	1,$00
__t:
	.res	1,$00
_i:
	.res	1,$00
_pad_this_frame:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_gpitu:
	.res	1,$00
_gpaux:
	.res	1,$00
_rds16:
	.res	2,$00
_gp_gen:
	.res	2,$00
_gp_tmap:
	.res	2,$00
_gp_tma2:
	.res	2,$00
_gp_ram:
	.res	2,$00
_gp_ram_aux:
	.res	2,$00
_gp_addr:
	.res	2,$00
_rdx:
	.res	1,$00
_rdy:
	.res	1,$00
_rdt:
	.res	1,$00
_rdit:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdd:
	.res	1,$00
_rdm:
	.res	1,$00
_rds:
	.res	1,$00
_rdct:
	.res	1,$00
_ticker:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
_cx1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy1:
	.res	1,$00
_cy2:
	.res	1,$00
_caux:
	.res	1,$00
_oam_index:
	.res	1,$00
_oam_index_aux:
	.res	1,$00
_en_initial:
	.res	1,$00
_en_offs:
	.res	1,$00
_en_fr:
	.res	1,$00
_en_collx:
	.res	1,$00
_en_colly:
	.res	1,$00
_en_spr:
	.res	1,$00
_touched:
	.res	1,$00
_en_cttouched:
	.res	3,$00
_en_flags:
	.res	3,$00
_en_is_alive:
	.res	1,$00
_pregotten:
	.res	1,$00
__en_t:
	.res	1,$00
__en_s:
	.res	1,$00
__en_x:
	.res	1,$00
__en_y:
	.res	1,$00
__en_x1:
	.res	1,$00
__en_y1:
	.res	1,$00
__en_x2:
	.res	1,$00
__en_y2:
	.res	1,$00
__en_mx:
	.res	1,$00
__en_my:
	.res	1,$00
__en_ct:
	.res	1,$00
__en_facing:
	.res	1,$00
__enf_x:
	.res	2,$00
__enf_y:
	.res	2,$00
__enf_vx:
	.res	2,$00
__enf_vy:
	.res	2,$00
_en_life:
	.res	3,$00
_en_alive:
	.res	3,$00
_en_status:
	.res	3,$00
_en_rawv:
	.res	3,$00
_en_ct:
	.res	3,$00
_px:
	.res	2,$00
_py:
	.res	2,$00
_pvx:
	.res	2,$00
_pvy:
	.res	2,$00
_prx:
	.res	1,$00
_pry:
	.res	1,$00
_pfacing:
	.res	1,$00
_pfr:
	.res	1,$00
_pctfr:
	.res	1,$00
_psprid:
	.res	1,$00
_a_button:
	.res	1,$00
_b_button:
	.res	1,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_pjb:
	.res	1,$00
_pgotten:
	.res	1,$00
_ppossee:
	.res	1,$00
_psprint:
	.res	1,$00
_pstate:
	.res	1,$00
_pctstate:
	.res	1,$00
_phit:
	.res	1,$00
_pgtmx:
	.res	2,$00
_pgtmy:
	.res	2,$00
_wall:
	.res	1,$00
_hitv:
	.res	1,$00
_hith:
	.res	1,$00
_pkilled:
	.res	1,$00
_prx_old:
	.res	1,$00
_pry_old:
	.res	1,$00
_pobjs:
	.res	1,$00
_plife:
	.res	1,$00
_pcontinues:
	.res	1,$00
_pkill:
	.res	1,$00
_pice:
	.res	1,$00
_pnotsafe:
	.res	1,$00
_pkeys:
	.res	1,$00
_pammo:
	.res	1,$00
_pfiring:
	.res	1,$00
_n_pant_safe:
	.res	1,$00
_px_safe:
	.res	2,$00
_py_safe:
	.res	2,$00
_hrx:
	.res	1,$00
_hry:
	.res	1,$00
_hrt:
	.res	1,$00
_do_process_breakable:
	.res	1,$00
_ft:
	.res	1,$00
_c_map_w:
	.res	1,$00
_c_ts_pals:
	.res	2,$00
_c_ts_tmaps:
	.res	2,$00
_c_behs:
	.res	2,$00
_spr_enems:
	.res	2,$00
_c_pal_bg:
	.res	2,$00
_c_pal_fg:
	.res	2,$00
_c_map:
	.res	2,$00
_c_decos:
	.res	1,$00
_c_locks:
	.res	2,$00
_c_enems:
	.res	2,$00
_c_hotspots:
	.res	2,$00
_c_max_bolts:
	.res	1,$00
.segment	"BSS"
_first_game:
	.res	1,$00
_half_life:
	.res	1,$00
_frame_counter:
	.res	1,$00
_n_pant:
	.res	1,$00
_on_pant:
	.res	1,$00
_olife:
	.res	1,$00
_okeys:
	.res	1,$00
_oobjs:
	.res	1,$00
_oammo:
	.res	1,$00
_okilled:
	.res	1,$00
_no_ct:
	.res	1,$00
_level:
	.res	1,$00
_game_over:
	.res	1,$00
_win_level:
	.res	1,$00
_paused:
	.res	1,$00
_c_max_enems:
	.res	1,$00
_update_index:
	.res	1,$00
_update_list:
	.res	96,$00
_map_attr:
	.res	192,$00
_map_buff:
	.res	192,$00
_fader:
	.res	1,$00
_fade_delay:
	.res	1,$00
_hact:
	.res	24,$00
_lkact:
	.res	16,$00
_flags:
	.res	2,$00
_en_x:
	.res	3,$00
_en_y:
	.res	3,$00
_en_x1:
	.res	3,$00
_en_y1:
	.res	3,$00
_en_x2:
	.res	3,$00
_en_y2:
	.res	3,$00
_en_mx:
	.res	3,$00
_en_my:
	.res	3,$00
_en_t:
	.res	3,$00
_en_s:
	.res	3,$00
_en_facing:
	.res	3,$00
_enf_x:
	.res	6,$00
_enf_vx:
	.res	6,$00
_enf_y:
	.res	6,$00
_enf_vy:
	.res	6,$00
_en_spr_id:
	.res	3,$00
_ep_x:
	.res	72,$00
_ep_y:
	.res	72,$00
_ep_mx:
	.res	72,$00
_ep_my:
	.res	72,$00
_ep_dead:
	.res	72,$00
_max_chac_chacs:
	.res	1,$00
_chac_chacs_yx:
	.res	4,$00
_chac_chacs_state:
	.res	4,$00
_chac_chacs_idlewait:
	.res	4,$00
_chac_chacs_ct:
	.res	4,$00
_chac_chacs_stack:
	.res	4,$00
_chac_chacs_top:
	.res	1,$00
_res_on:
	.res	1,$00
_res_disable:
	.res	1,$00
_res_ct:
	.res	1,$00
_res_subct:
	.res	1,$00
_cfx:
	.res	1,$00
_mode_no_resonators:
	.res	1,$00
_game_mode:
	.res	1,$00
_shaker_ct:
	.res	1,$00
_attr_table:
	.res	64,$00

; ---------------------------------------------------------------
; void __near__ chac_chacs_add (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_chac_chacs_add: near

.segment	"CODE"

;
; if (max_chac_chacs == MAX_CHAC_CHACS) return;
;
	lda     _max_chac_chacs
	cmp     #$04
	beq     L2450
;
; rda = 1 + (rdt - CHAC_CHAC_DETECT_TILE);
;
	lda     _rdt
	sec
	sbc     #$27
	clc
	adc     #$01
	sta     _rda
;
; rdb = rda << 4;
;
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rdb
;
; rdc = (rdb << 1) + rdb;
;
	asl     a
	bcc     L2D03
	clc
L2D03:	adc     _rdb
	sta     _rdc
;
; __asm__ ("ldy %v", max_chac_chacs);
;
	ldy     _max_chac_chacs
;
; __asm__ ("lda %v", rdm);
;
	lda     _rdm
;
; __asm__ ("sta %v,y", chac_chacs_yx);
;
	sta     _chac_chacs_yx,y
;
; __asm__ ("lda #0");
;
	lda     #0
;
; __asm__ ("sta %v,y", chac_chacs_state);
;
	sta     _chac_chacs_state,y
;
; __asm__ ("lda %v", rdc);
;
	lda     _rdc
;
; __asm__ ("sta %v,y", chac_chacs_idlewait);
;
	sta     _chac_chacs_idlewait,y
;
; __asm__ ("lda %v", rdc);
;
	lda     _rdc
;
; __asm__ ("sta %v,y", chac_chacs_ct);
;
	sta     _chac_chacs_ct,y
;
; ++ max_chac_chacs;
;
	inc     _max_chac_chacs
;
; }
;
L2450:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; if (cy1 > 12 || cy2 > 12) { at1 = at2 = 0; return; }
;
	lda     _cy1
	cmp     #$0D
	bcs     L221C
	lda     _cy2
	cmp     #$0D
	bcc     L221B
L221C:	lda     #$00
	sta     _at2
	sta     _at1
	rts
;
; at1 = map_attr [COORDS (cx1, cy1 ? cy1 - 1 : 0)];
;
L221B:	lda     _cy1
	beq     L2228
	ldx     #$00
	lda     _cy1
	sec
	sbc     #$01
	bcs     L222B
	dex
	jmp     L222B
L2228:	tax
L222B:	jsr     shlax4
	ora     _cx1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at1
;
; at2 = map_attr [COORDS (cx2, cy2 ? cy2 - 1 : 0)];
;
	lda     _cy2
	beq     L2234
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L2237
	dex
	jmp     L2237
L2234:	tax
L2237:	jsr     shlax4
	ora     _cx2
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide_in (int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide_in: near

.segment	"CODE"

;
; return (x0 >= x1 && x0 <= x1 + 15 && y0 >= y1 && y0 <= y1 + 15); 
;
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L223C
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0F
	bcc     L223D
	inx
L223D:	jsr     tosicmp
	beq     L2D04
	bpl     L223C
L2D04:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L223C
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0F
	bcc     L223E
	inx
L223E:	jsr     tosicmp
	bmi     L223B
	beq     L223B
L223C:	ldx     #$00
	txa
	jmp     incsp8
L223B:	ldx     #$00
	lda     #$01
;
; }
;
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide: near

.segment	"CODE"

;
; prx + 3 >= _en_x && 
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$03
	bcc     L2243
	inx
L2243:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L2244
;
; prx <= _en_x + 11 && 
;
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0B
	bcc     L2245
	ldx     #$01
L2245:	jsr     tosicmp
	beq     L2D07
	bcs     L2244
;
; pry + 13 + ENEMS_COLLISION_VSTRETCH_FG >= _en_y &&
;
L2D07:	ldx     #$00
	lda     _pry
	clc
	adc     #$0D
	bcc     L2D05
	inx
	clc
L2D05:	adc     #$FE
	pha
	txa
	adc     #$FF
	tax
	pla
	cmp     __en_y
	txa
	sbc     #$00
	bcc     L2244
;
; pry <= _en_y + 13 + PLAYER_COLLISION_VSTRETCH_FG
;
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$0D
	bcc     L2D06
	ldx     #$01
;
; );
;
	clc
L2D06:	adc     #$FC
	pha
	txa
	adc     #$FF
	tax
	pla
	jsr     tosicmp
	bcc     L2242
	beq     L2242
L2244:	ldx     #$00
	txa
	rts
L2242:	ldx     #$00
	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ add_sign (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_sign: near

.segment	"CODE"

;
; return sign == 0 ? 0 : sign < 0 ? -value : value;
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L224C
	cmp     #$00
	jeq     incsp4
L224C:	iny
	lda     (sp),y
	tax
	cpx     #$80
	bcc     L2250
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L2250:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ saturate (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_saturate: near

.segment	"CODE"

;
; return v >= 0 ? (v > max ? max : v) : (v < -max ? -max : v);
;
	ldy     #$03
	lda     (sp),y
	bmi     L2256
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L2260
	beq     L2260
	ldy     #$01
	jmp     L2D0E
L2256:	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jsr     tosicmp
	bpl     L2260
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L2260:	ldy     #$03
L2D0E:	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ pad_read (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pad_read: near

.segment	"CODE"

;
; pad_this_frame = i;
;
	lda     _i
	sta     _pad_this_frame
;
; i = pad_poll (0);   // Read pads here.
;
	lda     #$00
	jsr     _pad_poll
	sta     _i
;
; pad_this_frame = (pad_this_frame ^ i) & i;
;
	eor     _pad_this_frame
	sta     ptr1
	lda     _i
	and     ptr1
	sta     _pad_this_frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ distance (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_distance: near

.segment	"CODE"

;
; rda = DELTA (prx, rdx); // dx
;
	ldx     #$00
	lda     _prx
	cmp     _rdx
	bcs     L2273
	lda     _rdx
	sec
	sbc     _prx
	jmp     L2D15
L2273:	lda     _prx
	sec
	sbc     _rdx
L2D15:	sta     _rda
;
; rdb = DELTA (pry, rdy); // dy
;
	lda     _pry
	cmp     _rdy
	bcs     L2280
	lda     _rdy
	sec
	sbc     _pry
	jmp     L2D16
L2280:	lda     _pry
	sec
	sbc     _rdy
L2D16:	sta     _rdb
;
; rdc = MIN (rda, rdb);
;
	lda     _rda
	cmp     _rdb
	bcs     L228D
	lda     _rda
	jmp     L2D12
L228D:	lda     _rdb
L2D12:	sta     _rdc
;
; return (rda + rdb - (rdc >> 1) - (rdc >> 2) + (rdc >> 4));
;
	lda     _rda
	clc
	adc     _rdb
	bcc     L2D0F
	inx
L2D0F:	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax1
	jsr     tossubax
	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax2
	jsr     tossubax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rdc
	jsr     asrax4
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ jump_start (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_jump_start: near

.segment	"CODE"

;
; sfx_play (SFX_JUMP, 0);
;
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pj = 1; pctj = 0; 
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
;
; pvy = -PLAYER_VY_MK2_JUMP_INITIAL;
;
	ldx     #$FF
	lda     #$60
	sta     _pvy
	stx     _pvy+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for (fader = 4; fader > -1; fader --) {
;
	lda     #$04
L2D17:	sta     _fader
	tax
	bmi     L22A4
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 4; fader > -1; fader --) {
;
	lda     _fader
	sec
	sbc     #$01
	jmp     L2D17
;
; }
;
L22A4:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     #$00
L2D18:	sta     _fader
	sec
	sbc     #$05
	bvc     L22BA
	eor     #$80
L22BA:	bpl     L22B3
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     _fader
	clc
	adc     #$01
	jmp     L2D18
;
; }
;
L22B3:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clear_update_list (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_update_list: near

.segment	"CODE"

;
; memfill (update_list, 0, UPDATE_LIST_SIZE*3);
;
	jsr     decsp3
	lda     #<(_update_list)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_update_list)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$60
	jsr     _memfill
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; vram_adr(0x2000); vram_fill(0x00,0x400);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ ul_putc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_putc: near

.segment	"CODE"

;
; update_list [update_index++] = MSB (gp_addr);
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	sta     ptr1
	lda     #$00
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _gp_addr+1
	ldy     #$00
	sta     (ptr1),y
;
; update_list [update_index++] = LSB (gp_addr++);
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	tay
	lda     #$00
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	clc
	adc     #$01
	bcc     L22DB
	inx
L22DB:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldy     #$00
	jsr     staspidx
;
; update_list [update_index++] = _n;
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	sta     ptr1
	lda     #$00
	adc     #>(_update_list)
	sta     ptr1+1
	lda     __n
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ p_t (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t: near

.segment	"CODE"

;
; rda = _n; gp_addr = (_y << 5) + _x + 0x2000;
;
	lda     __n
	sta     _rda
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L2D19
	inx
L2D19:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; _n = ((rda/10)+16); ul_putc ();
;
	lda     _rda
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$10
	sta     __n
	jsr     _ul_putc
;
; _n = ((rda%10)+16); ul_putc ();
;
	lda     _rda
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ upd_attr_table (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_upd_attr_table: near

.segment	"CODE"

;
; rdc = (_x >> 2) + ((_y >> 2) << 3);
;
	ldx     #$00
	lda     __x
	jsr     asrax2
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __y
	jsr     asrax2
	jsr     aslax3
	clc
	adc     ptr1
	sta     _rdc
	txa
	adc     ptr1+1
;
; rdb = ((_x >> 1) & 1) + (((_y >> 1) & 1) << 1);
;
	ldx     #$00
	lda     __x
	jsr     asrax1
	and     #$01
	sta     ptr1
	ldx     #$00
	lda     __y
	jsr     asrax1
	and     #$01
	asl     a
	bcc     L2D1D
	clc
L2D1D:	adc     ptr1
	sta     _rdb
;
; rda = attr_table [rdc];
;
	ldy     _rdc
	lda     _attr_table,y
	sta     _rda
;
; rda = (rda & bitmasks [rdb]) | (c_ts_pals [_t] << (rdb << 1));
;
	ldy     _rdb
	lda     _bitmasks,y
	and     _rda
	jsr     pusha0
	lda     _c_ts_pals
	ldx     _c_ts_pals+1
	ldy     __t
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	jsr     pusha0
	lda     _rdb
	asl     a
	jsr     tosaslax
	jsr     tosorax
	sta     _rda
;
; attr_table [rdc] = rda;
;
	ldy     _rdc
	lda     _rda
	sta     _attr_table,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + 0x2000);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L2D1E
	inx
L2D1E:	pha
	txa
	clc
	adc     #$20
	tax
	pla
	sta     _gp_addr
	stx     _gp_addr+1
;
; vram_adr (gp_addr++);
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L231E
	inx
L231E:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2321
	inx
L2321:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2324
	inx
L2324:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; gp_addr += 31;
;
	lda     #$1F
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L2327
	inc     _gp_addr+1
;
; vram_adr (gp_addr++);
;
L2327:	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L232A
	inx
L232A:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L232D
	inx
L232D:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; vram_put (*gp_tmap); 
;
	lda     _gp_tmap
	sta     ptr1
	lda     _gp_tmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jmp     _vram_put

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_addr = 0x23c0 + rdc;
;
	lda     _rdc
	clc
	adc     #$C0
	sta     _gp_addr
	lda     #$00
	adc     #$23
	sta     _gp_addr+1
;
; _n = rda; ul_putc ();
;
	lda     _rda
	sta     __n
	jsr     _ul_putc
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + 0x2000);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L2D1F
	inx
L2D1F:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; _n = *gp_tmap ++; ul_putc ();
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2340
	inx
L2340:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	sta     __n
	jsr     _ul_putc
;
; _n = *gp_tmap ++; ul_putc ();
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2344
	inx
L2344:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	sta     __n
	jsr     _ul_putc
;
; gp_addr += 30;
;
	lda     #$1E
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L2348
	inc     _gp_addr+1
;
; _n = *gp_tmap ++; ul_putc ();
;
L2348:	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L234B
	inx
L234B:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	sta     __n
	jsr     _ul_putc
;
; _n = *gp_tmap   ; ul_putc ();
;
	lda     _gp_tmap
	sta     ptr1
	lda     _gp_tmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ map_set (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_map_set: near

.segment	"CODE"

;
; map_buff [COORDS (_x, _y)] = _t;
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	clc
	adc     #<(_map_buff)
	sta     ptr1
	txa
	adc     #>(_map_buff)
	sta     ptr1+1
	lda     __t
	ldy     #$00
	sta     (ptr1),y
;
; map_attr [COORDS (_x, _y)] = c_behs [_t];
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	clc
	adc     #<(_map_attr)
	tay
	txa
	adc     #>(_map_attr)
	tax
	tya
	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     __t
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; _x = _x << 1; _y = TOP_ADJUST + (_y << 1);
;
	lda     __x
	asl     a
	sta     __x
	lda     __y
	asl     a
	bcc     L2D22
	clc
L2D22:	adc     #$06
	sta     __y
;
; update_list_tile (); 
;
	jmp     _update_list_tile

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_byte: near

.segment	"CODE"

;
; -- rdit; return *gp_gen ++;
;
	dec     _rdit
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L236A
	inx
L236A:	sta     _gp_gen
	stx     _gp_gen+1
	ldx     #$00
	lda     (regsave,x)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_tile: near

.segment	"CODE"

;
; map_buff [rdm] = rda;
;
	ldy     _rdm
	lda     _rda
	sta     _map_buff,y
;
; ++ rdm;
;
	inc     _rdm
;
; rdx = (rdx + 1) & 15; if (!rdx) ++ rdy;
;
	lda     _rdx
	clc
	adc     #$01
	and     #$0F
	sta     _rdx
	lda     _rdx
	bne     L2375
	inc     _rdy
;
; }
;
L2375:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_scr: near

.segment	"CODE"

;
; rdx = rdy = rdm = 0;
;
	lda     #$00
	sta     _rdm
	sta     _rdy
	sta     _rdx
;
; gp_gen = c_map [n_pant];
;
	tax
	lda     _n_pant
	asl     a
	bcc     L2D29
	inx
	clc
L2D29:	adc     _c_map
	sta     ptr1
	txa
	adc     _c_map+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _gp_gen+1
	dey
	lda     (ptr1),y
	sta     _gp_gen
;
; while (rdm < 192) {
;
L2380:	lda     _rdm
	cmp     #$C0
	bcs     L2381
;
; rdt = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2385
	inx
L2385:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
;
; rda = rdt & 0x0f;
;
	and     #$0F
	sta     _rda
;
; rdct = rdt;
;
	lda     _rdt
L2D27:	sta     _rdct
;
; while (rdct >= 16) {
;
	cmp     #$10
	bcc     L238B
;
; add_tile (); rdct -= 16;
;
	jsr     _add_tile
	lda     _rdct
	sec
	sbc     #$10
;
; } add_tile ();
;
	jmp     L2D27
L238B:	jsr     _add_tile
;
; }
;
	jmp     L2380
;
; set_rand (1 + n_pant);
;
L2381:	ldx     #$00
	lda     _n_pant
	clc
	adc     #$01
	bcc     L2393
	inx
L2393:	jsr     _set_rand
;
; gpit = 192; while (gpit --) {
;
	lda     #$C0
	sta     _gpit
L2396:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L2397
;
; if (rand8 () & 1) map_buff [gpit] += 16;
;
	jsr     _rand8
	and     #$01
	beq     L2396
	lda     #<(_map_buff)
	ldx     #>(_map_buff)
	clc
	adc     _gpit
	bcc     L239D
	inx
L239D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$10
	sta     (ptr1),y
;
; }
;
	jmp     L2396
;
; if (c_decos) {
;
L2397:	lda     _c_decos
	jeq     L23A2
;
; while (rda = *gp_gen ++) {
;
L23A1:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L23A5
	inx
L23A5:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
	tax
	beq     L23A2
;
; if (rda & 0x80) {
;
	lda     _rda
	and     #$80
	beq     L23A6
;
; rda &= 0x7F;
;
	lda     _rda
	and     #$7F
	sta     _rda
;
; rdct = 1;
;
	lda     #$01
;
; } else {
;
	jmp     L2D28
;
; rdct = *gp_gen ++;
;
L23A6:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L23AF
	inx
L23AF:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
L2D28:	sta     _rdct
;
; while (rdct --) {
;
L23AC:	lda     _rdct
	pha
	sec
	sbc     #$01
	sta     _rdct
	pla
	tax
	beq     L23A1
;
; rdm = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L23B5
	inx
L23B5:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdm
;
; add_tile ();
;
	jsr     _add_tile
;
; }
;
	jmp     L23AC
;
; gp_gen = c_locks; rda = 0;
;
L23A2:	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
	stx     _rda
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L23BD:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L23BE
;
; rdb = *gp_gen ++; rdm = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L23C2
	inx
L23C2:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdb
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L23C5
	inx
L23C5:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdm
;
; if (n_pant == rdb) {
;
	lda     _rdb
	cmp     _n_pant
	bne     L23BD
;
; if (!lkact [gpit]) add_tile ();
;
	ldy     _gpit
	lda     _lkact,y
	bne     L23BD
	jsr     _add_tile
;
; } 
;
	jmp     L23BD
;
; rdx = 0; rdy = 0; gp_ram = map_buff;
;
L23BE:	sta     _rdx
	sta     _rdy
	lda     #<(_map_buff)
	sta     _gp_ram
	lda     #>(_map_buff)
	sta     _gp_ram+1
;
; for (rdm = 0; rdm < 192; rdm ++) {
;
	txa
L2D2B:	sta     _rdm
	cmp     #$C0
	jcs     L23D4
;
; rdt = *gp_ram ++;
;
	lda     _gp_ram
	ldx     _gp_ram+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L23DD
	inx
L23DD:	sta     _gp_ram
	stx     _gp_ram+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
;
; map_attr [rdm] = c_behs [rdt];
;
	lda     #<(_map_attr)
	ldx     #>(_map_attr)
	clc
	adc     _rdm
	bcc     L23E0
	inx
L23E0:	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     _rdt
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; if (rdt >= CHAC_CHAC_DETECT_TILE && rdt <= CHAC_CHAC_DETECT_TILE + 2) {
;
	lda     _rdt
	cmp     #$27
	bcc     L23E3
	lda     _rdt
	cmp     #$2A
	bcs     L23E3
;
; chac_chacs_add ();
;
	jsr     _chac_chacs_add
;
; rdt = map_attr [rdm] = 0;
;
	ldy     _rdm
	lda     #$00
	sta     _map_attr,y
	sta     _rdt
;
; _x = rdx << 1; _y = (rdy << 1) + TOP_ADJUST; _t = rdt;
;
L23E3:	lda     _rdx
	asl     a
	sta     __x
	lda     _rdy
	asl     a
	bcc     L2D2A
	clc
L2D2A:	adc     #$06
	sta     __y
	lda     _rdt
	sta     __t
;
; draw_tile ();
;
	jsr     _draw_tile
;
; rdx = (rdx + 1) & 15; if (!rdx) ++ rdy;
;
	lda     _rdx
	clc
	adc     #$01
	and     #$0F
	sta     _rdx
	lda     _rdx
	bne     L23D5
	inc     _rdy
;
; for (rdm = 0; rdm < 192; rdm ++) {
;
L23D5:	lda     _rdm
	clc
	adc     #$01
	jmp     L2D2B
;
; vram_write (attr_table, 0x23c0, 64);
;
L23D4:	jsr     decsp4
	lda     #<(_attr_table)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_attr_table)
	sta     (sp),y
	lda     #$C0
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$23
	sta     (sp),y
	ldx     #$00
	lda     #$40
	jmp     _vram_write

.endproc

; ---------------------------------------------------------------
; void __near__ pr_str (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pr_str: near

.segment	"CODE"

;
; vram_adr (((_y << 5) | _x) + 0x2000);
;
L2D3B:	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     __x
	ora     ptr1
	pha
	lda     tmp1
	clc
	adc     #$20
	tax
	pla
	jsr     _vram_adr
;
; while (gpit = *s++) {
;
L2406:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L240A
	inx
L240A:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     _gpit
	tax
	jeq     incsp2
;
; if (gpit == '%') {
;
	lda     _gpit
	cmp     #$25
	bne     L240B
;
; ++ _y; vram_adr (((_y << 5) | _x) + 0x2000);
;
	inc     __y
;
; else vram_put (gpit - 32); 
;
	jmp     L2D3B
L240B:	lda     _gpit
	sec
	sbc     #$20
	jsr     _vram_put
;
; }
;
	jmp     L2406

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) c_hotspots;
;
	lda     _c_hotspots
	sta     _gp_gen
	lda     _c_hotspots+1
	sta     _gp_gen+1
;
; for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
;
	lda     #$00
L2D3C:	sta     _gpit
	cmp     #$18
	bcs     L241A
;
; hact [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _hact,y
;
; for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L2D3C
;
; }
;
L241A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_paint: near

.segment	"CODE"

;
; rda = hrt;
;
	lda     _hrt
	sta     _rda
;
; if (hrt == HOTSPOT_TYPE_RESONATOR && res_on) rda = HOTSPOT_TYPE_RESONATOR_ON;
;
	lda     _hrt
	cmp     #$04
	bne     L2428
	lda     _res_on
	beq     L2428
	lda     #$05
	sta     _rda
;
; hrx, hry + SPRITE_ADJUST, 
;
L2428:	jsr     decsp3
	lda     _hrx
	ldy     #$02
	sta     (sp),y
	lda     _hry
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2D3E
	sec
L2D3E:	sbc     #$10
	bcs     L2D3F
	sec
L2D3F:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [rda]
;
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L2D40
	inx
	clc
L2D40:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [rda]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_create: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_hotspots + (n_pant << 1));
;
	ldx     #$00
	lda     _n_pant
	asl     a
	bcc     L2D42
	inx
	clc
L2D42:	adc     _c_hotspots
	pha
	txa
	adc     _c_hotspots+1
	tax
	pla
	sta     _gp_gen
	stx     _gp_gen+1
;
; hrt = *gp_gen ++; rda = *gp_gen; 
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2440
	inx
L2440:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _hrt
	lda     _gp_gen
	sta     ptr1
	lda     _gp_gen+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _rda
;
; if (hrt && hact [n_pant]) {
;
	lda     _hrt
	beq     L2443
	ldy     _n_pant
	lda     _hact,y
	beq     L2443
;
; hry = rda & 0xf0; hrx = rda << 4;
;
	lda     _rda
	and     #$F0
	sta     _hry
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _hrx
;
; } else hrt = 0;
;
	rts
L2443:	lda     #$00
	sta     _hrt
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ chac_chacs_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_chac_chacs_do: near

.segment	"CODE"

;
; gpit = max_chac_chacs; while (gpit --) {
;
	lda     _max_chac_chacs
	sta     _gpit
L246A:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	jeq     L246B
;
; if (chac_chacs_ct [gpit]) -- chac_chacs_ct [gpit]; else {
;
	ldy     _gpit
	lda     _chac_chacs_ct,y
	beq     L246D
	lda     #<(_chac_chacs_ct)
	ldx     #>(_chac_chacs_ct)
	clc
	adc     _gpit
	bcc     L2473
	inx
L2473:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
	jmp     L246A
;
; ++ chac_chacs_state [gpit];
;
L246D:	lda     #<(_chac_chacs_state)
	ldx     #>(_chac_chacs_state)
	clc
	adc     _gpit
	bcc     L2477
	inx
L2477:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (chac_chacs_state [gpit] == 6) chac_chacs_state [gpit] = 0;
;
	ldy     _gpit
	lda     _chac_chacs_state,y
	cmp     #$06
	bne     L2478
	ldy     _gpit
	lda     #$00
	sta     _chac_chacs_state,y
;
; chac_chacs_ct [gpit] = chac_chacs_state [gpit] ? 
;
L2478:	lda     #<(_chac_chacs_ct)
	ldx     #>(_chac_chacs_ct)
	clc
	adc     _gpit
	bcc     L2482
	inx
L2482:	sta     sreg
	stx     sreg+1
	ldy     _gpit
	lda     _chac_chacs_state,y
;
; (chac_chacs_times [chac_chacs_state [gpit]]) :
;
	beq     L2486
	ldy     _gpit
	lda     _chac_chacs_state,y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_chac_chacs_times)
	sta     ptr1+1
	ldy     #<(_chac_chacs_times)
	lda     (ptr1),y
;
; chac_chacs_idlewait [gpit];
;
	jmp     L2D43
L2486:	ldy     _gpit
	lda     _chac_chacs_idlewait,y
L2D43:	ldy     #$00
	sta     (sreg),y
;
; chac_chacs_stack [chac_chacs_top] = gpit;
;
	ldy     _chac_chacs_top
	lda     _gpit
	sta     _chac_chacs_stack,y
;
; ++ chac_chacs_top;    
;
	inc     _chac_chacs_top
;
; }
;
	jmp     L246A
;
; if (chac_chacs_top) {
;
L246B:	lda     _chac_chacs_top
	bne     L2D44
;
; }
;
	rts
;
; gpit = chac_chacs_stack [-- chac_chacs_top];
;
L2D44:	dec     _chac_chacs_top
	lda     _chac_chacs_top
	sta     ptr1
	txa
	clc
	adc     #>(_chac_chacs_stack)
	sta     ptr1+1
	ldy     #<(_chac_chacs_stack)
	lda     (ptr1),y
	sta     _gpit
;
; rdm = chac_chacs_state [gpit];
;
	ldy     _gpit
	lda     _chac_chacs_state,y
	sta     _rdm
;
; if (rdm == 3) { shaker_ct = 8; sfx_play (SFX_STEPON, 1); }
;
	cmp     #$03
	bne     L249E
	lda     #$08
	sta     _shaker_ct
	lda     #$0F
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; rdx = chac_chacs_yx [gpit]; rdy = rdx >> 4; rdx &= 0xf;
;
L249E:	ldy     _gpit
	lda     _chac_chacs_yx,y
	sta     _rdx
	ldx     #$00
	lda     _rdx
	jsr     asrax4
	sta     _rdy
	lda     _rdx
	and     #$0F
	sta     _rdx
;
; _x = rdx; _y = rdy    ; _t = chac_chacs_t1 [rdm]; map_set ();
;
	sta     __x
	lda     _rdy
	sta     __y
	ldy     _rdm
	lda     _chac_chacs_t1,y
	sta     __t
	jsr     _map_set
;
; _x = rdx; _y = rdy + 1; _t = chac_chacs_t2 [rdm]; map_set ();
;
	lda     _rdx
	sta     __x
	lda     _rdy
	clc
	adc     #$01
	sta     __y
	ldy     _rdm
	lda     _chac_chacs_t2,y
	sta     __t
	jsr     _map_set
;
; _x = rdx; _y = rdy + 2; _t = chac_chacs_t3 [rdm]; map_set ();
;
	lda     _rdx
	sta     __x
	lda     _rdy
	clc
	adc     #$02
	sta     __y
	ldy     _rdm
	lda     _chac_chacs_t3,y
	sta     __t
	jmp     _map_set

.endproc

; ---------------------------------------------------------------
; void __near__ player_register_safe_spot (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_register_safe_spot: near

.segment	"CODE"

;
; px_safe = px;
;
	lda     _px
	sta     _px_safe
	lda     _px+1
	sta     _px_safe+1
;
; py_safe = py;
;
	lda     _py
	sta     _py_safe
	lda     _py+1
	sta     _py_safe+1
;
; n_pant_safe = n_pant;
;
	lda     _n_pant
	sta     _n_pant_safe
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_stop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_stop: near

.segment	"CODE"

;
; pvx = pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
	sta     _pvx
	sta     _pvx+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; player_stop ();
;
	jsr     _player_stop
;
; pfacing = 0;
;
	lda     #$00
	sta     _pfacing
;
; pfr = pctfr = 0;
;
	sta     _pctfr
	sta     _pfr
;
; pj = pctj = 0;
;
	sta     _pctj
	sta     _pj
;
; psprid = 0;
;
	sta     _psprid
;
; pkeys = 0;
;
	sta     _pkeys
;
; pgotten = 0;
;
	sta     _pgotten
;
; pfiring = 0;
;
	sta     _pfiring
;
; pkilled = 0;
;
	sta     _pkilled
;
; pstate = EST_NORMAL;
;
	sta     _pstate
;
; player_register_safe_spot ();
;
	jmp     _player_register_safe_spot

.endproc

; ---------------------------------------------------------------
; void __near__ player_render (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_render: near

.segment	"CODE"

;
; if (pstate == EST_NORMAL || half_life) 
;
	lda     _pstate
	beq     L24EE
	lda     _half_life
	bne     L24EE
	rts
;
; prx, pry + SPRITE_ADJUST, 
;
L24EE:	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2D46
	sec
L2D46:	sbc     #$10
	bcs     L2D47
	sec
L2D47:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_player [psprid]
;
	ldx     #$00
	lda     _psprid
	asl     a
	bcc     L2D48
	inx
	clc
L2D48:	adc     #<(_spr_player)
;
; );
;
	sta     ptr1
;
; spr_player [psprid]
;
	txa
	adc     #>(_spr_player)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_to_pixels (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_to_pixels: near

.segment	"CODE"

;
; prx = px >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
;
; pry = py >> FIXBITS;
;
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_kill: near

.segment	"CODE"

;
; pkill = phit = 0;
;
	lda     #$00
	sta     _phit
	sta     _pkill
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (plife) -- plife; else game_over = 1;
;
	lda     _plife
	beq     L2507
	dec     _plife
	jmp     L250A
L2507:	lda     #$01
	sta     _game_over
;
; pstate = EST_PARP;
;
L250A:	lda     #$02
	sta     _pstate
;
; pctstate = 100; 
;
	lda     #$64
	sta     _pctstate
;
; px = px_safe; 
;
	lda     _px_safe
	sta     _px
	lda     _px_safe+1
	sta     _px+1
;
; py = py_safe; 
;
	lda     _py_safe
	sta     _py
	lda     _py_safe+1
	sta     _py+1
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; n_pant = n_pant_safe;
;
	lda     _n_pant_safe
	sta     _n_pant
;
; music_pause (1);
;
	lda     #$01
	jsr     _music_pause
;
; delay (60);
;
	lda     #$3C
	jsr     _delay
;
; player_stop ();
;
	jsr     _player_stop
;
; music_pause (0);
;
	lda     #$00
	jmp     _music_pause

.endproc

; ---------------------------------------------------------------
; void __near__ player_process_tile (int, int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_process_tile: near

.segment	"CODE"

;
; if (y0) -- y0;
;
	ldy     #$05
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L2520
	ldx     #$00
	lda     #$01
	jsr     subeqysp
;
; y1=x1;//Shutup, compiler!
;
L2520:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     stax0sp
;
; at == 10 &&
;
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	jne     L2525
	cmp     #$0A
	jne     L2525
;
; ) {
;
	lda     _pkeys
	jeq     L2525
;
; _x = x0; _y = y0; _t = 0; map_set ();
;
	ldy     #$06
	lda     (sp),y
	sta     __x
	ldy     #$04
	lda     (sp),y
	sta     __y
	stx     __t
	jsr     _map_set
;
; gp_gen = (unsigned char *) c_locks;
;
	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L2535:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L2536
;
; rda = *gp_gen ++; rdb = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L253A
	inx
L253A:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L253D
	inx
L253D:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdb
;
; if (n_pant == rda && COORDS (x0, y0) == rdb) {
;
	lda     _rda
	cmp     _n_pant
	bne     L2535
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     aslax4
	ldy     #$06
	ora     (sp),y
	pha
	txa
	iny
	ora     (sp),y
	tax
	pla
	cpx     #$00
	bne     L2535
	cmp     _rdb
	bne     L2535
;
; lkact [gpit] = 0;
;
	ldy     _gpit
	txa
	sta     _lkact,y
;
; }
;
	jmp     L2535
;
; -- pkeys;
;
L2536:	dec     _pkeys
;
; sfx_play (SFX_TILE, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; } else {
;
	jmp     L254E
;
; no_ct = 100;
;
L2525:	lda     #$64
	sta     _no_ct
;
; }
;
L254E:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; hitv = hith = 0;
;
	lda     #$00
	sta     _hith
	sta     _hitv
;
; pnotsafe = 0;
;
	sta     _pnotsafe
;
; ppossee = 0;
;
	sta     _ppossee
;
; ) {
;
	lda     _pgotten
	bne     L2564
;
; if (!pj) {
;
	lda     _pj
	bne     L255B
;
; pvy += PLAYER_G;
;
	lda     #$08
;
; } else pvy += PLAYER_G_MK2_JUMPING;
;
	jmp     L2D5E
L255B:	lda     #$02
L2D5E:	clc
	adc     _pvy
	sta     _pvy
	bcc     L2563
	inc     _pvy+1
;
; if (pvy > PLAYER_VY_FALLING_MAX) pvy = PLAYER_VY_FALLING_MAX; 
;
L2563:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$01
	bvs     L2566
	eor     #$80
L2566:	bpl     L2564
	ldx     #$01
	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; if (pgotten) pvy = 0;   
;
L2564:	lda     _pgotten
	beq     L2569
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; cx1 = prx >> 4;
;
L2569:	tax
	lda     _prx
	jsr     asrax4
	sta     _cx1
;
; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L2572
	inx
L2572:	jsr     shrax4
	sta     _cx2
;
; py += pvy;
;
	lda     _pvy
	clc
	adc     _py
	sta     _py
	lda     _pvy+1
	adc     _py+1
	sta     _py+1
;
; if (py < 0) py = 0;
;
	ldx     _py+1
	cpx     #$80
	bcc     L2575
	lda     #$00
	sta     _py
	sta     _py+1
;
; player_to_pixels ();
;
L2575:	jsr     _player_to_pixels
;
; rds16 = pvy + pgtmy;
;
	lda     _pvy
	clc
	adc     _pgtmy
	sta     _rds16
	lda     _pvy+1
	adc     _pgtmy+1
	tax
	stx     _rds16+1
;
; if (rds16 < 0)
;
	cpx     #$80
	bcc     L257C
;
; cy1 = cy2 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;   
;
	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L2584
	lda     _at2
	and     #$08
	jeq     L25A7
;
; pry = ((cy1 + 1) << 4) + PLAYER_COLLISION_VSTRETCH_BG;
;
L2584:	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L258C
	inx
L258C:	jsr     shlax4
	clc
	adc     #$FC
	sta     _pry
	txa
	adc     #$FF
;
; pvy = 0; py = pry << FIXBITS;
;
	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L25EC
;
; } else if (rds16 > 0)
;
L257C:	lda     _rds16
	cmp     #$01
	lda     _rds16+1
	sbc     #$00
	bvs     L25A0
	eor     #$80
L25A0:	jpl     L25EC
;
; cy1 = cy2 = (pry + 16) >> 4; 
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L25A5
	inx
L25A5:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points (); 
;
	jsr     _cm_two_points
;
; pry < ((cy1 - 1) << 4) + 4 && 
;
	lda     _pry
	jsr     pusha0
	lda     _cy1
	sec
	sbc     #$01
	bcs     L25AB
	ldx     #$FF
L25AB:	jsr     shlax4
	clc
	adc     #$04
	bcc     L25AC
	inx
L25AC:	jsr     tosicmp
	jcs     L25A7
;
; (at1 & 12) || (at2 & 12)
;
	lda     _at1
	and     #$0C
	bne     L25A8
	lda     _at2
	and     #$0C
;
; )
;
	jeq     L25A7
;
; pvy = 0; pry = ((cy1 - 1) << 4);py = pry << FIXBITS;
;
L25A8:	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _cy1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; ppossee = 1;
;
	sta     _ppossee
;
; cfx = 0;
;
	lda     #$00
	sta     _cfx
;
; if ((at1 & 40) == 40) { if (at1 & 1) cfx = pgtmx = PLAYER_VX_CONVEYORS; else cfx = pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; } 
;
	lda     _at1
	and     #$28
	cmp     #$28
	bne     L25C4
	lda     _at1
	and     #$01
	beq     L25C8
	ldx     #$00
	lda     #$30
	jmp     L2D57
L25C8:	ldx     #$FF
	lda     #$D0
L2D57:	sta     _pgtmx
	stx     _pgtmx+1
	sta     _cfx
	lda     #$01
	sta     _pgotten
;
; if (cx1 != cx2) if ((at2 & 40) == 40) { if (at2 & 1) cfx = pgtmx = PLAYER_VX_CONVEYORS; else cfx = pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; } 
;
L25C4:	lda     _cx2
	cmp     _cx1
	beq     L25D5
	lda     _at2
	and     #$28
	cmp     #$28
	bne     L25D5
	lda     _at2
	and     #$01
	beq     L25D9
	ldx     #$00
	lda     #$30
	jmp     L2D58
L25D9:	ldx     #$FF
	lda     #$D0
L2D58:	sta     _pgtmx
	stx     _pgtmx+1
	sta     _cfx
	lda     #$01
	sta     _pgotten
;
; if ((at1 & 1) || (at2 & 1)) pnotsafe = 1; 
;
L25D5:	lda     _at1
	and     #$01
	bne     L25E5
	lda     _at2
	and     #$01
	beq     L25EC
L25E5:	lda     #$01
	sta     _pnotsafe
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L25EC
L25A7:	lda     _at1
	and     #$01
	bne     L25ED
	lda     _at2
	and     #$01
	beq     L25EC
;
; hitv = 1;
;
L25ED:	lda     #$01
	sta     _hitv
;
; && !pj
;
L25EC:	lda     _a_button
	beq     L25FA
;
; && (
;
	lda     _pj
	bne     L25FA
;
; pgotten || ppossee || hitv
;
	lda     _pgotten
	bne     L25F4
	lda     _ppossee
	bne     L25F4
;
; )
;
	lda     _hitv
	beq     L25FA
;
; jump_start ();
;
L25F4:	jsr     _jump_start
;
; if (!(pgotten || hitv || pnotsafe)) {
;
	lda     _pgotten
	bne     L25FC
	lda     _hitv
	bne     L25FC
	lda     _pnotsafe
	beq     L25FD
L25FC:	lda     #$01
L25FD:	jsr     bnega
	beq     L25FA
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; if (pj) {
;
L25FA:	lda     _pj
	beq     L260B
;
; if (i & PAD_A) {
;
	lda     _i
	and     #$01
	beq     L2601
;
; ++ pctj; if (pctj == PLAYER_VY_MK2_JUMP_A_STEPS) pj = 0;
;
	inc     _pctj
	lda     _pctj
	cmp     #$10
	bne     L260B
	lda     #$00
	sta     _pj
;
; } else {
;
	jmp     L260B
;
; pj = 0; if (pvy < -PLAYER_VY_MK2_JUMP_RELEASE) pvy = -PLAYER_VY_MK2_JUMP_RELEASE;
;
L2601:	sta     _pj
	lda     _pvy
	cmp     #$B0
	lda     _pvy+1
	sbc     #$FF
	bvc     L260D
	eor     #$80
L260D:	bpl     L260B
	ldx     #$FF
	lda     #$B0
	sta     _pvy
	stx     _pvy+1
;
; if (!(i & PAD_LEFT || i & PAD_RIGHT)) {
;
L260B:	lda     _i
	and     #$40
	bne     L2612
	lda     _i
	and     #$80
	beq     L2613
L2612:	lda     #$01
L2613:	jsr     bnega
	beq     L2624
;
; if (pvx > 0) {
;
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L2616
	eor     #$80
L2616:	bpl     L2614
;
; pvx -= PLAYER_RX;
;
	lda     _pvx
	sec
	sbc     #$0C
	sta     _pvx
	bcs     L2619
	dec     _pvx+1
;
; if (pvx < 0) pvx = 0;
;
L2619:	ldx     _pvx+1
	cpx     #$80
	bcc     L2624
;
; } else if (pvx < 0) {
;
	jmp     L2D59
L2614:	ldx     _pvx+1
	cpx     #$80
	bcc     L2624
;
; pvx += PLAYER_RX;
;
	lda     #$0C
	clc
	adc     _pvx
	sta     _pvx
	bcc     L2623
	inc     _pvx+1
;
; if (pvx > 0) pvx = 0;
;
L2623:	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L2626
	eor     #$80
L2626:	bpl     L2624
L2D59:	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; if (i & PAD_LEFT) {
;
L2624:	lda     _i
	and     #$40
	beq     L262D
;
; pfacing = CELL_FACING_LEFT;  
;
	lda     #$08
	sta     _pfacing
;
; if (pvx > -PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$91
	lda     _pvx+1
	sbc     #$FF
	bvs     L262F
	eor     #$80
L262F:	bpl     L262D
;
; pvx -= PLAYER_AX;
;
	lda     _pvx
	sec
	sbc     #$0C
	sta     _pvx
	bcs     L262D
	dec     _pvx+1
;
; if (i & PAD_RIGHT) {
;
L262D:	lda     _i
	and     #$80
	beq     L2637
;
; pfacing = CELL_FACING_RIGHT;
;
	lda     #$00
	sta     _pfacing
;
; if (pvx < PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$70
	lda     _pvx+1
	sbc     #$00
	bvc     L2639
	eor     #$80
L2639:	bpl     L2637
;
; pvx += PLAYER_AX;
;
	lda     #$0C
	clc
	adc     _pvx
	sta     _pvx
	bcc     L2637
	inc     _pvx+1
;
; px += pvx;
;
L2637:	lda     _pvx
	clc
	adc     _px
	sta     _px
	lda     _pvx+1
	adc     _px+1
	sta     _px+1
;
; if (pgotten) px += pgtmx;
;
	lda     _pgotten
	beq     L263F
	lda     _pgtmx
	clc
	adc     _px
	sta     _px
	lda     _pgtmx+1
	adc     _px+1
	sta     _px+1
;
; if (px < (4<<FIXBITS)) prx = 4;
;
L263F:	lda     _px
	cmp     #$00
	lda     _px+1
	sbc     #$01
	bvc     L2646
	eor     #$80
L2646:	bpl     L2643
	lda     #$04
	sta     _prx
;
; else if (px > (244<<FIXBITS)) prx = 244; 
;
	jmp     L2650
L2643:	lda     _px
	cmp     #$01
	lda     _px+1
	sbc     #$3D
	bvs     L264D
	eor     #$80
L264D:	bpl     L264A
	lda     #$F4
	sta     _prx
;
; else player_to_pixels ();
;
	jmp     L2650
L264A:	jsr     _player_to_pixels
;
; cy1 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;
;
L2650:	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L2658
	inx
L2658:	jsr     shrax4
	sta     _cy2
;
; rds16 = pvx + pgtmx;
;
	lda     _pvx
	clc
	adc     _pgtmx
	sta     _rds16
	lda     _pvx+1
	adc     _pgtmx+1
	sta     _rds16+1
;
; if (rds16)  {
;
	lda     _rds16
	ora     _rds16+1
	jeq     L2698
;
; if (rds16 < 0) {
;
	ldx     _rds16+1
	cpx     #$80
	bcc     L265D
;
; cx1 = cx2 = prx >> 4; 
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx2
	sta     _cx1
;
; rda = (cx1 + 1) << 4;
;
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; rdm = cx1 - 1;
;
	lda     _cx1
	sec
	sbc     #$01
	bcs     L2677
;
; } else {
;
	jmp     L2677
;
; cx1 = cx2 = (prx + 8) >> 4;
;
L265D:	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L266E
	inx
L266E:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 - 1) << 4) + 8;
;
	ldx     #$00
	lda     _cx1
	sec
	sbc     #$01
	bcs     L2673
	dex
L2673:	jsr     shlax4
	clc
	adc     #$08
	sta     _rda
;
; rdm = cx1 + 1;
;
	lda     _cx1
	clc
	adc     #$01
L2677:	sta     _rdm
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L267A
	lda     _at2
	and     #$08
	jeq     L2679
;
; pvx = 0; prx = rda; px = prx << FIXBITS; pfiring = 1;
;
L267A:	ldx     #$00
	txa
	sta     _pvx
	sta     _pvx+1
	lda     _rda
	sta     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
	lda     #$01
	sta     _pfiring
;
; if (at1 & 2) player_process_tile (at1, cx1, cy1, rdm, cy1);
;
	lda     _at1
	ldx     #$00
	and     #$02
	beq     L2686
	ldy     #$0A
	jsr     subysp
	lda     _at1
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _rdm
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _player_process_tile
;
; if (cy1 != cy2) if (at2 & 2) player_process_tile (at2, cx1, cy2, rdm, cy2);
;
L2686:	lda     _cy1
	jsr     pusha0
	lda     _cy2
	jsr     tosicmp0
	beq     L2698
	lda     _at2
	ldx     #$00
	and     #$02
	beq     L2698
	ldy     #$0A
	jsr     subysp
	lda     _at2
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy2
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _rdm
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy2
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _player_process_tile
;
; } else {
;
	jmp     L2698
;
; hith = ((at1 & 1) || (at2 & 1));
;
L2679:	lda     _at1
	and     #$01
	bne     L269B
	lda     _at2
	and     #$01
	beq     L269E
L269B:	lda     #$01
L269E:	sta     _hith
;
; phit = 0;
;
L2698:	lda     #$00
	sta     _phit
;
; if (hitv) { phit = 1; pvy = ADD_SIGN (-pvy, PLAYER_V_REBOUND); } 
;
	lda     _hitv
	beq     L26A1
	lda     #$01
	sta     _phit
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L26A9
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L26AE
	eor     #$80
L26AE:	bpl     L26AF
	ldx     #$00
	lda     #$E0
	jmp     L26B6
L26AF:	ldx     #$FF
	lda     #$20
	jmp     L26B6
L26A9:	tax
L26B6:	sta     _pvy
	stx     _pvy+1
;
; if (hith) { phit = 1; 
;
L26A1:	lda     _hith
	beq     L26B9
	lda     #$01
	sta     _phit
;
; pvx = ADD_SIGN (-pvx, PLAYER_V_REBOUND); 
;
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L26C1
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L26C6
	eor     #$80
L26C6:	bpl     L26C7
	ldx     #$00
	lda     #$E0
	jmp     L26CE
L26C7:	ldx     #$FF
	lda     #$20
	jmp     L26CE
L26C1:	tax
L26CE:	sta     _pvx
	stx     _pvx+1
;
; if (pstate != EST_PARP) if (phit) { player_to_pixels (); pkill = 1; }
;
L26B9:	lda     _pstate
	cmp     #$02
	beq     L26D3
	lda     _phit
	beq     L26D3
	jsr     _player_to_pixels
	lda     #$01
	sta     _pkill
;
; if (ppossee || pgotten) {
;
L26D3:	lda     _ppossee
	bne     L26D9
	lda     _pgotten
	beq     L26D8
;
; if (pvx > PLAYER_VX_MIN || pvx < -PLAYER_VX_MIN) {
;
L26D9:	lda     _pvx
	cmp     #$19
	lda     _pvx+1
	sbc     #$00
	bvs     L26DE
	eor     #$80
L26DE:	bmi     L26DC
	lda     _pvx
	cmp     #$E8
	lda     _pvx+1
	sbc     #$FF
	bvc     L26E0
	eor     #$80
L26E0:	bpl     L26DB
;
; psprid = CELL_WALK_CYCLE + ((prx >> 3) & 3);
;
L26DC:	ldx     #$00
	lda     _prx
	jsr     asrax3
	and     #$03
	clc
	adc     #$01
	bcc     L2D50
;
; } else {
;
	jmp     L2D50
;
; psprid = CELL_IDLE;
;
L26DB:	lda     #$00
;
; } else {
;
	jmp     L2D50
;
; psprid = CELL_AIRBORNE;
;
L26D8:	lda     #$05
L2D50:	sta     _psprid
;
; psprid += pfacing;
;
	lda     _pfacing
	clc
	adc     _psprid
	sta     _psprid
;
; prx_old = prx;
;
	lda     _prx
	sta     _prx_old
;
; pry_old = pry;
;
	lda     _pry
	sta     _pry_old
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_persistent_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_persistent_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_enems);
;
	lda     _c_enems
	sta     _gp_gen
	lda     _c_enems+1
	sta     _gp_gen+1
;
; for (gpjt = 0; gpjt < 3 * MAP_SIZE; gpjt ++) {
;
	lda     #$00
L2D66:	sta     _gpjt
	cmp     #$48
	bcc     L2D67
;
; }
;
	rts
;
; rdt = *gp_gen ++; 
;
L2D67:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2701
	inx
L2701:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2704
	inx
L2704:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
;
; ep_y [gpjt] = rda & 0xf0;
;
	lda     #<(_ep_y)
	ldx     #>(_ep_y)
	clc
	adc     _gpjt
	bcc     L2707
	inx
L2707:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	and     #$F0
	sta     (ptr1),y
;
; ep_x [gpjt] = rda << 4;
;
	lda     #<(_ep_x)
	ldx     #>(_ep_x)
	clc
	adc     _gpjt
	bcc     L270B
	inx
L270B:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L270F
	inx
L270F:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
;
; rdc = rda & 0xf0;
;
	and     #$F0
	sta     _rdc
;
; rdb = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rdb
;
; rda = (*gp_gen ++) & 0x0f;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2717
	inx
L2717:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	and     #$0F
	sta     _rda
;
; if (rda > 1) rda >>= 1; // Store converted!
;
	cmp     #$02
	bcc     L2718
	lda     _rda
	lsr     a
	sta     _rda
;
; ep_mx [gpjt] = ADD_SIGN2 (rdb, ep_x [gpjt], rda);
;
L2718:	lda     #<(_ep_mx)
	ldx     #>(_ep_mx)
	clc
	adc     _gpjt
	bcc     L271E
	inx
L271E:	jsr     pushax
	ldy     _gpjt
	lda     _ep_x,y
	cmp     _rdb
	bne     L2725
	lda     #$00
	jmp     L2733
L2725:	lda     _rdb
	jsr     pusha0
	ldy     _gpjt
	lda     _ep_x,y
	jsr     tosicmp0
	bcc     L2730
	beq     L2730
	lda     _rda
	jmp     L2733
L2730:	ldx     #$00
	lda     _rda
	jsr     negax
L2733:	ldy     #$00
	jsr     staspidx
;
; ep_my [gpjt] = ADD_SIGN2 (rdc, ep_y [gpjt], rda);  
;
	lda     #<(_ep_my)
	ldx     #>(_ep_my)
	clc
	adc     _gpjt
	bcc     L2739
	inx
L2739:	jsr     pushax
	ldy     _gpjt
	lda     _ep_y,y
	cmp     _rdc
	bne     L2740
	lda     #$00
	jmp     L274E
L2740:	lda     _rdc
	jsr     pusha0
	ldy     _gpjt
	lda     _ep_y,y
	jsr     tosicmp0
	bcc     L274B
	beq     L274B
	lda     _rda
	jmp     L274E
L274B:	ldx     #$00
	lda     _rda
	jsr     negax
L274E:	ldy     #$00
	jsr     staspidx
;
; for (gpjt = 0; gpjt < 3 * MAP_SIZE; gpjt ++) {
;
	lda     _gpjt
	clc
	adc     #$01
	jmp     L2D66

.endproc

; ---------------------------------------------------------------
; void __near__ enems_persistent_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_persistent_update: near

.segment	"CODE"

;
; if (on_pant != 99) {
;
	lda     _on_pant
	cmp     #$63
	beq     L2758
;
; gpjt = on_pant + on_pant + on_pant;
;
	lda     _on_pant
	clc
	adc     _on_pant
	bcc     L2D6A
	clc
L2D6A:	adc     _on_pant
	sta     _gpjt
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     #$00
L2D6B:	sta     _gpit
	cmp     #$03
	bcs     L2758
;
; __asm__ ("ldx %v", gpit);
;
	ldx     _gpit
;
; __asm__ ("ldy %v", gpjt);
;
	ldy     _gpjt
;
; __asm__ ("lda %v,x", en_x);
;
	lda     _en_x,x
;
; __asm__ ("sta %v,y", ep_x);
;
	sta     _ep_x,y
;
; __asm__ ("lda %v,x", en_y);
;
	lda     _en_y,x
;
; __asm__ ("sta %v,y", ep_y);
;
	sta     _ep_y,y
;
; __asm__ ("lda %v,x", en_mx);
;
	lda     _en_mx,x
;
; __asm__ ("sta %v,y", ep_mx);
;
	sta     _ep_mx,y
;
; __asm__ ("lda %v,x", en_my);
;
	lda     _en_my,x
;
; __asm__ ("sta %v,y", ep_my);
;
	sta     _ep_my,y
;
; ++ gpjt; 
;
	inc     _gpjt
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L2D6B
;
; }
;
L2758:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_persistent_deaths_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_persistent_deaths_load: near

.segment	"CODE"

;
; memfill (ep_dead, 0, MAP_SIZE * 3);
;
	jsr     decsp3
	lda     #<(_ep_dead)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_ep_dead)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$48
	jmp     _memfill

.endproc

; ---------------------------------------------------------------
; void __near__ enems_update_unsigned_char_arrays (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_update_unsigned_char_arrays: near

.segment	"CODE"

;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v", _en_t);
;
	lda     __en_t
;
; __asm__ ("sta %v, y", en_t);
;
	sta     _en_t,y
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("sta %v, y", en_s);
;
	sta     _en_s,y
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("sta %v, y", en_x);
;
	sta     _en_x,y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("sta %v, y", en_y);
;
	sta     _en_y,y
;
; __asm__ ("lda %v", _en_x1);
;
	lda     __en_x1
;
; __asm__ ("sta %v, y", en_x1);
;
	sta     _en_x1,y
;
; __asm__ ("lda %v", _en_x2);
;
	lda     __en_x2
;
; __asm__ ("sta %v, y", en_x2);
;
	sta     _en_x2,y
;
; __asm__ ("lda %v", _en_y1);
;
	lda     __en_y1
;
; __asm__ ("sta %v, y", en_y1);
;
	sta     _en_y1,y
;
; __asm__ ("lda %v", _en_y2);
;
	lda     __en_y2
;
; __asm__ ("sta %v, y", en_y2);
;
	sta     _en_y2,y
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("sta %v, y", en_mx);
;
	sta     _en_mx,y
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("sta %v, y", en_my);
;
	sta     _en_my,y
;
; __asm__ ("lda %v", _en_ct);
;
	lda     __en_ct
;
; __asm__ ("sta %v, y", en_ct);
;
	sta     _en_ct,y
;
; __asm__ ("lda %v", _en_facing);
;
	lda     __en_facing
;
; __asm__ ("sta %v, y", en_facing);
;
	sta     _en_facing,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_facing (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_facing: near

.segment	"CODE"

;
; _en_facing = rda << 2;
;
	lda     _rda
	asl     a
	asl     a
	sta     __en_facing
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_enems + (n_pant << 2) + (n_pant << 3));
;
	ldx     #$00
	lda     _n_pant
	jsr     aslax2
	clc
	adc     _c_enems
	sta     ptr1
	txa
	adc     _c_enems+1
	sta     ptr1+1
	ldx     #$00
	lda     _n_pant
	jsr     aslax3
	clc
	adc     ptr1
	sta     _gp_gen
	txa
	adc     ptr1+1
	sta     _gp_gen+1
;
; en_offs = rdc = (n_pant << 1) + n_pant;
;
	lda     _n_pant
	asl     a
	bcc     L2D73
	clc
L2D73:	adc     _n_pant
	sta     _rdc
	sta     _en_offs
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     #$00
L2D78:	sta     _gpit
	cmp     #$03
	bcc     L2D79
;
; }
;
	rts
;
; if (ep_dead [rdc]) {
;
L2D79:	ldy     _rdc
	lda     _ep_dead,y
	beq     L279E
;
; _en_t = 0;
;
	lda     #$00
	sta     __en_t
;
; gp_gen += 4;
;
	lda     #$04
	clc
	adc     _gp_gen
	sta     _gp_gen
	jcc     L27A7
	inc     _gp_gen+1
;
; } else 
;
	jmp     L27A7
;
; _en_t = *gp_gen ++;
;
L279E:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L27AA
	inx
L27AA:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     __en_t
;
; en_alive [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_alive,y
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L27B1
	inx
L27B1:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
;
; _en_y1 = rda & 0xf0;
;
	and     #$F0
	sta     __en_y1
;
; _en_x1 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x1
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L27B8
	inx
L27B8:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
;
; _en_y2 = rda & 0xf0;
;
	and     #$F0
	sta     __en_y2
;
; _en_x2 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x2
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L27BF
	inx
L27BF:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
;
; rdd = rda & 0xf0;  // Used for respawn speed!
;
	and     #$F0
	sta     _rdd
;
; rdm = rda & 0x0f;  // Actual speed.
;
	lda     _rda
	and     #$0F
	sta     _rdm
;
; _en_x = ep_x [rdc];
;
	ldy     _rdc
	lda     _ep_x,y
	sta     __en_x
;
; _en_y = ep_y [rdc];
;
	ldy     _rdc
	lda     _ep_y,y
	sta     __en_y
;
; switch (_en_t & 0x3f) {
;
	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L27D0
	cmp     #$02
	beq     L27D0
	cmp     #$03
	beq     L27D0
	cmp     #$04
	beq     L27D0
	cmp     #$06
	jeq     L2801
	jmp     L27CE
;
; _en_ct = 0;   
;
L27D0:	lda     #$00
	sta     __en_ct
;
; _en_s = (_en_t - 1) << 3;
;
	lda     __en_t
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	sta     __en_s
;
; _en_mx = ep_mx [rdc];
;
	lda     #<(_ep_mx)
	ldx     #>(_ep_mx)
	clc
	adc     _rdc
	bcc     L27E0
	inx
L27E0:	ldy     #$00
	jsr     ldaidx
	sta     __en_mx
;
; _en_my = ep_my [rdc];
;
	lda     #<(_ep_my)
	ldx     #>(_ep_my)
	clc
	adc     _rdc
	bcc     L27E4
	inx
L27E4:	jsr     ldaidx
	sta     __en_my
;
; if (rdm == 1) {
;
	lda     _rdm
	cmp     #$01
	bne     L27E5
;
; en_status [gpit] = 1; 
;
	ldy     _gpit
;
; } else {
;
	jmp     L2D72
;
; en_status [gpit] = 0;
;
L27E5:	ldy     _gpit
	lda     #$00
L2D72:	sta     _en_status,y
;
; if (_en_x1 > _en_x2) { rda = _en_x1; _en_x1 = _en_x2; _en_x2 = rda; }
;
	lda     __en_x1
	sec
	sbc     __en_x2
	bcc     L27F0
	beq     L27F0
	lda     __en_x1
	sta     _rda
	lda     __en_x2
	sta     __en_x1
	lda     _rda
	sta     __en_x2
;
; if (_en_y1 > _en_y2) { rda = _en_y1; _en_y1 = _en_y2; _en_y2 = rda; }
;
L27F0:	lda     __en_y1
	sec
	sbc     __en_y2
	jcc     L27CE
	jeq     L27CE
	lda     __en_y1
	sta     _rda
	lda     __en_y2
	sta     __en_y1
	lda     _rda
	sta     __en_y2
;
; break;
;
	jmp     L27CE
;
; enf_x [gpit] = _en_x << 6;
;
L2801:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2D74
	inx
	clc
L2D74:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_y [gpit] = _en_y << 6;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2D75
	inx
	clc
L2D75:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_vx [gpit] = enf_vy [gpit] = 0;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2D76
	inx
	clc
L2D76:	adc     #<(_enf_vx)
	tay
	txa
	adc     #>(_enf_vx)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2D77
	inx
	clc
L2D77:	adc     #<(_enf_vy)
	tay
	txa
	adc     #>(_enf_vy)
	tax
	tya
	jsr     pushax
	ldx     #$00
	txa
	tay
	jsr     staxspidx
	jsr     staxspidx
;
; _en_s = FANTY_BASE_SPRID;
;
	lda     #$20
	sta     __en_s
;
; en_cttouched [gpit] = 0;
;
L27CE:	ldy     _gpit
	lda     #$00
	sta     _en_cttouched,y
;
; en_flags [gpit] = 0;
;
	ldy     _gpit
	sta     _en_flags,y
;
; ++ rdc;
;
L27A7:	inc     _rdc
;
; enems_update_unsigned_char_arrays ();
;
	jsr     _enems_update_unsigned_char_arrays
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L2D78

.endproc

; ---------------------------------------------------------------
; void __near__ enems_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_kill: near

.segment	"CODE"

;
; en_flags [gpit] |= EN_STATE_DEAD;
;
	lda     #<(_en_flags)
	ldx     #>(_en_flags)
	clc
	adc     _gpit
	bcc     L281C
	inx
L281C:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$01
	sta     (ptr1),y
;
; ep_dead [en_offs + gpit] = 1;
;
	ldx     #$00
	lda     _en_offs
	clc
	adc     _gpit
	bcc     L2D7B
	inx
	clc
L2D7B:	adc     #<(_ep_dead)
	sta     ptr1
	txa
	adc     #>(_ep_dead)
	sta     ptr1+1
	lda     #$01
	sta     (ptr1),y
;
; ++ pkilled;
;
	inc     _pkilled
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_hit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_hit: near

.segment	"CODE"

;
; _en_facing = ((_en_x < prx) ? 0 : 4);
;
	lda     __en_x
	cmp     _prx
	bcs     L2827
	lda     #$00
	jmp     L2829
L2827:	lda     #$04
L2829:	sta     __en_facing
;
; en_cttouched [gpit] = ENEMS_TOUCHED_FRAMES;
;
	ldy     _gpit
	lda     #$08
	sta     _en_cttouched,y
;
; enems_kill ();
;
	jmp     _enems_kill

.endproc

; ---------------------------------------------------------------
; void __near__ enems_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_move: near

.segment	"CODE"

;
; pgotten = pgtmx = pgtmy = 0;
;
	lda     #$00
	sta     _pgtmy
	sta     _pgtmy+1
	sta     _pgtmx
	sta     _pgtmx+1
	sta     _pgotten
;
; touched = 0;
;
	sta     _touched
;
; ++ en_initial; if (en_initial >= 3) en_initial = 0;
;
	inc     _en_initial
	lda     _en_initial
	cmp     #$03
	bcc     L2838
	lda     #$00
	sta     _en_initial
;
; gpit = en_initial;
;
L2838:	lda     _en_initial
	sta     _gpit
;
; gpjt = 3; while (gpjt --) {
;
	lda     #$03
	sta     _gpjt
L2840:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	bne     L2DB1
;
; }
;
	rts
;
; gpit += 2; if (gpit > 2) gpit -=3;
;
L2DB1:	lda     #$02
	clc
	adc     _gpit
	sta     _gpit
	cmp     #$03
	bcc     L2845
	lda     _gpit
	sec
	sbc     #$03
	sta     _gpit
;
; __asm__ ("ldy %v", gpit);
;
L2845:	ldy     _gpit
;
; __asm__ ("lda %v, y", en_t);
;
	lda     _en_t,y
;
; __asm__ ("sta %v", _en_t);
;
	sta     __en_t
;
; __asm__ ("lda %v, y", en_s);
;
	lda     _en_s,y
;
; __asm__ ("sta %v", _en_s);
;
	sta     __en_s
;
; __asm__ ("lda %v, y", en_x);
;
	lda     _en_x,y
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v, y", en_y);
;
	lda     _en_y,y
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v, y", en_x1);
;
	lda     _en_x1,y
;
; __asm__ ("sta %v", _en_x1);
;
	sta     __en_x1
;
; __asm__ ("lda %v, y", en_x2);
;
	lda     _en_x2,y
;
; __asm__ ("sta %v", _en_x2);
;
	sta     __en_x2
;
; __asm__ ("lda %v, y", en_y1);
;
	lda     _en_y1,y
;
; __asm__ ("sta %v", _en_y1);
;
	sta     __en_y1
;
; __asm__ ("lda %v, y", en_y2);
;
	lda     _en_y2,y
;
; __asm__ ("sta %v", _en_y2);
;
	sta     __en_y2
;
; __asm__ ("lda %v, y", en_mx);
;
	lda     _en_mx,y
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v, y", en_my);
;
	lda     _en_my,y
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; __asm__ ("lda %v, y", en_ct);
;
	lda     _en_ct,y
;
; __asm__ ("sta %v", _en_ct);
;
	sta     __en_ct
;
; __asm__ ("lda %v, y", en_facing);
;
	lda     _en_facing,y
;
; __asm__ ("sta %v", _en_facing);
;
	sta     __en_facing
;
; _enf_x = enf_x [gpit]; _enf_vx = enf_vx [gpit];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2D9B
	inx
	clc
L2D9B:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     __enf_x+1
	dey
	lda     (ptr1),y
	sta     __enf_x
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2D9C
	inx
	clc
L2D9C:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_vx+1
	dey
	lda     (ptr1),y
	sta     __enf_vx
;
; _enf_y = enf_y [gpit]; _enf_vy = enf_vy [gpit];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2D9D
	inx
	clc
L2D9D:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_y+1
	dey
	lda     (ptr1),y
	sta     __enf_y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2D9E
	inx
	clc
L2D9E:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_vy+1
	dey
	lda     (ptr1),y
	sta     __enf_vy
;
; if (_en_t == 0) continue;
;
	lda     __en_t
	jeq     L2840
;
; en_is_alive = !(en_flags [gpit] & EN_STATE_DEAD);
;
	ldy     _gpit
	lda     _en_flags,y
	and     #$01
	jsr     bnega
	sta     _en_is_alive
;
; en_spr = 0xff;
;
	lda     #$FF
	sta     _en_spr
;
; if (en_cttouched [gpit]) {
;
	ldy     _gpit
	lda     _en_cttouched,y
	beq     L2877
;
; -- en_cttouched [gpit];
;
	lda     #<(_en_cttouched)
	ldx     #>(_en_cttouched)
	clc
	adc     _gpit
	bcc     L287D
	inx
L287D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; _en_x, _en_y + SPRITE_ADJUST, 
;
	jsr     decsp3
	lda     __en_x
	ldy     #$02
	sta     (sp),y
	lda     __en_y
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2D9F
	sec
L2D9F:	sbc     #$10
	bcs     L2DA0
	sec
L2DA0:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$51
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; } else
;
	jmp     L2A50
;
; if (en_is_alive) {
;
L2877:	lda     _en_is_alive
	jeq     L2A50
;
; pregotten = (prx + 7 >= _en_x && prx <= _en_x + 15);
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L288F
	inx
L288F:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L2890
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0F
	bcc     L2891
	ldx     #$01
L2891:	jsr     tosicmp
	bcc     L288E
	beq     L288E
L2890:	lda     #$00
	jmp     L2892
L288E:	lda     #$01
L2892:	sta     _pregotten
;
; en_fr = ((((_en_mx) ? _en_x : _en_y)+4) >> 3) & 1;
;
	lda     __en_mx
	beq     L2899
	lda     __en_x
	jmp     L2D92
L2899:	lda     __en_y
L2D92:	ldx     #$00
	clc
	adc     #$04
	bcc     L289D
	inx
L289D:	jsr     shrax3
	and     #$01
	sta     _en_fr
;
; && _en_t != 4
;
	lda     _res_on
	beq     L289E
	lda     __en_t
;
; ) {
;
	cmp     #$04
	beq     L289E
;
; en_spr = en_spr_id [gpit];
;
	ldy     _gpit
	lda     _en_spr_id,y
	sta     _en_spr
;
; } else
;
	jmp     L28A6
;
; switch (_en_t & 63) {
;
L289E:	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L28B1
	cmp     #$02
	beq     L28B1
	cmp     #$03
	beq     L28B1
	cmp     #$04
	beq     L28B1
	cmp     #$06
	jeq     L28D7
	jmp     L28A9
;
; if (!en_status [gpit] || half_life) {
;
L28B1:	ldy     _gpit
	lda     _en_status,y
	beq     L28B3
	lda     _half_life
	beq     L28C3
;
; _en_x += _en_mx;
;
L28B3:	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; _en_y += _en_my;
;
	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; if (_en_x == _en_x1 || _en_x == _en_x2) _en_mx = -_en_mx;
;
	lda     __en_x1
	cmp     __en_x
	beq     L28BE
	lda     __en_x2
	cmp     __en_x
	bne     L28BD
L28BE:	ldx     #$00
	lda     __en_mx
	bpl     L28C2
	dex
L28C2:	jsr     negax
	sta     __en_mx
;
; if (_en_y == _en_y1 || _en_y == _en_y2) _en_my = -_en_my;      
;
L28BD:	lda     __en_y1
	cmp     __en_y
	beq     L28C4
	lda     __en_y2
	cmp     __en_y
	bne     L28C3
L28C4:	ldx     #$00
	lda     __en_my
	bpl     L28C8
	dex
L28C8:	jsr     negax
	sta     __en_my
;
; rda = _en_mx ? (_en_mx < 0) : (_en_my < 0); enems_facing ();
;
L28C3:	lda     __en_mx
	beq     L28CB
	lda     __en_mx
	jmp     L2DAE
L28CB:	lda     __en_my
L2DAE:	asl     a
	lda     #$00
	rol     a
	sta     _rda
	jsr     _enems_facing
;
; en_spr = _en_s + en_fr + _en_facing;
;
	lda     __en_s
	clc
	adc     _en_fr
;
; break;
;
	jmp     L2DB0
;
; rdx = _en_x; rdy = _en_y; rdt = distance ();
;
L28D7:	lda     __en_x
	sta     _rdx
	lda     __en_y
	sta     _rdy
	jsr     _distance
	sta     _rdt
;
; switch (en_alive [gpit]) {
;
	ldy     _gpit
	lda     _en_alive,y
;
; }
;
	beq     L28E4
	cmp     #$01
	beq     L2916
	jmp     L28E2
;
; _enf_vx = ADD_SIGN2 (_en_x1, _en_x, FANTY_V_RETREAT);
;
L28E4:	lda     __en_x
	cmp     __en_x1
	bne     L28EA
	ldx     #$00
	txa
	jmp     L28F6
L28EA:	ldx     #$00
	lda     __en_x1
	sec
	sbc     __en_x
	bcc     L28F3
	beq     L28F3
	lda     #$10
	jmp     L28F6
L28F3:	dex
	lda     #$F0
L28F6:	sta     __enf_vx
	stx     __enf_vx+1
;
; _enf_vy = ADD_SIGN2 (_en_y1, _en_y, FANTY_V_RETREAT);
;
	lda     __en_y
	cmp     __en_y1
	bne     L28FF
	ldx     #$00
	txa
	jmp     L290B
L28FF:	ldx     #$00
	lda     __en_y1
	sec
	sbc     __en_y
	bcc     L2908
	beq     L2908
	lda     #$10
	jmp     L290B
L2908:	dex
	lda     #$F0
L290B:	sta     __enf_vy
	stx     __enf_vy+1
;
; if (rdt < FANTY_DISTANCE) en_alive [gpit] = 1;
;
	lda     _rdt
	cmp     #$60
	jcs     L28E2
	ldy     _gpit
	lda     #$01
;
; break;
;
	jmp     L2D95
;
; if (px < _enf_x) {
;
L2916:	lda     _px
	cmp     __enf_x
	lda     _px+1
	sbc     __enf_x+1
	bvc     L2D8E
	eor     #$80
L2D8E:	bpl     L2917
;
; _enf_vx -= FANTY_A; if (_enf_vx < -FANTY_MAXV) _enf_vx = -FANTY_MAXV;
;
	lda     __enf_vx
	sec
	sbc     #$02
	sta     __enf_vx
	bcs     L291B
	dec     __enf_vx+1
L291B:	lda     __enf_vx
	cmp     #$E0
	lda     __enf_vx+1
	sbc     #$FF
	bvc     L291E
	eor     #$80
L291E:	bpl     L2925
	ldx     #$FF
	lda     #$E0
;
; } else {
;
	jmp     L2DAC
;
; _enf_vx += FANTY_A; if (_enf_vx > FANTY_MAXV) _enf_vx = FANTY_MAXV;
;
L2917:	lda     #$02
	clc
	adc     __enf_vx
	sta     __enf_vx
	bcc     L2924
	inc     __enf_vx+1
L2924:	lda     __enf_vx
	cmp     #$21
	lda     __enf_vx+1
	sbc     #$00
	bvs     L2927
	eor     #$80
L2927:	bpl     L2925
	ldx     #$00
	lda     #$20
L2DAC:	sta     __enf_vx
	stx     __enf_vx+1
;
; if (py < _enf_y) {
;
L2925:	lda     _py
	cmp     __enf_y
	lda     _py+1
	sbc     __enf_y+1
	bvc     L2D8F
	eor     #$80
L2D8F:	bpl     L292A
;
; _enf_vy -= FANTY_A; if (_enf_vy < -FANTY_MAXV) _enf_vy = -FANTY_MAXV;
;
	lda     __enf_vy
	sec
	sbc     #$02
	sta     __enf_vy
	bcs     L292E
	dec     __enf_vy+1
L292E:	lda     __enf_vy
	cmp     #$E0
	lda     __enf_vy+1
	sbc     #$FF
	bvc     L2931
	eor     #$80
L2931:	bpl     L2938
	ldx     #$FF
	lda     #$E0
;
; } else {
;
	jmp     L2DAD
;
; _enf_vy += FANTY_A; if (_enf_vy > FANTY_MAXV) _enf_vy = FANTY_MAXV;
;
L292A:	lda     #$02
	clc
	adc     __enf_vy
	sta     __enf_vy
	bcc     L2937
	inc     __enf_vy+1
L2937:	lda     __enf_vy
	cmp     #$21
	lda     __enf_vy+1
	sbc     #$00
	bvs     L293A
	eor     #$80
L293A:	bpl     L2938
	ldx     #$00
	lda     #$20
L2DAD:	sta     __enf_vy
	stx     __enf_vy+1
;
; if (rdt > FANTY_DISTANCE) {
;
L2938:	lda     _rdt
	cmp     #$61
	bcc     L28E2
;
; _enf_x = _en_x << FIXBITS;
;
	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y = _en_y << FIXBITS;
;
	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; en_alive [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
L2D95:	sta     _en_alive,y
;
; _enf_x += _enf_vx; 
;
L28E2:	lda     __enf_vx
	clc
	adc     __enf_x
	sta     __enf_x
	lda     __enf_vx+1
	adc     __enf_x+1
	sta     __enf_x+1
;
; if (_enf_x < 0) _enf_x = 0;
;
	ldx     __enf_x+1
	cpx     #$80
	bcc     L2949
	lda     #$00
	sta     __enf_x
	sta     __enf_x+1
;
; if (_enf_x > 15360) _enf_x = 15360;
;
L2949:	lda     __enf_x
	cmp     #$01
	lda     __enf_x+1
	sbc     #$3C
	bvs     L294F
	eor     #$80
L294F:	bpl     L294D
	ldx     #$3C
	lda     #$00
	sta     __enf_x
	stx     __enf_x+1
;
; _en_x = _enf_x >> 6;
;
L294D:	lda     __enf_x
	ldx     __enf_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; if (_enf_vx) {
;
	lda     __enf_vx
	ora     __enf_vx+1
	jeq     L2979
;
; cy1 = (_en_y + 4) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$04
	bcc     L2959
	inx
L2959:	jsr     shrax4
	sta     _cy1
;
; cy2 = (_en_y + 11) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0B
	bcc     L295D
	inx
L295D:	jsr     shrax4
	sta     _cy2
;
; if (_enf_vx > 0) {
;
	lda     __enf_vx
	cmp     #$01
	lda     __enf_vx+1
	sbc     #$00
	bvs     L2960
	eor     #$80
L2960:	bpl     L295E
;
; cx1 = cx2 = (_en_x + 11) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L2965
	inx
L2965:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cx2
	sec
	sbc     #$01
	bcs     L296A
	dex
L296A:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L2D98
;
; cx1 = cx2 = (_en_x + 4) >> 4;
;
L295E:	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L2971
	inx
L2971:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cx1
	clc
	adc     #$01
	bcc     L2976
	inx
L2976:	jsr     shlax4
	sec
	sbc     #$04
L2D98:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (FANTY_OBSTACLE (at1) || FANTY_OBSTACLE (at2)) {
;
	lda     _at1
	cmp     #$02
	bcs     L297A
	lda     _at2
	cmp     #$02
	bcc     L2979
;
; _enf_vx = -_enf_vx;
;
L297A:	lda     __enf_vx
	ldx     __enf_vx+1
	jsr     negax
	sta     __enf_vx
	stx     __enf_vx+1
;
; _en_x = rda; 
;
	lda     _rda
	sta     __en_x
;
; _enf_x = rda << FIXBITS;
;
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y += _enf_vy; 
;
L2979:	lda     __enf_vy
	clc
	adc     __enf_y
	sta     __enf_y
	lda     __enf_vy+1
	adc     __enf_y+1
	sta     __enf_y+1
;
; if (_enf_y < 0) _enf_y = 0;
;
	ldx     __enf_y+1
	cpx     #$80
	bcc     L2988
	lda     #$00
	sta     __enf_y
	sta     __enf_y+1
;
; if (_enf_y > 11264) _enf_y = 11264;
;
L2988:	lda     __enf_y
	cmp     #$01
	lda     __enf_y+1
	sbc     #$2C
	bvs     L298E
	eor     #$80
L298E:	bpl     L298C
	ldx     #$2C
	lda     #$00
	sta     __enf_y
	stx     __enf_y+1
;
; _en_y = _enf_y >> 6;
;
L298C:	lda     __enf_y
	ldx     __enf_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
;
; if (_enf_vy) {
;
	lda     __enf_vy
	ora     __enf_vy+1
	jeq     L29B8
;
; cx1 = (_en_x + 4) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L2998
	inx
L2998:	jsr     shrax4
	sta     _cx1
;
; cx2 = (_en_x + 11) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L299C
	inx
L299C:	jsr     shrax4
	sta     _cx2
;
; if (_enf_vy > 0) { 
;
	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$00
	bvs     L299F
	eor     #$80
L299F:	bpl     L299D
;
; cy1 = cy2 = (_en_y + 11) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0B
	bcc     L29A4
	inx
L29A4:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L29A9
	dex
L29A9:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L2D99
;
; cy1 = cy2 = (_en_y + 4) >> 4;
;
L299D:	ldx     #$00
	lda     __en_y
	clc
	adc     #$04
	bcc     L29B0
	inx
L29B0:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L29B5
	inx
L29B5:	jsr     shlax4
	sec
	sbc     #$04
L2D99:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (FANTY_OBSTACLE (at1) || FANTY_OBSTACLE (at2)) {
;
	lda     _at1
	cmp     #$02
	bcs     L29B9
	lda     _at2
	cmp     #$02
	bcc     L29B8
;
; _enf_vy = -_enf_vy;
;
L29B9:	lda     __enf_vy
	ldx     __enf_vy+1
	jsr     negax
	sta     __enf_vy
	stx     __enf_vy+1
;
; _en_y = rda;
;
	lda     _rda
	sta     __en_y
;
; _enf_y = rda << FIXBITS;
;
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; cx1 = (_en_x + 8) >> 4;
;
L29B8:	ldx     #$00
	lda     __en_x
	clc
	adc     #$08
	bcc     L29C8
	inx
L29C8:	jsr     shrax4
	sta     _cx1
;
; cy1 = (_en_y + 8) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$08
	bcc     L29CC
	inx
L29CC:	jsr     shrax4
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (at1 & 1) {
;
	lda     _at1
	and     #$01
	beq     L29CE
;
; en_cttouched [gpit] = 8;
;
	ldy     _gpit
	lda     #$08
	sta     _en_cttouched,y
;
; enems_kill ();
;
	jsr     _enems_kill
;
; en_fr = (_en_x >> 3) & 1;
;
L29CE:	ldx     #$00
	lda     __en_x
	jsr     asrax3
	and     #$01
	sta     _en_fr
;
; rda = (prx < _en_x); enems_facing ();
;
	lda     _prx
	cmp     __en_x
	jsr     boolult
	sta     _rda
	jsr     _enems_facing
;
; en_spr = FANTY_BASE_SPRID + en_fr + _en_facing;
;
	lda     _en_fr
	clc
	adc     #$20
L2DB0:	bcc     L2DA2
	clc
L2DA2:	adc     __en_facing
	sta     _en_spr
;
; en_spr_id [gpit] = en_spr;
;
L28A9:	ldy     _gpit
	lda     _en_spr
	sta     _en_spr_id,y
;
; if (_en_t == 4 && pregotten && !pgotten && !pj) {
;
L28A6:	lda     __en_t
	cmp     #$04
	jne     L29FD
	lda     _pregotten
	jeq     L29FD
	lda     _pgotten
	jne     L29FD
	lda     _pj
	jne     L29FD
;
; if (_en_mx) {
;
	lda     __en_mx
	beq     L29E9
;
; if (pry + 16 >= _en_y && pry + 12 <= _en_y) {
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L29EB
	inx
L29EB:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L29E9
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L29ED
	inx
L29ED:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L29EA
	bne     L29E9
;
; pgotten = 1;
;
L29EA:	lda     #$01
	sta     _pgotten
;
; pgtmx = _en_mx << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_mx
	bpl     L29F3
	dex
L29F3:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmx
	stx     _pgtmx+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L29FA
	dex
L29FA:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; (_en_my < 0 && pry + 17 >= _en_y && pry + 12 <= _en_y) ||
;
L29E9:	lda     __en_my
	asl     a
	bcc     L2D90
	ldx     #$00
	lda     _pry
	clc
	adc     #$11
	bcc     L2A02
	inx
L2A02:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L2D90
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L2A03
	inx
L2A03:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L29FE
	beq     L29FE
;
; (_en_my > 0 && pry + 16 + _en_my >= _en_y && pry + 12 <= _en_y)
;
L2D90:	lda     __en_my
	sec
	sbc     #$01
	bvs     L2A07
	eor     #$80
L2A07:	jpl     L29FD
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L2A09
	inx
L2A09:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __en_my
	bpl     L2A0A
	dex
L2A0A:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	cmp     __en_y
	txa
	sbc     #$00
	bcc     L29FD
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L2A0B
	inx
L2A0B:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L29FE
	bne     L29FD
;
; pgotten = 1;
;
L29FE:	lda     #$01
	sta     _pgotten
;
; pgtmy = _en_my << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_my
	bpl     L2A12
	dex
L2A12:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmy
	stx     _pgtmy+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L2A19
	dex
L2A19:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; en_is_alive == 0 // General condition.
;
L29FD:	lda     _en_is_alive
;
; || _en_t == 4
;
	jeq     L2A50
	lda     __en_t
;
; ) goto skipdo;
;
	cmp     #$04
	jeq     L2A50
;
; pregotten && 
;
	lda     _pregotten
	jeq     L2A22
;
; pry < _en_y && 
;
	ldx     #$00
	lda     _pry
	cmp     __en_y
	jcs     L2A22
;
; pry + 15 + ENEMS_COLLISION_VSTRETCH_FG >= _en_y &&
;
	lda     _pry
	clc
	adc     #$0F
	bcc     L2DA3
	inx
	clc
L2DA3:	adc     #$FE
	pha
	txa
	adc     #$FF
	tax
	pla
	cmp     __en_y
	txa
	sbc     #$00
	jcc     L2A22
;
; pgotten == 0 && ppossee == 0
;
	lda     _pgotten
	jne     L2A22
	lda     _ppossee
;
; && pvy > PLAYER_VY_FALLING_MIN
;
	jne     L2A22
	lda     _pvy
;
; ) {
;
	cmp     #$21
;
; && pvy > PLAYER_VY_FALLING_MIN
;
	lda     _pvy+1
;
; ) {
;
	sbc     #$00
	bvs     L2A26
	eor     #$80
L2A26:	bpl     L2A22
;
; if (res_on || res_disable)
;
	lda     _res_on
	bne     L2A29
	lda     _res_disable
	beq     L2A28
;
; enems_hit ();
;
L2A29:	jsr     _enems_hit
;
; if (_en_my < 0) _en_my = -_en_my;
;
L2A28:	lda     __en_my
	asl     a
	bcc     L2A2C
	ldx     #$00
	lda     __en_my
	bpl     L2A31
	dex
L2A31:	jsr     negax
	sta     __en_my
;
; if (i & PAD_A) {
;
L2A2C:	lda     _i
	and     #$01
	beq     L2A32
;
; jump_start ();
;
	jsr     _jump_start
;
; } else 
;
	jmp     L2A35
;
; pvy = -PLAYER_VY_JUMP_INITIAL << 1;
;
L2A32:	ldx     #$FF
	lda     #$80
	sta     _pvy
	stx     _pvy+1
;
; sfx_play (SFX_STEPON, 1);
;
L2A35:	lda     #$0F
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; if (pry > _en_y - ENEMS_UPPER_COLLISION_BOUND) { pry = _en_y - ENEMS_UPPER_COLLISION_BOUND; py = pry << FIXBITS; }
;
	lda     _pry
	jsr     pusha0
	lda     __en_y
	sec
	sbc     #$0C
	bcs     L2A3D
	ldx     #$FF
L2A3D:	jsr     tosicmp
	bcc     L2A3B
	beq     L2A3B
	lda     __en_y
	sec
	sbc     #$0C
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; touched = 1;
;
L2A3B:	lda     #$01
;
; } else
;
	jmp     L2D9A
;
; touched == 0 &&
;
L2A22:	lda     _touched
	bne     L2A50
;
; pstate == EST_NORMAL &&
;
	lda     _pstate
	bne     L2A50
;
; ) {
;
	jsr     _collide
	tax
	beq     L2A50
;
; res_on == 0 
;
	lda     _res_on
;
; )
;
	bne     L2A50
;
; pkill = 1;
;
	lda     #$01
	sta     _pkill
;
; touched = 1;
;
L2D9A:	sta     _touched
;
; if (en_spr != 0xff) {
;
L2A50:	lda     _en_spr
	cmp     #$FF
	beq     L2A52
;
; _en_x, _en_y + SPRITE_ADJUST, 
;
	jsr     decsp3
	lda     __en_x
	ldy     #$02
	sta     (sp),y
	lda     __en_y
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2DA4
	sec
L2DA4:	sbc     #$10
	bcs     L2DA5
	sec
L2DA5:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [en_spr]
;
	ldx     #$00
	lda     _en_spr
	asl     a
	bcc     L2DA6
	inx
	clc
L2DA6:	adc     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [en_spr]
;
	txa
	adc     _spr_enems+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; enems_update_unsigned_char_arrays ();
;
L2A52:	jsr     _enems_update_unsigned_char_arrays
;
; enf_x [gpit] = _enf_x; enf_vx [gpit] = _enf_vx;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2DA7
	inx
	clc
L2DA7:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	lda     __enf_x
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     __enf_x+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2DA8
	inx
	clc
L2DA8:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	lda     __enf_vx
	dey
	sta     (ptr1),y
	iny
	lda     __enf_vx+1
	sta     (ptr1),y
;
; enf_y [gpit] = _enf_y; enf_vy [gpit] = _enf_vy;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2DA9
	inx
	clc
L2DA9:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	lda     __enf_y
	dey
	sta     (ptr1),y
	iny
	lda     __enf_y+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2DAA
	inx
	clc
L2DAA:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	lda     __enf_vy
	dey
	sta     (ptr1),y
	iny
	lda     __enf_vy+1
	sta     (ptr1),y
;
; } 
;
	jmp     L2840

.endproc

; ---------------------------------------------------------------
; void __near__ draw_game_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_game_frame: near

.segment	"CODE"

;
; unrle_vram (hud_rle, 0x2000);
;
	lda     #<(_hud_rle)
	ldx     #>(_hud_rle)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jmp     _unrle_vram

.endproc

; ---------------------------------------------------------------
; void __near__ hud_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_update: near

.segment	"CODE"

;
; if (okilled != pkilled) {
;
	lda     _pkilled
	cmp     _okilled
	beq     L2A71
;
; okilled = pkilled;
;
	lda     _pkilled
	sta     _okilled
;
; _x = KILLED_X; _y = KILLED_Y; _n = c_max_enems - pkilled; p_t ();
;
	lda     #$1C
	sta     __x
	lda     #$04
	sta     __y
	lda     _c_max_enems
	sec
	sbc     _pkilled
	sta     __n
	jsr     _p_t
;
; if (okeys != pkeys) {
;
L2A71:	lda     _pkeys
	cmp     _okeys
	beq     L2A7C
;
; okeys = pkeys;
;
	lda     _pkeys
	sta     _okeys
;
; _x = KEYS_X; _y = KEYS_Y; _n = pkeys; p_t ();
;
	lda     #$10
	sta     __x
	lda     #$04
	sta     __y
	lda     _pkeys
	sta     __n
	jsr     _p_t
;
; if (olife != plife) {
;
L2A7C:	lda     _plife
	cmp     _olife
	beq     L2A87
;
; olife = plife;
;
	lda     _plife
	sta     _olife
;
; _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
;
	lda     #$04
	sta     __x
	sta     __y
	lda     _plife
	sta     __n
	jmp     _p_t
;
; }
;
L2A87:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bat_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_in: near

.segment	"CODE"

;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; while (pad_poll (0));
;
L2A96:	lda     #$00
	jsr     _pad_poll
	tax
	bne     L2A96
;
; fade_delay = 4;
;
	lda     #$04
	sta     _fade_delay
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ bat_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_out: near

.segment	"CODE"

;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; oam_clear ();
;
	jsr     _oam_clear
;
; ppu_off ();
;
	jmp     _ppu_off

.endproc

; ---------------------------------------------------------------
; void __near__ pres (__near__ const unsigned char*, __near__ __near__ function returning void*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pres: near

.segment	"CODE"

;
; cls ();
;
	jsr     _cls
;
; pal_bg (p);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _pal_bg
;
; (*func) ();
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     callax
;
; bat_in ();
;
	jsr     _bat_in
;
; pad_read ();
;
L2AA9:	jsr     _pad_read
;
; if (pad_this_frame & (PAD_A|PAD_B|PAD_START)) break;
;
	lda     _pad_this_frame
	and     #$0B
	beq     L2AA9
;
; bat_out ();
;
	jsr     _bat_out
;
; bank_bg (0);
;
	lda     #$00
	jsr     _bank_bg
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_title: near

.segment	"CODE"

;
; scroll (0,0);
;
	jsr     push0
	jsr     _scroll
;
; pal_spr (palss0);
;
	lda     #<(_palss0)
	ldx     #>(_palss0)
	jsr     _pal_spr
;
; pal_bg (palts1);
;
	lda     #<(_palts1)
	ldx     #>(_palts1)
	jsr     _pal_bg
;
; unrle_vram (title_rle, 0x2000);
;
	lda     #<(_title_rle)
	ldx     #>(_title_rle)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _unrle_vram
;
; _x = 5; _y = 18; pr_str ("SELECT AND PUSH START!");
;
	lda     #$05
	sta     __x
	lda     #$12
	sta     __y
	lda     #<(L0001)
	ldx     #>(L0001)
	jsr     pushax
	jsr     _pr_str
;
; _x = 12; _y = 22; pr_str ("LEVEL A[R]");
;
	lda     #$0C
	sta     __x
	lda     #$16
	sta     __y
	lda     #<(L0001+23)
	ldx     #>(L0001+23)
	jsr     pushax
	jsr     _pr_str
;
; _y = 23; pr_str ("LEVEL B[R]");
;
	lda     #$17
	sta     __y
	lda     #<(L0001+34)
	ldx     #>(L0001+34)
	jsr     pushax
	jsr     _pr_str
;
; _y = 24; pr_str ("LEVEL A");
;
	lda     #$18
	sta     __y
	lda     #<(L0001+45)
	ldx     #>(L0001+45)
	jsr     pushax
	jsr     _pr_str
;
; _y = 25; pr_str ("LEVEL B");
;
	lda     #$19
	sta     __y
	lda     #<(L0001+53)
	ldx     #>(L0001+53)
	jsr     pushax
	jsr     _pr_str
;
; bat_in ();
;
	jsr     _bat_in
;
; oam_meta_spr (84, 170 + (game_mode << 3), 0, sspl_00_a);
;
L2AD7:	jsr     decsp3
	lda     #$54
	ldy     #$02
	sta     (sp),y
	ldx     #$00
	lda     _game_mode
	jsr     aslax3
	clc
	adc     #$AA
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #<(_sspl_00_a)
	ldx     #>(_sspl_00_a)
	jsr     _oam_meta_spr
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; pad_read ();
;
	jsr     _pad_read
;
; rda = game_mode;
;
	lda     _game_mode
	sta     _rda
;
; if (pad_this_frame & (PAD_SELECT|PAD_DOWN)) {
;
	lda     _pad_this_frame
	and     #$24
	beq     L2AE9
;
; ++ game_mode; if (game_mode == 4) game_mode = 0;
;
	inc     _game_mode
	lda     _game_mode
	cmp     #$04
	bne     L2AE9
	lda     #$00
	sta     _game_mode
;
; if (pad_this_frame & PAD_UP) {
;
L2AE9:	lda     _pad_this_frame
	and     #$10
	beq     L2AF2
;
; if (game_mode) -- game_mode; else game_mode = 3;
;
	lda     _game_mode
	beq     L2AEF
	dec     _game_mode
	jmp     L2AF2
L2AEF:	lda     #$03
	sta     _game_mode
;
; if (game_mode != rda) sfx_play (SFX_USE, 0);
;
L2AF2:	lda     _rda
	cmp     _game_mode
	beq     L2AF5
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (pad_this_frame & PAD_START) break;
;
L2AF5:	lda     _pad_this_frame
	and     #$08
	beq     L2AD7
;
; sfx_play (SFX_START, 0); delay (20);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
	lda     #$14
	jsr     _delay
;
; level = game_mode & 1;
;
	lda     _game_mode
	and     #$01
	sta     _level
;
; mode_no_resonators = (game_mode > 1);
;
	lda     _game_mode
	cmp     #$02
	lda     #$00
	rol     a
	sta     _mode_no_resonators
;
; plife = mode_no_resonators ? 5 : 3;
;
	lda     _mode_no_resonators
	beq     L2B08
	lda     #$05
	jmp     L2B0A
L2B08:	lda     #$03
L2B0A:	sta     _plife
;
; bat_out ();
;
	jmp     _bat_out

.endproc

; ---------------------------------------------------------------
; void __near__ scr_game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scr_game_over: near

.segment	"CODE"

;
; _x = 11; _y = 15; pr_str ("GAME OVER!");
;
	lda     #$0B
	sta     __x
	lda     #$0F
	sta     __y
	lda     #<(L0001+61)
	ldx     #>(L0001+61)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ scr_the_end (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scr_the_end: near

.segment	"CODE"

;
; oam_meta_spr (100, 64, 0, ssending_00);
;
	jsr     decsp3
	lda     #$64
	ldy     #$02
	sta     (sp),y
	lda     #$40
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #<(_ssending_00)
	ldx     #>(_ssending_00)
	jsr     _oam_meta_spr
;
; _x = 12; _y = 22; pr_str ("THE  END");
;
	lda     #$0C
	sta     __x
	lda     #$16
	sta     __y
	lda     #<(L0001+72)
	ldx     #>(L0001+72)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ game_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_init: near

.segment	"CODE"

;
; win_level = game_over = 0;
;
	lda     #$00
	sta     _game_over
	sta     _win_level
;
; c_pal_bg =   l_pal_bg [level];
;
	tax
	lda     _level
	asl     a
	bcc     L2DC0
	inx
	clc
L2DC0:	adc     #<(_l_pal_bg)
	sta     ptr1
	txa
	adc     #>(_l_pal_bg)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_pal_bg+1
	dey
	lda     (ptr1),y
	sta     _c_pal_bg
;
; c_pal_fg =   l_pal_fg [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC1
	inx
	clc
L2DC1:	adc     #<(_l_pal_fg)
	sta     ptr1
	txa
	adc     #>(_l_pal_fg)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_pal_fg+1
	dey
	lda     (ptr1),y
	sta     _c_pal_fg
;
; c_ts_tmaps =  l_ts_tmaps [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC2
	inx
	clc
L2DC2:	adc     #<(_l_ts_tmaps)
	sta     ptr1
	txa
	adc     #>(_l_ts_tmaps)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_tmaps+1
	dey
	lda     (ptr1),y
	sta     _c_ts_tmaps
;
; c_ts_pals =  l_ts_pals [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC3
	inx
	clc
L2DC3:	adc     #<(_l_ts_pals)
	sta     ptr1
	txa
	adc     #>(_l_ts_pals)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_pals+1
	dey
	lda     (ptr1),y
	sta     _c_ts_pals
;
; c_behs =   l_behs [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC4
	inx
	clc
L2DC4:	adc     #<(_l_behs)
	sta     ptr1
	txa
	adc     #>(_l_behs)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_behs+1
	dey
	lda     (ptr1),y
	sta     _c_behs
;
; spr_enems =  l_spr_enems [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC5
	inx
	clc
L2DC5:	adc     #<(_l_spr_enems)
	sta     ptr1
	txa
	adc     #>(_l_spr_enems)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _spr_enems+1
	dey
	lda     (ptr1),y
	sta     _spr_enems
;
; c_map =   l_map [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC6
	inx
	clc
L2DC6:	adc     #<(_l_map)
	sta     ptr1
	txa
	adc     #>(_l_map)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_map+1
	dey
	lda     (ptr1),y
	sta     _c_map
;
; c_decos =  l_decos [level];
;
	ldy     _level
	lda     _l_decos,y
	sta     _c_decos
;
; c_locks =  l_locks [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC7
	inx
	clc
L2DC7:	adc     #<(_l_locks)
	sta     ptr1
	txa
	adc     #>(_l_locks)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_locks+1
	dey
	lda     (ptr1),y
	sta     _c_locks
;
; l_n_bolts [level];
;
	ldy     _level
	lda     _l_n_bolts,y
	sta     _c_max_bolts
;
; c_enems =   l_enems [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC8
	inx
	clc
L2DC8:	adc     #<(_l_enems)
	sta     ptr1
	txa
	adc     #>(_l_enems)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_enems+1
	dey
	lda     (ptr1),y
	sta     _c_enems
;
; c_hotspots =  l_hotspots [level]; 
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2DC9
	inx
	clc
L2DC9:	adc     #<(_l_hotspots)
	sta     ptr1
	txa
	adc     #>(_l_hotspots)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_hotspots+1
	dey
	lda     (ptr1),y
	sta     _c_hotspots
;
; c_max_enems =  l_player_max_enems [level];
;
	ldy     _level
	lda     _l_player_max_enems,y
	sta     _c_max_enems
;
; c_map_w =   l_map_w [level];
;
	ldy     _level
	lda     _l_map_w,y
	sta     _c_map_w
;
; pal_bg (c_pal_bg);
;
	lda     _c_pal_bg
	ldx     _c_pal_bg+1
	jsr     _pal_bg
;
; pal_spr (c_pal_fg);
;
	lda     _c_pal_fg
	ldx     _c_pal_fg+1
	jsr     _pal_spr
;
; cls ();
;
	jsr     _cls
;
; draw_game_frame ();
;
	jsr     _draw_game_frame
;
; n_pant = SCR_INI;
;
	ldy     _level
	lda     _l_scr_ini,y
	sta     _n_pant
;
; hotspots_load ();
;
	jsr     _hotspots_load
;
; memfill (lkact, 1, c_max_bolts);
;
	jsr     decsp3
	lda     #<(_lkact)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_lkact)
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	lda     _c_max_bolts
	ldx     #$00
	jsr     _memfill
;
; px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_x,y
	jsr     aslax4
	clc
	adc     #$04
	bcc     L2B69
	inx
L2B69:	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; py = (PLAYER_INI_Y << 4) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_y,y
	jsr     aslax4
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; player_init ();
;
	jsr     _player_init
;
; enems_persistent_load ();
;
	jsr     _enems_persistent_load
;
; enems_persistent_deaths_load ();
;
	jsr     _enems_persistent_deaths_load
;
; pkeys = 0;
;
	lda     #$00
	sta     _pkeys
;
; res_on = 0;
;
	sta     _res_on
;
; res_disable = 0;
;
	sta     _res_disable
;
; no_ct = 0;
;
	sta     _no_ct
;
; half_life = 0;
;
	sta     _half_life
;
; frame_counter = 0;
;
	sta     _frame_counter
;
; olife = oammo = oobjs = okeys = 0xff;
;
	lda     #$FF
	sta     _okeys
	sta     _oobjs
	sta     _oammo
	sta     _olife
;
; okilled = 0xff;
;
	sta     _okilled
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ prepare_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_scr: near

.segment	"CODE"

;
; if (!ft) fade_out (); else ft = 0;
;
	lda     _ft
	bne     L2B87
	jsr     _fade_out
	jmp     L2B8A
L2B87:	lda     #$00
	sta     _ft
;
; ppu_off ();
;
L2B8A:	jsr     _ppu_off
;
; enems_persistent_update ();
;
	jsr     _enems_persistent_update
;
; enems_load ();
;
	jsr     _enems_load
;
; hotspots_create (); 
;
	jsr     _hotspots_create
;
; chac_chacs_top = 0;
;
	lda     #$00
	sta     _chac_chacs_top
;
; max_chac_chacs = 0;
;
	sta     _max_chac_chacs
;
; draw_scr ();
;
	jsr     _draw_scr
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; if (mode_no_resonators) {
;
	lda     _mode_no_resonators
	beq     L2B9B
;
; res_disable = 1;
;
	lda     #$01
	sta     _res_disable
;
; if (hrt == HOTSPOT_TYPE_RESONATOR) hrt = 0;
;
	lda     _hrt
	cmp     #$04
	bne     L2B9B
	lda     #$00
	sta     _hrt
;
; gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
;
L2B9B:	lda     #$03
	sta     _gpit
L2BA1:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L2BA2
	lda     #<(_en_spr_id)
	ldx     #>(_en_spr_id)
	clc
	adc     _gpit
	bcc     L2BA6
	inx
L2BA6:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_s,y
	ldy     #$00
	sta     (ptr1),y
	jmp     L2BA1
;
; oam_index = 4;
;
L2BA2:	lda     #$04
	sta     _oam_index
;
; prx = px >> FIXBITS; pry = py >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_move ();
;
	jsr     _player_move
;
; player_render ();
;
	jsr     _player_render
;
; enems_move ();
;
	jsr     _enems_move
;
; if (hrt) hotspots_paint ();
;
	lda     _hrt
	beq     L2BB3
	jsr     _hotspots_paint
;
; oam_hide_rest (oam_index);
;
L2BB3:	lda     _oam_index
	jsr     _oam_hide_rest
;
; hud_update ();
;
	jsr     _hud_update
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; music_play (l_music [level]);
;
	ldy     _level
	lda     _l_music,y
	jsr     _music_play
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; set_vram_update (UPDATE_LIST_SIZE, update_list);
;
	lda     #$20
	jsr     pusha
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; on_pant = 99; ft = 1; fade_delay = 1;
;
	lda     #$63
	sta     _on_pant
	lda     #$01
	sta     _ft
	sta     _fade_delay
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; oam_index = 0; ticker = 50;
;
	lda     #$00
	sta     _oam_index
	lda     #$32
	sta     _ticker
;
; if (on_pant != n_pant) {
;
L2BD4:	lda     _n_pant
	cmp     _on_pant
	beq     L2BD7
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; hud_update ();
;
L2BD7:	jsr     _hud_update
;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; if (shaker_ct) {
;
	lda     _shaker_ct
	beq     L2BE9
;
; -- shaker_ct;
;
	dec     _shaker_ct
;
; scroll (254 + (rand8 () & 3), SCROLL_Y - 2 + (rand8 () & 3));
;
	jsr     _rand8
	ldx     #$00
	and     #$03
	clc
	adc     #$FE
	bcc     L2BE5
	inx
L2BE5:	jsr     pushax
	jsr     _rand8
	ldx     #$00
	and     #$03
	clc
	adc     #$0A
	bcc     L2BE8
	inx
L2BE8:	jsr     _scroll
;
; if (shaker_ct == 0) scroll (0, SCROLL_Y);
;
	lda     _shaker_ct
	bne     L2BE9
	jsr     push0
	lda     #$0C
	jsr     _scroll
;
; ppu_waitnmi ();
;
L2BE9:	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; pad_read ();
;
	jsr     _pad_read
;
; a_button = (pad_this_frame & PAD_A);
;
	lda     _pad_this_frame
	and     #$01
	sta     _a_button
;
; b_button = (pad_this_frame & PAD_B);
;
	lda     _pad_this_frame
	and     #$02
	sta     _b_button
;
; if (paused == 0) {
;
	lda     _paused
	jne     L2BF9
;
; if (ticker) -- ticker; else ticker = 50;
;
	lda     _ticker
	beq     L2BFB
	dec     _ticker
	jmp     L2BFE
L2BFB:	lda     #$32
	sta     _ticker
;
; half_life ^= 1;
;
L2BFE:	lda     _half_life
	eor     #$01
	sta     _half_life
;
; ++ frame_counter;
;
	inc     _frame_counter
;
; if (prx == 4 && 
;
	lda     _prx
	cmp     #$04
	bne     L2C04
;
; (cfx + pvx) < 0
;
	ldx     #$00
	lda     _cfx
	bpl     L2C08
	dex
L2C08:	clc
	adc     _pvx
	txa
	adc     _pvx+1
	tax
;
; ) {
;
	cpx     #$80
	bcc     L2C04
;
; -- n_pant;
;
	dec     _n_pant
;
; px = 244 << FIXBITS;
;
	ldx     #$3D
	lda     #$00
	sta     _px
	stx     _px+1
;
; } else if (prx == 244 && 
;
	jmp     L2C27
L2C04:	lda     _prx
	cmp     #$F4
	bne     L2C0E
;
; (cfx + pvx) > 0
;
	ldx     #$00
	lda     _cfx
	bpl     L2C12
	dex
L2C12:	clc
	adc     _pvx
	pha
	txa
	adc     _pvx+1
	tax
	pla
;
; ) {
;
	cmp     #$01
	txa
	sbc     #$00
	bvs     L2C13
	eor     #$80
L2C13:	bpl     L2C0E
;
; ++ n_pant;
;
	inc     _n_pant
;
; px = 4 << FIXBITS;
;
	ldx     #$01
	lda     #$00
	sta     _px
	stx     _px+1
;
; } else if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
;
	jmp     L2C27
L2C0E:	lda     _pry
	bne     L2C19
	ldx     _pvy+1
	cpx     #$80
	bcc     L2C19
	lda     _n_pant
	cmp     _c_map_w
	bcc     L2C19
;
; n_pant -= c_map_w;
;
	lda     _c_map_w
	eor     #$FF
	sec
	adc     _n_pant
	sta     _n_pant
;
; py = 192 << FIXBITS;
;
	ldx     #$30
	lda     #$00
	sta     _py
	stx     _py+1
;
; if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
	lda     _pvy
	cmp     #$61
	lda     _pvy+1
	sbc     #$FF
	bvs     L2C23
	eor     #$80
L2C23:	bpl     L2C27
	ldx     #$FF
	lda     #$60
	sta     _pvy
	stx     _pvy+1
;
; } else if (pry >= 192 && pvy > 0) {
;
	jmp     L2C27
L2C19:	lda     _pry
	cmp     #$C0
	bcc     L2C27
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L2C2A
	eor     #$80
L2C2A:	bpl     L2C27
;
; n_pant += c_map_w;
;
	lda     _c_map_w
	clc
	adc     _n_pant
	sta     _n_pant
;
; py = 0;
;
	lda     #$00
	sta     _py
	sta     _py+1
;
; if (pkill) player_kill ();
;
L2C27:	lda     _pkill
	beq     L2C30
	jsr     _player_kill
;
; if (game_over) break;   
;
L2C30:	lda     _game_over
	jne     L2BD5
;
; if (on_pant != n_pant) {
;
	lda     _n_pant
	cmp     _on_pant
	beq     L2C35
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; if (c_max_enems == pkilled) {
;
L2C35:	lda     _pkilled
	cmp     _c_max_enems
	bne     L2C3C
;
; en_cttouched [0] == 0 &&
;
	lda     _en_cttouched
	bne     L2C3C
;
; en_cttouched [1] == 0 &&
;
	lda     _en_cttouched+1
	bne     L2C3C
;
; en_cttouched [2] == 0
;
	lda     _en_cttouched+2
;
; ) win_level = 1;
;
	bne     L2C3C
	lda     #$01
	sta     _win_level
;
; if (win_level)
;
L2C3C:	lda     _win_level
	beq     L2C45
;
; music_stop ();
;
	jsr     _music_stop
;
; delay (50);
;
	lda     #$32
	jsr     _delay
;
; break;
;
	jmp     L2BD5
;
; if (pstate) {
;
L2C45:	lda     _pstate
	beq     L2C4D
;
; -- pctstate;
;
	dec     _pctstate
;
; if (!pctstate) pstate = EST_NORMAL;
;
	lda     _pctstate
	bne     L2C4D
	sta     _pstate
;
; if (res_on) {
;
L2C4D:	lda     _res_on
	beq     L2C70
;
; if (hrt == HOTSPOT_TYPE_RESONATOR) {
;
	lda     _hrt
	cmp     #$04
	bne     L2C53
;
; hrx + RESONATOR_COUNTER_OFFS_X, 
;
	jsr     decsp4
	lda     _hrx
	clc
	adc     #$04
	ldy     #$03
	sta     (sp),y
;
; hry + RESONATOR_COUNTER_OFFS_Y + SPRITE_ADJUST, 
;
	lda     _hry
	clc
	adc     #$07
	bcc     L2DCF
	clc
L2DCF:	adc     #$30
	sec
	sbc     #$0C
	bcs     L2DD0
	sec
L2DD0:	sbc     #$10
	bcs     L2DD1
	sec
L2DD1:	sbc     #$01
	dey
	sta     (sp),y
;
; RESONATOR_BASE_PATTERN + res_ct, 
;
	lda     _res_ct
	dey
	sta     (sp),y
;
; RESONATOR_PALETTE, 
;
	lda     #$03
	dey
	sta     (sp),y
;
; oam_index);
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (res_subct) -- res_subct; else {
;
L2C53:	lda     _res_subct
	beq     L2C62
	dec     _res_subct
	jmp     L2C70
;
; res_subct = 50;
;
L2C62:	lda     #$32
	sta     _res_subct
;
; if (res_ct) { 
;
	lda     _res_ct
	beq     L2C68
;
; -- res_ct; 
;
	dec     _res_ct
;
; if (res_ct <= 5) sfx_play (SFX_COUNT, 2);
;
	lda     _res_ct
	cmp     #$06
	bcs     L2C70
	lda     #$0C
;
; } else {
;
	jmp     L2DD5
;
; res_on = 0;
;
L2C68:	sta     _res_on
;
; sfx_play (SFX_SPRING ,2); 
;
	lda     #$0B
L2DD5:	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; if (hrt) {
;
L2C70:	lda     _hrt
	jeq     L2CA4
;
; if (collide_in (prx + 4, pry + 8, hrx, hry)) {
;
	jsr     decsp8
	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L2C7B
	inx
L2C7B:	ldy     #$06
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L2C7D
	inx
L2C7D:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _hrx
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _hry
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _collide_in
	tax
	beq     L2CA4
;
; if (hrt == HOTSPOT_TYPE_RESONATOR) {
;
	lda     _hrt
	cmp     #$04
	bne     L2C80
;
; if (pvy > 0 && pry < hry) {
;
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L2C84
	eor     #$80
L2C84:	bpl     L2CA4
	lda     _pry
	cmp     _hry
	bcs     L2CA4
;
; if (res_on == 0) {
;
	lda     _res_on
	bne     L2CA4
;
; res_on = 1; res_ct = 9; res_subct = 50;
;
	lda     #$01
	sta     _res_on
	lda     #$09
	sta     _res_ct
	lda     #$32
	sta     _res_subct
;
; jump_start ();
;
	jsr     _jump_start
;
; sfx_play (SFX_BREAKH, 1);
;
	lda     #$0D
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; } else
;
	jmp     L2CA4
;
; rda = 0;
;
L2C80:	lda     #$00
	sta     _rda
;
; switch (hrt) {
;
	lda     _hrt
;
; }
;
	cmp     #$02
	beq     L2C9A
	cmp     #$03
	beq     L2C9F
	jmp     L2C98
;
; ++ pkeys;
;
L2C9A:	inc     _pkeys
;
; break;
;
	jmp     L2DCE
;
; plife += PLAYER_REFILL;
;
L2C9F:	inc     _plife
;
; rda = SFX_USE;
;
L2DCE:	sta     _rda
;
; if (rda) {
;
L2C98:	lda     _rda
	beq     L2CA4
;
; sfx_play (rda, 1);
;
	lda     _rda
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; hrt = 0;
;
	lda     #$00
	sta     _hrt
;
; hact [n_pant] = 0;
;
	ldy     _n_pant
	sta     _hact,y
;
; player_move ();
;
L2CA4:	jsr     _player_move
;
; player_render ();
;
	jsr     _player_render
;
; enems_move ();
;
	jsr     _enems_move
;
; if (hrt) hotspots_paint ();
;
	lda     _hrt
	beq     L2CB2
	jsr     _hotspots_paint
;
; if (no_ct) {
;
L2CB2:	lda     _no_ct
	beq     L2CB5
;
; -- no_ct;
;
	dec     _no_ct
;
; prx + NO_OFFS_X, pry + NO_OFFS_Y + SPRITE_ADJUST,
;
	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	clc
	adc     #$EC
	pha
	lda     #$00
	adc     #$FF
	pla
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2DD2
	sec
L2DD2:	sbc     #$10
	bcs     L2DD3
	sec
L2DD3:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; );
;
	lda     #<(_ssit_04)
	ldx     #>(_ssit_04)
	jsr     _oam_meta_spr
	sta     _oam_index
;
; chac_chacs_do ();
;
L2CB5:	jsr     _chac_chacs_do
;
; if ((i & PAD_B) && (i & PAD_SELECT) && (i & PAD_UP)) break;
;
L2BF9:	lda     _i
	and     #$02
	beq     L2CC3
	lda     _i
	and     #$04
	beq     L2CC3
	lda     _i
	and     #$10
	bne     L2BD5
;
; if (pad_this_frame & PAD_START) {
;
L2CC3:	lda     _pad_this_frame
	and     #$08
	jeq     L2BD4
;
; paused ^= 1;
;
	lda     _paused
	eor     #$01
	sta     _paused
;
; pal_bright (4 - paused);
;
	lda     #$04
	sec
	sbc     _paused
	jsr     _pal_bright
;
; music_pause (paused);
;
	lda     _paused
	jsr     _music_pause
;
; }
;
	jmp     L2BD4
;
; fade_delay = 4;
;
L2BD5:	lda     #$04
	sta     _fade_delay
;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; set_vram_update (0, 0);
;
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
;
; ppu_off ();
;
	jsr     _ppu_off
;
; oam_clear ();
;
	jmp     _oam_clear

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; bank_spr (1);
;
	lda     #$01
	jsr     _bank_spr
;
; bank_bg (0);
;
	lda     #$00
	jsr     _bank_bg
;
; ppu_off ();
;
	jsr     _ppu_off
;
; first_game = 1;
;
	lda     #$01
	sta     _first_game
;
; game_mode = 0;
;
	lda     #$00
	sta     _game_mode
;
; level = 2; mode_no_resonators = 0;
;
L2CE5:	lda     #$02
	sta     _level
	lda     #$00
	sta     _mode_no_resonators
;
; plife = PLAYER_LIFE;
;
	lda     #$05
	sta     _plife
;
; scroll (0, SCROLL_Y);
;
	jsr     push0
	lda     #$0C
	jsr     _scroll
;
; game_init (); 
;
	jsr     _game_init
;
; game_loop ();
;
	jsr     _game_loop
;
; if (game_over) {
;
	lda     _game_over
	beq     L2CF6
;
; pres (palts0, scr_game_over);
;
	jsr     decsp4
	lda     #<(_palts0)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_palts0)
	sta     (sp),y
	lda     #<(_scr_game_over)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_scr_game_over)
;
; break;
;
	jmp     L2DD7
;
; pres (palts0, scr_the_end);
;
L2CF6:	jsr     decsp4
	lda     #<(_palts0)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_palts0)
	sta     (sp),y
	lda     #<(_scr_the_end)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_scr_the_end)
L2DD7:	sta     (sp),y
	jsr     _pres
;
; first_game = 0;
;
	lda     #$00
	sta     _first_game
;
; }
;
	jmp     L2CE5

.endproc

