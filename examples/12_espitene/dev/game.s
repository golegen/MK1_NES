;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_mask
	.import		_ppu_system
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_ppu_waitnmi
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_split
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_read
	.import		_vram_write
	.import		_unrle_vram
	.import		_memfill
	.import		_delay
	.import		_bankswitch
	.importzp	_PALUPDATE
	.export		_monococo_state_times
	.export		_coco_dx
	.export		_coco_dy
	.export		_endx
	.export		_endy
	.export		_bits
	.export		_jitter
	.export		_palcuts0
	.export		_palcuts1
	.export		_palcuts2
	.export		_palss0
	.export		_palss0a
	.export		_palss1
	.export		_palss2
	.export		_palts0
	.export		_palts1
	.export		_palts2
	.export		_palts2a
	.export		_palts3
	.export		_palts3a
	.export		_palts4
	.export		_palts4a
	.export		_palts5
	.export		_palts5a
	.export		_palts5b
	.export		_palts5c
	.export		_paltstitle
	.export		_behs0
	.export		_behs1
	.export		_behs2
	.export		_behs3
	.export		_behs4
	.export		_behs4b
	.export		_behs5
	.export		_behs5b
	.export		_map_01_scr_offsets
	.export		_map_10_scr_offsets
	.export		_map_11_scr_offsets
	.export		_map_20_scr_offsets
	.export		_map_21_scr_offsets
	.export		_map_30_scr_offsets
	.export		_map_31_scr_offsets
	.export		_map_02_scr_offsets
	.export		_map_12_scr_offsets
	.export		_map_22_scr_offsets
	.export		_map_00_scr_offsets
	.export		_map_32_scr_offsets
	.export		_map_40_scr_offsets
	.export		_map_41_scr_offsets
	.export		_map_42_scr_offsets
	.export		_map_50_scr_offsets
	.export		_map_51_scr_offsets
	.export		_map_52_scr_offsets
	.export		_sspl_00_a
	.export		_sspl_00_b
	.export		_sspl_01_a
	.export		_sspl_01_b
	.export		_sspl_02_a
	.export		_sspl_02_b
	.export		_sspl_03_a
	.export		_sspl_03_b
	.export		_sspl_04
	.export		_sspl_05
	.export		_sspl_06
	.export		_ssen_00_a
	.export		_ssen_00_b
	.export		_ssen_01_a
	.export		_ssen_01_b
	.export		_ssen_02_a
	.export		_ssen_02_b
	.export		_ssen_03_a
	.export		_ssen_03_b
	.export		_ssen_04_a
	.export		_ssen_04_b
	.export		_ssen_05_a
	.export		_ssen_05_b
	.export		_ssen_06_a
	.export		_ssen_06_b
	.export		_ssen_07_a
	.export		_ssen_07_b
	.export		_ssen_08_a
	.export		_ssen_08_b
	.export		_ssen_09_a
	.export		_ssen_09_b
	.export		_ssen_0A_a
	.export		_ssen_0A_b
	.export		_ssen_0B_a
	.export		_ssen_0B_b
	.export		_ssfant_00_a
	.export		_ssfant_00_b
	.export		_ssfant_01_a
	.export		_ssfant_01_b
	.export		_ssmc_00_a
	.export		_ssmc_00_b
	.export		_ssmc_01_a
	.export		_ssmc_01_b
	.export		_sstrunk_00
	.export		_sstrunk_01
	.export		_sstrunk_02
	.export		_sspez_00
	.export		_sspez_01
	.export		_ssbomb_00
	.export		_ssbomb_01
	.export		_sscan_00
	.export		_sscan_01
	.export		_sscan_02
	.export		_sscan_03
	.export		_ssboss_00_a
	.export		_ssboss_00_b
	.export		_ssboss_01_a
	.export		_ssboss_01_b
	.export		_ssplat_00
	.export		_ssplat_01
	.export		_ssplat_02
	.export		_ssplat_03
	.export		_ssplat_04
	.export		_ssexpl_00
	.export		_ssoccl_00
	.export		_ssit_00
	.export		_ssit_01
	.export		_ssit_02
	.export		_ssit_03
	.export		_ssit_04
	.export		_ssit_05
	.export		_ssit_06
	.export		_ssit_07
	.export		_ssit_08
	.export		_ssit_09
	.export		_ssit_0A
	.export		_ssbrk_00
	.export		_ssray_00
	.export		_ssray_01
	.export		_ssray_02
	.export		_sssom_00
	.export		_sssom_01
	.export		_sssom_02
	.export		_sssom_03
	.export		_sssom_04
	.export		_ssmon_00
	.export		_ssmon_01
	.export		_ts0_pals
	.export		_ts0_tmaps
	.export		_ts1_pals
	.export		_ts1_tmaps
	.export		_ts2_pals
	.export		_ts2_tmaps
	.export		_ts3_pals
	.export		_ts3_tmaps
	.export		_ts4_pals
	.export		_ts4_tmaps
	.export		_ts4b_pals
	.export		_ts4b_tmaps
	.export		_ts5_pals
	.export		_ts5_tmaps
	.export		_ts5b_pals
	.export		_ts5b_tmaps
	.export		_spr_player
	.export		_spr_enems1
	.export		_spr_enems2
	.export		_spr_enems3
	.export		_spr_enems4
	.export		_spr_enems5
	.export		_spr_hs
	.export		_cutscene_0
	.export		_cutscene_1
	.export		_cutscene_2
	.export		_cutscene_3
	.export		_cutscene_4
	.export		_cutscenes
	.export		_beh0
	.export		_beh1
	.export		_beh2
	.export		_beh3
	.export		_beh4
	.export		_en_behptrs
	.export		_l_scr_ini
	.export		_l_ini_x
	.export		_l_ini_y
	.export		_l_map_w
	.export		_l_map_h
	.export		_l_player_max_objects
	.export		_l_player_max_enems
	.export		_l_pal_bg
	.export		_l_pal_fg
	.export		_l_ts_tmaps
	.export		_l_ts_pals
	.export		_l_behs
	.export		_l_spr_enems
	.export		_l_map_chr_rom_bank
	.export		_l_map
	.export		_l_enems_chr_rombank
	.export		_l_enems
	.export		_l_hotspots
	.export		_l_chr_rom_bank
	.export		_l_music
	.export		_cuts0_rle
	.export		_cuts1_rle
	.export		_cuts2_rle
	.export		_title_rle
	.export		__x
	.export		__y
	.export		__n
	.export		__t
	.export		__z
	.export		_pad0
	.export		_pad_this_frame
	.export		_gpit
	.export		_gpjt
	.export		_gpitu
	.export		_gpaux
	.export		_rds16
	.export		_gp_gen
	.export		_gp_tmap
	.export		_gp_tma2
	.export		_gp_ram
	.export		_gp_ram_aux
	.export		_gp_addr
	.export		_rdx
	.export		_rdy
	.export		_rdt
	.export		_rdit
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdd
	.export		_rdm
	.export		_rds
	.export		_rdct
	.export		_ticker
	.export		_at1
	.export		_at2
	.export		_cx1
	.export		_cx2
	.export		_cy1
	.export		_cy2
	.export		_caux
	.export		_oam_index
	.export		_en_initial
	.export		_en_offs
	.export		_en_fr
	.export		_en_collx
	.export		_en_colly
	.export		_en_spr
	.export		_touched
	.export		_en_is_alive
	.export		_pregotten
	.export		_en_cttouched
	.export		_en_flags
	.export		_en_life
	.export		_en_status
	.export		_en_ct
	.export		_en_rawv
	.export		_en_behptr
	.export		__en_t
	.export		__en_s
	.export		__en_x
	.export		__en_y
	.export		__en_x1
	.export		__en_y1
	.export		__en_x2
	.export		__en_y2
	.export		__en_mx
	.export		__en_my
	.export		__en_ct
	.export		__en_facing
	.export		__en_state
	.export		__enf_x
	.export		__enf_y
	.export		__enf_vx
	.export		__enf_vy
	.export		_en_sg_1
	.export		_en_sg_2
	.export		_vertical_engine_type
	.export		_px
	.export		_py
	.export		_pvx
	.export		_pvy
	.export		_prx
	.export		_pry
	.export		_pcx
	.export		_pcy
	.export		_pfacing
	.export		_pfr
	.export		_pctfr
	.export		_psprid
	.export		_a_button
	.export		_b_button
	.export		_pj
	.export		_pctj
	.export		_pgotten
	.export		_ppossee
	.export		_oppossee
	.export		_pflickering
	.export		_pbouncing
	.export		_phit
	.export		_pgtmx
	.export		_pgtmy
	.export		_ptrampoline
	.export		_pspin
	.export		_hitv
	.export		_hith
	.export		_prx_old
	.export		_pry_old
	.export		_pkill
	.export		_pice
	.export		_pnotsafe
	.export		_pcontinues
	.export		_plife
	.export		_pobjs
	.export		_pammo
	.export		_pkilled
	.export		_pfiring
	.export		_n_pant_safe
	.export		_px_safe
	.export		_py_safe
	.export		_coco_it
	.export		_hrx
	.export		_hry
	.export		_hrt
	.export		_do_process_breakable
	.export		_ft
	.export		_c_map_w
	.export		_c_map_h
	.export		_c_map_size
	.export		_c_ts_pals
	.export		_c_ts_tmaps
	.export		_c_behs
	.export		_spr_enems
	.export		_c_pal_bg
	.export		_c_pal_fg
	.export		_c_map
	.export		_c_map_chr_rom_bank
	.export		_c_locks
	.export		_c_enems
	.export		_c_hotspots
	.export		_c_max_bolts
	.export		_ntsc
	.export		_ntsc_frame
	.export		_update_index
	.export		_update_list
	.export		_fader
	.export		_fade_delay
	.export		_map_attr
	.export		_map_buff
	.export		_first_game
	.export		_level
	.export		_c_max_enems
	.export		_n_pant
	.export		_on_pant
	.export		_half_life
	.export		_frame_counter
	.export		_real_frame_counter
	.export		_paused
	.export		_win_level
	.export		_game_over
	.export		_warp_to_level
	.export		_level_reset
	.export		_flick_override
	.export		_olife
	.export		_okeys
	.export		_oobjs
	.export		_oammo
	.export		_okilled
	.export		_oam_index_player
	.export		_coco_slots
	.export		_coco_slots_i
	.export		_coco_on
	.export		_coco_x
	.export		_coco_y
	.export		_coco_vx
	.export		_coco_vy
	.export		_brk_buff
	.export		_brkf
	.export		_brkx
	.export		_brky
	.export		_pmayneedrelocation
	.export		_hyx
	.export		_ht
	.export		_hact
	.export		_flags
	.export		_en_t
	.export		_en_x
	.export		_en_y
	.export		_en_x1
	.export		_en_y1
	.export		_en_x2
	.export		_en_y2
	.export		_en_mx
	.export		_en_my
	.export		_en_s
	.export		_en_facing
	.export		_en_state
	.export		_en_spr_x_mod
	.export		_enf_x
	.export		_enf_vx
	.export		_enf_y
	.export		_enf_vy
	.export		_en_spr_id
	.export		_en_invincible
	.export		_cfx
	.export		_timer
	.export		_otimer
	.export		_timer_frames
	.export		_timer_zero
	.export		_timer_on
	.export		_tile_got
	.export		_ring_x
	.export		_ring_y
	.export		_ring_vx
	.export		_ring_vy
	.export		_ring_timer
	.export		_prings
	.export		_oprings
	.export		_pemmeralds
	.export		_level_world
	.export		_level_act
	.export		_water_strip
	.export		_underwater
	.export		_bubble_x
	.export		_bubble_y
	.export		_toggle_switch
	.export		_toggle_timer
	.export		_elec_state
	.export		_elec_state_ct
	.export		_somari_state
	.export		_somari_ct
	.export		_somari_life
	.export		_free_play
	.export		_select_level
	.export		_pdying
	.export		_gp_func
	.export		_bridge_idx
	.export		_bridge_x
	.export		_bridge_y
	.export		_bridge_f
	.export		_base_level
	.export		_base_world
	.export		_base_act
	.export		_spr_ring
	.export		_pal_cycle
	.export		_level5_bg
	.export		_elec_state_max_ct
	.export		_player_render
	.export		_do_extern_action
	.export		_fade_out
	.export		_fade_in
	.export		_clear_update_list
	.export		_cls
	.export		_ul_putc
	.export		_p_t
	.export		_bitmasks
	.export		_attr_table
	.export		_upd_attr_table
	.export		_draw_tile
	.export		_update_list_tile
	.export		_map_set
	.export		_get_byte
	.export		_add_tile
	.export		_draw_scr
	.export		_pr_str
	.export		_cm_two_points
	.export		_collide_in
	.export		_collide
	.export		_add_sign
	.export		_saturate
	.export		_pad_read
	.export		_distance
	.export		_jump_start
	.export		_update_cycle
	.export		_ring_create
	.export		_ring_do
	.export		_somari_do
	.export		_bridge_create
	.export		_bridge_do
	.export		_breakable_do_anim
	.export		_breakable_break
	.export		_hotspots_load
	.export		_hotspots_paint
	.export		_hotspots_create
	.export		_cocos_init
	.export		_cocos_shoot_aimed
	.export		_cocos_shoot_linear
	.export		_cocos_destroy
	.export		_cocos_do
	.export		_player_register_safe_spot
	.export		_player_stop
	.export		_player_init
	.export		_player_to_pixels
	.export		_player_move
	.export		_enems_update_unsigned_char_arrays
	.export		_enems_facing
	.export		_enems_init_fp
	.export		_enems_boioiong_init
	.export		_enems_load
	.export		_enems_kill
	.export		_enems_hit
	.export		_enems_move
	.export		_draw_game_frame
	.export		_hud_update
	.export		_bat_in
	.export		_bat_out
	.export		_pres
	.export		_level_name_0
	.export		_level_name_1
	.export		_level_name_2
	.export		_level_name_3
	.export		_level_name_4
	.export		_level_name_5
	.export		_level_names
	.export		_show_emeralds
	.export		_scr_level
	.export		_title
	.export		_scr_game_over
	.export		_scr_the_end
	.export		_cuts_rle
	.export		_cuts_pal
	.export		_scr_cutscene
	.export		_cutscene
	.export		_zone_select
	.export		_flickscreen_do_horizontal
	.export		_flickscreen_do_vertical
	.export		_game_init
	.export		_prepare_scr
	.export		_game_loop
	.export		_game_do
	.export		_game_ending
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_monococo_state_times:
	.byte	$96
	.byte	$32
	.byte	$32
	.byte	$32
_coco_dx:
	.word	$FF80
	.word	$0000
	.word	$0080
	.word	$0000
_coco_dy:
	.word	$0000
	.word	$FF80
	.word	$0000
	.word	$0080
_endx:
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$FF
_endy:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$FF
_bits:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80
_jitter:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
_palcuts0:
	.byte	$0F
	.byte	$01
	.byte	$00
	.byte	$30
	.byte	$0F
	.byte	$12
	.byte	$23
	.byte	$36
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$34
	.byte	$0F
	.byte	$12
	.byte	$25
	.byte	$34
_palcuts1:
	.byte	$0F
	.byte	$01
	.byte	$00
	.byte	$30
	.byte	$0F
	.byte	$12
	.byte	$23
	.byte	$36
	.byte	$0F
	.byte	$1C
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$15
	.byte	$26
	.byte	$37
_palcuts2:
	.byte	$0F
	.byte	$01
	.byte	$00
	.byte	$30
	.byte	$0F
	.byte	$12
	.byte	$23
	.byte	$36
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$34
	.byte	$0F
	.byte	$15
	.byte	$26
	.byte	$37
_palss0:
	.byte	$21
	.byte	$0F
	.byte	$25
	.byte	$34
	.byte	$21
	.byte	$08
	.byte	$17
	.byte	$34
	.byte	$21
	.byte	$1D
	.byte	$00
	.byte	$30
	.byte	$21
	.byte	$0F
	.byte	$16
	.byte	$28
_palss0a:
	.byte	$21
	.byte	$03
	.byte	$23
	.byte	$33
	.byte	$21
	.byte	$1D
	.byte	$1A
	.byte	$3B
	.byte	$21
	.byte	$0F
	.byte	$1C
	.byte	$31
	.byte	$21
	.byte	$0F
	.byte	$18
	.byte	$29
_palss1:
	.byte	$21
	.byte	$0F
	.byte	$25
	.byte	$34
	.byte	$21
	.byte	$1D
	.byte	$18
	.byte	$34
	.byte	$21
	.byte	$13
	.byte	$21
	.byte	$30
	.byte	$21
	.byte	$0F
	.byte	$26
	.byte	$38
_palss2:
	.byte	$21
	.byte	$0F
	.byte	$25
	.byte	$34
	.byte	$21
	.byte	$08
	.byte	$17
	.byte	$34
	.byte	$21
	.byte	$03
	.byte	$23
	.byte	$30
	.byte	$21
	.byte	$0F
	.byte	$16
	.byte	$28
_palts0:
	.byte	$0B
	.byte	$0F
	.byte	$1A
	.byte	$30
	.byte	$0B
	.byte	$08
	.byte	$17
	.byte	$28
	.byte	$0B
	.byte	$07
	.byte	$26
	.byte	$1A
	.byte	$0B
	.byte	$15
	.byte	$25
	.byte	$3D
_palts1:
	.byte	$13
	.byte	$0F
	.byte	$23
	.byte	$30
	.byte	$13
	.byte	$08
	.byte	$17
	.byte	$28
	.byte	$13
	.byte	$08
	.byte	$18
	.byte	$29
	.byte	$13
	.byte	$05
	.byte	$25
	.byte	$35
_palts2:
	.byte	$0C
	.byte	$07
	.byte	$17
	.byte	$28
	.byte	$0C
	.byte	$17
	.byte	$28
	.byte	$38
	.byte	$0C
	.byte	$07
	.byte	$19
	.byte	$29
	.byte	$0C
	.byte	$12
	.byte	$22
	.byte	$31
_palts2a:
	.byte	$0F
	.byte	$1D
	.byte	$08
	.byte	$18
	.byte	$0F
	.byte	$08
	.byte	$18
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$0B
	.byte	$19
	.byte	$0F
	.byte	$02
	.byte	$12
	.byte	$22
_palts3:
	.byte	$08
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$0F
	.byte	$17
	.byte	$28
	.byte	$08
	.byte	$18
	.byte	$28
	.byte	$38
	.byte	$08
	.byte	$0C
	.byte	$0A
	.byte	$31
_palts3a:
	.byte	$0C
	.byte	$0F
	.byte	$11
	.byte	$31
	.byte	$0C
	.byte	$0F
	.byte	$1A
	.byte	$3A
	.byte	$0C
	.byte	$0A
	.byte	$1A
	.byte	$2A
	.byte	$0C
	.byte	$05
	.byte	$25
	.byte	$35
_palts4:
	.byte	$1D
	.byte	$0C
	.byte	$1C
	.byte	$2C
	.byte	$1D
	.byte	$08
	.byte	$17
	.byte	$38
	.byte	$1D
	.byte	$06
	.byte	$28
	.byte	$29
	.byte	$1D
	.byte	$18
	.byte	$28
	.byte	$30
_palts4a:
	.byte	$0F
	.byte	$1D
	.byte	$0C
	.byte	$1C
	.byte	$0F
	.byte	$02
	.byte	$12
	.byte	$21
	.byte	$0F
	.byte	$02
	.byte	$28
	.byte	$29
	.byte	$0F
	.byte	$13
	.byte	$23
	.byte	$33
_palts5:
	.byte	$02
	.byte	$0F
	.byte	$12
	.byte	$22
	.byte	$02
	.byte	$0F
	.byte	$0C
	.byte	$1C
	.byte	$02
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$01
	.byte	$12
_palts5a:
	.byte	$11
	.byte	$0C
	.byte	$00
	.byte	$20
	.byte	$11
	.byte	$08
	.byte	$17
	.byte	$28
	.byte	$11
	.byte	$0C
	.byte	$00
	.byte	$38
	.byte	$11
	.byte	$0C
	.byte	$1C
	.byte	$11
_palts5b:
	.byte	$1D
	.byte	$0C
	.byte	$1C
	.byte	$2B
	.byte	$1D
	.byte	$02
	.byte	$12
	.byte	$21
	.byte	$1D
	.byte	$0C
	.byte	$15
	.byte	$25
	.byte	$1D
	.byte	$0F
	.byte	$0C
	.byte	$1C
_palts5c:
	.byte	$1D
	.byte	$0C
	.byte	$11
	.byte	$2B
	.byte	$1D
	.byte	$08
	.byte	$17
	.byte	$38
	.byte	$1D
	.byte	$02
	.byte	$28
	.byte	$29
	.byte	$1D
	.byte	$13
	.byte	$23
	.byte	$33
_paltstitle:
	.byte	$02
	.byte	$0F
	.byte	$17
	.byte	$20
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$14
	.byte	$24
	.byte	$02
	.byte	$2D
	.byte	$10
	.byte	$20
_behs0:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$4A
	.byte	$08
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_behs1:
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$4A
	.byte	$14
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$22
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_behs2:
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$22
	.byte	$04
	.byte	$01
	.byte	$08
	.byte	$4A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_behs3:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$22
	.byte	$4A
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
_behs4:
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$22
	.byte	$4A
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$28
	.byte	$28
	.byte	$29
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
_behs4b:
	.byte	$00
	.byte	$28
	.byte	$08
	.byte	$29
	.byte	$08
	.byte	$22
	.byte	$4A
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$28
	.byte	$28
	.byte	$29
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
_behs5:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$22
	.byte	$4A
	.byte	$01
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_behs5b:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_map_01_scr_offsets:
	.word	$0000
	.word	$0047
	.word	$0092
	.word	$00DA
	.word	$0102
	.word	$0137
	.word	$015E
	.word	$015E
	.word	$015E
	.word	$015E
	.word	$016A
	.word	$0199
	.word	$01C8
	.word	$015E
	.word	$020D
	.word	$0257
	.word	$0290
	.word	$02AE
	.word	$015E
	.word	$015E
	.word	$015E
	.word	$02D1
	.word	$02F8
	.word	$0321
	.word	$0336
	.word	$015E
	.word	$015E
	.word	$0360
	.word	$03A5
	.word	$03D0
_map_10_scr_offsets:
	.word	$03FE
	.word	$03FE
	.word	$03FE
	.word	$040A
	.word	$041A
	.word	$0434
	.word	$046A
	.word	$0499
	.word	$03FE
	.word	$03FE
	.word	$04A6
	.word	$03FE
	.word	$03FE
	.word	$03FE
	.word	$04B8
	.word	$04C8
	.word	$04E3
	.word	$050D
	.word	$0566
	.word	$05C4
	.word	$05F1
	.word	$061F
	.word	$0645
	.word	$067D
	.word	$06AB
	.word	$06C4
	.word	$06F2
	.word	$0722
	.word	$074A
	.word	$0772
_map_11_scr_offsets:
	.word	$0793
	.word	$07BD
	.word	$07DC
	.word	$07FC
	.word	$081D
	.word	$085F
	.word	$08A0
	.word	$08D8
	.word	$08FF
	.word	$0932
	.word	$0963
	.word	$0996
	.word	$09C3
	.word	$09FE
	.word	$0A37
	.word	$0A62
	.word	$0AAE
	.word	$0AC3
	.word	$0AFE
	.word	$0B32
	.word	$0B61
	.word	$0B9B
	.word	$0BCF
	.word	$0BE1
	.word	$0C0A
_map_20_scr_offsets:
	.word	$0C41
	.word	$0C8A
	.word	$0CD3
	.word	$0D0F
	.word	$0D4B
	.word	$0D7F
	.word	$0DB3
	.word	$0E17
	.word	$0E61
	.word	$0E8E
	.word	$0EC6
	.word	$0F06
	.word	$0F3B
	.word	$0F7D
	.word	$0FBA
	.word	$0FEF
	.word	$102D
	.word	$106F
	.word	$10AE
	.word	$10E9
_map_21_scr_offsets:
	.word	$1119
	.word	$1119
	.word	$1119
	.word	$1125
	.word	$1143
	.word	$1188
	.word	$11B4
	.word	$11D6
	.word	$11F0
	.word	$120D
	.word	$1119
	.word	$1119
	.word	$1227
	.word	$1119
	.word	$1119
	.word	$1250
	.word	$12A7
	.word	$12F4
	.word	$131E
	.word	$1364
	.word	$1364
	.word	$1370
	.word	$1395
	.word	$1364
	.word	$13CC
	.word	$13E4
	.word	$1431
	.word	$1469
	.word	$149B
	.word	$14B5
_map_30_scr_offsets:
	.word	$14D3
	.word	$1502
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$1536
	.word	$156F
	.word	$0000
	.word	$15BD
	.word	$15FC
	.word	$1626
	.word	$168A
	.word	$16C2
	.word	$1723
	.word	$0000
	.word	$176A
	.word	$17B2
	.word	$17EE
	.word	$184A
	.word	$0000
	.word	$0000
	.word	$1883
	.word	$18C0
	.word	$1903
	.word	$0000
_map_31_scr_offsets:
	.word	$1949
	.word	$197D
	.word	$1998
	.word	$19CC
	.word	$1A02
	.word	$1A27
	.word	$1A53
	.word	$1A82
	.word	$1ACD
	.word	$1B14
	.word	$1B2F
	.word	$1B61
	.word	$1BAA
	.word	$1BFF
	.word	$1C3F
	.word	$1C61
	.word	$1C9D
	.word	$1CEA
	.word	$1D39
	.word	$0000
	.word	$1D80
	.word	$1DA8
	.word	$1DC9
	.word	$1DF9
	.word	$0000
_map_02_scr_offsets:
	.word	$1E25
	.word	$1E66
	.word	$1EB3
_map_12_scr_offsets:
	.word	$1EE6
	.word	$1F04
	.word	$1F19
_map_22_scr_offsets:
	.word	$1F40
	.word	$1F60
	.word	$1F91
_map_00_scr_offsets:
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$000C
	.word	$001A
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0031
	.word	$0066
	.word	$0000
	.word	$008B
	.word	$00B9
	.word	$0000
	.word	$00DA
	.word	$0120
	.word	$014D
	.word	$018E
	.word	$01BC
	.word	$01FB
	.word	$0229
	.word	$0258
	.word	$0277
	.word	$02AC
_map_32_scr_offsets:
	.word	$02E6
	.word	$0320
_map_40_scr_offsets:
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0357
	.word	$0390
	.word	$03C1
	.word	$0000
	.word	$0000
	.word	$03F8
	.word	$0432
	.word	$044D
	.word	$0463
	.word	$0484
	.word	$0495
	.word	$04AD
	.word	$04DC
	.word	$050D
	.word	$0539
	.word	$0569
	.word	$0594
	.word	$05C6
	.word	$05DA
	.word	$0609
	.word	$0634
	.word	$0000
	.word	$0672
	.word	$0672
	.word	$0000
	.word	$0000
	.word	$0000
_map_41_scr_offsets:
	.word	$0000
	.word	$06B3
	.word	$06D7
	.word	$06FE
	.word	$071A
	.word	$0000
	.word	$0735
	.word	$06D7
	.word	$0767
	.word	$079A
	.word	$0000
	.word	$06B3
	.word	$06D7
	.word	$0767
	.word	$079A
	.word	$0000
	.word	$0735
	.word	$06D7
	.word	$0767
	.word	$079A
	.word	$07E9
	.word	$0807
	.word	$0818
	.word	$0831
	.word	$0852
_map_42_scr_offsets:
	.word	$0880
	.word	$08B4
	.word	$08EE
_map_50_scr_offsets:
	.word	$0000
	.word	$0000
	.word	$0918
	.word	$0935
	.word	$095D
	.word	$09BE
	.word	$0A10
	.word	$0A62
	.word	$0ABC
	.word	$0B22
	.word	$0B84
	.word	$0BB5
	.word	$0000
	.word	$0BDC
	.word	$0C13
	.word	$0C5A
	.word	$0C90
	.word	$0CE5
	.word	$0D41
	.word	$0D41
	.word	$0000
	.word	$0D41
	.word	$0D41
	.word	$0D41
	.word	$0D41
	.word	$0D76
	.word	$0DB8
	.word	$0DEF
	.word	$0E3B
	.word	$0000
_map_51_scr_offsets:
	.word	$0E99
	.word	$0EBD
	.word	$0EBD
	.word	$0EBD
	.word	$0EBD
	.word	$0ED1
	.word	$0EEF
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0F45
	.word	$0F5F
	.word	$0FC2
	.word	$0000
	.word	$1027
	.word	$1061
	.word	$0000
	.word	$1084
	.word	$10D3
	.word	$0000
	.word	$1125
	.word	$114C
	.word	$0000
	.word	$1161
	.word	$117F
	.word	$117F
	.word	$118D
	.word	$0000
_map_52_scr_offsets:
	.word	$11A4
	.word	$11BB
	.word	$11D6
_sspl_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0F
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$80
_sspl_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$0F
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$11
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$13
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$12
	.byte	$40
	.byte	$80
_sspl_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$14
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$15
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$17
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$19
	.byte	$00
	.byte	$80
_sspl_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$15
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$14
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$17
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$16
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$19
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$18
	.byte	$40
	.byte	$80
_sspl_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$1A
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$1B
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$1E
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1F
	.byte	$00
	.byte	$80
_sspl_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$1B
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$1A
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$1D
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$1C
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1F
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$1E
	.byte	$40
	.byte	$80
_sspl_03_a:
	.byte	$FC
	.byte	$F8
	.byte	$20
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$21
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$25
	.byte	$00
	.byte	$80
_sspl_03_b:
	.byte	$FC
	.byte	$F8
	.byte	$21
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$20
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$23
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$22
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$25
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$24
	.byte	$40
	.byte	$80
_sspl_04:
	.byte	$FC
	.byte	$00
	.byte	$26
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$26
	.byte	$80
	.byte	$04
	.byte	$08
	.byte	$26
	.byte	$C0
	.byte	$80
_sspl_05:
	.byte	$FC
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$28
	.byte	$80
	.byte	$04
	.byte	$08
	.byte	$28
	.byte	$C0
	.byte	$80
_sspl_06:
	.byte	$FC
	.byte	$00
	.byte	$2A
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$2B
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$2A
	.byte	$80
	.byte	$04
	.byte	$08
	.byte	$2A
	.byte	$C0
	.byte	$80
_ssen_00_a:
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$2D
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$2E
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$2F
	.byte	$03
	.byte	$80
_ssen_00_b:
	.byte	$00
	.byte	$00
	.byte	$2D
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$2F
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$2E
	.byte	$43
	.byte	$80
_ssen_01_a:
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$31
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$32
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$33
	.byte	$03
	.byte	$80
_ssen_01_b:
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$30
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$33
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$32
	.byte	$43
	.byte	$80
_ssen_02_a:
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$35
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$36
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$37
	.byte	$03
	.byte	$80
_ssen_02_b:
	.byte	$00
	.byte	$00
	.byte	$35
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$37
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$36
	.byte	$43
	.byte	$80
_ssen_03_a:
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$39
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$3A
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$3B
	.byte	$03
	.byte	$80
_ssen_03_b:
	.byte	$00
	.byte	$00
	.byte	$39
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$38
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$3B
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$3A
	.byte	$43
	.byte	$80
_ssen_04_a:
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$3D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3D
	.byte	$42
	.byte	$80
_ssen_04_b:
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$3D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3D
	.byte	$42
	.byte	$80
_ssen_05_a:
	.byte	$00
	.byte	$00
	.byte	$3E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3E
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$3F
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3F
	.byte	$42
	.byte	$80
_ssen_05_b:
	.byte	$00
	.byte	$00
	.byte	$3E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3E
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$3F
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3F
	.byte	$42
	.byte	$80
_ssen_06_a:
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$41
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$42
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$43
	.byte	$02
	.byte	$80
_ssen_06_b:
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$40
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$43
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$42
	.byte	$42
	.byte	$80
_ssen_07_a:
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$45
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$46
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$47
	.byte	$02
	.byte	$80
_ssen_07_b:
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$44
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$47
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$46
	.byte	$42
	.byte	$80
_ssen_08_a:
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$4A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$4B
	.byte	$00
	.byte	$80
_ssen_08_b:
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$48
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$4B
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$4A
	.byte	$40
	.byte	$80
_ssen_09_a:
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$4D
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$4E
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$4F
	.byte	$00
	.byte	$80
_ssen_09_b:
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$4C
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$4F
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$4E
	.byte	$40
	.byte	$80
_ssen_0A_a:
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$52
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$53
	.byte	$02
	.byte	$80
_ssen_0A_b:
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$50
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$52
	.byte	$42
	.byte	$80
_ssen_0B_a:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$55
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$56
	.byte	$02
	.byte	$80
_ssen_0B_b:
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$54
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$55
	.byte	$42
	.byte	$80
_ssfant_00_a:
	.byte	$00
	.byte	$00
	.byte	$57
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$58
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$59
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$5A
	.byte	$02
	.byte	$80
_ssfant_00_b:
	.byte	$00
	.byte	$00
	.byte	$58
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$57
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$5A
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$59
	.byte	$42
	.byte	$80
_ssfant_01_a:
	.byte	$00
	.byte	$00
	.byte	$5B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$5D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$5E
	.byte	$02
	.byte	$80
_ssfant_01_b:
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$5B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$5E
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$5D
	.byte	$42
	.byte	$80
_ssmc_00_a:
	.byte	$00
	.byte	$F8
	.byte	$5F
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$60
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$62
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$63
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$64
	.byte	$02
	.byte	$80
_ssmc_00_b:
	.byte	$00
	.byte	$F8
	.byte	$60
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$5F
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$64
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$63
	.byte	$42
	.byte	$80
_ssmc_01_a:
	.byte	$00
	.byte	$F8
	.byte	$65
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$60
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$62
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$63
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$64
	.byte	$02
	.byte	$80
_ssmc_01_b:
	.byte	$00
	.byte	$F8
	.byte	$60
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$65
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$64
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$63
	.byte	$42
	.byte	$80
_sstrunk_00:
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$66
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$66
	.byte	$C1
	.byte	$80
_sstrunk_01:
	.byte	$00
	.byte	$00
	.byte	$67
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$68
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$69
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$6A
	.byte	$01
	.byte	$80
_sstrunk_02:
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$6C
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6D
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$6E
	.byte	$01
	.byte	$80
_sspez_00:
	.byte	$00
	.byte	$00
	.byte	$6F
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$71
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$72
	.byte	$03
	.byte	$80
_sspez_01:
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$74
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$75
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$76
	.byte	$03
	.byte	$80
_ssbomb_00:
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$78
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$82
	.byte	$80
_ssbomb_01:
	.byte	$00
	.byte	$00
	.byte	$79
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$78
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$82
	.byte	$80
_sscan_00:
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$7B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$7A
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$7C
	.byte	$02
	.byte	$80
_sscan_01:
	.byte	$00
	.byte	$00
	.byte	$7D
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$7D
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$7E
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$7F
	.byte	$02
	.byte	$80
_sscan_02:
	.byte	$00
	.byte	$00
	.byte	$7B
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$7A
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$7C
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$7A
	.byte	$C2
	.byte	$80
_sscan_03:
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$82
	.byte	$08
	.byte	$00
	.byte	$7F
	.byte	$82
	.byte	$00
	.byte	$08
	.byte	$7D
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$7D
	.byte	$C2
	.byte	$80
_ssboss_00_a:
	.byte	$00
	.byte	$F4
	.byte	$80
	.byte	$01
	.byte	$08
	.byte	$F4
	.byte	$81
	.byte	$01
	.byte	$F8
	.byte	$FC
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$83
	.byte	$01
	.byte	$08
	.byte	$FC
	.byte	$84
	.byte	$01
	.byte	$10
	.byte	$FC
	.byte	$85
	.byte	$00
	.byte	$F8
	.byte	$04
	.byte	$86
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$87
	.byte	$02
	.byte	$08
	.byte	$04
	.byte	$88
	.byte	$02
	.byte	$10
	.byte	$04
	.byte	$89
	.byte	$02
	.byte	$F8
	.byte	$0C
	.byte	$8A
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$8B
	.byte	$02
	.byte	$08
	.byte	$0C
	.byte	$8B
	.byte	$42
	.byte	$10
	.byte	$0C
	.byte	$8A
	.byte	$42
	.byte	$80
_ssboss_00_b:
	.byte	$00
	.byte	$F4
	.byte	$81
	.byte	$41
	.byte	$08
	.byte	$F4
	.byte	$80
	.byte	$41
	.byte	$F8
	.byte	$FC
	.byte	$85
	.byte	$40
	.byte	$00
	.byte	$FC
	.byte	$84
	.byte	$41
	.byte	$08
	.byte	$FC
	.byte	$83
	.byte	$41
	.byte	$10
	.byte	$FC
	.byte	$82
	.byte	$40
	.byte	$F8
	.byte	$04
	.byte	$89
	.byte	$42
	.byte	$00
	.byte	$04
	.byte	$88
	.byte	$42
	.byte	$08
	.byte	$04
	.byte	$87
	.byte	$42
	.byte	$10
	.byte	$04
	.byte	$86
	.byte	$42
	.byte	$F8
	.byte	$0C
	.byte	$8A
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$8B
	.byte	$02
	.byte	$08
	.byte	$0C
	.byte	$8B
	.byte	$42
	.byte	$10
	.byte	$0C
	.byte	$8A
	.byte	$42
	.byte	$80
_ssboss_01_a:
	.byte	$00
	.byte	$F4
	.byte	$8C
	.byte	$01
	.byte	$08
	.byte	$F4
	.byte	$8D
	.byte	$01
	.byte	$F8
	.byte	$FC
	.byte	$8E
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$8F
	.byte	$00
	.byte	$08
	.byte	$FC
	.byte	$8F
	.byte	$40
	.byte	$10
	.byte	$FC
	.byte	$8E
	.byte	$40
	.byte	$F8
	.byte	$04
	.byte	$90
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$91
	.byte	$02
	.byte	$08
	.byte	$04
	.byte	$91
	.byte	$42
	.byte	$10
	.byte	$04
	.byte	$90
	.byte	$42
	.byte	$F8
	.byte	$0C
	.byte	$8A
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$8B
	.byte	$02
	.byte	$08
	.byte	$0C
	.byte	$8B
	.byte	$42
	.byte	$10
	.byte	$0C
	.byte	$8A
	.byte	$42
	.byte	$80
_ssboss_01_b:
	.byte	$00
	.byte	$F4
	.byte	$8D
	.byte	$41
	.byte	$08
	.byte	$F4
	.byte	$8C
	.byte	$41
	.byte	$F8
	.byte	$FC
	.byte	$8E
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$8F
	.byte	$00
	.byte	$08
	.byte	$FC
	.byte	$8F
	.byte	$40
	.byte	$10
	.byte	$FC
	.byte	$8E
	.byte	$40
	.byte	$F8
	.byte	$04
	.byte	$90
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$91
	.byte	$02
	.byte	$08
	.byte	$04
	.byte	$91
	.byte	$42
	.byte	$10
	.byte	$04
	.byte	$90
	.byte	$42
	.byte	$F8
	.byte	$0C
	.byte	$8A
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$8B
	.byte	$02
	.byte	$08
	.byte	$0C
	.byte	$8B
	.byte	$42
	.byte	$10
	.byte	$0C
	.byte	$8A
	.byte	$42
	.byte	$80
_ssplat_00:
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$94
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$41
	.byte	$80
_ssplat_01:
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$95
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$95
	.byte	$41
	.byte	$80
_ssplat_02:
	.byte	$00
	.byte	$00
	.byte	$96
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$97
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$98
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$99
	.byte	$01
	.byte	$80
_ssplat_03:
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$9B
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$9C
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$9D
	.byte	$01
	.byte	$80
_ssplat_04:
	.byte	$00
	.byte	$00
	.byte	$9E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$9F
	.byte	$02
	.byte	$80
_ssexpl_00:
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$A1
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$A2
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$A3
	.byte	$02
	.byte	$80
_ssoccl_00:
	.byte	$00
	.byte	$00
	.byte	$A4
	.byte	$22
	.byte	$08
	.byte	$00
	.byte	$A4
	.byte	$62
	.byte	$00
	.byte	$08
	.byte	$A4
	.byte	$A2
	.byte	$08
	.byte	$08
	.byte	$A4
	.byte	$E2
	.byte	$80
_ssit_00:
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$A6
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$A5
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$A6
	.byte	$81
	.byte	$80
_ssit_01:
	.byte	$00
	.byte	$00
	.byte	$A7
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$A8
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$A9
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$AA
	.byte	$02
	.byte	$80
_ssit_02:
	.byte	$00
	.byte	$00
	.byte	$AB
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$AC
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$AD
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$AE
	.byte	$02
	.byte	$80
_ssit_03:
	.byte	$00
	.byte	$00
	.byte	$AF
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$AF
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$AF
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$C1
	.byte	$80
_ssit_04:
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$B1
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$B0
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$B1
	.byte	$81
	.byte	$80
_ssit_05:
	.byte	$00
	.byte	$00
	.byte	$B2
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$B2
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$B2
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$B2
	.byte	$C1
	.byte	$80
_ssit_06:
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$B0
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$B1
	.byte	$C1
	.byte	$08
	.byte	$08
	.byte	$B0
	.byte	$C1
	.byte	$80
_ssit_07:
	.byte	$00
	.byte	$00
	.byte	$B3
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$B3
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$B4
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$B4
	.byte	$41
	.byte	$80
_ssit_08:
	.byte	$00
	.byte	$00
	.byte	$B5
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$B6
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$B7
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$B8
	.byte	$02
	.byte	$80
_ssit_09:
	.byte	$00
	.byte	$00
	.byte	$B9
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$BA
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$BB
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$BC
	.byte	$01
	.byte	$80
_ssit_0A:
	.byte	$00
	.byte	$08
	.byte	$B9
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$BA
	.byte	$01
	.byte	$80
_ssbrk_00:
	.byte	$00
	.byte	$00
	.byte	$BD
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$BE
	.byte	$03
	.byte	$80
_ssray_00:
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$78
	.byte	$C1
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$81
	.byte	$00
	.byte	$10
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$C1
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$C2
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$20
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$C1
	.byte	$02
	.byte	$08
	.byte	$28
	.byte	$C2
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$30
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$38
	.byte	$C1
	.byte	$02
	.byte	$08
	.byte	$38
	.byte	$C2
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$40
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$48
	.byte	$C1
	.byte	$02
	.byte	$08
	.byte	$48
	.byte	$C2
	.byte	$02
	.byte	$00
	.byte	$50
	.byte	$77
	.byte	$01
	.byte	$08
	.byte	$50
	.byte	$78
	.byte	$01
	.byte	$00
	.byte	$58
	.byte	$78
	.byte	$C1
	.byte	$08
	.byte	$58
	.byte	$78
	.byte	$81
	.byte	$80
_ssray_01:
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$78
	.byte	$C1
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$81
	.byte	$00
	.byte	$10
	.byte	$C1
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$C2
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$C1
	.byte	$02
	.byte	$08
	.byte	$20
	.byte	$C2
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$28
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$C1
	.byte	$02
	.byte	$08
	.byte	$30
	.byte	$C2
	.byte	$02
	.byte	$00
	.byte	$38
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$38
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$C1
	.byte	$02
	.byte	$08
	.byte	$40
	.byte	$C2
	.byte	$02
	.byte	$00
	.byte	$48
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$48
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$50
	.byte	$77
	.byte	$01
	.byte	$08
	.byte	$50
	.byte	$78
	.byte	$01
	.byte	$00
	.byte	$58
	.byte	$78
	.byte	$C1
	.byte	$08
	.byte	$58
	.byte	$78
	.byte	$81
	.byte	$80
_ssray_02:
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$78
	.byte	$C1
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$81
	.byte	$00
	.byte	$50
	.byte	$77
	.byte	$01
	.byte	$08
	.byte	$50
	.byte	$78
	.byte	$01
	.byte	$00
	.byte	$58
	.byte	$78
	.byte	$C1
	.byte	$08
	.byte	$58
	.byte	$78
	.byte	$81
	.byte	$80
_sssom_00:
	.byte	$00
	.byte	$F8
	.byte	$C3
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$C4
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$C5
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$C6
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$C7
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$C8
	.byte	$01
	.byte	$80
_sssom_01:
	.byte	$00
	.byte	$F8
	.byte	$C9
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$CA
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$CC
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$CD
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$CE
	.byte	$01
	.byte	$80
_sssom_02:
	.byte	$00
	.byte	$F8
	.byte	$CF
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$D0
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$CC
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$D1
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$D2
	.byte	$01
	.byte	$80
_sssom_03:
	.byte	$00
	.byte	$F8
	.byte	$D3
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$D4
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$D5
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$D6
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$D7
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$D7
	.byte	$41
	.byte	$80
_sssom_04:
	.byte	$00
	.byte	$F8
	.byte	$D8
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$D9
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$DA
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$DB
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$DC
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$DD
	.byte	$02
	.byte	$80
_ssmon_00:
	.byte	$00
	.byte	$00
	.byte	$DE
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$DF
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$E0
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$E1
	.byte	$03
	.byte	$80
_ssmon_01:
	.byte	$00
	.byte	$00
	.byte	$DE
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$E2
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$E3
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$E4
	.byte	$03
	.byte	$80
_ts0_pals:
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
_ts0_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$0D
	.byte	$09
	.byte	$02
	.byte	$02
	.byte	$0B
	.byte	$0D
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$02
	.byte	$0D
	.byte	$0D
	.byte	$02
	.byte	$02
	.byte	$0D
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$59
	.byte	$0D
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$1E
	.byte	$1B
	.byte	$1E
	.byte	$1B
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5B
	.byte	$5B
	.byte	$5D
	.byte	$5B
	.byte	$5E
_ts1_pals:
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_ts1_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$60
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$61
	.byte	$61
	.byte	$64
	.byte	$64
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$65
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$67
	.byte	$67
	.byte	$68
	.byte	$68
	.byte	$69
	.byte	$67
	.byte	$02
	.byte	$68
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$1D
	.byte	$1D
	.byte	$1D
	.byte	$1D
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$1E
	.byte	$1B
	.byte	$1E
	.byte	$1B
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5B
	.byte	$5B
	.byte	$5D
	.byte	$5B
	.byte	$5E
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$00
	.byte	$00
_ts2_pals:
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
_ts2_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$76
	.byte	$77
	.byte	$77
	.byte	$78
	.byte	$78
	.byte	$79
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7A
	.byte	$7B
	.byte	$7B
	.byte	$7B
	.byte	$7B
	.byte	$7B
	.byte	$7B
	.byte	$7C
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7D
	.byte	$7E
	.byte	$7E
	.byte	$7F
	.byte	$7F
	.byte	$80
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$82
	.byte	$82
	.byte	$85
	.byte	$84
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$82
	.byte	$86
	.byte	$85
	.byte	$87
	.byte	$88
	.byte	$88
	.byte	$89
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$8E
	.byte	$7F
	.byte	$8F
	.byte	$80
	.byte	$7F
	.byte	$90
	.byte	$80
	.byte	$80
	.byte	$76
	.byte	$76
	.byte	$91
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$92
	.byte	$82
	.byte	$93
	.byte	$94
	.byte	$84
	.byte	$95
	.byte	$00
	.byte	$96
	.byte	$96
_ts3_pals:
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_ts3_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$9F
	.byte	$9F
	.byte	$A0
	.byte	$A0
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$47
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$A1
	.byte	$A2
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$A4
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$A5
	.byte	$0D
	.byte	$0D
	.byte	$9B
	.byte	$A6
	.byte	$A7
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$A8
	.byte	$A9
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AA
	.byte	$AB
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$B1
	.byte	$B1
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$A1
	.byte	$A2
	.byte	$02
	.byte	$A1
	.byte	$98
	.byte	$02
	.byte	$B2
	.byte	$A2
	.byte	$02
	.byte	$99
	.byte	$B3
	.byte	$02
	.byte	$B2
	.byte	$B3
	.byte	$9A
	.byte	$9B
	.byte	$A6
	.byte	$A7
	.byte	$02
	.byte	$A6
	.byte	$9C
	.byte	$02
	.byte	$B4
	.byte	$9D
	.byte	$B5
	.byte	$00
	.byte	$B6
	.byte	$02
	.byte	$B4
	.byte	$B7
	.byte	$B8
_ts4_pals:
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts4_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B9
	.byte	$B9
	.byte	$BA
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$00
	.byte	$00
	.byte	$BD
	.byte	$BD
	.byte	$BE
	.byte	$BE
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$97
	.byte	$A1
	.byte	$A2
	.byte	$02
	.byte	$C3
	.byte	$C3
	.byte	$C4
	.byte	$C4
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$C5
	.byte	$C5
	.byte	$C5
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$C3
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$A1
	.byte	$A2
	.byte	$02
	.byte	$A1
	.byte	$98
	.byte	$02
	.byte	$B2
	.byte	$A2
	.byte	$02
	.byte	$99
	.byte	$B3
	.byte	$02
	.byte	$B2
	.byte	$B3
	.byte	$9A
	.byte	$DE
	.byte	$DF
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
_ts4b_pals:
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts4b_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B9
	.byte	$B9
	.byte	$BA
	.byte	$BA
	.byte	$E6
	.byte	$E7
	.byte	$E8
	.byte	$E9
	.byte	$BD
	.byte	$BD
	.byte	$BE
	.byte	$BE
	.byte	$EA
	.byte	$EB
	.byte	$E8
	.byte	$E9
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$97
	.byte	$A1
	.byte	$A2
	.byte	$02
	.byte	$C3
	.byte	$C3
	.byte	$C4
	.byte	$C4
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$C5
	.byte	$C5
	.byte	$C5
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$C3
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$A1
	.byte	$A2
	.byte	$02
	.byte	$A1
	.byte	$98
	.byte	$02
	.byte	$B2
	.byte	$A2
	.byte	$02
	.byte	$99
	.byte	$B3
	.byte	$02
	.byte	$B2
	.byte	$B3
	.byte	$9A
	.byte	$DE
	.byte	$DF
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
_ts5_pals:
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts5_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$C3
	.byte	$EC
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$A1
	.byte	$A1
	.byte	$A1
	.byte	$A1
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$3F
	.byte	$C6
	.byte	$3F
	.byte	$C8
	.byte	$C3
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$C5
	.byte	$3F
	.byte	$C5
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$F5
	.byte	$F6
	.byte	$F7
	.byte	$F8
	.byte	$00
	.byte	$F9
	.byte	$FA
	.byte	$FB
	.byte	$00
	.byte	$FC
	.byte	$FD
	.byte	$00
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$C6
	.byte	$3F
	.byte	$C8
	.byte	$C7
	.byte	$3F
	.byte	$C9
	.byte	$3F
	.byte	$3F
	.byte	$C5
	.byte	$3F
	.byte	$C5
	.byte	$C5
	.byte	$3F
	.byte	$C5
	.byte	$3F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts5b_pals:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts5b_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$C4
	.byte	$3F
	.byte	$02
	.byte	$C4
	.byte	$C4
	.byte	$02
	.byte	$02
	.byte	$A6
	.byte	$A6
	.byte	$EC
	.byte	$EC
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$A6
	.byte	$A6
	.byte	$09
	.byte	$00
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$09
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$88
	.byte	$88
	.byte	$89
	.byte	$89
	.byte	$A6
	.byte	$A6
	.byte	$C4
	.byte	$C4
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$A1
	.byte	$A1
	.byte	$B3
	.byte	$B3
	.byte	$B5
	.byte	$A1
	.byte	$B6
	.byte	$B7
	.byte	$A1
	.byte	$A1
	.byte	$50
	.byte	$50
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$FB
	.byte	$00
	.byte	$FC
	.byte	$FD
	.byte	$00
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$3F
	.byte	$00
	.byte	$3F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A6
	.byte	$A6
	.byte	$09
	.byte	$00
	.byte	$A6
	.byte	$A6
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_spr_player:
	.addr	_sspl_01_a
	.addr	_sspl_01_a
	.addr	_sspl_02_a
	.addr	_sspl_01_a
	.addr	_sspl_00_a
	.addr	_sspl_04
	.addr	_sspl_05
	.addr	_sspl_04
	.addr	_sspl_06
	.addr	_sspl_03_a
	.addr	_sspl_01_b
	.addr	_sspl_01_b
	.addr	_sspl_02_b
	.addr	_sspl_01_b
	.addr	_sspl_00_b
	.addr	_sspl_04
	.addr	_sspl_05
	.addr	_sspl_04
	.addr	_sspl_06
	.addr	_sspl_03_b
_spr_enems1:
	.addr	_ssen_08_a
	.addr	_ssen_09_a
	.word	$0000
	.word	$0000
	.addr	_ssen_08_b
	.addr	_ssen_09_b
	.word	$0000
	.word	$0000
	.addr	_ssen_02_a
	.addr	_ssen_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen_02_b
	.addr	_ssen_03_b
	.word	$0000
	.word	$0000
	.addr	_ssen_04_a
	.addr	_ssen_05_a
	.word	$0000
	.word	$0000
	.addr	_ssen_04_b
	.addr	_ssen_05_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssexpl_00
	.addr	_ssoccl_00
	.addr	_ssmc_00_a
	.addr	_ssmc_01_a
	.word	$0000
	.word	$0000
	.addr	_ssmc_00_b
	.addr	_ssmc_01_b
	.word	$0000
	.word	$0000
	.addr	_ssboss_00_a
	.addr	_ssboss_00_a
	.addr	_ssboss_01_a
	.addr	_ssboss_01_a
	.addr	_ssboss_00_b
	.addr	_ssboss_00_b
	.addr	_ssboss_01_b
	.addr	_ssboss_01_b
	.addr	_ssfant_00_a
	.addr	_ssfant_01_a
	.word	$0000
	.word	$0000
	.addr	_ssfant_00_b
	.addr	_ssfant_01_b
	.word	$0000
	.word	$0000
	.addr	_sspez_00
	.addr	_sspez_01
_spr_enems2:
	.addr	_ssen_00_a
	.addr	_ssen_01_a
	.word	$0000
	.word	$0000
	.addr	_ssen_00_b
	.addr	_ssen_01_b
	.word	$0000
	.word	$0000
	.addr	_ssen_06_a
	.addr	_ssen_07_a
	.word	$0000
	.word	$0000
	.addr	_ssen_06_b
	.addr	_ssen_07_b
	.word	$0000
	.word	$0000
	.addr	_ssen_04_a
	.addr	_ssen_05_a
	.word	$0000
	.word	$0000
	.addr	_ssen_04_b
	.addr	_ssen_05_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_02
	.addr	_ssplat_03
	.word	$0000
	.word	$0000
	.addr	_ssplat_02
	.addr	_ssplat_03
	.word	$0000
	.word	$0000
	.addr	_ssexpl_00
	.addr	_ssoccl_00
	.addr	_ssmc_00_a
	.addr	_ssmc_01_a
	.word	$0000
	.word	$0000
	.addr	_ssmc_00_b
	.addr	_ssmc_01_b
	.word	$0000
	.word	$0000
	.addr	_ssboss_00_a
	.addr	_ssboss_00_a
	.addr	_ssboss_01_a
	.addr	_ssboss_01_a
	.addr	_ssboss_00_b
	.addr	_ssboss_00_b
	.addr	_ssboss_01_b
	.addr	_ssboss_01_b
	.addr	_sstrunk_00
	.addr	_sstrunk_01
	.addr	_sstrunk_02
	.word	$0000
	.addr	_ssbomb_00
	.addr	_ssbomb_01
	.word	$0000
	.word	$0000
	.addr	_sspez_00
	.addr	_sspez_01
_spr_enems3:
	.addr	_ssen_06_a
	.addr	_ssen_07_a
	.word	$0000
	.word	$0000
	.addr	_ssen_06_b
	.addr	_ssen_07_b
	.word	$0000
	.word	$0000
	.addr	_ssen_08_a
	.addr	_ssen_09_a
	.word	$0000
	.word	$0000
	.addr	_ssen_08_b
	.addr	_ssen_09_b
	.word	$0000
	.word	$0000
	.addr	_ssen_0A_a
	.addr	_ssen_0B_a
	.word	$0000
	.word	$0000
	.addr	_ssen_0A_b
	.addr	_ssen_0B_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_02
	.addr	_ssplat_03
	.word	$0000
	.word	$0000
	.addr	_ssplat_02
	.addr	_ssplat_03
	.word	$0000
	.word	$0000
	.addr	_ssexpl_00
	.addr	_ssoccl_00
	.addr	_sscan_00
	.addr	_sscan_01
	.addr	_sscan_02
	.addr	_sscan_03
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_ssboss_00_a
	.addr	_ssboss_00_a
	.addr	_ssboss_01_a
	.addr	_ssboss_01_a
	.addr	_ssboss_00_b
	.addr	_ssboss_00_b
	.addr	_ssboss_01_b
	.addr	_ssboss_01_b
_spr_enems4:
	.addr	_ssen_06_a
	.addr	_ssen_07_a
	.word	$0000
	.word	$0000
	.addr	_ssen_06_b
	.addr	_ssen_07_b
	.word	$0000
	.word	$0000
	.addr	_ssen_02_a
	.addr	_ssen_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen_02_b
	.addr	_ssen_03_b
	.word	$0000
	.word	$0000
	.addr	_ssen_0A_a
	.addr	_ssen_0B_a
	.word	$0000
	.word	$0000
	.addr	_ssen_0A_b
	.addr	_ssen_0B_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_04
	.addr	_ssplat_04
	.word	$0000
	.word	$0000
	.addr	_ssplat_04
	.addr	_ssplat_04
	.word	$0000
	.word	$0000
	.addr	_ssexpl_00
	.addr	_ssoccl_00
	.addr	_sscan_00
	.addr	_sscan_01
	.addr	_sscan_02
	.addr	_sscan_03
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_ssboss_00_a
	.addr	_ssboss_00_a
	.addr	_ssboss_01_a
	.addr	_ssboss_01_a
	.addr	_ssboss_00_b
	.addr	_ssboss_00_b
	.addr	_ssboss_01_b
	.addr	_ssboss_01_b
	.addr	_ssfant_00_a
	.addr	_ssfant_01_a
	.word	$0000
	.word	$0000
	.addr	_ssfant_00_b
	.addr	_ssfant_01_b
	.word	$0000
	.word	$0000
_spr_enems5:
	.addr	_ssray_02
	.addr	_ssray_02
	.word	$0000
	.word	$0000
	.addr	_ssray_00
	.addr	_ssray_01
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_ssexpl_00
	.addr	_ssoccl_00
	.addr	_ssmon_00
	.addr	_ssmon_01
	.word	$0000
	.word	$0000
	.addr	_ssmon_00
	.addr	_ssmon_01
	.word	$0000
	.word	$0000
	.addr	_sssom_00
	.addr	_sssom_01
	.addr	_sssom_02
	.addr	_sssom_03
	.addr	_sssom_04
_spr_hs:
	.word	$0000
	.addr	_ssit_08
	.word	$0000
	.addr	_ssit_02
	.addr	_ssit_07
	.addr	_ssit_01
	.addr	_ssit_09
	.addr	_ssit_0A
_cutscene_0:
	.byte	$57,$41,$4C,$4B,$49,$4E,$47,$20,$41,$52,$4F,$55,$4E,$44,$20,$54
	.byte	$48,$45,$20,$4A,$55,$4E,$4B,$59,$41,$52,$44,$25,$25,$43,$48,$45
	.byte	$52,$49,$4C,$20,$46,$4F,$55,$4E,$44,$20,$53,$4F,$4D,$45,$54,$48
	.byte	$49,$4E,$47,$20,$4F,$46,$25,$25,$49,$4E,$54,$45,$52,$45,$53,$54
	.byte	$2E,$2E,$2E,$20,$41,$20,$44,$49,$52,$54,$59,$2C,$20,$42,$52,$4F
	.byte	$4B,$45,$4E,$25,$25,$50,$55,$50,$50,$45,$54,$20,$53,$48,$45,$20
	.byte	$46,$4F,$55,$4E,$44,$20,$46,$41,$4D,$49,$4C,$49,$41,$52,$2E,$25
	.byte	$25,$27,$57,$48,$41,$54,$20,$44,$49,$44,$20,$54,$48,$45,$59,$20
	.byte	$44,$4F,$20,$54,$4F,$20,$59,$4F,$55,$3F,$00
_cutscene_1:
	.byte	$4D,$4F,$56,$45,$44,$20,$42,$59,$20,$41,$20,$53,$54,$52,$41,$4E
	.byte	$47,$45,$20,$46,$4F,$52,$43,$45,$2C,$25,$25,$43,$48,$45,$52,$49
	.byte	$4C,$20,$46,$45,$4C,$54,$20,$54,$48,$45,$20,$55,$52,$47,$45,$20
	.byte	$54,$4F,$20,$25,$25,$57,$45,$41,$52,$20,$54,$48,$45,$20,$50,$55
	.byte	$50,$50,$45,$54,$2E,$20,$41,$53,$20,$53,$48,$45,$25,$25,$43,$4C
	.byte	$4F,$53,$45,$44,$20,$54,$48,$45,$20,$5A,$49,$50,$2C,$20,$48,$45
	.byte	$52,$20,$47,$4F,$41,$4C,$25,$25,$42,$45,$43,$41,$4D,$45,$20,$43
	.byte	$4C,$45,$41,$52,$20,$4F,$4E,$20,$48,$45,$52,$20,$4D,$49,$4E,$44
	.byte	$2E,$25,$25,$00
_cutscene_2:
	.byte	$43,$48,$45,$52,$49,$4C,$20,$47,$4F,$54,$20,$4F,$55,$54,$20,$4F
	.byte	$46,$20,$54,$48,$45,$20,$4F,$4C,$44,$25,$25,$50,$55,$50,$50,$45
	.byte	$54,$2E,$20,$27,$49,$20,$54,$48,$49,$4E,$4B,$20,$57,$45,$20,$4D
	.byte	$41,$44,$45,$25,$25,$49,$54,$27,$2C,$20,$53,$48,$45,$20,$53,$41
	.byte	$49,$44,$2E,$25,$25,$00
_cutscene_3:
	.byte	$27,$4E,$4F,$54,$20,$52,$45,$41,$4C,$4C,$59,$27,$2C,$20,$53,$41
	.byte	$49,$44,$20,$41,$20,$47,$48,$4F,$53,$54,$4C,$59,$25,$25,$49,$4D
	.byte	$41,$47,$45,$2E,$20,$27,$59,$4F,$55,$20,$48,$41,$56,$45,$20,$54
	.byte	$4F,$20,$43,$4F,$4C,$4C,$45,$43,$54,$25,$25,$54,$48,$45,$20,$53
	.byte	$49,$58,$20,$53,$41,$43,$52,$45,$44,$20,$45,$4D,$4D,$45,$52,$41
	.byte	$4C,$44,$53,$20,$4F,$46,$25,$25,$50,$4F,$44,$45,$57,$57,$57,$52
	.byte	$21,$27,$2C,$20,$41,$4E,$44,$20,$54,$48,$45,$4E,$20,$49,$54,$25
	.byte	$25,$56,$41,$4E,$49,$53,$48,$45,$44,$2E,$2E,$2E,$00
_cutscene_4:
	.byte	$27,$59,$45,$53,$27,$2C,$20,$53,$41,$49,$44,$20,$41,$20,$47,$48
	.byte	$4F,$53,$54,$4C,$59,$20,$49,$4D,$41,$47,$45,$2C,$25,$25,$27,$59
	.byte	$4F,$55,$20,$4D,$41,$4E,$41,$47,$45,$44,$20,$54,$4F,$20,$43,$4F
	.byte	$4C,$4C,$45,$43,$54,$20,$41,$4C,$4C,$25,$25,$53,$49,$58,$20,$45
	.byte	$4D,$4D,$45,$52,$41,$4E,$44,$53,$20,$4F,$46,$20,$50,$4F,$44,$45
	.byte	$57,$57,$57,$52,$2E,$25,$25,$4E,$4F,$57,$20,$49,$27,$4D,$20,$46
	.byte	$52,$45,$45,$20,$54,$4F,$20,$47,$4F,$2E,$20,$54,$48,$41,$4E,$4B
	.byte	$53,$2C,$25,$25,$4B,$49,$4E,$44,$20,$57,$4F,$4D,$41,$4E,$21,$27
	.byte	$2E,$20,$41,$4E,$44,$20,$56,$41,$4E,$49,$53,$48,$45,$44,$2E,$00
_cutscenes:
	.addr	_cutscene_0
	.addr	_cutscene_1
	.addr	_cutscene_2
	.addr	_cutscene_3
	.addr	_cutscene_4
_beh0:
	.byte	$BF
	.byte	$47
	.byte	$46
	.byte	$67
	.byte	$66
	.byte	$47
	.byte	$46
	.byte	$0A
	.byte	$57
	.byte	$BC
	.byte	$67
	.byte	$66
	.byte	$BF
	.byte	$77
	.byte	$CE
	.byte	$00
_beh1:
	.byte	$BF
	.byte	$0A
	.byte	$74
	.byte	$80
	.byte	$80
	.byte	$09
	.byte	$54
	.byte	$BD
	.byte	$46
	.byte	$45
	.byte	$BF
	.byte	$0A
	.byte	$74
	.byte	$80
	.byte	$80
	.byte	$09
	.byte	$54
	.byte	$BD
	.byte	$66
	.byte	$65
	.byte	$BF
	.byte	$D5
	.byte	$00
_beh2:
	.byte	$BD
	.byte	$66
	.byte	$BF
	.byte	$53
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$73
	.byte	$BD
	.byte	$46
	.byte	$45
	.byte	$BF
	.byte	$53
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$73
	.byte	$BD
	.byte	$65
	.byte	$D5
	.byte	$00
_beh3:
	.byte	$BD
	.byte	$55
	.byte	$55
	.byte	$46
	.byte	$BE
	.byte	$74
	.byte	$0A
	.byte	$80
	.byte	$0A
	.byte	$54
	.byte	$BD
	.byte	$46
	.byte	$75
	.byte	$75
	.byte	$63
	.byte	$BE
	.byte	$54
	.byte	$09
	.byte	$80
	.byte	$0A
	.byte	$74
	.byte	$BD
	.byte	$66
	.byte	$BE
	.byte	$54
	.byte	$09
	.byte	$80
	.byte	$0A
	.byte	$74
	.byte	$BD
	.byte	$63
	.byte	$DF
	.byte	$00
_beh4:
	.byte	$BF
	.byte	$43
	.byte	$80
	.byte	$43
	.byte	$80
	.byte	$43
	.byte	$80
	.byte	$44
	.byte	$67
	.byte	$66
	.byte	$80
	.byte	$43
	.byte	$80
	.byte	$43
	.byte	$80
	.byte	$43
	.byte	$80
	.byte	$44
	.byte	$0A
	.byte	$57
	.byte	$BC
	.byte	$67
	.byte	$66
	.byte	$BF
	.byte	$77
	.byte	$D9
	.byte	$00
_en_behptrs:
	.addr	_beh0
	.addr	_beh1
	.addr	_beh2
	.addr	_beh3
	.addr	_beh4
_l_scr_ini:
	.byte	$14
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$18
	.byte	$00
	.byte	$13
	.byte	$0F
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$14
	.byte	$00
	.byte	$0F
	.byte	$13
	.byte	$00
_l_ini_x:
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$0C
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
_l_ini_y:
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
_l_map_w:
	.byte	$0A
	.byte	$0A
	.byte	$03
	.byte	$0F
	.byte	$19
	.byte	$03
	.byte	$01
	.byte	$0F
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$0F
	.byte	$05
	.byte	$03
	.byte	$0F
	.byte	$06
	.byte	$03
_l_map_h:
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$14
	.byte	$02
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$01
_l_player_max_objects:
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
_l_player_max_enems:
	.byte	$05
	.byte	$11
	.byte	$01
	.byte	$13
	.byte	$35
	.byte	$01
	.byte	$08
	.byte	$0B
	.byte	$01
	.byte	$07
	.byte	$02
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$0E
	.byte	$01
_l_pal_bg:
	.addr	_palts0
	.addr	_palts0
	.addr	_palts0
	.addr	_palts1
	.addr	_palts1
	.addr	_palts1
	.addr	_palts2
	.addr	_palts2a
	.addr	_palts2
	.addr	_palts3
	.addr	_palts3
	.addr	_palts3
	.addr	_palts4
	.addr	_palts4
	.addr	_palts4a
	.addr	_palts5
	.addr	_palts5b
	.addr	_palts5c
_l_pal_fg:
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss1
	.addr	_palss1
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss2
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
_l_ts_tmaps:
	.addr	_ts0_tmaps
	.addr	_ts0_tmaps
	.addr	_ts0_tmaps
	.addr	_ts1_tmaps
	.addr	_ts1_tmaps
	.addr	_ts1_tmaps
	.addr	_ts2_tmaps
	.addr	_ts2_tmaps
	.addr	_ts2_tmaps
	.addr	_ts3_tmaps
	.addr	_ts3_tmaps
	.addr	_ts3_tmaps
	.addr	_ts4_tmaps
	.addr	_ts4b_tmaps
	.addr	_ts4_tmaps
	.addr	_ts5_tmaps
	.addr	_ts5b_tmaps
	.addr	_ts4_tmaps
_l_ts_pals:
	.addr	_ts0_pals
	.addr	_ts0_pals
	.addr	_ts0_pals
	.addr	_ts1_pals
	.addr	_ts1_pals
	.addr	_ts1_pals
	.addr	_ts2_pals
	.addr	_ts2_pals
	.addr	_ts2_pals
	.addr	_ts3_pals
	.addr	_ts3_pals
	.addr	_ts3_pals
	.addr	_ts4_pals
	.addr	_ts4b_pals
	.addr	_ts4_pals
	.addr	_ts5_pals
	.addr	_ts5b_pals
	.addr	_ts4_pals
_l_behs:
	.addr	_behs0
	.addr	_behs0
	.addr	_behs0
	.addr	_behs1
	.addr	_behs1
	.addr	_behs1
	.addr	_behs2
	.addr	_behs2
	.addr	_behs2
	.addr	_behs3
	.addr	_behs3
	.addr	_behs3
	.addr	_behs4
	.addr	_behs4b
	.addr	_behs4
	.addr	_behs5
	.addr	_behs5b
	.addr	_behs4
_l_spr_enems:
	.addr	_spr_enems1
	.addr	_spr_enems1
	.addr	_spr_enems1
	.addr	_spr_enems1
	.addr	_spr_enems1
	.addr	_spr_enems1
	.addr	_spr_enems2
	.addr	_spr_enems2
	.addr	_spr_enems2
	.addr	_spr_enems3
	.addr	_spr_enems3
	.addr	_spr_enems3
	.addr	_spr_enems4
	.addr	_spr_enems4
	.addr	_spr_enems4
	.addr	_spr_enems4
	.addr	_spr_enems4
	.addr	_spr_enems5
_l_map_chr_rom_bank:
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
_l_map:
	.addr	_map_00_scr_offsets
	.addr	_map_01_scr_offsets
	.addr	_map_02_scr_offsets
	.addr	_map_10_scr_offsets
	.addr	_map_11_scr_offsets
	.addr	_map_12_scr_offsets
	.addr	_map_20_scr_offsets
	.addr	_map_21_scr_offsets
	.addr	_map_22_scr_offsets
	.addr	_map_30_scr_offsets
	.addr	_map_31_scr_offsets
	.addr	_map_32_scr_offsets
	.addr	_map_40_scr_offsets
	.addr	_map_41_scr_offsets
	.addr	_map_42_scr_offsets
	.addr	_map_50_scr_offsets
	.addr	_map_51_scr_offsets
	.addr	_map_52_scr_offsets
_l_enems_chr_rombank:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
_l_enems:
	.word	$1000
	.word	$11A4
	.word	$1348
	.word	$1372
	.word	$1516
	.word	$1674
	.word	$169E
	.word	$17B6
	.word	$195A
	.word	$1984
	.word	$1AE2
	.word	$1C40
	.word	$1C5C
	.word	$1E00
	.word	$1F5E
	.word	$1800
	.word	$19A4
	.word	$1B48
_l_hotspots:
	.word	$1168
	.word	$130C
	.word	$136C
	.word	$14DA
	.word	$1642
	.word	$1698
	.word	$178E
	.word	$191E
	.word	$197E
	.word	$1AB0
	.word	$1C0E
	.word	$1C58
	.word	$1DC4
	.word	$1F2C
	.word	$1F82
	.word	$1968
	.word	$1B0C
	.word	$1B6C
_l_chr_rom_bank:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_l_music:
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
_cuts0_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$0B
	.byte	$0D
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$03
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$04
	.byte	$0F
	.byte	$1A
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$1B
	.byte	$1C
	.byte	$1E
	.byte	$3B
	.byte	$42
	.byte	$43
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$48
	.byte	$49
	.byte	$4C
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$1D
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$45
	.byte	$04
	.byte	$04
	.byte	$46
	.byte	$47
	.byte	$4A
	.byte	$4B
	.byte	$4D
	.byte	$4E
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$4F
	.byte	$51
	.byte	$52
	.byte	$55
	.byte	$56
	.byte	$59
	.byte	$5A
	.byte	$5D
	.byte	$5E
	.byte	$61
	.byte	$62
	.byte	$65
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$50
	.byte	$53
	.byte	$54
	.byte	$57
	.byte	$58
	.byte	$5B
	.byte	$5C
	.byte	$5F
	.byte	$60
	.byte	$63
	.byte	$64
	.byte	$66
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6F
	.byte	$72
	.byte	$73
	.byte	$76
	.byte	$77
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$68
	.byte	$6B
	.byte	$6C
	.byte	$6E
	.byte	$00
	.byte	$70
	.byte	$71
	.byte	$74
	.byte	$75
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$DC
	.byte	$44
	.byte	$55
	.byte	$55
	.byte	$F5
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$44
	.byte	$55
	.byte	$AD
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$01
	.byte	$00
_cuts1_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$7B
	.byte	$7E
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$81
	.byte	$84
	.byte	$85
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$7C
	.byte	$7D
	.byte	$7F
	.byte	$80
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$82
	.byte	$83
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$8A
	.byte	$8C
	.byte	$8D
	.byte	$90
	.byte	$91
	.byte	$94
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$96
	.byte	$97
	.byte	$9A
	.byte	$9B
	.byte	$9E
	.byte	$9F
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$8B
	.byte	$8E
	.byte	$8F
	.byte	$92
	.byte	$93
	.byte	$95
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$98
	.byte	$99
	.byte	$9C
	.byte	$9D
	.byte	$A0
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$A1
	.byte	$A3
	.byte	$A4
	.byte	$A7
	.byte	$A8
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$AB
	.byte	$AC
	.byte	$AF
	.byte	$B0
	.byte	$B3
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$A2
	.byte	$A5
	.byte	$A6
	.byte	$A9
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$AD
	.byte	$AE
	.byte	$B1
	.byte	$B2
	.byte	$B4
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$B5
	.byte	$B6
	.byte	$B9
	.byte	$BA
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$BB
	.byte	$BC
	.byte	$BE
	.byte	$BF
	.byte	$C2
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$B7
	.byte	$B8
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$BD
	.byte	$C0
	.byte	$C1
	.byte	$C3
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$DB
	.byte	$A8
	.byte	$A2
	.byte	$CC
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$8A
	.byte	$22
	.byte	$CC
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$01
	.byte	$00
_cuts2_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$C4
	.byte	$C7
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$C5
	.byte	$C6
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$CE
	.byte	$D0
	.byte	$D1
	.byte	$D4
	.byte	$D5
	.byte	$D8
	.byte	$D9
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$CF
	.byte	$D2
	.byte	$D3
	.byte	$D6
	.byte	$D7
	.byte	$DA
	.byte	$DB
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$DC
	.byte	$DD
	.byte	$E0
	.byte	$E1
	.byte	$E4
	.byte	$E5
	.byte	$E8
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$DE
	.byte	$DF
	.byte	$E2
	.byte	$E3
	.byte	$E6
	.byte	$E7
	.byte	$E9
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$EA
	.byte	$EB
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$00
	.byte	$F2
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$EC
	.byte	$ED
	.byte	$F0
	.byte	$F1
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$E3
	.byte	$FF
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$AA
	.byte	$8A
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$01
	.byte	$00
_title_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$F3
	.byte	$F4
	.byte	$01
	.byte	$0F
	.byte	$F5
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$F6
	.byte	$F7
	.byte	$3E
	.byte	$F7
	.byte	$3E
	.byte	$F8
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$F8
	.byte	$3E
	.byte	$F7
	.byte	$3E
	.byte	$F8
	.byte	$3C
	.byte	$F7
	.byte	$3E
	.byte	$FB
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$F6
	.byte	$F8
	.byte	$F6
	.byte	$F9
	.byte	$3C
	.byte	$F8
	.byte	$FA
	.byte	$3D
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$F8
	.byte	$F6
	.byte	$3D
	.byte	$3D
	.byte	$F8
	.byte	$F6
	.byte	$FB
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$F6
	.byte	$F9
	.byte	$FC
	.byte	$FC
	.byte	$FA
	.byte	$3D
	.byte	$00
	.byte	$3D
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$F9
	.byte	$FC
	.byte	$3D
	.byte	$3D
	.byte	$F9
	.byte	$FC
	.byte	$FB
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$F6
	.byte	$FD
	.byte	$01
	.byte	$0F
	.byte	$FB
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$FE
	.byte	$FD
	.byte	$01
	.byte	$0F
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$F8
	.byte	$0C
	.byte	$A0
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$01
	.byte	$00
_base_level:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0F
	.byte	$0F
	.byte	$0F
_base_world:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
_base_act:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
_spr_ring:
	.addr	_ssit_00
	.addr	_ssit_04
	.addr	_ssit_05
	.addr	_ssit_06
_level5_bg:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_elec_state_max_ct:
	.byte	$06
	.byte	$01
	.byte	$04
_bitmasks:
	.byte	$FC
	.byte	$F3
	.byte	$CF
	.byte	$3F
_level_name_0:
	.byte	$42,$45,$4E,$4E,$59,$20,$48,$49,$4C,$4C,$00
_level_name_1:
	.byte	$42,$52,$4F,$4B,$45,$4E,$20,$46,$52,$49,$44,$47,$45,$00
_level_name_2:
	.byte	$42,$4F,$53,$51,$55,$45,$20,$42,$41,$44,$41,$4A,$4F,$5A,$00
_level_name_3:
	.byte	$57,$45,$54,$20,$52,$55,$49,$4E,$53,$00
_level_name_4:
	.byte	$43,$52,$41,$50,$20,$42,$52,$41,$49,$4E,$00
_level_name_5:
	.byte	$4F,$4C,$41,$20,$4B,$20,$41,$53,$45,$00
_level_names:
	.addr	_level_name_0
	.addr	_level_name_1
	.addr	_level_name_2
	.addr	_level_name_3
	.addr	_level_name_4
	.addr	_level_name_5
_cuts_rle:
	.addr	_cuts0_rle
	.addr	_cuts2_rle
	.addr	_cuts2_rle
	.addr	_cuts1_rle
	.addr	_cuts1_rle
_cuts_pal:
	.addr	_palcuts0
	.addr	_palcuts2
	.addr	_palcuts2
	.addr	_palcuts1
	.addr	_palcuts1
L0001:
	.byte	$4C,$49,$46,$45,$5C,$00,$52,$49,$4E,$47,$4F,$53,$5C,$00,$5D,$5D
	.byte	$5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$5D,$00,$5D
	.byte	$5D,$5D,$5D,$5E,$5A,$4F,$4E,$45,$2C,$20,$41,$43,$54,$20,$00,$50
	.byte	$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$21,$00,$50,$52,$45,$53
	.byte	$53,$20,$53,$54,$41,$52,$54,$20,$20,$54,$4F,$20,$42,$45,$47,$49
	.byte	$4E,$25,$25,$50,$52,$45,$53,$53,$20,$53,$45,$4C,$45,$43,$54,$20
	.byte	$54,$4F,$20,$43,$4F,$4E,$54,$49,$4E,$55,$45,$00,$40,$20,$32,$30
	.byte	$31,$38,$20,$54,$48,$45,$20,$4D,$4F,$4A,$4F,$4E,$20,$54,$57,$49
	.byte	$4E,$53,$00,$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$21,$00,$54,$48
	.byte	$45,$20,$45,$4E,$44,$00,$5A,$4F,$4E,$45,$20,$53,$45,$4C,$45,$43
	.byte	$54,$00

.segment	"BSS"

.segment	"ZEROPAGE"
__x:
	.res	1,$00
__y:
	.res	1,$00
__n:
	.res	1,$00
__t:
	.res	1,$00
__z:
	.res	1,$00
_pad0:
	.res	1,$00
_pad_this_frame:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_gpitu:
	.res	1,$00
_gpaux:
	.res	1,$00
_rds16:
	.res	2,$00
_gp_gen:
	.res	2,$00
_gp_tmap:
	.res	2,$00
_gp_tma2:
	.res	2,$00
_gp_ram:
	.res	2,$00
_gp_ram_aux:
	.res	2,$00
_gp_addr:
	.res	2,$00
_rdx:
	.res	1,$00
_rdy:
	.res	1,$00
_rdt:
	.res	1,$00
_rdit:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdd:
	.res	1,$00
_rdm:
	.res	1,$00
_rds:
	.res	1,$00
_rdct:
	.res	1,$00
_ticker:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
_cx1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy1:
	.res	1,$00
_cy2:
	.res	1,$00
_caux:
	.res	1,$00
_oam_index:
	.res	1,$00
_en_initial:
	.res	1,$00
_en_offs:
	.res	1,$00
_en_fr:
	.res	1,$00
_en_collx:
	.res	1,$00
_en_colly:
	.res	1,$00
_en_spr:
	.res	1,$00
_touched:
	.res	1,$00
_en_is_alive:
	.res	1,$00
_pregotten:
	.res	1,$00
_en_cttouched:
	.res	3,$00
_en_flags:
	.res	3,$00
_en_life:
	.res	3,$00
_en_status:
	.res	3,$00
_en_ct:
	.res	3,$00
_en_rawv:
	.res	3,$00
_en_behptr:
	.res	6,$00
__en_t:
	.res	1,$00
__en_s:
	.res	1,$00
__en_x:
	.res	1,$00
__en_y:
	.res	1,$00
__en_x1:
	.res	1,$00
__en_y1:
	.res	1,$00
__en_x2:
	.res	1,$00
__en_y2:
	.res	1,$00
__en_mx:
	.res	1,$00
__en_my:
	.res	1,$00
__en_ct:
	.res	1,$00
__en_facing:
	.res	1,$00
__en_state:
	.res	1,$00
__enf_x:
	.res	2,$00
__enf_y:
	.res	2,$00
__enf_vx:
	.res	2,$00
__enf_vy:
	.res	2,$00
_en_sg_1:
	.res	1,$00
_en_sg_2:
	.res	1,$00
_vertical_engine_type:
	.res	1,$00
_px:
	.res	2,$00
_py:
	.res	2,$00
_pvx:
	.res	2,$00
_pvy:
	.res	2,$00
_prx:
	.res	1,$00
_pry:
	.res	1,$00
_pcx:
	.res	1,$00
_pcy:
	.res	1,$00
_pfacing:
	.res	1,$00
_pfr:
	.res	1,$00
_pctfr:
	.res	1,$00
_psprid:
	.res	1,$00
_a_button:
	.res	1,$00
_b_button:
	.res	1,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_pgotten:
	.res	1,$00
_ppossee:
	.res	1,$00
_oppossee:
	.res	1,$00
_pflickering:
	.res	1,$00
_pbouncing:
	.res	1,$00
_phit:
	.res	1,$00
_pgtmx:
	.res	2,$00
_pgtmy:
	.res	2,$00
_ptrampoline:
	.res	1,$00
_pspin:
	.res	1,$00
_hitv:
	.res	1,$00
_hith:
	.res	1,$00
_prx_old:
	.res	1,$00
_pry_old:
	.res	1,$00
_pkill:
	.res	1,$00
_pice:
	.res	1,$00
_pnotsafe:
	.res	1,$00
_pcontinues:
	.res	1,$00
_plife:
	.res	1,$00
_pobjs:
	.res	1,$00
_pammo:
	.res	1,$00
_pkilled:
	.res	1,$00
_pfiring:
	.res	1,$00
_n_pant_safe:
	.res	1,$00
_px_safe:
	.res	2,$00
_py_safe:
	.res	2,$00
_coco_it:
	.res	1,$00
_hrx:
	.res	1,$00
_hry:
	.res	1,$00
_hrt:
	.res	1,$00
_do_process_breakable:
	.res	1,$00
_ft:
	.res	1,$00
_c_map_w:
	.res	1,$00
_c_map_h:
	.res	1,$00
_c_map_size:
	.res	1,$00
_c_ts_pals:
	.res	2,$00
_c_ts_tmaps:
	.res	2,$00
_c_behs:
	.res	2,$00
_spr_enems:
	.res	2,$00
_c_pal_bg:
	.res	2,$00
_c_pal_fg:
	.res	2,$00
_c_map:
	.res	2,$00
_c_map_chr_rom_bank:
	.res	1,$00
_c_locks:
	.res	2,$00
_c_enems:
	.res	2,$00
_c_hotspots:
	.res	2,$00
_c_max_bolts:
	.res	1,$00
.segment	"BSS"
_ntsc:
	.res	1,$00
_ntsc_frame:
	.res	1,$00
_update_index:
	.res	1,$00
_update_list:
	.res	96,$00
_fader:
	.res	1,$00
_fade_delay:
	.res	1,$00
_map_attr:
	.res	192,$00
_map_buff:
	.res	192,$00
_first_game:
	.res	1,$00
_level:
	.res	1,$00
_c_max_enems:
	.res	1,$00
_n_pant:
	.res	1,$00
_on_pant:
	.res	1,$00
_half_life:
	.res	1,$00
_frame_counter:
	.res	1,$00
_real_frame_counter:
	.res	1,$00
_paused:
	.res	1,$00
_win_level:
	.res	1,$00
_game_over:
	.res	1,$00
_warp_to_level:
	.res	1,$00
_level_reset:
	.res	1,$00
_flick_override:
	.res	1,$00
_olife:
	.res	1,$00
_okeys:
	.res	1,$00
_oobjs:
	.res	1,$00
_oammo:
	.res	1,$00
_okilled:
	.res	1,$00
_oam_index_player:
	.res	1,$00
_coco_slots:
	.res	4,$00
_coco_slots_i:
	.res	1,$00
_coco_on:
	.res	4,$00
_coco_x:
	.res	8,$00
_coco_y:
	.res	8,$00
_coco_vx:
	.res	8,$00
_coco_vy:
	.res	8,$00
_brk_buff:
	.res	192,$00
_brkf:
	.res	16,$00
_brkx:
	.res	16,$00
_brky:
	.res	16,$00
_pmayneedrelocation:
	.res	1,$00
_hyx:
	.res	30,$00
_ht:
	.res	30,$00
_hact:
	.res	30,$00
_flags:
	.res	2,$00
_en_t:
	.res	3,$00
_en_x:
	.res	3,$00
_en_y:
	.res	3,$00
_en_x1:
	.res	3,$00
_en_y1:
	.res	3,$00
_en_x2:
	.res	3,$00
_en_y2:
	.res	3,$00
_en_mx:
	.res	3,$00
_en_my:
	.res	3,$00
_en_s:
	.res	3,$00
_en_facing:
	.res	3,$00
_en_state:
	.res	3,$00
_en_spr_x_mod:
	.res	1,$00
_enf_x:
	.res	6,$00
_enf_vx:
	.res	6,$00
_enf_y:
	.res	6,$00
_enf_vy:
	.res	6,$00
_en_spr_id:
	.res	3,$00
_en_invincible:
	.res	3,$00
_cfx:
	.res	1,$00
_timer:
	.res	1,$00
_otimer:
	.res	1,$00
_timer_frames:
	.res	1,$00
_timer_zero:
	.res	1,$00
_timer_on:
	.res	1,$00
_tile_got:
	.res	24,$00
_ring_x:
	.res	2,$00
_ring_y:
	.res	2,$00
_ring_vx:
	.res	2,$00
_ring_vy:
	.res	2,$00
_ring_timer:
	.res	1,$00
_prings:
	.res	1,$00
_oprings:
	.res	1,$00
_pemmeralds:
	.res	1,$00
_level_world:
	.res	1,$00
_level_act:
	.res	1,$00
_water_strip:
	.res	1,$00
_underwater:
	.res	1,$00
_bubble_x:
	.res	1,$00
_bubble_y:
	.res	1,$00
_toggle_switch:
	.res	1,$00
_toggle_timer:
	.res	1,$00
_elec_state:
	.res	1,$00
_elec_state_ct:
	.res	1,$00
_somari_state:
	.res	1,$00
_somari_ct:
	.res	1,$00
_somari_life:
	.res	1,$00
_free_play:
	.res	1,$00
_select_level:
	.res	1,$00
_pdying:
	.res	1,$00
_gp_func:
	.res	2,$00
_bridge_idx:
	.res	1,$00
_bridge_x:
	.res	4,$00
_bridge_y:
	.res	4,$00
_bridge_f:
	.res	4,$00
_pal_cycle:
	.res	3,$00
_attr_table:
	.res	64,$00

; ---------------------------------------------------------------
; void __near__ player_render (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_render: near

.segment	"CODE"

;
; if (0 == pflickering || half_life) 
;
	lda     _pflickering
	beq     L1B76
	lda     _half_life
	bne     L1B76
	rts
;
; prx, pry + SPRITE_ADJUST, 
;
L1B76:	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L297B
	sec
L297B:	sbc     #$10
	bcs     L297C
	sec
L297C:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_player [psprid]
;
	ldx     #$00
	lda     _psprid
	asl     a
	bcc     L297D
	inx
	clc
L297D:	adc     #<(_spr_player)
;
; );
;
	sta     ptr1
;
; spr_player [psprid]
;
	txa
	adc     #>(_spr_player)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ do_extern_action (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_extern_action: near

.segment	"CODE"

;
; if (n < 2) {
;
	ldy     #$00
	lda     (sp),y
	cmp     #$02
	jcs     incsp1
;
; rdb = n + 1;
;
	lda     (sp),y
	clc
	adc     #$01
	sta     _rdb
;
; if (0 == en_ct [rdb] || en_flags [rdb]) {
;
	ldy     _rdb
	lda     _en_ct,y
	beq     L23E7
	ldy     _rdb
	lda     _en_flags,y
	jeq     incsp1
;
; en_x [rdb] = en_x1 [rdb]; en_y [rdb] = en_y1 [rdb];
;
L23E7:	lda     #<(_en_x)
	ldx     #>(_en_x)
	clc
	adc     _rdb
	bcc     L23EF
	inx
L23EF:	sta     ptr1
	stx     ptr1+1
	ldy     _rdb
	lda     _en_x1,y
	ldy     #$00
	sta     (ptr1),y
	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _rdb
	bcc     L23F5
	inx
L23F5:	sta     ptr1
	stx     ptr1+1
	ldy     _rdb
	lda     _en_y1,y
	ldy     #$00
	sta     (ptr1),y
;
; en_ct [rdb] = 250;
;
	ldy     _rdb
	lda     #$FA
	sta     _en_ct,y
;
; en_flags [rdb] = 0;
;
	ldy     _rdb
	lda     #$00
	sta     _en_flags,y
;
; en_life [rdb] = 1;
;
	ldy     _rdb
	lda     #$01
	sta     _en_life,y
;
; en_t [rdb] = 13;
;
	ldy     _rdb
	lda     #$0D
	sta     _en_t,y
;
; enf_x [rdb] = en_x [rdb] << 6;
;
	ldx     #$00
	lda     _rdb
	asl     a
	bcc     L2985
	inx
	clc
L2985:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldy     _rdb
	ldx     #$00
	lda     _en_x,y
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_y [rdb]= en_y [rdb] << 6;
;
	ldx     #$00
	lda     _rdb
	asl     a
	bcc     L2986
	inx
	clc
L2986:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	ldy     _rdb
	ldx     #$00
	lda     _en_y,y
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_vy [rdb] = 0; 
;
	ldx     #$00
	lda     _rdb
	asl     a
	bcc     L2987
	inx
	clc
L2987:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; enf_vx [rdb] = ADD_SIGN2 (en_x2 [rdb], en_x1 [rdb], en_mx [rdb]) << FIXBITS;
;
	tax
	lda     _rdb
	asl     a
	bcc     L2988
	inx
	clc
L2988:	adc     #<(_enf_vx)
	tay
	txa
	adc     #>(_enf_vx)
	tax
	tya
	jsr     pushax
	ldy     _rdb
	ldx     #$00
	lda     _en_x2,y
	sta     ptr1
	stx     ptr1+1
	ldy     _rdb
	lda     _en_x1,y
	cpx     ptr1+1
	bne     L2420
	cmp     ptr1
	bne     L2420
	txa
	jmp     L2423
L2420:	ldy     _rdb
	lda     _en_x2,y
	jsr     pusha0
	ldy     _rdb
	lda     _en_x1,y
	jsr     tosicmp0
	bcc     L242D
	beq     L242D
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _rdb
	bcc     L2431
	inx
L2431:	ldy     #$00
	jsr     ldaidx
L2438:	ldx     #$00
	cmp     #$80
	bcc     L2432
	jmp     L2984
L242D:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _rdb
	bcc     L2437
	inx
L2437:	ldy     #$00
	jsr     ldaidx
	jsr     negax
	cmp     #$80
	bcc     L2438
L2984:	ldx     #$FF
L2432:	jsr     aslax4
	jsr     aslax2
L2423:	ldy     #$00
	jsr     staxspidx
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for (fader = 4; fader > -1; -- fader) {
;
	lda     #$04
	sta     _fader
L15E0:	ldx     _fader
	bmi     L15E1
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 4; fader > -1; -- fader) {
;
	dec     _fader
	lda     _fader
	bpl     L15E0
	jmp     L15E0
;
; }
;
L15E1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for (fader = 0; fader < 5; ++ fader) {
;
	lda     #$00
	sta     _fader
L15EF:	lda     _fader
	sec
	sbc     #$05
	bvc     L15F7
	eor     #$80
L15F7:	bpl     L15F0
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 0; fader < 5; ++ fader) {
;
	inc     _fader
	lda     _fader
	bpl     L15EF
	jmp     L15EF
;
; }
;
L15F0:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clear_update_list (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_update_list: near

.segment	"CODE"

;
; memfill (update_list, 0, UPDATE_LIST_SIZE*3);
;
	jsr     decsp3
	lda     #<(_update_list)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_update_list)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$60
	jsr     _memfill
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; vram_adr(0x2000); vram_fill(0x00,0x400);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ ul_putc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_putc: near

.segment	"CODE"

;
; update_list [update_index++] = MSB (gp_addr);
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	sta     ptr1
	lda     #$00
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _gp_addr+1
	ldy     #$00
	sta     (ptr1),y
;
; update_list [update_index++] = LSB (gp_addr++);
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	tay
	lda     #$00
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	clc
	adc     #$01
	bcc     L1618
	inx
L1618:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldy     #$00
	jsr     staspidx
;
; update_list [update_index++] = _n;
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	sta     ptr1
	lda     #$00
	adc     #>(_update_list)
	sta     ptr1+1
	lda     __n
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ p_t (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t: near

.segment	"CODE"

;
; gp_addr = (_y << 5) + _x + 0x2000;
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L2989
	inx
L2989:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; __asm__ ("lda %v", _n);
;
	lda     __n
;
; __asm__ ("ldx #$ff");
;
	ldx     #$ff
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("inx");
;
L1623:	inx
;
; __asm__ ("sbc #10");
;
	sbc     #10
;
; __asm__ ("bcs %g", p_t_loop);
;
	bcs     L1623
;
; __asm__ ("adc #10");
;
	adc     #10
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("stx %v", _n);
;
	stx     __n
;
; _n += 16;      ul_putc ();
;
	lda     #$10
	clc
	adc     __n
	sta     __n
	jsr     _ul_putc
;
; _n = rda + 16; ul_putc ();
;
	lda     _rda
	clc
	adc     #$10
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ upd_attr_table (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_upd_attr_table: near

.segment	"CODE"

;
; rdc = (_x >> 2) + ((_y >> 2) << 3);
;
	ldx     #$00
	lda     __x
	jsr     asrax2
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __y
	jsr     asrax2
	jsr     aslax3
	clc
	adc     ptr1
	sta     _rdc
	txa
	adc     ptr1+1
;
; rdb = ((_x >> 1) & 1) + (((_y >> 1) & 1) << 1);
;
	ldx     #$00
	lda     __x
	jsr     asrax1
	and     #$01
	sta     ptr1
	ldx     #$00
	lda     __y
	jsr     asrax1
	and     #$01
	asl     a
	bcc     L298D
	clc
L298D:	adc     ptr1
	sta     _rdb
;
; rda = attr_table [rdc];
;
	ldy     _rdc
	lda     _attr_table,y
	sta     _rda
;
; rda = (rda & bitmasks [rdb]) | (c_ts_pals [_t] << (rdb << 1));
;
	ldy     _rdb
	lda     _bitmasks,y
	and     _rda
	jsr     pusha0
	lda     _c_ts_pals
	ldx     _c_ts_pals+1
	ldy     __t
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	jsr     pusha0
	lda     _rdb
	asl     a
	jsr     tosaslax
	jsr     tosorax
	sta     _rda
;
; attr_table [rdc] = rda;
;
	ldy     _rdc
	lda     _rda
	sta     _attr_table,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + 0x2000);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L298E
	inx
L298E:	pha
	txa
	clc
	adc     #$20
	tax
	pla
	sta     _gp_addr
	stx     _gp_addr+1
;
; vram_adr (gp_addr++);
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L165E
	inx
L165E:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; SET_FROM_PTR (_z, gp_tmap); gp_tmap ++; vram_put (_z);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __z
	lda     _gp_tmap
	ldx     _gp_tmap+1
	clc
	adc     #$01
	bcc     L1663
	inx
L1663:	sta     _gp_tmap
	stx     _gp_tmap+1
	lda     __z
	jsr     _vram_put
;
; SET_FROM_PTR (_z, gp_tmap); gp_tmap ++; vram_put (_z);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __z
	lda     _gp_tmap
	ldx     _gp_tmap+1
	clc
	adc     #$01
	bcc     L166A
	inx
L166A:	sta     _gp_tmap
	stx     _gp_tmap+1
	lda     __z
	jsr     _vram_put
;
; gp_addr += 31;
;
	lda     #$1F
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L166F
	inc     _gp_addr+1
;
; vram_adr (gp_addr++);
;
L166F:	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1672
	inx
L1672:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; SET_FROM_PTR (_z, gp_tmap); gp_tmap ++; vram_put (_z);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __z
	lda     _gp_tmap
	ldx     _gp_tmap+1
	clc
	adc     #$01
	bcc     L1677
	inx
L1677:	sta     _gp_tmap
	stx     _gp_tmap+1
	lda     __z
	jsr     _vram_put
;
; SET_FROM_PTR (_z, gp_tmap);             vram_put (_z);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __z
	jmp     _vram_put

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_addr = 0x23c0 + rdc;
;
	lda     _rdc
	clc
	adc     #$C0
	sta     _gp_addr
	lda     #$00
	adc     #$23
	sta     _gp_addr+1
;
; _n = rda; ul_putc ();
;
	lda     _rda
	sta     __n
	jsr     _ul_putc
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + 0x2000);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L298F
	inx
L298F:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; SET_FROM_PTR (_n, gp_tmap); gp_tmap ++; ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	lda     _gp_tmap
	ldx     _gp_tmap+1
	clc
	adc     #$01
	bcc     L1691
	inx
L1691:	sta     _gp_tmap
	stx     _gp_tmap+1
	jsr     _ul_putc
;
; SET_FROM_PTR (_n, gp_tmap); gp_tmap ++; ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	lda     _gp_tmap
	ldx     _gp_tmap+1
	clc
	adc     #$01
	bcc     L1697
	inx
L1697:	sta     _gp_tmap
	stx     _gp_tmap+1
	jsr     _ul_putc
;
; gp_addr += 30;
;
	lda     #$1E
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L169B
	inc     _gp_addr+1
;
; SET_FROM_PTR (_n, gp_tmap); gp_tmap ++; ul_putc ();
;
L169B:	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	lda     _gp_tmap
	ldx     _gp_tmap+1
	clc
	adc     #$01
	bcc     L16A0
	inx
L16A0:	sta     _gp_tmap
	stx     _gp_tmap+1
	jsr     _ul_putc
;
; SET_FROM_PTR (_n, gp_tmap);             ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ map_set (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_map_set: near

.segment	"CODE"

;
; map_buff [COORDS (_x, _y)] = _t;
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	clc
	adc     #<(_map_buff)
	sta     ptr1
	txa
	adc     #>(_map_buff)
	sta     ptr1+1
	lda     __t
	ldy     #$00
	sta     (ptr1),y
;
; map_attr [COORDS (_x, _y)] = c_behs [_t];
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	clc
	adc     #<(_map_attr)
	tay
	txa
	adc     #>(_map_attr)
	tax
	tya
	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     __t
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; _x = _x << 1; _y = TOP_ADJUST + (_y << 1);
;
	lda     __x
	asl     a
	sta     __x
	lda     __y
	asl     a
	bcc     L2992
	clc
L2992:	adc     #$06
	sta     __y
;
; update_list_tile (); 
;
	jmp     _update_list_tile

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_byte: near

.segment	"CODE"

;
; -- rdit; return *gp_gen ++;
;
	dec     _rdit
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L16C0
	inx
L16C0:	sta     _gp_gen
	stx     _gp_gen+1
	ldx     #$00
	lda     (regsave,x)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_tile: near

.segment	"CODE"

;
; map_buff [rdm] = rda;
;
	ldy     _rdm
	lda     _rda
	sta     _map_buff,y
;
; ++ rdm;
;
	inc     _rdm
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_scr: near

.segment	"CODE"

;
; rdm = 0;
;
	lda     #$00
	sta     _rdm
;
; bankswitch (c_map_chr_rom_bank);
;
	lda     _c_map_chr_rom_bank
	jsr     _bankswitch
;
; vram_adr (c_map [n_pant]);
;
	ldx     #$00
	lda     _n_pant
	asl     a
	bcc     L29A0
	inx
	clc
L29A0:	adc     _c_map
	sta     ptr1
	txa
	adc     _c_map+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _vram_adr
;
; rdt = VRAM_READ;  // Dummy read.
;
	lda     $2007
	sta     _rdt
;
; while (rdm < 192) {
;
L16D4:	lda     _rdm
	cmp     #$C0
	bcs     L16D5
;
; rdt = VRAM_READ;
;
	lda     $2007
	sta     _rdt
;
; rda = rdt & 0x0f;
;
	and     #$0F
	sta     _rda
;
; rdct = rdt;
;
	lda     _rdt
L299D:	sta     _rdct
;
; while (rdct >= 16) {
;
	cmp     #$10
	bcc     L16E1
;
; add_tile (); rdct -= 16;
;
	jsr     _add_tile
	lda     _rdct
	sec
	sbc     #$10
;
; } add_tile ();
;
	jmp     L299D
L16E1:	jsr     _add_tile
;
; }
;
	jmp     L16D4
;
; set_rand (n_pant + 1 + level + level);
;
L16D5:	ldx     #$00
	lda     _n_pant
	clc
	adc     #$01
	bcc     L29A1
	inx
	clc
L29A1:	adc     _level
	bcc     L29A2
	inx
	clc
L29A2:	adc     _level
	bcc     L2994
	inx
L2994:	jsr     _set_rand
;
; switch (level_world) {
;
	lda     _level_world
;
; }
;
	beq     L16F3
	cmp     #$01
	beq     L16EE
	cmp     #$02
	jeq     L176B
	cmp     #$03
	jeq     L176B
	cmp     #$04
	jeq     L1765
	cmp     #$05
	jeq     L1722
	jmp     L16EC
;
; if (level != 3 || n_pant > 14) {
;
L16EE:	lda     _level
	cmp     #$03
	bne     L16F0
	lda     _n_pant
	cmp     #$0F
	bcc     L16F3
;
; for (gpit = 176; gpit < 192; gpit ++) map_buff [gpit] = 18;
;
L16F0:	lda     #$B0
L29A5:	sta     _gpit
	cmp     #$C0
	bcs     L16F3
	ldy     _gpit
	lda     #$12
	sta     _map_buff,y
	lda     _gpit
	clc
	adc     #$01
	jmp     L29A5
;
; gpit = 5; while (gpit --) {
;
L16F3:	lda     #$05
	sta     _gpit
L1702:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	jeq     L16EC
;
; gpjt = 4; while (gpjt --) {
;
	lda     #$04
	sta     _gpjt
L1707:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	beq     L1702
;
; rdx = rand8 () & 0xf;
;
	jsr     _rand8
	and     #$0F
	sta     _rdx
;
; rdy = rand8 () & 0xf;
;
	jsr     _rand8
	and     #$0F
	sta     _rdy
;
; rda = (rdy << 4) | rdx;
;
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	sta     ptr1
	ldx     #$00
	lda     _rdx
	ora     ptr1
	sta     _rda
;
; if (map_buff [rda] == 0 && map_buff [rda + 1] == 0 && rdy < 12) {
;
	ldy     _rda
	lda     _map_buff,y
	bne     L1707
	lda     _rda
	clc
	adc     #$01
	bcc     L1717
	inx
L1717:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	bne     L1707
	lda     _rdy
	cmp     #$0C
	bcs     L1707
;
; map_buff [rda] = 16;
;
	ldy     _rda
	lda     #$10
	sta     _map_buff,y
;
; map_buff [rda + 1] = 17;
;
	ldx     #$00
	lda     _rda
	clc
	adc     #$01
	bcc     L29A3
	inx
	clc
L29A3:	adc     #<(_map_buff)
	sta     ptr1
	txa
	adc     #>(_map_buff)
	sta     ptr1+1
	lda     #$11
	ldy     #$00
	sta     (ptr1),y
;
; break;
;
	jmp     L1702
;
; if (level_act < 2) {
;
L1722:	lda     _level_act
	cmp     #$02
	jcs     L1765
;
; for (gpit = 0; gpit < 192; gpit ++) {
;
	lda     #$00
L29A7:	sta     _gpit
	cmp     #$C0
	jcs     L16EC
;
; rdt = map_buff [gpit];
;
	ldy     _gpit
	lda     _map_buff,y
	sta     _rdt
;
; switch (level_act) {
;
	lda     _level_act
;
; }
;
	beq     L1735
	cmp     #$01
	beq     L1748
	cmp     #$02
	beq     L1733
	jmp     L1733
;
; if (rdt == 0) rdt = level5_bg [gpit]; 
;
L1735:	lda     _rdt
	bne     L1736
	ldy     _gpit
	lda     _level5_bg,y
;
; else {
;
	jmp     L29A6
;
; if ((rdt == 8 || rdt == 10) && map_buff [gpit - 1] == rdt) rdt += 17;
;
L1736:	lda     _rdt
	cmp     #$08
	beq     L1756
	lda     _rdt
	cmp     #$0A
;
; break;
;
	jmp     L29B9
;
; if (rdt == 0) {
;
L1748:	lda     _rdt
	bne     L1749
;
; if (n_pant > 5 && n_pant != 16) rdt = level5_bg [gpit]; 
;
	lda     _n_pant
	cmp     #$06
	bcc     L1733
	lda     _n_pant
	cmp     #$10
	beq     L1733
	ldy     _gpit
	lda     _level5_bg,y
;
; } else {
;
	jmp     L29A6
;
; if ((rdt == 5 || rdt == 7) && map_buff [gpit - 1] == rdt) rdt += 17;
;
L1749:	lda     _rdt
	cmp     #$05
	beq     L1756
	lda     _rdt
	cmp     #$07
L29B9:	bne     L1733
L1756:	ldx     #$00
	lda     _gpit
	sec
	sbc     #$01
	bcs     L175A
	dex
L175A:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	cmp     _rdt
	bne     L1733
	lda     #$11
	clc
	adc     _rdt
L29A6:	sta     _rdt
;
; map_buff [gpit] = rdt;
;
L1733:	ldy     _gpit
	lda     _rdt
	sta     _map_buff,y
;
; for (gpit = 0; gpit < 192; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L29A7
;
; rdc = (map_buff [0] != 4); // Cheap way to distinguish between outside / inside
;
L1765:	lda     _map_buff
	cmp     #$04
	jsr     boolne
	sta     _rdc
;
; for (gpit = 0; gpit < 192; gpit ++) {
;
L176B:	lda     #$00
L29A8:	sta     _gpit
	cmp     #$C0
	jcs     L16EC
;
; rdt = map_buff [gpit];
;
	ldy     _gpit
	lda     _map_buff,y
	sta     _rdt
;
; rdb = rand8 ();
;
	jsr     _rand8
	sta     _rdb
;
; if (level_world == 2) {
;
	lda     _level_world
	cmp     #$02
	jne     L177C
;
; if (gpit > 16) {
;
	lda     _gpit
	cmp     #$11
	bcc     L1797
;
; rda = map_buff [gpit - 16];
;
	ldx     #$00
	lda     _gpit
	sec
	sbc     #$10
	bcs     L1783
	dex
L1783:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	sta     _rda
;
; if (rdt == 8) {
;
	lda     _rdt
	cmp     #$08
	bne     L1784
;
; if (rda == 4) rdt = 16;
;
	lda     _rda
	cmp     #$04
	bne     L1786
	lda     #$10
;
; else if (rda == 6) rdt = 17;
;
	jmp     L299E
L1786:	lda     _rda
	cmp     #$06
	bne     L1797
	lda     #$11
;
; } else if (rdt == 10 && rda == 13) rdt = 20;
;
	jmp     L299E
L1784:	lda     _rdt
	cmp     #$0A
	bne     L1790
	lda     _rda
	cmp     #$0D
	bne     L1790
	lda     #$14
;
; else if (rdt == 2 && rda != 2 && rda != 19) rdt = 3;
;
	jmp     L299E
L1790:	lda     _rdt
	cmp     #$02
	bne     L1797
	lda     _rda
	cmp     #$02
	beq     L1797
	lda     _rda
	cmp     #$13
	beq     L1797
	lda     #$03
L299E:	sta     _rdt
;
; if (gpit < 176) {
;
L1797:	lda     _gpit
	cmp     #$B0
	jcs     L17E3
;
; rda = map_buff [gpit + 16];
;
	ldx     #$00
	lda     _gpit
	clc
	adc     #$10
	bcc     L17A2
	inx
L17A2:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	sta     _rda
;
; if (rdt == 0 && rda == 2) rdt = 19;
;
	lda     _rdt
	bne     L17A3
	lda     _rda
	cmp     #$02
	bne     L17A3
	lda     #$13
;
; else if (rdt == 2 && rda != 2) rdt = 18;
;
	jmp     L299C
L17A3:	lda     _rdt
	cmp     #$02
	jne     L17E3
	lda     _rda
	cmp     #$02
	jeq     L17E3
	lda     #$12
;
; } else {    
;
	jmp     L299C
;
; if (level_world == 3) {
;
L177C:	lda     _level_world
	cmp     #$03
	bne     L17B1
;
; if (rdt == 1) rdt = 16 + (rdb & 3);
;
	lda     _rdt
	cmp     #$01
	jne     L17DB
	lda     _rdb
	and     #$03
	clc
	adc     #$10
	jcc     L299F
;
; } else {
;
	jmp     L299F
;
; if (rdt == 1 || rdt == 3) {
;
L17B1:	lda     _rdt
	cmp     #$01
	beq     L17BB
	lda     _rdt
	cmp     #$03
	bne     L17CE
;
; rda = map_buff [gpit - 1];
;
L17BB:	ldx     #$00
	lda     _gpit
	sec
	sbc     #$01
	bcs     L17C0
	dex
L17C0:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	sta     _rda
;
; if (rda != rdt && rda != rdt + 16) rdt = rdt + 16;
;
	lda     _rdt
	cmp     _rda
	beq     L17C1
	ldx     #$00
	lda     _rdt
	clc
	adc     #$10
	bcc     L17C4
	inx
L17C4:	cpx     #$00
	bne     L17C2
	cmp     _rda
	beq     L17C1
L17C2:	lda     _rdt
	clc
	adc     #$10
	bcc     L17D2
;
; else {
;
	jmp     L17D2
;
; rda = map_buff [gpit + 1];
;
L17C1:	ldx     #$00
	lda     _gpit
	clc
	adc     #$01
	bcc     L17CD
	inx
L17CD:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	sta     _rda
;
; if (rda != rdt) rdt = rdt + 17;
;
	lda     _rdt
	cmp     _rda
	beq     L17CE
	lda     _rdt
	clc
	adc     #$11
L17D2:	sta     _rdt
;
; if (level_act == 1) {
;
L17CE:	lda     _level_act
	cmp     #$01
	bne     L17DB
;
; if (rdt == 2 && toggle_switch == 0) rdt = 0;
;
	lda     _rdt
	cmp     #$02
	bne     L17D5
	lda     _toggle_switch
	bne     L17D5
	sta     _rdt
;
; if (rdt == 4 && toggle_switch) rdt = 0;
;
L17D5:	lda     _rdt
	cmp     #$04
	bne     L17DB
	lda     _toggle_switch
	beq     L17DB
	lda     #$00
L299F:	sta     _rdt
;
; switch (rdt) {     
;
L17DB:	lda     _rdt
;
; }
;
	cmp     #$08
	beq     L17E5
	cmp     #$0C
	bne     L17E3
;
; rdt = 16 + rdt + (gpit & 1) + ((gpit >> 3) & 2);
;
L17E5:	lda     _rdt
	clc
	adc     #$10
	sta     ptr1
	lda     _gpit
	and     #$01
	clc
	adc     ptr1
	sta     ptr1
	ldx     #$00
	lda     _gpit
	jsr     asrax3
	and     #$02
	clc
	adc     ptr1
L299C:	sta     _rdt
;
; if (rdt == 0 && (rdb & 7) == 1 && (rdc || level_world < 4)) rdt = 21;
;
L17E3:	lda     _rdt
	bne     L17EE
	lda     _rdb
	and     #$07
	cmp     #$01
	bne     L17EE
	lda     _rdc
	bne     L17EF
	lda     _level_world
	cmp     #$04
	bcs     L17EE
L17EF:	lda     #$15
	sta     _rdt
;
; map_buff [gpit] = rdt;
;
L17EE:	ldy     _gpit
	lda     _rdt
	sta     _map_buff,y
;
; for (gpit = 0; gpit < 192; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L29A8
;
; rdd = 0;
;
L16EC:	lda     #$00
	sta     _rdd
;
; _x = 0; _y = TOP_ADJUST; gp_ram = map_buff;
;
	sta     __x
	lda     #$06
	sta     __y
	lda     #<(_map_buff)
	sta     _gp_ram
	lda     #>(_map_buff)
	sta     _gp_ram+1
;
; for (rdm = 0; rdm < 192; ++ rdm) {
;
	lda     #$00
	sta     _rdm
L1804:	lda     _rdm
	cmp     #$C0
	jcs     L1805
;
; SET_FROM_PTR (rdt, gp_ram); ++ gp_ram;
;
	ldy     #0
	lda     (_gp_ram),y
	sta     _rdt
	inc     _gp_ram
	bne     L1810
	inc     _gp_ram+1
;
; if (tile_got [rdd] & bits [rdm & 7]) rdt = 0;
;
L1810:	ldy     _rdd
	lda     _tile_got,y
	sta     sreg
	lda     _rdm
	and     #$07
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bits)
	sta     ptr1+1
	ldy     #<(_bits)
	lda     (ptr1),y
	and     sreg
	pha
	pla
	beq     L1811
	lda     #$00
	sta     _rdt
;
; if ((rdm & 7) == 7) ++ rdd;
;
L1811:	lda     _rdm
	and     #$07
	cmp     #$07
	bne     L1818
	inc     _rdd
;
; map_attr [rdm] = c_behs [rdt];
;
L1818:	lda     #<(_map_attr)
	ldx     #>(_map_attr)
	clc
	adc     _rdm
	bcc     L181F
	inx
L181F:	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     _rdt
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; brk_buff [rdm] = 1;
;
	ldy     _rdm
	lda     #$01
	sta     _brk_buff,y
;
; _t = rdt; draw_tile ();
;
	lda     _rdt
	sta     __t
	jsr     _draw_tile
;
; _x = (_x + 2) & 0x1f; if (!_x) _y += 2;
;
	lda     __x
	clc
	adc     #$02
	and     #$1F
	sta     __x
	lda     __x
	bne     L1806
	lda     #$02
	clc
	adc     __y
	sta     __y
;
; for (rdm = 0; rdm < 192; ++ rdm) {
;
L1806:	inc     _rdm
	jmp     L1804
;
; vram_write (attr_table, 0x23c0, 64);
;
L1805:	jsr     decsp4
	lda     #<(_attr_table)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_attr_table)
	sta     (sp),y
	lda     #$C0
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$23
	sta     (sp),y
	ldx     #$00
	lda     #$40
	jmp     _vram_write

.endproc

; ---------------------------------------------------------------
; void __near__ pr_str (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pr_str: near

.segment	"CODE"

;
; vram_adr (((_y << 5) | _x) + 0x2000);
;
L29C9:	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     __x
	ora     ptr1
	pha
	lda     tmp1
	clc
	adc     #$20
	tax
	pla
	jsr     _vram_adr
;
; while (gpit = *s++) {
;
L183A:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L183E
	inx
L183E:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     _gpit
	tax
	jeq     incsp2
;
; if (gpit == '%') {
;
	lda     _gpit
	cmp     #$25
	bne     L183F
;
; ++ _y; vram_adr (((_y << 5) | _x) + 0x2000);
;
	inc     __y
;
; else vram_put (gpit - 32); 
;
	jmp     L29C9
L183F:	lda     _gpit
	sec
	sbc     #$20
	jsr     _vram_put
;
; }
;
	jmp     L183A

.endproc

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; if (cy1 > 12 || cy2 > 12) { at1 = at2 = 0; return; }
;
	lda     _cy1
	cmp     #$0D
	bcs     L184C
	lda     _cy2
	cmp     #$0D
	bcc     L184B
L184C:	lda     #$00
	sta     _at2
	sta     _at1
	rts
;
; at1 = map_attr [COORDS (cx1, cy1 ? cy1 - 1 : 0)];
;
L184B:	lda     _cy1
	beq     L1858
	ldx     #$00
	lda     _cy1
	sec
	sbc     #$01
	bcs     L185B
	dex
	jmp     L185B
L1858:	tax
L185B:	jsr     shlax4
	ora     _cx1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at1
;
; at2 = map_attr [COORDS (cx2, cy2 ? cy2 - 1 : 0)];
;
	lda     _cy2
	beq     L1864
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L1867
	dex
	jmp     L1867
L1864:	tax
L1867:	jsr     shlax4
	ora     _cx2
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide_in (int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide_in: near

.segment	"CODE"

;
; return (x0 >= x1 && x0 <= x1 + 15 && y0 >= y1 && y0 <= y1 + 15); 
;
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L186C
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0F
	bcc     L186D
	inx
L186D:	jsr     tosicmp
	beq     L29CA
	bpl     L186C
L29CA:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L186C
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0F
	bcc     L186E
	inx
L186E:	jsr     tosicmp
	bmi     L186B
	beq     L186B
L186C:	ldx     #$00
	txa
	jmp     incsp8
L186B:	ldx     #$00
	lda     #$01
;
; }
;
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide: near

.segment	"CODE"

;
; prx + 3 >= _en_x && 
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$03
	bcc     L1873
	inx
L1873:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L1874
;
; prx <= _en_x + 11 && 
;
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0B
	bcc     L1875
	ldx     #$01
L1875:	jsr     tosicmp
	beq     L29CC
	bcs     L1874
;
; pry + 13 + ENEMS_COLLISION_VSTRETCH_FG >= _en_y &&
;
L29CC:	ldx     #$00
	lda     _pry
	clc
	adc     #$0D
	bcc     L1876
	inx
L1876:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L1874
;
; pry <= _en_y + 13 + PLAYER_COLLISION_VSTRETCH_FG
;
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$0D
	bcc     L29CB
	ldx     #$01
;
; );
;
	clc
L29CB:	adc     #$FC
	pha
	txa
	adc     #$FF
	tax
	pla
	jsr     tosicmp
	bcc     L1872
	beq     L1872
L1874:	ldx     #$00
	txa
	rts
L1872:	ldx     #$00
	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ add_sign (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_sign: near

.segment	"CODE"

;
; return sign == 0 ? 0 : sign < 0 ? -value : value;
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L187C
	cmp     #$00
	jeq     incsp4
L187C:	iny
	lda     (sp),y
	tax
	cpx     #$80
	bcc     L1880
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L1880:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ saturate (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_saturate: near

.segment	"CODE"

;
; return v >= 0 ? (v > max ? max : v) : (v < -max ? -max : v);
;
	ldy     #$03
	lda     (sp),y
	bmi     L1886
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L1890
	beq     L1890
	ldy     #$01
	jmp     L29D3
L1886:	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jsr     tosicmp
	bpl     L1890
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L1890:	ldy     #$03
L29D3:	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ pad_read (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pad_read: near

.segment	"CODE"

;
; pad_this_frame = pad0;
;
	lda     _pad0
	sta     _pad_this_frame
;
; pad0 = pad_poll (0);   // Read pads here.
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad0
;
; pad_this_frame = (pad_this_frame ^ pad0) & pad0;
;
	eor     _pad_this_frame
	sta     ptr1
	lda     _pad0
	and     ptr1
	sta     _pad_this_frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ distance (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_distance: near

.segment	"CODE"

;
; rda = DELTA (prx, rdx); // dx
;
	ldx     #$00
	lda     _prx
	cmp     _rdx
	bcs     L18A3
	lda     _rdx
	sec
	sbc     _prx
	jmp     L29DA
L18A3:	lda     _prx
	sec
	sbc     _rdx
L29DA:	sta     _rda
;
; rdb = DELTA (pry, rdy); // dy
;
	lda     _pry
	cmp     _rdy
	bcs     L18B0
	lda     _rdy
	sec
	sbc     _pry
	jmp     L29DB
L18B0:	lda     _pry
	sec
	sbc     _rdy
L29DB:	sta     _rdb
;
; rdc = MIN (rda, rdb);
;
	lda     _rda
	cmp     _rdb
	bcs     L18BD
	lda     _rda
	jmp     L29D7
L18BD:	lda     _rdb
L29D7:	sta     _rdc
;
; return (rda + rdb - (rdc >> 1) - (rdc >> 2) + (rdc >> 4));
;
	lda     _rda
	clc
	adc     _rdb
	bcc     L29D4
	inx
L29D4:	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax1
	jsr     tossubax
	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax2
	jsr     tossubax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rdc
	jsr     asrax4
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ jump_start (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_jump_start: near

.segment	"CODE"

;
; pj = 1; pctj = 0; 
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
;
; if (ptrampoline) {
;
	lda     _ptrampoline
	beq     L18CD
;
; sfx_play (SFX_TRAMPOLINE, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pvy = -PLAYER_VY_MK2_JUMP_INITIAL_TRAMPOLINE;
;
	ldx     #$FE
	lda     #$D8
;
; } else
;
	jmp     L29DD
;
; sfx_play (SFX_JUMP, 0);
;
L18CD:	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pvy = -PLAYER_VY_MK2_JUMP_INITIAL;
;
	ldx     #$FF
	lda     #$20
L29DD:	sta     _pvy
	stx     _pvy+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_cycle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_cycle: near

.segment	"CODE"

;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ring_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ring_create: near

.segment	"CODE"

;
; if (!ring_timer) {
;
	lda     _ring_timer
	bne     L18E2
;
; ring_x = px;
;
	lda     _px
	sta     _ring_x
	lda     _px+1
	sta     _ring_x+1
;
; ring_y = py;
;
	lda     _py
	sta     _ring_y
	lda     _py+1
	sta     _ring_y+1
;
; ring_vy = -384;
;
	ldx     #$FE
	lda     #$80
	sta     _ring_vy
	stx     _ring_vy+1
;
; ring_vx = pvx >> 2;
;
	lda     _pvx
	ldx     _pvx+1
	jsr     asrax2
	sta     _ring_vx
	stx     _ring_vx+1
;
; ring_timer = RING_TIMER_CREATE;
;
	lda     #$B4
	sta     _ring_timer
;
; prings = 0;
;
L18E2:	lda     #$00
	sta     _prings
;
; pbouncing = 16;
;
	lda     #$10
	sta     _pbouncing
;
; pflickering = 100;
;
	lda     #$64
	sta     _pflickering
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ring_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ring_do: near

.segment	"CODE"

;
; if (ring_timer) {
;
	lda     _ring_timer
	bne     L29E7
;
; }
;
	rts
;
; ring_timer --;
;
L29E7:	lda     _ring_timer
	sec
	sbc     #$01
	sta     _ring_timer
;
; ring_vy += PLAYER_G;
;
	lda     #$10
	clc
	adc     _ring_vy
	sta     _ring_vy
	bcc     L18FA
	inc     _ring_vy+1
;
; ring_y += ring_vy; if (ring_y < 0) ring_y = 0;
;
L18FA:	lda     _ring_vy
	clc
	adc     _ring_y
	sta     _ring_y
	lda     _ring_vy+1
	adc     _ring_y+1
	sta     _ring_y+1
	ldx     _ring_y+1
	cpx     #$80
	bcc     L18FD
	lda     #$00
	sta     _ring_y
	sta     _ring_y+1
;
; _en_y = ring_y >> FIXBITS;
;
L18FD:	lda     _ring_y
	ldx     _ring_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
;
; _en_x = 8 + (ring_x >> FIXBITS); cx1 = _en_x >> 4;
;
	lda     _ring_x
	ldx     _ring_x+1
	jsr     asrax4
	jsr     asrax2
	clc
	adc     #$08
	sta     __en_x
	ldx     #$00
	lda     __en_x
	jsr     asrax4
	sta     _cx1
;
; if (ring_vy > 0) {
;
	lda     _ring_vy
	cmp     #$01
	lda     _ring_vy+1
	sbc     #$00
	bvs     L190B
	eor     #$80
L190B:	bpl     L1909
;
; cy1 = (_en_y - 1); // _en_y + 15 - 16
;
	lda     __en_y
	sec
	sbc     #$01
	sta     _cy1
;
; if (map_attr [(cy1 & 0xf0) | cx1] & 13) {
;
	and     #$F0
	sta     ptr1
	lda     _cx1
	ora     ptr1
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	and     #$0D
	beq     L1922
;
; _en_y = cy1 & 0xf0; ring_vy = - ((ring_vy >> 1) + (ring_vy >> 2)) ;
;
	lda     _cy1
	and     #$F0
	sta     __en_y
	lda     _ring_vy
	ldx     _ring_vy+1
	jsr     asrax1
	sta     ptr1
	stx     ptr1+1
	lda     _ring_vy
	ldx     _ring_vy+1
	jsr     asrax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     negax
;
; } else if (ring_vy < 0) {
;
	jmp     L29E4
L1909:	ldx     _ring_vy+1
	cpx     #$80
	bcc     L1922
;
; cy1 = (_en_y - 16);
;
	lda     __en_y
	sec
	sbc     #$10
	sta     _cy1
;
; if (map_attr [(cy1 & 0xf0) | cx1] & 9) {
;
	and     #$F0
	sta     ptr1
	ldx     #$00
	lda     _cx1
	ora     ptr1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	and     #$09
	beq     L1922
;
; _en_y = 32 + (cy1 & 0xf0); ring_vy = 0;
;
	lda     _cy1
	and     #$F0
	clc
	adc     #$20
	sta     __en_y
	txa
L29E4:	sta     _ring_vy
	stx     _ring_vy+1
;
; ring_y = _en_y << FIXBITS;
;
L1922:	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     _ring_y
	stx     _ring_y+1
;
; if (ring_vx > 0) {
;
	lda     _ring_vx
	cmp     #$01
	lda     _ring_vx+1
	sbc     #$00
	bvs     L1930
	eor     #$80
L1930:	bpl     L192E
;
; ring_vx -= RING_A; if (ring_vx < 0) ring_vx = 0;
;
	lda     _ring_vx
	sec
	sbc     #$04
	sta     _ring_vx
	bcs     L1933
	dec     _ring_vx+1
L1933:	ldx     _ring_vx+1
	cpx     #$80
	bcc     L193E
;
; } else if (ring_vx < 0) {
;
	jmp     L29E6
L192E:	ldx     _ring_vx+1
	cpx     #$80
	bcc     L193E
;
; ring_vx += RING_A; if (ring_vx > 0) ring_vx = 0;
;
	lda     #$04
	clc
	adc     _ring_vx
	sta     _ring_vx
	bcc     L193D
	inc     _ring_vx+1
L193D:	lda     _ring_vx
	cmp     #$01
	lda     _ring_vx+1
	sbc     #$00
	bvs     L1940
	eor     #$80
L1940:	bpl     L193E
L29E6:	lda     #$00
	sta     _ring_vx
	sta     _ring_vx+1
;
; _en_x = ring_x >> FIXBITS;
;
L193E:	lda     _ring_x
	ldx     _ring_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; ring_x += ring_vx;
;
	lda     _ring_vx
	clc
	adc     _ring_x
	sta     _ring_x
	lda     _ring_vx+1
	adc     _ring_x+1
	sta     _ring_x+1
;
; if (ring_x < 0 || ring_x > 15360) {
;
	ldx     _ring_x+1
	cpx     #$80
	bcs     L1948
	lda     _ring_x
	cmp     #$01
	lda     _ring_x+1
	sbc     #$3C
	bvs     L1949
	eor     #$80
L1949:	bpl     L1947
;
; ring_timer = 0;
;
L1948:	lda     #$00
	sta     _ring_timer
;
; return;
;
	rts
;
; _en_y = (ring_y >> FIXBITS) - 16 + 15;
;
L1947:	lda     _ring_y
	ldx     _ring_y+1
	jsr     asrax4
	jsr     asrax2
	sec
	sbc     #$10
	clc
	adc     #$0F
	sta     __en_y
;
; cx1 = (ring_x >> FIXBITS) + 8;
;
	lda     _ring_x
	ldx     _ring_x+1
	jsr     asrax4
	jsr     asrax2
	clc
	adc     #$08
	sta     _cx1
;
; if (map_attr [(_en_y & 0xf0)|(cx1>>4)] & 8) {
;
	lda     __en_y
	and     #$F0
	sta     ptr1
	ldx     #$00
	lda     _cx1
	jsr     asrax4
	ora     ptr1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	and     #$08
	beq     L1956
;
; ring_x = _en_x << FIXBITS;
;
	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
	sta     _ring_x
	stx     _ring_x+1
;
; ring_vx = -ring_vx;
;
	lda     _ring_vx
	ldx     _ring_vx+1
	jsr     negax
	sta     _ring_vx
	stx     _ring_vx+1
;
; } else _en_x = ring_x >> FIXBITS;
;
	jmp     L195F
L1956:	lda     _ring_x
	ldx     _ring_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; if (ring_timer < RING_TIMER_GET && collide ()) {
;
L195F:	lda     _ring_timer
	cmp     #$82
	bcs     L1962
	jsr     _collide
	tax
	beq     L1962
;
; sfx_play (SFX_RING, 1);
;
	lda     #$12
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; prings = 1; ring_timer = 0; return;
;
	lda     #$01
	sta     _prings
	lda     #$00
	sta     _ring_timer
	rts
;
; if (ring_timer > 50 || half_life) oam_index = oam_meta_spr (
;
L1962:	lda     _ring_timer
	cmp     #$33
	bcs     L196E
	lda     _half_life
	bne     L196E
	rts
;
; _en_x, _en_y + SPRITE_ADJUST,
;
L196E:	jsr     decsp3
	lda     __en_x
	ldy     #$02
	sta     (sp),y
	lda     __en_y
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L29E1
	sec
L29E1:	sbc     #$10
	bcs     L29E2
	sec
L29E2:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_ring [(frame_counter >> 1) & 3]
;
	ldx     #$00
	lda     _frame_counter
	jsr     asrax1
	ldx     #$00
	and     #$03
	asl     a
	bcc     L29E3
	inx
	clc
L29E3:	adc     #<(_spr_ring)
;
; );
;
	sta     ptr1
;
; spr_ring [(frame_counter >> 1) & 3]
;
	txa
	adc     #>(_spr_ring)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ somari_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_somari_do: near

.segment	"CODE"

;
; switch (somari_state) {
;
	lda     _somari_state
;
; }
;
	beq     L1981
	cmp     #$01
	beq     L1988
	cmp     #$02
	beq     L1994
	jmp     L197F
;
; en_spr = 42 + ((frame_counter >> 3) & 3);
;
L1981:	tax
	lda     _frame_counter
	jsr     asrax3
	and     #$03
	clc
	adc     #$2A
	sta     _en_spr
;
; break;
;
	jmp     L197F
;
; __asm__ ("lda %v", half_life);
;
L1988:	lda     _half_life
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("ora #44");
;
	ora     #44
;
; __asm__ ("sta %v", en_spr);
;
	sta     _en_spr
;
; if (somari_ct) -- somari_ct; else somari_state = 0;
;
	lda     _somari_ct
	beq     L29E9
	dec     _somari_ct
	jmp     L197F
;
; en_spr = 46;
;
L1994:	lda     #$2E
	sta     _en_spr
;
; if (somari_ct) -- somari_ct; else somari_state = 3;
;
	lda     _somari_ct
	beq     L1997
	dec     _somari_ct
	jmp     L197F
L1997:	lda     #$03
L29E9:	sta     _somari_state
;
; 232, SPRITE_ADJUST + 128, 
;
L197F:	jsr     decsp3
	lda     #$E8
	ldy     #$02
	sta     (sp),y
	lda     #$93
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [en_spr]
;
	ldx     #$00
	lda     _en_spr
	asl     a
	bcc     L29EA
	inx
	clc
L29EA:	adc     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [en_spr]
;
	txa
	adc     _spr_enems+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bridge_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bridge_create: near

.segment	"CODE"

;
; ++ bridge_idx; bridge_idx = bridge_idx & 3;
;
	inc     _bridge_idx
	lda     _bridge_idx
	and     #$03
	sta     _bridge_idx
;
; bridge_x [bridge_idx] = _x << 4;
;
	lda     #<(_bridge_x)
	ldx     #>(_bridge_x)
	clc
	adc     _bridge_idx
	bcc     L19AA
	inx
L19AA:	sta     ptr1
	stx     ptr1+1
	lda     __x
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; bridge_y [bridge_idx] = (_y+1) << 4;
;
	lda     #<(_bridge_y)
	ldx     #>(_bridge_y)
	clc
	adc     _bridge_idx
	bcc     L19AE
	inx
L19AE:	sta     ptr1
	stx     ptr1+1
	lda     __y
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; bridge_f [bridge_idx] = 1;
;
	ldy     _bridge_idx
	lda     #$01
	sta     _bridge_f,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bridge_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bridge_do: near

.segment	"CODE"

;
; gpit = 4; while (gpit) { -- gpit;
;
	lda     #$04
	sta     _gpit
L19B9:	lda     _gpit
	bne     L29ED
;
; }
;
	rts
;
; gpit = 4; while (gpit) { -- gpit;
;
L29ED:	dec     _gpit
;
; if (rdy = bridge_y [gpit]) {
;
	ldy     _gpit
	lda     _bridge_y,y
	sta     _rdy
	tax
	beq     L19B9
;
; rdy += bridge_f [gpit];
;
	ldy     _gpit
	lda     _bridge_f,y
	clc
	adc     _rdy
	sta     _rdy
;
; if (bridge_f [gpit] < 8) ++ bridge_f [gpit];
;
	ldy     _gpit
	lda     _bridge_f,y
	cmp     #$08
	bcs     L19C6
	lda     #<(_bridge_f)
	ldx     #>(_bridge_f)
	clc
	adc     _gpit
	bcc     L19CC
	inx
L19CC:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (rdy >= 208) rdy = 0;
;
L19C6:	lda     _rdy
	cmp     #$D0
	bcc     L19CD
	lda     #$00
	sta     _rdy
;
; else oam_index = oam_meta_spr (
;
	jmp     L19D1
;
; bridge_x [gpit], rdy + SPRITE_ADJUST,
;
L19CD:	jsr     decsp3
	ldy     _gpit
	lda     _bridge_x,y
	ldy     #$02
	sta     (sp),y
	lda     _rdy
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L29EB
	sec
L29EB:	sbc     #$10
	bcs     L29EC
	sec
L29EC:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; );
;
	lda     #<(_ssbrk_00)
	ldx     #>(_ssbrk_00)
	jsr     _oam_meta_spr
	sta     _oam_index
;
; bridge_y [gpit] = rdy;
;
L19D1:	ldy     _gpit
	lda     _rdy
	sta     _bridge_y,y
;
; }
;
	jmp     L19B9

.endproc

; ---------------------------------------------------------------
; void __near__ breakable_do_anim (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_breakable_do_anim: near

.segment	"CODE"

;
; do_process_breakable = 0;
;
	lda     #$00
	sta     _do_process_breakable
;
; gpit = BREAKABLE_MAX; while (gpit --) {
;
	lda     #$10
	sta     _gpit
L19E7:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L19E8
;
; if (brkf [gpit]) {
;
	ldy     _gpit
	lda     _brkf,y
	beq     L19E7
;
; ++ brkf [gpit];
;
	lda     #<(_brkf)
	ldx     #>(_brkf)
	clc
	adc     _gpit
	bcc     L19F0
	inx
L19F0:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (brkf [gpit] == BREAKABLE_MAX_FRAMES) {
;
	ldy     _gpit
	lda     _brkf,y
	cmp     #$18
	bne     L19F1
;
; brkf [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _brkf,y
;
; _x = brkx [gpit]; _y = brky [gpit]; _t = BREAKABLE_ERASE;
;
	ldy     _gpit
	lda     _brkx,y
	sta     __x
	ldy     _gpit
	lda     _brky,y
	sta     __y
	lda     #$00
	sta     __t
;
; bridge_create ();
;
	jsr     _bridge_create
;
; map_set ();
;
	jsr     _map_set
;
; } else {
;
	jmp     L19E7
;
; do_process_breakable = 1;
;
L19F1:	lda     #$01
	sta     _do_process_breakable
;
; }
;
	jmp     L19E7
;
; }
;
L19E8:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ breakable_break (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_breakable_break: near

.segment	"CODE"

;
; gpaux = COORDS (_x, _y);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	sta     _gpaux
;
; if (brk_buff [gpaux] < BREAKABLE_LIFE) {
;
	ldy     _gpaux
	lda     _brk_buff,y
	cmp     #$04
	bcs     L1A0F
;
; ++ brk_buff [gpaux];
;
	lda     #<(_brk_buff)
	ldx     #>(_brk_buff)
	clc
	adc     _gpaux
	bcc     L1A15
	inx
L1A15:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; } else 
;
	rts
;
; sfx_play (SFX_BREAKH, 1);
;
L1A0F:	lda     #$0D
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; gpit = BREAKABLE_MAX; while (gpit --) {
;
	lda     #$10
	sta     _gpit
L1A1C:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1A1D
;
; if (!brkf [gpit]) {
;
	ldy     _gpit
	lda     _brkf,y
	bne     L1A1C
;
; do_process_breakable = 1;
;
	lda     #$01
	sta     _do_process_breakable
;
; brkf [gpit] = 1;
;
	ldy     _gpit
	sta     _brkf,y
;
; brkx [gpit] = _x;
;
	ldy     _gpit
	lda     __x
	sta     _brkx,y
;
; brky [gpit] = _y;
;
	ldy     _gpit
	lda     __y
	sta     _brky,y
;
; _t = BREAKABLE_BREAKING;
;
	lda     #$13
	sta     __t
;
; map_set ();     // Break tile!
;
	jsr     _map_set
;
; sfx_play (SFX_BREAKB, 1);
;
	lda     #$11
	jsr     pusha
	lda     #$01
	jmp     _sfx_play
;
; }
;
L1A1D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_load: near

.segment	"CODE"

;
; bankswitch (l_enems_chr_rombank [level]);
;
	ldy     _level
	lda     _l_enems_chr_rombank,y
	jsr     _bankswitch
;
; vram_adr (c_hotspots);
;
	lda     _c_hotspots
	ldx     _c_hotspots+1
	jsr     _vram_adr
;
; rda = VRAM_READ;  // Dummy read.
;
	lda     $2007
	sta     _rda
;
; for (gpit = 0; gpit < MAP_SIZE; ++ gpit) {
;
	lda     #$00
	sta     _gpit
L1A43:	lda     _gpit
	cmp     #$1E
	bcs     L1A44
;
; ht [gpit] = VRAM_READ;
;
	ldy     _gpit
	lda     $2007
	sta     _ht,y
;
; hyx [gpit] = VRAM_READ;
;
	ldy     _gpit
	lda     $2007
	sta     _hyx,y
;
; hact [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _hact,y
;
; for (gpit = 0; gpit < MAP_SIZE; ++ gpit) {
;
	inc     _gpit
	jmp     L1A43
;
; }
;
L1A44:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_paint: near

.segment	"CODE"

;
; rda = hrt;
;
	lda     _hrt
	sta     _rda
;
; hrx, hry + SPRITE_ADJUST, 
;
	jsr     decsp3
	lda     _hrx
	ldy     #$02
	sta     (sp),y
	lda     _hry
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L29EF
	sec
L29EF:	sbc     #$10
	bcs     L29F0
	sec
L29F0:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [rda]
;
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L29F1
	inx
	clc
L29F1:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [rda]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_create: near

.segment	"CODE"

;
; if (ht [n_pant] && hact [n_pant]) {
;
	ldy     _n_pant
	lda     _ht,y
	beq     L1A6C
	ldy     _n_pant
	lda     _hact,y
	beq     L1A6C
;
; hrt = ht [n_pant];
;
	ldy     _n_pant
	lda     _ht,y
	sta     _hrt
;
; hrx = hyx [n_pant] << 4;
;
	ldy     _n_pant
	lda     _hyx,y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _hrx
;
; hry = hyx [n_pant] & 0xf0;
;
	ldy     _n_pant
	lda     _hyx,y
	and     #$F0
	sta     _hry
;
; } else hrt = 0;
;
	rts
L1A6C:	lda     #$00
	sta     _hrt
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_init: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it --) {
;
	lda     #$04
	sta     _coco_it
L1A86:	lda     _coco_it
	pha
	sec
	sbc     #$01
	sta     _coco_it
	pla
	tax
	beq     L1A87
;
; coco_slots [coco_it] = coco_it;
;
	ldy     _coco_it
	lda     _coco_it
	sta     _coco_slots,y
;
; coco_on [coco_it] = 0;
;
	ldy     _coco_it
	lda     #$00
	sta     _coco_on,y
;
; }
;
	jmp     L1A86
;
; coco_slots_i = COCOS_MAX;
;
L1A87:	lda     #$04
	sta     _coco_slots_i
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_shoot_aimed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_shoot_aimed: near

.segment	"CODE"

;
; rdct = distance ();
;
	jsr     _distance
	sta     _rdct
;
; if (coco_slots_i)
;
	lda     _coco_slots_i
	bne     L2A02
;
; }
;
	rts
;
; -- coco_slots_i; coco_it = coco_slots [coco_slots_i];
;
L2A02:	dec     _coco_slots_i
	ldy     _coco_slots_i
	lda     _coco_slots,y
	sta     _coco_it
;
; coco_x [coco_it] = rdx << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L29FA
	inx
	clc
L29FA:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldx     #$00
	lda     _rdx
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_y [coco_it] = rdy << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L29FB
	inx
	clc
L29FB:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	jsr     aslax2
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; rds16 = COCO_V * rda / rdct; coco_vx [coco_it] = ADD_SIGN2 (px, coco_x [coco_it], rds16);
;
	lda     #$80
	jsr     pusha0
	lda     _rda
	jsr     tosumula0
	jsr     pushax
	lda     _rdct
	jsr     tosudiva0
	sta     _rds16
	stx     _rds16+1
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L29FC
	inx
	clc
L29FC:	adc     #<(_coco_vx)
	tay
	txa
	adc     #>(_coco_vx)
	tax
	tya
	jsr     pushax
	lda     _px
	ldx     _px+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L29FD
	inx
	clc
L29FD:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bne     L1AAC
	ldx     #$00
	txa
	jmp     L1AB9
L1AAC:	lda     _px
	ldx     _px+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L29FE
	inx
	clc
L29FE:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bmi     L1AB6
	beq     L1AB6
	lda     _rds16
	ldx     _rds16+1
	jmp     L1AB9
L1AB6:	lda     _rds16
	ldx     _rds16+1
	jsr     negax
L1AB9:	ldy     #$00
	jsr     staxspidx
;
; rds16 = COCO_V * rdb / rdct; coco_vy [coco_it] = ADD_SIGN2 (py, coco_y [coco_it], rds16);
;
	lda     #$80
	jsr     pusha0
	lda     _rdb
	jsr     tosumula0
	jsr     pushax
	lda     _rdct
	jsr     tosudiva0
	sta     _rds16
	stx     _rds16+1
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L29FF
	inx
	clc
L29FF:	adc     #<(_coco_vy)
	tay
	txa
	adc     #>(_coco_vy)
	tax
	tya
	jsr     pushax
	lda     _py
	ldx     _py+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2A00
	inx
	clc
L2A00:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bne     L1AC6
	ldx     #$00
	txa
	jmp     L1AD3
L1AC6:	lda     _py
	ldx     _py+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2A01
	inx
	clc
L2A01:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bmi     L1AD0
	beq     L1AD0
	lda     _rds16
	ldx     _rds16+1
	jmp     L1AD3
L1AD0:	lda     _rds16
	ldx     _rds16+1
	jsr     negax
L1AD3:	ldy     #$00
	jsr     staxspidx
;
; coco_on [coco_it] = 1;
;
	ldy     _coco_it
	lda     #$01
	sta     _coco_on,y
;
; sfx_play (SFX_COCO, 2);
;
	lda     #$0A
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_shoot_linear (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_shoot_linear: near

.segment	"CODE"

;
; if (coco_slots_i == 0) return;
;
	lda     _coco_slots_i
	bne     L2A0F
;
; }
;
	rts
;
; -- coco_slots_i; coco_it = coco_slots [coco_slots_i];
;
L2A0F:	dec     _coco_slots_i
	ldy     _coco_slots_i
	lda     _coco_slots,y
	sta     _coco_it
;
; coco_x [coco_it] = rdx << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2A09
	inx
	clc
L2A09:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldx     #$00
	lda     _rdx
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_y [coco_it] = rdy << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2A0A
	inx
	clc
L2A0A:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	jsr     aslax2
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_vx [coco_it] = coco_dx [rda];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2A0B
	inx
	clc
L2A0B:	adc     #<(_coco_vx)
	tay
	txa
	adc     #>(_coco_vx)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L2A0C
	inx
	clc
L2A0C:	adc     #<(_coco_dx)
	sta     ptr1
	txa
	adc     #>(_coco_dx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; coco_vy [coco_it] = coco_dy [rda];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2A0D
	inx
	clc
L2A0D:	adc     #<(_coco_vy)
	tay
	txa
	adc     #>(_coco_vy)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L2A0E
	inx
	clc
L2A0E:	adc     #<(_coco_dy)
	sta     ptr1
	txa
	adc     #>(_coco_dy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; coco_on [coco_it] = 1;
;
	ldy     _coco_it
	lda     #$01
	sta     _coco_on,y
;
; sfx_play (SFX_COCO, 2);
;
	lda     #$0A
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_destroy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_destroy: near

.segment	"CODE"

;
; coco_on [coco_it] = 0;
;
	ldy     _coco_it
	lda     #$00
	sta     _coco_on,y
;
; coco_slots [coco_slots_i] = coco_it; ++ coco_slots_i;
;
	ldy     _coco_slots_i
	lda     _coco_it
	sta     _coco_slots,y
	inc     _coco_slots_i
;
; sfx_play (SFX_DUMMY1, 2);
;
	lda     #$05
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_do: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it) {
;
	lda     #$04
	sta     _coco_it
L1B0B:	lda     _coco_it
	bne     L2A20
;
; }
;
	rts
;
; -- coco_it;
;
L2A20:	dec     _coco_it
;
; if (coco_on [coco_it]) {
;
	ldy     _coco_it
	lda     _coco_on,y
	beq     L1B0B
;
; coco_x [coco_it] += coco_vx [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2A16
	inx
	clc
L2A16:	adc     #<(_coco_x)
	tay
	txa
	adc     #>(_coco_x)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2A17
	inx
	clc
L2A17:	adc     #<(_coco_vx)
	sta     ptr1
	txa
	adc     #>(_coco_vx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; coco_y [coco_it] += coco_vy [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2A18
	inx
	clc
L2A18:	adc     #<(_coco_y)
	tay
	txa
	adc     #>(_coco_y)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2A19
	inx
	clc
L2A19:	adc     #<(_coco_vy)
	sta     ptr1
	txa
	adc     #>(_coco_vy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; rdx = coco_x [coco_it] >> FIXBITS;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2A1A
	inx
	clc
L2A1A:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     _rdx
;
; rdy = coco_y [coco_it] >> FIXBITS;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2A1B
	inx
	clc
L2A1B:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     _rdy
;
; rdx > 248 ||
;
	lda     _rdx
	cmp     #$F9
	bcs     L1B22
;
; rdy > 208
;
	lda     _rdy
;
; ) {
;
	cmp     #$D1
	bcc     L1B21
;
; cocos_destroy (); continue;
;
L1B22:	jsr     _cocos_destroy
	jmp     L1B0B
;
; rdx, rdy + SPRITE_ADJUST, 
;
L1B21:	jsr     decsp4
	lda     _rdx
	ldy     #$03
	sta     (sp),y
	lda     _rdy
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2A1C
	sec
L2A1C:	sbc     #$10
	bcs     L2A1D
	sec
L2A1D:	sbc     #$01
	dey
	sta     (sp),y
;
; COCO_PATTERN, 
;
	lda     #$00
	dey
	sta     (sp),y
;
; COCO_PALETTE, 
;
	dey
	sta     (sp),y
;
; );
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (pflickering == 0 && 
;
	lda     _pflickering
	jne     L1B0B
;
; rdx + 7 >= prx && 
;
	tax
	lda     _rdx
	clc
	adc     #$07
	bcc     L1B33
	inx
L1B33:	cmp     _prx
	txa
	sbc     #$00
	jcc     L1B0B
;
; rdx <= prx + 7 && 
;
	lda     _rdx
	jsr     pusha0
	lda     _prx
	clc
	adc     #$07
	bcc     L1B34
	ldx     #$01
L1B34:	jsr     tosicmp
	beq     L2A1F
	jcs     L1B0B
;
; rdy + 7 + PLAYER_COLLISION_VSTRETCH_FG >= pry && 
;
L2A1F:	ldx     #$00
	lda     _rdy
	clc
	adc     #$07
	bcc     L2A1E
	inx
	clc
L2A1E:	adc     #$FC
	pha
	txa
	adc     #$FF
	tax
	pla
	cmp     _pry
	txa
	sbc     #$00
	jcc     L1B0B
;
; rdy <= pry + 12
;
	lda     _rdy
	jsr     pusha0
	lda     _pry
;
; ) {
;
	clc
	adc     #$0C
	bcc     L1B36
	ldx     #$01
L1B36:	jsr     tosicmp
	bcc     L1B31
	jne     L1B0B
;
; en_sg_2 = 1;
;
L1B31:	lda     #$01
	sta     _en_sg_2
;
; if (prings) {
;
	lda     _prings
	beq     L1B3A
;
; ring_create ();
;
	jsr     _ring_create
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; en_sg_2 = 0;
;
	lda     #$00
	sta     _en_sg_2
;
; } else psprid = pfacing + CELL_HIT;
;
	jmp     L1B42
L1B3A:	lda     _pfacing
	clc
	adc     #$09
	sta     _psprid
;
; pkill = en_sg_2;
;
L1B42:	lda     _en_sg_2
	sta     _pkill
;
; cocos_destroy ();
;
	jsr     _cocos_destroy
;
; }
;
	jmp     L1B0B

.endproc

; ---------------------------------------------------------------
; void __near__ player_register_safe_spot (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_register_safe_spot: near

.segment	"CODE"

;
; px_safe = px;
;
	lda     _px
	sta     _px_safe
	lda     _px+1
	sta     _px_safe+1
;
; py_safe = py;
;
	lda     _py
	sta     _py_safe
	lda     _py+1
	sta     _py_safe+1
;
; n_pant_safe = n_pant;
;
	lda     _n_pant
	sta     _n_pant_safe
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_stop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_stop: near

.segment	"CODE"

;
; pvx = pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
	sta     _pvx
	sta     _pvx+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; if (!warp_to_level) player_stop ();
;
	lda     _warp_to_level
	bne     L1B55
	jsr     _player_stop
;
; pfacing = 0;
;
L1B55:	lda     #$00
	sta     _pfacing
;
; pfr = pctfr = 0;
;
	sta     _pctfr
	sta     _pfr
;
; pj = pctj = 0;
;
	sta     _pctj
	sta     _pj
;
; psprid = 0;
;
	sta     _psprid
;
; pobjs = 0;
;
	sta     _pobjs
;
; pgotten = 0;
;
	sta     _pgotten
;
; pfiring = 0;
;
	sta     _pfiring
;
; pkilled = 0;
;
	sta     _pkilled
;
; pflickering = pbouncing = 0;
;
	sta     _pbouncing
	sta     _pflickering
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; vertical_engine_type = ENGINE_TYPE_JUMP;
;
	lda     #$00
	sta     _vertical_engine_type
;
; ptrampoline = 0;
;
	sta     _ptrampoline
;
; pspin = 0;
;
	sta     _pspin
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_to_pixels (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_to_pixels: near

.segment	"CODE"

;
; prx = px >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
;
; pry = py >> FIXBITS;
;
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; if (pflickering) -- pflickering;
;
	lda     _pflickering
	beq     L1B89
	dec     _pflickering
;
; if (pbouncing) -- pbouncing;
;
L1B89:	lda     _pbouncing
	beq     L1B8C
	dec     _pbouncing
;
; hitv = hith = 0;
;
L1B8C:	lda     #$00
	sta     _hith
	sta     _hitv
;
; pcx = prx; pcy = pry;
;
	lda     _prx
	sta     _pcx
	lda     _pry
	sta     _pcy
;
; pnotsafe = 0;
;
	lda     #$00
	sta     _pnotsafe
;
; oppossee = ppossee;
;
	lda     _ppossee
	sta     _oppossee
;
; ppossee = 0;
;
	lda     #$00
	sta     _ppossee
;
; if (vertical_engine_type != ENGINE_TYPE_SWIM) {
;
	lda     _vertical_engine_type
	cmp     #$02
	beq     L1BA9
;
; ) {
;
	lda     _pgotten
	bne     L1BA9
;
; if (!pj) {
;
	lda     _pj
	bne     L1BA0
;
; pvy += PLAYER_G;
;
	lda     #$10
;
; } else pvy += PLAYER_G_MK2_JUMPING;
;
	jmp     L2A39
L1BA0:	lda     #$04
L2A39:	clc
	adc     _pvy
	sta     _pvy
	bcc     L1BA8
	inc     _pvy+1
;
; if (pvy > PLAYER_VY_FALLING_MAX) pvy = PLAYER_VY_FALLING_MAX; 
;
L1BA8:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$01
	bvs     L1BAB
	eor     #$80
L1BAB:	bpl     L1BA9
	ldx     #$01
	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; if (pgotten) pvy = 0;   
;
L1BA9:	lda     _pgotten
	beq     L1BAE
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; py += pvy;
;
L1BAE:	lda     _pvy
	clc
	adc     _py
	sta     _py
	lda     _pvy+1
	adc     _py+1
	sta     _py+1
;
; if (py < 0) py = 0;
;
	ldx     _py+1
	cpx     #$80
	bcc     L1BB4
	lda     #$00
	sta     _py
	sta     _py+1
;
; pry = py >> FIXBITS;
;
L1BB4:	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; cx1 = prx >> 4;
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx1
;
; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L1BC0
	inx
L1BC0:	jsr     shrax4
	sta     _cx2
;
; rds16 = pvy + pgtmy;
;
	lda     _pvy
	clc
	adc     _pgtmy
	sta     _rds16
	lda     _pvy+1
	adc     _pgtmy+1
	tax
	stx     _rds16+1
;
; if (rds16 < 0)
;
	cpx     #$80
	bcc     L1BC3
;
; cy1 = cy2 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;   
;
	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L1BCB
	lda     _at2
	and     #$08
	beq     L1BCA
;
; pry = ((cy1 + 1) << 4) + PLAYER_COLLISION_VSTRETCH_BG;
;
L1BCB:	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L1BD3
	inx
L1BD3:	jsr     shlax4
	clc
	adc     #$FC
	sta     _pry
	txa
	adc     #$FF
;
; pvy = 0; py = pry << FIXBITS;
;
	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L1C58
L1BCA:	lda     _at1
	and     #$01
	jne     L2A33
	lda     _at2
	and     #$01
	jeq     L1C58
;
; } else if (rds16 > 0)
;
	jmp     L2A33
L1BC3:	lda     _rds16
	cmp     #$01
	lda     _rds16+1
	sbc     #$00
	bvs     L1BE7
	eor     #$80
L1BE7:	jpl     L1C58
;
; cy1 = cy2 = (pry + 16) >> 4; 
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L1BEC
	inx
L1BEC:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points (); 
;
	jsr     _cm_two_points
;
; pry <= ((cy1 - 1) << 4) + (pvy >> 6) && 
;
	lda     _pry
	jsr     pusha0
	lda     _cy1
	sec
	sbc     #$01
	bcs     L1BF2
	ldx     #$FF
L1BF2:	jsr     shlax4
	sta     ptr1
	stx     ptr1+1
	lda     _pvy
	ldx     _pvy+1
	jsr     asrax4
	jsr     asrax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     tosicmp
	beq     L2A2C
	jcs     L1BEE
;
; (at1 & 12) || (at2 & 12)
;
L2A2C:	lda     _at1
	and     #$0C
	bne     L1BEF
	lda     _at2
	and     #$0C
;
; )
;
	jeq     L1BEE
;
; pvy = 0; pry = ((cy1 - 1) << 4);py = pry << FIXBITS;
;
L1BEF:	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _cy1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; ppossee = 1;
;
	sta     _ppossee
;
; if (at1 == 74 || at2 == 74) {
;
	lda     _at1
	cmp     #$4A
	beq     L1C0A
	lda     _at2
	cmp     #$4A
	bne     L1C09
;
; a_button = 1; ptrampoline = 1;
;
L1C0A:	lda     #$01
	sta     _a_button
	sta     _ptrampoline
;
; pspin = 0;
;
	lda     #$00
	sta     _pspin
;
; cfx = 0;
;
L1C09:	lda     #$00
	sta     _cfx
;
; if ((at1 & 40) == 40) { if (at1 & 1) cfx = pgtmx = PLAYER_VX_CONVEYORS; else cfx = pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; } 
;
	lda     _at1
	and     #$28
	cmp     #$28
	bne     L1C14
	lda     _at1
	and     #$01
	beq     L1C18
	ldx     #$00
	lda     #$40
	jmp     L2A34
L1C18:	ldx     #$FF
	lda     #$C0
L2A34:	sta     _pgtmx
	stx     _pgtmx+1
	sta     _cfx
	lda     #$01
	sta     _pgotten
;
; if (cx1 != cx2) if ((at2 & 40) == 40) { if (at2 & 1) cfx = pgtmx = PLAYER_VX_CONVEYORS; else cfx = pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; } 
;
L1C14:	lda     _cx2
	cmp     _cx1
	beq     L1C25
	lda     _at2
	and     #$28
	cmp     #$28
	bne     L1C25
	lda     _at2
	and     #$01
	beq     L1C29
	ldx     #$00
	lda     #$40
	jmp     L2A35
L1C29:	ldx     #$FF
	lda     #$C0
L2A35:	sta     _pgtmx
	stx     _pgtmx+1
	sta     _cfx
	lda     #$01
	sta     _pgotten
;
; if (at1 & 16) { _x = cx1; _y = cy1 - 1; breakable_break (); pnotsafe = 1; }
;
L1C25:	lda     _at1
	and     #$10
	beq     L1C34
	lda     _cx1
	sta     __x
	lda     _cy1
	sec
	sbc     #$01
	sta     __y
	jsr     _breakable_break
	lda     #$01
	sta     _pnotsafe
;
; if (cx1 != cx2 && (at2 & 16)) { _x = cx2; _y = cy1 - 1; breakable_break (); pnotsafe = 1; }
;
L1C34:	lda     _cx2
	cmp     _cx1
	beq     L1C3E
	lda     _at2
	and     #$10
	beq     L1C3E
	lda     _cx2
	sta     __x
	lda     _cy1
	sec
	sbc     #$01
	sta     __y
	jsr     _breakable_break
	lda     #$01
	sta     _pnotsafe
;
; if ((at1 & 1) || (at2 & 1)) pnotsafe = 1; 
;
L1C3E:	lda     _at1
	and     #$01
	bne     L1C4C
	lda     _at2
	and     #$01
	beq     L1C58
L1C4C:	lda     #$01
	sta     _pnotsafe
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L1C58
L1BEE:	lda     _at1
	and     #$01
	bne     L1C54
	lda     _at2
	and     #$01
	beq     L1C58
;
; if ((pry & 15) > 4) hitv = 1;
;
L1C54:	lda     _pry
	and     #$0F
	cmp     #$05
	bcc     L1C58
L2A33:	lda     #$01
	sta     _hitv
;
; if (vertical_engine_type == ENGINE_TYPE_JUMP) {
;
L1C58:	lda     _vertical_engine_type
	jne     L1C85
;
; && !pj
;
	lda     _a_button
	beq     L1C6B
;
; && (
;
	lda     _pj
	bne     L1C6B
;
; pgotten || ppossee || hitv
;
	lda     _pgotten
	bne     L1C60
	lda     _ppossee
	bne     L1C60
;
; )
;
	lda     _hitv
	beq     L1C6B
;
; jump_start ();
;
L1C60:	jsr     _jump_start
;
; if (!(pgotten || hitv || pnotsafe)) {
;
	lda     _pgotten
	bne     L1C68
	lda     _hitv
	bne     L1C68
	lda     _pnotsafe
	beq     L1C69
L1C68:	lda     #$01
L1C69:	jsr     bnega
	beq     L1C66
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; if (!ptrampoline)
;
L1C66:	lda     _ptrampoline
	bne     L1C6B
;
; pspin = 1;
;
	lda     #$01
	sta     _pspin
;
; if (pj) {
;
L1C6B:	lda     _pj
	beq     L1C85
;
; if (ptrampoline) {
;
	lda     _ptrampoline
	beq     L1C71
;
; ++ pctj; if (pctj == PLAYER_VY_MK2_TRAMPOLINE_A_STEPS)
;
	inc     _pctj
	lda     _pctj
	cmp     #$20
	bne     L1C85
;
; { pj = 0; ptrampoline = 0; }
;
	lda     #$00
	sta     _pj
	sta     _ptrampoline
;
; } else 
;
	jmp     L1C85
;
; if (pad0 & PAD_A) {
;
L1C71:	lda     _pad0
	and     #$01
	beq     L1C7B
;
; ++ pctj; if (pctj == PLAYER_VY_MK2_JUMP_A_STEPS) pj = 0;
;
	inc     _pctj
	lda     _pctj
	cmp     #$10
	bne     L1C85
	lda     #$00
	sta     _pj
;
; } else {
;
	jmp     L1C85
;
; pj = 0; if (pvy < -PLAYER_VY_MK2_JUMP_RELEASE) pvy = -PLAYER_VY_MK2_JUMP_RELEASE;
;
L1C7B:	sta     _pj
	lda     _pvy
	cmp     #$A0
	lda     _pvy+1
	sbc     #$FF
	bvc     L1C87
	eor     #$80
L1C87:	bpl     L1C85
	ldx     #$FF
	lda     #$A0
	sta     _pvy
	stx     _pvy+1
;
; if (pad0 & PAD_DOWN) {
;
L1C85:	lda     _pad0
	and     #$20
	beq     L1C8C
;
; if (ppossee && ABS (pvx) > PLAYER_VX_MIN) {
;
	lda     _ppossee
	beq     L1C8C
	ldx     _pvx+1
	cpx     #$80
	bcc     L1C91
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	jmp     L1C94
L1C91:	lda     _pvx
	ldx     _pvx+1
L1C94:	cmp     #$19
	txa
	sbc     #$00
	bvs     L1C98
	eor     #$80
L1C98:	bpl     L1C8C
;
; if (!pspin) sfx_play (SFX_DUMMY2, 0);
;
	lda     _pspin
	bne     L1C9A
	lda     #$07
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pspin = 1; 
;
L1C9A:	lda     #$01
	sta     _pspin
;
; if (!(pad0 & PAD_LEFT || pad0 & PAD_RIGHT)) {
;
L1C8C:	lda     _pad0
	and     #$40
	bne     L1CA3
	lda     _pad0
	and     #$80
	beq     L1CA4
L1CA3:	lda     #$01
L1CA4:	jsr     bnega
	beq     L1CB7
;
; if (!pspin)
;
	lda     _pspin
	bne     L1CB7
;
; if (pvx > 0) {
;
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L1CA9
	eor     #$80
L1CA9:	bpl     L1CA7
;
; pvx -= PLAYER_RX;
;
	lda     _pvx
	sec
	sbc     #$0C
	sta     _pvx
	bcs     L1CAC
	dec     _pvx+1
;
; if (pvx < 0) pvx = 0;
;
L1CAC:	ldx     _pvx+1
	cpx     #$80
	bcc     L1CB7
;
; } else if (pvx < 0) {
;
	jmp     L2A36
L1CA7:	ldx     _pvx+1
	cpx     #$80
	bcc     L1CB7
;
; pvx += PLAYER_RX;
;
	lda     #$0C
	clc
	adc     _pvx
	sta     _pvx
	bcc     L1CB6
	inc     _pvx+1
;
; if (pvx > 0) pvx = 0;
;
L1CB6:	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L1CB9
	eor     #$80
L1CB9:	bpl     L1CB7
L2A36:	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; if (pad0 & PAD_LEFT) {
;
L1CB7:	lda     _pad0
	and     #$40
	beq     L1CC0
;
; pfacing = CELL_FACING_LEFT;  
;
	lda     #$0A
	sta     _pfacing
;
; if (pvx > -PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$61
	lda     _pvx+1
	sbc     #$FF
	bvs     L1CC2
	eor     #$80
L1CC2:	bpl     L1CC0
;
; pvx -= PLAYER_AX;
;
	lda     _pvx
	sec
	sbc     #$0C
	sta     _pvx
	bcs     L1CC0
	dec     _pvx+1
;
; if (pad0 & PAD_RIGHT) {
;
L1CC0:	lda     _pad0
	and     #$80
	beq     L1CCA
;
; pfacing = CELL_FACING_RIGHT;
;
	lda     #$00
	sta     _pfacing
;
; if (pvx < PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$A0
	lda     _pvx+1
	sbc     #$00
	bvc     L1CCC
	eor     #$80
L1CCC:	bpl     L1CCA
;
; pvx += PLAYER_AX;
;
	lda     #$0C
	clc
	adc     _pvx
	sta     _pvx
	bcc     L1CCA
	inc     _pvx+1
;
; px += pvx;
;
L1CCA:	lda     _pvx
	clc
	adc     _px
	sta     _px
	lda     _pvx+1
	adc     _px+1
	sta     _px+1
;
; if (pgotten) px += pgtmx;
;
	lda     _pgotten
	beq     L1CD2
	lda     _pgtmx
	clc
	adc     _px
	sta     _px
	lda     _pgtmx+1
	adc     _px+1
	sta     _px+1
;
; if (px < (4<<FIXBITS)) { px = 4 << FIXBITS; prx = 4;}
;
L1CD2:	lda     _px
	cmp     #$00
	lda     _px+1
	sbc     #$01
	bvc     L1CD9
	eor     #$80
L1CD9:	bpl     L1CD6
	ldx     #$01
	lda     #$00
	sta     _px
	stx     _px+1
	lda     #$04
	sta     _prx
;
; else if (px > (244<<FIXBITS)) { px = 244 << FIXBITS; prx = 244; }
;
	jmp     L1CE7
L1CD6:	lda     _px
	cmp     #$01
	lda     _px+1
	sbc     #$3D
	bvs     L1CE2
	eor     #$80
L1CE2:	bpl     L1CDF
	ldx     #$3D
	lda     #$00
	sta     _px
	stx     _px+1
	lda     #$F4
	sta     _prx
;
; else player_to_pixels ();
;
	jmp     L1CE7
L1CDF:	jsr     _player_to_pixels
;
; cy1 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;
;
L1CE7:	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L1CEF
	inx
L1CEF:	jsr     shrax4
	sta     _cy2
;
; rds16 = pvx + pgtmx;
;
	lda     _pvx
	clc
	adc     _pgtmx
	sta     _rds16
	lda     _pvx+1
	adc     _pgtmx+1
	sta     _rds16+1
;
; if (rds16)  {
;
	lda     _rds16
	ora     _rds16+1
	jeq     L1D24
;
; if (rds16 < 0) {
;
	ldx     _rds16+1
	cpx     #$80
	bcc     L1CF4
;
; cx1 = cx2 = prx >> 4; 
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx2
	sta     _cx1
;
; rda = (cx1 + 1) << 4;
;
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; rdm = cx1 - 1;
;
	lda     _cx1
	sec
	sbc     #$01
	bcs     L1D0E
;
; } else {
;
	jmp     L1D0E
;
; cx1 = cx2 = (prx + 8) >> 4;
;
L1CF4:	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L1D05
	inx
L1D05:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 - 1) << 4) + 8;
;
	ldx     #$00
	lda     _cx1
	sec
	sbc     #$01
	bcs     L1D0A
	dex
L1D0A:	jsr     shlax4
	clc
	adc     #$08
	sta     _rda
;
; rdm = cx1 + 1;
;
	lda     _cx1
	clc
	adc     #$01
L1D0E:	sta     _rdm
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L1D11
	lda     _at2
	and     #$08
	beq     L1D10
;
; pvx = 0; prx = rda; px = prx << FIXBITS; pfiring = 1;
;
L1D11:	ldx     #$00
	txa
	sta     _pvx
	sta     _pvx+1
	lda     _rda
	sta     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
	lda     #$01
	sta     _pfiring
;
; } else {
;
	jmp     L1D1D
;
; hith = ((at1 & 1) || (at2 & 1));
;
L1D10:	lda     _at1
	and     #$01
	bne     L1D20
	lda     _at2
	and     #$01
	beq     L1D23
L1D20:	lda     #$01
L1D23:	sta     _hith
;
; if (pvy > 0) hith &= ((pry & 15) > 4);
;
L1D1D:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L1D26
	eor     #$80
L1D26:	bpl     L1D24
	lda     _pry
	and     #$0F
	cmp     #$05
	lda     #$00
	rol     a
	and     _hith
	sta     _hith
;
; if (pj == 0 && ((!pvx && (ppossee || pgotten)) || (ppossee && !oppossee))) pspin = 0;
;
L1D24:	lda     _pj
	bne     L1D2B
	lda     _pvx
	ora     _pvx+1
	bne     L2A24
	lda     _ppossee
	bne     L1D2C
	lda     _pgotten
	bne     L1D2C
L2A24:	lda     _ppossee
	beq     L1D2B
	lda     _oppossee
	bne     L1D2B
L1D2C:	lda     #$00
	sta     _pspin
;
; phit = 0;
;
L1D2B:	lda     #$00
	sta     _phit
;
; if (pgotten == 0) {
;
	lda     _pgotten
	jne     L1D7C
;
; if (hitv) { phit = 1; pvy = ADD_SIGN (-pvy, PLAYER_V_REBOUND); pry = pcy; py = pry << FIXBITS; } 
;
	lda     _hitv
	beq     L1D3F
	lda     #$01
	sta     _phit
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L1D47
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L1D4C
	eor     #$80
L1D4C:	bpl     L1D4D
	ldx     #$01
	jmp     L2A29
L1D4D:	ldx     #$FF
	jmp     L2A29
L1D47:	tax
L2A29:	lda     #$00
	sta     _pvy
	stx     _pvy+1
	lda     _pcy
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; else
;
	jmp     L1D5C
;
; if (hith) { phit = 1; pvx = ADD_SIGN (-pvx, PLAYER_V_REBOUND); prx = pcx; px = prx << FIXBITS; }
;
L1D3F:	lda     _hith
	beq     L1D5C
	lda     #$01
	sta     _phit
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L1D64
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L1D69
	eor     #$80
L1D69:	bpl     L1D6A
	ldx     #$01
	jmp     L2A2A
L1D6A:	ldx     #$FF
	jmp     L2A2A
L1D64:	tax
L2A2A:	lda     #$00
	sta     _pvx
	stx     _pvx+1
	lda     _pcx
	sta     _prx
	ldx     #$00
	lda     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; if (!pflickering && !pbouncing) if (phit) { 
;
L1D5C:	lda     _pflickering
	bne     L1D7C
	lda     _pbouncing
	bne     L1D7C
	lda     _phit
	beq     L1D7C
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; en_sg_2 = 1;
;
	lda     #$01
	sta     _en_sg_2
;
; if (prings) {
;
	lda     _prings
	beq     L1D81
;
; ring_create ();
;
	jsr     _ring_create
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; en_sg_2 = 0;
;
	lda     #$00
	sta     _en_sg_2
;
; if (en_sg_2)
;
L1D81:	lda     _en_sg_2
	beq     L1D89
;
; pkill = 1; 
;
	lda     #$01
	sta     _pkill
;
; pspin = 0;
;
L1D89:	lda     #$00
	sta     _pspin
;
; cx1 = cx2 = (prx + 4) >> 4;
;
L1D7C:	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L1D93
	inx
L1D93:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; cy1 = cy2 = (pry + 8) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L1D98
	inx
L1D98:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (!pflickering && !pbouncing) {
;
	lda     _pflickering
	bne     L1DA9
	lda     _pbouncing
	bne     L1DA9
;
; if (at1 == 66) {
;
	lda     _at1
	cmp     #$42
	bne     L1DA9
;
; if (elec_state == 2) {
;
	lda     _elec_state
	cmp     #$02
	bne     L1DA9
;
; if (prings) {
;
	lda     _prings
	beq     L1DA2
;
; ring_create ();
;
	jsr     _ring_create
;
; pvx = -pvx; pvy = -64; 
;
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	sta     _pvx
	stx     _pvx+1
	ldx     #$FF
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; } else pkill = 1;
;
	jmp     L1DA9
L1DA2:	lda     #$01
	sta     _pkill
;
; if (cy1 && at1 == 34) {
;
L1DA9:	lda     _cy1
	jeq     L1DAC
	lda     _at1
	cmp     #$22
	jne     L1DAC
;
; -- cy1;
;
	dec     _cy1
;
; _x = cx1; _y = cy1; _t = 0; map_set ();
;
	lda     _cx1
	sta     __x
	lda     _cy1
	sta     __y
	lda     #$00
	sta     __t
	jsr     _map_set
;
; sfx_play (SFX_RING, 2);
;
	lda     #$12
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; prings ++;
;
	lda     _prings
	clc
	adc     #$01
	sta     _prings
;
; if (prings == 100) {
;
	cmp     #$64
	bne     L1DBC
;
; prings = 0;
;
	lda     #$00
	sta     _prings
;
; plife ++;
;
	lda     _plife
	clc
	adc     #$01
	sta     _plife
;
; sfx_play (SFX_USE, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; tile_got [(cy1 << 1) | (cx1 > 7)] |= bits [cx1 & 7];
;
L1DBC:	ldx     #$00
	lda     _cy1
	asl     a
	bcc     L2A21
	inx
L2A21:	sta     ptr1
	stx     ptr1+1
	lda     _cx1
	cmp     #$08
	lda     #$00
	rol     a
	ora     ptr1
	clc
	adc     #<(_tile_got)
	tay
	lda     ptr1+1
	adc     #>(_tile_got)
	tax
	tya
	sta     ptr2
	stx     ptr2+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     sreg
	lda     _cx1
	and     #$07
	sta     ptr1
	tya
	clc
	adc     #>(_bits)
	sta     ptr1+1
	ldy     #<(_bits)
	lda     (ptr1),y
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; if (pbouncing || phit || pkill) {
;
L1DAC:	lda     _pbouncing
	bne     L1DCB
	lda     _phit
	bne     L1DCB
	lda     _pkill
	beq     L1DCA
;
; psprid = CELL_HIT;
;
L1DCB:	lda     #$09
;
; } else if (pspin) {
;
	jmp     L2A2B
L1DCA:	lda     _pspin
	beq     L1DD0
;
; psprid = CELL_SPIN_CYCLE + ((frame_counter >> 4) & 3);
;
	ldx     #$00
	lda     _frame_counter
	jsr     asrax4
	and     #$03
	clc
	adc     #$05
	bcc     L2A2B
;
; } else if (ppossee || pgotten) {
;
	jmp     L2A2B
L1DD0:	lda     _ppossee
	bne     L1DD9
	lda     _pgotten
	beq     L1DD8
;
; if (pvx > PLAYER_VX_MIN || pvx < -PLAYER_VX_MIN) {
;
L1DD9:	lda     _pvx
	cmp     #$19
	lda     _pvx+1
	sbc     #$00
	bvs     L1DDE
	eor     #$80
L1DDE:	bmi     L1DDC
	lda     _pvx
	cmp     #$E8
	lda     _pvx+1
	sbc     #$FF
	bvc     L1DE0
	eor     #$80
L1DE0:	bpl     L1DDB
;
; psprid = CELL_WALK_CYCLE + ((prx >> 3) & 3);
;
L1DDC:	ldx     #$00
	lda     _prx
	jsr     asrax3
	and     #$03
	clc
	adc     #$01
	bcc     L2A2B
;
; } else {
;
	jmp     L2A2B
;
; psprid = CELL_IDLE;
;
L1DDB:	lda     #$00
;
; } else {
;
	jmp     L2A2B
;
; psprid = CELL_AIRBORNE;
;
L1DD8:	lda     #$04
L2A2B:	sta     _psprid
;
; psprid += pfacing;
;
	lda     _pfacing
	clc
	adc     _psprid
	sta     _psprid
;
; prx_old = prx;
;
	lda     _prx
	sta     _prx_old
;
; pry_old = pry;
;
	lda     _pry
	sta     _pry_old
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_update_unsigned_char_arrays (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_update_unsigned_char_arrays: near

.segment	"CODE"

;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v", _en_t);
;
	lda     __en_t
;
; __asm__ ("sta %v, y", en_t);
;
	sta     _en_t,y
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("sta %v, y", en_s);
;
	sta     _en_s,y
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("sta %v, y", en_x);
;
	sta     _en_x,y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("sta %v, y", en_y);
;
	sta     _en_y,y
;
; __asm__ ("lda %v", _en_x1);
;
	lda     __en_x1
;
; __asm__ ("sta %v, y", en_x1);
;
	sta     _en_x1,y
;
; __asm__ ("lda %v", _en_x2);
;
	lda     __en_x2
;
; __asm__ ("sta %v, y", en_x2);
;
	sta     _en_x2,y
;
; __asm__ ("lda %v", _en_y1);
;
	lda     __en_y1
;
; __asm__ ("sta %v, y", en_y1);
;
	sta     _en_y1,y
;
; __asm__ ("lda %v", _en_y2);
;
	lda     __en_y2
;
; __asm__ ("sta %v, y", en_y2);
;
	sta     _en_y2,y
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("sta %v, y", en_mx);
;
	sta     _en_mx,y
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("sta %v, y", en_my);
;
	sta     _en_my,y
;
; __asm__ ("lda %v", _en_ct);
;
	lda     __en_ct
;
; __asm__ ("sta %v, y", en_ct);
;
	sta     _en_ct,y
;
; __asm__ ("lda %v", _en_facing);
;
	lda     __en_facing
;
; __asm__ ("sta %v, y", en_facing);
;
	sta     _en_facing,y
;
; __asm__ ("lda %v", _en_state);
;
	lda     __en_state
;
; __asm__ ("sta %v, y", en_state);
;
	sta     _en_state,y
;
; enf_x [gpit] = _enf_x; enf_vx [gpit] = _enf_vx;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2A3E
	inx
	clc
L2A3E:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	lda     __enf_x
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     __enf_x+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2A3F
	inx
	clc
L2A3F:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	lda     __enf_vx
	dey
	sta     (ptr1),y
	iny
	lda     __enf_vx+1
	sta     (ptr1),y
;
; enf_y [gpit] = _enf_y; enf_vy [gpit] = _enf_vy;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2A40
	inx
	clc
L2A40:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	lda     __enf_y
	dey
	sta     (ptr1),y
	iny
	lda     __enf_y+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2A41
	inx
	clc
L2A41:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	lda     __enf_vy
	dey
	sta     (ptr1),y
	iny
	lda     __enf_vy+1
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_facing (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_facing: near

.segment	"CODE"

;
; _en_facing = rda << 2;
;
	lda     _rda
	asl     a
	asl     a
	sta     __en_facing
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_init_fp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_init_fp: near

.segment	"CODE"

;
; _enf_x = _en_x << 6;
;
	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y = _en_y << 6;
;
	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_boioiong_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_boioiong_init: near

.segment	"CODE"

;
; enems_init_fp ();
;
	jsr     _enems_init_fp
;
; _enf_vy = 0; 
;
	ldx     #$00
	txa
	sta     __enf_vy
	sta     __enf_vy+1
;
; _enf_vx = ADD_SIGN2 (_en_x2, _en_x1, rdm << FIXBITS);
;
	lda     __en_x1
	cmp     __en_x2
	bne     L1E2C
	txa
	jmp     L1E38
L1E2C:	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L1E35
	beq     L1E35
	lda     _rdm
	jsr     aslax4
	jsr     aslax2
	jmp     L1E38
L1E35:	lda     _rdm
	jsr     aslax4
	jsr     aslax2
	jsr     negax
L1E38:	sta     __enf_vx
	stx     __enf_vx+1
;
; _en_ct = 0;
;
	lda     #$00
	sta     __en_ct
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_load: near

.segment	"CODE"

;
; bankswitch (l_enems_chr_rombank [level]);
;
	ldy     _level
	lda     _l_enems_chr_rombank,y
	jsr     _bankswitch
;
; vram_adr (c_enems + (n_pant << 2) + (n_pant << 3)); 
;
	ldx     #$00
	lda     _n_pant
	jsr     aslax2
	clc
	adc     _c_enems
	sta     ptr1
	txa
	adc     _c_enems+1
	sta     ptr1+1
	ldx     #$00
	lda     _n_pant
	jsr     aslax3
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     _vram_adr
;
; rda = VRAM_READ;  // Dummy read.
;
	lda     $2007
	sta     _rda
;
; for (gpit = 0; gpit < 3; ++ gpit) {
;
	lda     #$00
	sta     _gpit
L1E4C:	lda     _gpit
	cmp     #$03
	bcc     L2A4C
;
; }
;
	rts
;
; _en_t = VRAM_READ;
;
L2A4C:	lda     $2007
	sta     __en_t
;
; _en_state = 0;
;
	lda     #$00
	sta     __en_state
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; _en_y1 = rda & 0xf0;
;
	and     #$F0
	sta     __en_y1
;
; _en_x1 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x1
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; _en_y2 = rda & 0xf0;
;
	and     #$F0
	sta     __en_y2
;
; _en_x2 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x2
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; rdd = rda & 0xf0;  // Used for respawn speed!
;
	and     #$F0
	sta     _rdd
;
; rdm = rda & 0x0f;  // Actual speed.
;
	lda     _rda
	and     #$0F
	sta     _rdm
;
; _en_x = _en_x1;
;
	lda     __en_x1
	sta     __en_x
;
; _en_y = _en_y1;
;
	lda     __en_y1
	sta     __en_y
;
; switch (_en_t & 0x3f) {
;
	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L1E7E
	cmp     #$02
	beq     L1E7E
	cmp     #$03
	beq     L1E7E
	cmp     #$04
	beq     L1E7E
	cmp     #$05
	jeq     L1ED7
	cmp     #$06
	jeq     L1EF2
	cmp     #$09
	jeq     L1EFC
	cmp     #$0B
	jeq     L1F07
	cmp     #$0C
	jeq     L1F10
	cmp     #$0D
	jeq     L1F18
	cmp     #$14
	jeq     L1F20
	cmp     #$3F
	jeq     L1F2F
	jmp     L1E7C
;
; _en_ct = 0;   
;
L1E7E:	lda     #$00
	sta     __en_ct
;
; _en_s = (_en_t - 1) << 3;
;
	lda     __en_t
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	sta     __en_s
;
; _en_mx = ADD_SIGN2 (_en_x2, _en_x1, rdm);
;
	lda     __en_x1
	cmp     __en_x2
	bne     L1E90
	lda     #$00
	jmp     L1E9C
L1E90:	ldx     #$00
	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L1E99
	beq     L1E99
	lda     _rdm
	jmp     L1E9C
L1E99:	lda     _rdm
	jsr     negax
L1E9C:	sta     __en_mx
;
; _en_my = ADD_SIGN2 (_en_y2, _en_y1, rdm);
;
	lda     __en_y1
	cmp     __en_y2
	bne     L1EA5
	lda     #$00
	jmp     L1EB1
L1EA5:	ldx     #$00
	lda     __en_y2
	sec
	sbc     __en_y1
	bcc     L1EAE
	beq     L1EAE
	lda     _rdm
	jmp     L1EB1
L1EAE:	lda     _rdm
	jsr     negax
L1EB1:	sta     __en_my
;
; if (rdm == 1) {
;
	lda     _rdm
	cmp     #$01
	bne     L1EB5
;
; en_status [gpit] = 1; 
;
	ldy     _gpit
	sta     _en_status,y
;
; } else {
;
	jmp     L1EBB
;
; en_status [gpit] = 0;
;
L1EB5:	ldy     _gpit
	lda     #$00
	sta     _en_status,y
;
; _en_mx >>= 1;
;
	tax
	lda     __en_mx
	bpl     L1EC1
	dex
L1EC1:	jsr     asrax1
	sta     __en_mx
;
; _en_my >>= 1;
;
	ldx     #$00
	lda     __en_my
	bpl     L1EC4
	dex
L1EC4:	jsr     asrax1
	sta     __en_my
;
; if (_en_x1 > _en_x2) { rda = _en_x1; _en_x1 = _en_x2; _en_x2 = rda; }
;
L1EBB:	lda     __en_x1
	sec
	sbc     __en_x2
	bcc     L1EC6
	beq     L1EC6
	lda     __en_x1
	sta     _rda
	lda     __en_x2
	sta     __en_x1
	lda     _rda
	sta     __en_x2
;
; if (_en_y1 > _en_y2) { rda = _en_y1; _en_y1 = _en_y2; _en_y2 = rda; }
;
L1EC6:	lda     __en_y1
	sec
	sbc     __en_y2
	jcc     L1E7C
	jeq     L1E7C
	lda     __en_y1
	sta     _rda
	lda     __en_y2
	sta     __en_y1
	lda     _rda
	sta     __en_y2
;
; break;
;
	jmp     L1E7C
;
; if (_en_x2 > _en_x1) _en_my = 2;
;
L1ED7:	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L1ED8
	beq     L1ED8
	lda     #$02
;
; else if (_en_x2 < _en_x1) _en_my = 0;
;
	jmp     L2A49
L1ED8:	lda     __en_x2
	cmp     __en_x1
	bcs     L1EDD
	lda     #$00
;
; else if (_en_y2 > _en_y1) _en_my = 3;
;
	jmp     L2A49
L1EDD:	lda     __en_y2
	sec
	sbc     __en_y1
	bcc     L1EE2
	beq     L1EE2
	lda     #$03
;
; else _en_my = 1;
;
	jmp     L2A49
L1EE2:	lda     #$01
L2A49:	sta     __en_my
;
; _en_s = STEADY_SHOOTERS_BASE_SPRID + _en_my;
;
	clc
	adc     #$22
	sta     __en_s
;
; _en_ct = _en_mx = rda;
;
	lda     _rda
	sta     __en_mx
	sta     __en_ct
;
; break;
;
	jmp     L1E7C
;
; enems_init_fp ();
;
L1EF2:	jsr     _enems_init_fp
;
; _enf_vx = _enf_vy = 0;
;
	lda     #$00
	sta     __enf_vy
	sta     __enf_vy+1
	sta     __enf_vx
	sta     __enf_vx+1
;
; _en_ct = FANTY_BASE_TIMER;
;
	lda     #$78
	sta     __en_ct
;
; _en_s = FANTY_BASE_SPRID;
;
	lda     #$32
	sta     __en_s
;
; break;
;
	jmp     L1E7C
;
; _en_my = PEZON_WAIT + (rda << 3); // Speed in colocador defines idle time! (x8)
;
L1EFC:	ldx     #$00
	lda     _rda
	jsr     aslax3
	clc
	adc     #$32
	sta     __en_my
;
; _en_mx = _en_my;
;
	sta     __en_mx
;
; _en_s = PEZONS_BASE_SPRID;
;
	lda     #$3A
	sta     __en_s
;
; break;
;
	jmp     L1E7C
;
; _en_state = 0; _en_ct = MONOCOCO_BASE_TIME_HIDDEN - (rand8 () & 0x15);
;
L1F07:	lda     #$00
	sta     __en_state
	lda     #$96
	jsr     pusha0
	jsr     _rand8
	and     #$15
	jsr     tossuba0
	sta     __en_ct
;
; _en_s = MONOCOCO_BASE_SPRID;
;
	lda     #$22
	sta     __en_s
;
; break;
;
	jmp     L1E7C
;
; enems_init_fp ();
;
L1F10:	jsr     _enems_init_fp
;
; _en_state = 0;
;
	lda     #$00
	sta     __en_state
;
; CATACROCK_WAIT = _en_ct = rdm << 5;
;
	tax
	lda     _rdm
	jsr     aslax4
	asl     a
	sta     __en_ct
;
; break;
;
	jmp     L1F32
;
; enems_boioiong_init ();
;
L1F18:	jsr     _enems_boioiong_init
;
; _en_mx = rdm; // Store
;
	lda     _rdm
	sta     __en_mx
;
; _en_s = BOIOIONG_BASE_SPRID;
;
	lda     #$36
	sta     __en_s
;
; break;
;
	jmp     L1E7C
;
; _en_ct = 0;
;
L1F20:	lda     #$00
	sta     __en_ct
;
; en_rawv [gpit] = _en_s = COMPILED_ENEMS_BASE_SPRID;
;
	lda     #<(_en_rawv)
	ldx     #>(_en_rawv)
	clc
	adc     _gpit
	bcc     L1F25
	inx
L1F25:	jsr     pushax
	lda     #$2A
	sta     __en_s
	ldy     #$00
	jsr     staspidx
;
; en_behptr [gpit] = en_behptrs [rda];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2A4A
	inx
	clc
L2A4A:	adc     #<(_en_behptr)
	tay
	txa
	adc     #>(_en_behptr)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L2A4B
	inx
	clc
L2A4B:	adc     #<(_en_behptrs)
	sta     ptr1
	txa
	adc     #>(_en_behptrs)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; _en_x1 = 1;  // Repurpose for speed
;
	lda     #$01
	sta     __en_x1
;
; break;
;
	jmp     L1E7C
;
; _en_mx = rda;
;
L1F2F:	lda     _rda
L1F32:	sta     __en_mx
;
; en_life [gpit] = ENEMS_LIFE_GAUGE;
;
L1E7C:	ldy     _gpit
	lda     #$01
	sta     _en_life,y
;
; en_cttouched [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_cttouched,y
;
; en_flags [gpit] = 0;
;
	ldy     _gpit
	sta     _en_flags,y
;
; en_invincible [gpit] = 0;
;
	ldy     _gpit
	sta     _en_invincible,y
;
; enems_update_unsigned_char_arrays ();
;
	jsr     _enems_update_unsigned_char_arrays
;
; for (gpit = 0; gpit < 3; ++ gpit) {
;
	inc     _gpit
	jmp     L1E4C

.endproc

; ---------------------------------------------------------------
; void __near__ enems_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_kill: near

.segment	"CODE"

;
; en_flags [gpit] |= EN_STATE_DEAD;
;
	lda     #<(_en_flags)
	ldx     #>(_en_flags)
	clc
	adc     _gpit
	bcc     L1F47
	inx
L1F47:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$01
	sta     (ptr1),y
;
; if (_en_t != 5)
;
	lda     __en_t
	cmp     #$05
	beq     L1F49
;
; ++ pkilled;
;
	inc     _pkilled
;
; }
;
L1F49:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_hit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_hit: near

.segment	"CODE"

;
; _en_facing = ((_en_x < prx) ? 0 : 4);
;
	lda     __en_x
	cmp     _prx
	bcs     L1F51
	lda     #$00
	jmp     L1F53
L1F51:	lda     #$04
L1F53:	sta     __en_facing
;
; en_cttouched [gpit] = ENEMS_TOUCHED_FRAMES;
;
	ldy     _gpit
	lda     #$10
	sta     _en_cttouched,y
;
; -- en_life [gpit]; 
;
	lda     #<(_en_life)
	ldx     #>(_en_life)
	clc
	adc     _gpit
	bcc     L1F5B
	inx
L1F5B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (en_life [gpit] == 0) 
;
	ldy     _gpit
	lda     _en_life,y
;
; enems_kill ();
;
	jeq     _enems_kill
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_move: near

.segment	"CODE"

;
; pgotten = pgtmx = pgtmy = 0;
;
	lda     #$00
	sta     _pgtmy
	sta     _pgtmy+1
	sta     _pgtmx
	sta     _pgtmx+1
	sta     _pgotten
;
; touched = 0;
;
	sta     _touched
;
; ++ en_initial; if (en_initial >= 3) en_initial = 0;
;
	inc     _en_initial
	lda     _en_initial
	cmp     #$03
	bcc     L1F69
	lda     #$00
	sta     _en_initial
;
; gpit = en_initial;
;
L1F69:	lda     _en_initial
	sta     _gpit
;
; gpjt = 3; while (gpjt --) {
;
	lda     #$03
	sta     _gpjt
L1F71:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	bne     L2A99
;
; }
;
	rts
;
; gpit += 2; if (gpit > 2) gpit -=3;
;
L2A99:	lda     #$02
	clc
	adc     _gpit
	sta     _gpit
	cmp     #$03
	bcc     L1F76
	lda     _gpit
	sec
	sbc     #$03
	sta     _gpit
;
; __asm__ ("ldy %v", gpit);
;
L1F76:	ldy     _gpit
;
; __asm__ ("lda %v, y", en_t);
;
	lda     _en_t,y
;
; __asm__ ("sta %v", _en_t);
;
	sta     __en_t
;
; __asm__ ("lda %v, y", en_s);
;
	lda     _en_s,y
;
; __asm__ ("sta %v", _en_s);
;
	sta     __en_s
;
; __asm__ ("lda %v, y", en_x);
;
	lda     _en_x,y
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v, y", en_y);
;
	lda     _en_y,y
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v, y", en_x1);
;
	lda     _en_x1,y
;
; __asm__ ("sta %v", _en_x1);
;
	sta     __en_x1
;
; __asm__ ("lda %v, y", en_x2);
;
	lda     _en_x2,y
;
; __asm__ ("sta %v", _en_x2);
;
	sta     __en_x2
;
; __asm__ ("lda %v, y", en_y1);
;
	lda     _en_y1,y
;
; __asm__ ("sta %v", _en_y1);
;
	sta     __en_y1
;
; __asm__ ("lda %v, y", en_y2);
;
	lda     _en_y2,y
;
; __asm__ ("sta %v", _en_y2);
;
	sta     __en_y2
;
; __asm__ ("lda %v, y", en_mx);
;
	lda     _en_mx,y
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v, y", en_my);
;
	lda     _en_my,y
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; __asm__ ("lda %v, y", en_ct);
;
	lda     _en_ct,y
;
; __asm__ ("sta %v", _en_ct);
;
	sta     __en_ct
;
; __asm__ ("lda %v, y", en_facing);
;
	lda     _en_facing,y
;
; __asm__ ("sta %v", _en_facing);
;
	sta     __en_facing
;
; __asm__ ("lda %v, y", en_state);
;
	lda     _en_state,y
;
; __asm__ ("sta %v", _en_state);
;
	sta     __en_state
;
; _enf_x = enf_x [gpit]; _enf_vx = enf_vx [gpit];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2A7C
	inx
	clc
L2A7C:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     __enf_x+1
	dey
	lda     (ptr1),y
	sta     __enf_x
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2A7D
	inx
	clc
L2A7D:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_vx+1
	dey
	lda     (ptr1),y
	sta     __enf_vx
;
; _enf_y = enf_y [gpit]; _enf_vy = enf_vy [gpit];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2A7E
	inx
	clc
L2A7E:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_y+1
	dey
	lda     (ptr1),y
	sta     __enf_y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2A7F
	inx
	clc
L2A7F:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_vy+1
	dey
	lda     (ptr1),y
	sta     __enf_vy
;
; if (_en_t == 0) continue;
;
	lda     __en_t
	jeq     L1F71
;
; en_is_alive = !(en_flags [gpit] & EN_STATE_DEAD);
;
	ldy     _gpit
	lda     _en_flags,y
	and     #$01
	jsr     bnega
	sta     _en_is_alive
;
; en_spr = 0xff;
;
	lda     #$FF
	sta     _en_spr
;
; en_spr_x_mod = 0;
;
	lda     #$00
	sta     _en_spr_x_mod
;
; if (en_cttouched [gpit]) {
;
	ldy     _gpit
	lda     _en_cttouched,y
	jeq     L1FAC
;
; -- en_cttouched [gpit];
;
	lda     #<(_en_cttouched)
	ldx     #>(_en_cttouched)
	clc
	adc     _gpit
	bcc     L1FB2
	inx
L1FB2:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; rda = frame_counter & 0xf;
;
	lda     _frame_counter
	and     #$0F
	sta     _rda
;
; _en_x + jitter [rda],
;
	jsr     decsp3
	ldy     _rda
	lda     _jitter,y
	clc
	adc     __en_x
	ldy     #$02
	sta     (sp),y
;
; _en_y + jitter [15 - rda] + SPRITE_ADJUST, 
;
	lda     #$0F
	sec
	sbc     _rda
	sta     ptr1
;
; _en_x + jitter [rda],
;
	lda     #$00
;
; _en_y + jitter [15 - rda] + SPRITE_ADJUST, 
;
	clc
	adc     #>(_jitter)
	sta     ptr1+1
	ldy     #<(_jitter)
	lda     (ptr1),y
	clc
	adc     __en_y
	bcc     L2A97
	clc
L2A97:	adc     #$30
	sec
	sbc     #$0C
	bcs     L2A80
	sec
L2A80:	sbc     #$10
	bcs     L2A81
	sec
L2A81:	sbc     #$01
	ldy     #$01
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$41
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; if (en_life [gpit]) en_spr = en_spr_id [gpit];
;
	ldy     _gpit
	lda     _en_life,y
	beq     L1FC3
	ldy     _gpit
	lda     _en_spr_id,y
	sta     _en_spr
;
; en_spr_x_mod = half_life;
;
L1FC3:	lda     _half_life
	sta     _en_spr_x_mod
;
; if (en_cttouched [gpit] == 0 && en_life [gpit])
;
	ldy     _gpit
	lda     _en_cttouched,y
	jne     L23CD
	ldy     _gpit
	lda     _en_life,y
	jeq     L23CD
;
; en_invincible [gpit] = ENEMS_INVINCIBILITY;
;
	ldy     _gpit
	lda     #$19
	sta     _en_invincible,y
;
; } else
;
	jmp     L23CD
;
; if (en_is_alive) {
;
L1FAC:	lda     _en_is_alive
	jeq     L23CD
;
; pregotten = (prx + 7 >= _en_x && prx <= _en_x + 15);
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L1FDF
	inx
L1FDF:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L1FE0
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0F
	bcc     L1FE1
	ldx     #$01
L1FE1:	jsr     tosicmp
	bcc     L1FDE
	beq     L1FDE
L1FE0:	lda     #$00
	jmp     L1FE2
L1FDE:	lda     #$01
L1FE2:	sta     _pregotten
;
; en_fr = ((((_en_mx) ? _en_x : _en_y)+4) >> 3) & 1;
;
	lda     __en_mx
	beq     L1FE9
	lda     __en_x
	jmp     L2A6C
L1FE9:	lda     __en_y
L2A6C:	ldx     #$00
	clc
	adc     #$04
	bcc     L1FED
	inx
L1FED:	jsr     shrax3
	and     #$01
	sta     _en_fr
;
; switch (_en_t & 63) {
;
	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L1FF8
	cmp     #$02
	beq     L1FF8
	cmp     #$03
	beq     L1FF8
	cmp     #$04
	beq     L1FF8
	cmp     #$05
	jeq     L201E
	cmp     #$06
	jeq     L2033
	cmp     #$09
	jeq     L20E5
	cmp     #$0B
	jeq     L2122
	cmp     #$0C
	jeq     L214C
	cmp     #$0D
	jeq     L2182
	cmp     #$14
	jeq     L220E
	cmp     #$3F
	jeq     L220A
	jmp     L1FF0
;
; if (!en_status [gpit] || half_life) {
;
L1FF8:	ldy     _gpit
	lda     _en_status,y
	beq     L1FFA
	lda     _half_life
	beq     L200A
;
; _en_x += _en_mx;
;
L1FFA:	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; _en_y += _en_my;
;
	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; if (_en_x == _en_x1 || _en_x == _en_x2) _en_mx = -_en_mx;
;
	lda     __en_x1
	cmp     __en_x
	beq     L2005
	lda     __en_x2
	cmp     __en_x
	bne     L2004
L2005:	ldx     #$00
	lda     __en_mx
	bpl     L2009
	dex
L2009:	jsr     negax
	sta     __en_mx
;
; if (_en_y == _en_y1 || _en_y == _en_y2) _en_my = -_en_my;      
;
L2004:	lda     __en_y1
	cmp     __en_y
	beq     L200B
	lda     __en_y2
	cmp     __en_y
	bne     L200A
L200B:	ldx     #$00
	lda     __en_my
	bpl     L200F
	dex
L200F:	jsr     negax
	sta     __en_my
;
; rda = _en_mx ? (_en_mx < 0) : (_en_my < 0); enems_facing ();
;
L200A:	lda     __en_mx
	beq     L2012
	lda     __en_mx
	jmp     L2A95
L2012:	lda     __en_my
L2A95:	asl     a
	lda     #$00
	rol     a
	sta     _rda
	jsr     _enems_facing
;
; en_spr = _en_s + en_fr + _en_facing;
;
	lda     __en_s
	clc
	adc     _en_fr
	bcc     L2A82
	clc
L2A82:	adc     __en_facing
;
; break;
;
	jmp     L2A90
;
; if (ticker == 0) {
;
L201E:	lda     _ticker
	bne     L2024
;
; if (_en_ct) -- _en_ct; else {
;
	lda     __en_ct
	beq     L2021
	dec     __en_ct
	jmp     L2024
;
; _en_ct = _en_mx; // reset counter
;
L2021:	lda     __en_mx
	sta     __en_ct
;
; rda = _en_my;   // direction
;
	lda     __en_my
	sta     _rda
;
; rdx = _en_x + 4;
;
	lda     __en_x
	clc
	adc     #$04
	sta     _rdx
;
; rdy = _en_y + 4;
;
	lda     __en_y
	clc
	adc     #$04
	sta     _rdy
;
; cocos_shoot_linear ();
;
	jsr     _cocos_shoot_linear
;
; en_spr = _en_s;
;
L2024:	lda     __en_s
;
; break;
;
	jmp     L2A90
;
; if (_en_ct) _en_ct --; else {
;
L2033:	lda     __en_ct
	beq     L2034
	lda     __en_ct
	sec
	sbc     #$01
	sta     __en_ct
	jmp     L20D1
;
; if (px < _enf_x) {
;
L2034:	lda     _px
	cmp     __enf_x
	lda     _px+1
	sbc     __enf_x+1
	bvc     L2A61
	eor     #$80
L2A61:	bpl     L2038
;
; _enf_vx -= FANTY_A; if (_enf_vx < -FANTY_MAXV) _enf_vx = -FANTY_MAXV;
;
	lda     __enf_vx
	sec
	sbc     #$04
	sta     __enf_vx
	bcs     L203C
	dec     __enf_vx+1
L203C:	lda     __enf_vx
	cmp     #$D0
	lda     __enf_vx+1
	sbc     #$FF
	bvc     L203F
	eor     #$80
L203F:	bpl     L2046
	ldx     #$FF
	lda     #$D0
;
; } else {
;
	jmp     L2A91
;
; _enf_vx += FANTY_A; if (_enf_vx > FANTY_MAXV) _enf_vx = FANTY_MAXV;
;
L2038:	lda     #$04
	clc
	adc     __enf_vx
	sta     __enf_vx
	bcc     L2045
	inc     __enf_vx+1
L2045:	lda     __enf_vx
	cmp     #$31
	lda     __enf_vx+1
	sbc     #$00
	bvs     L2048
	eor     #$80
L2048:	bpl     L2046
	ldx     #$00
	lda     #$30
L2A91:	sta     __enf_vx
	stx     __enf_vx+1
;
; if (py < _enf_y) {
;
L2046:	lda     _py
	cmp     __enf_y
	lda     _py+1
	sbc     __enf_y+1
	bvc     L2A62
	eor     #$80
L2A62:	bpl     L204B
;
; _enf_vy -= FANTY_A; if (_enf_vy < -FANTY_MAXV) _enf_vy = -FANTY_MAXV;
;
	lda     __enf_vy
	sec
	sbc     #$04
	sta     __enf_vy
	bcs     L204F
	dec     __enf_vy+1
L204F:	lda     __enf_vy
	cmp     #$D0
	lda     __enf_vy+1
	sbc     #$FF
	bvc     L2052
	eor     #$80
L2052:	bpl     L2059
	ldx     #$FF
	lda     #$D0
;
; } else {
;
	jmp     L2A92
;
; _enf_vy += FANTY_A; if (_enf_vy > FANTY_MAXV) _enf_vy = FANTY_MAXV;
;
L204B:	lda     #$04
	clc
	adc     __enf_vy
	sta     __enf_vy
	bcc     L2058
	inc     __enf_vy+1
L2058:	lda     __enf_vy
	cmp     #$31
	lda     __enf_vy+1
	sbc     #$00
	bvs     L205B
	eor     #$80
L205B:	bpl     L2059
	ldx     #$00
	lda     #$30
L2A92:	sta     __enf_vy
	stx     __enf_vy+1
;
; _enf_x += _enf_vx; 
;
L2059:	lda     __enf_vx
	clc
	adc     __enf_x
	sta     __enf_x
	lda     __enf_vx+1
	adc     __enf_x+1
	sta     __enf_x+1
;
; if (_enf_x < 0) _enf_x = 0;
;
	ldx     __enf_x+1
	cpx     #$80
	bcc     L2060
	lda     #$00
	sta     __enf_x
	sta     __enf_x+1
;
; if (_enf_x > 15360) _enf_x = 15360;
;
L2060:	lda     __enf_x
	cmp     #$01
	lda     __enf_x+1
	sbc     #$3C
	bvs     L2066
	eor     #$80
L2066:	bpl     L2064
	ldx     #$3C
	lda     #$00
	sta     __enf_x
	stx     __enf_x+1
;
; _en_x = _enf_x >> 6;
;
L2064:	lda     __enf_x
	ldx     __enf_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; if (_enf_vx) {
;
	lda     __enf_vx
	ora     __enf_vx+1
	jeq     L2090
;
; cy1 = (_en_y + 4) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$04
	bcc     L2070
	inx
L2070:	jsr     shrax4
	sta     _cy1
;
; cy2 = (_en_y + 11) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0B
	bcc     L2074
	inx
L2074:	jsr     shrax4
	sta     _cy2
;
; if (_enf_vx > 0) {
;
	lda     __enf_vx
	cmp     #$01
	lda     __enf_vx+1
	sbc     #$00
	bvs     L2077
	eor     #$80
L2077:	bpl     L2075
;
; cx1 = cx2 = (_en_x + 11) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L207C
	inx
L207C:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cx2
	sec
	sbc     #$01
	bcs     L2081
	dex
L2081:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L2A70
;
; cx1 = cx2 = (_en_x + 4) >> 4;
;
L2075:	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L2088
	inx
L2088:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cx1
	clc
	adc     #$01
	bcc     L208D
	inx
L208D:	jsr     shlax4
	sec
	sbc     #$04
L2A70:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L2091
	lda     _at2
	and     #$08
	beq     L2090
;
; _enf_vx = -_enf_vx;
;
L2091:	lda     __enf_vx
	ldx     __enf_vx+1
	jsr     negax
	sta     __enf_vx
	stx     __enf_vx+1
;
; _en_x = rda; 
;
	lda     _rda
	sta     __en_x
;
; _enf_x = rda << FIXBITS;
;
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y += _enf_vy; 
;
L2090:	lda     __enf_vy
	clc
	adc     __enf_y
	sta     __enf_y
	lda     __enf_vy+1
	adc     __enf_y+1
	sta     __enf_y+1
;
; if (_enf_y < 0) _enf_y = 0;
;
	ldx     __enf_y+1
	cpx     #$80
	bcc     L209D
	lda     #$00
	sta     __enf_y
	sta     __enf_y+1
;
; if (_enf_y > 11264) _enf_y = 11264;
;
L209D:	lda     __enf_y
	cmp     #$01
	lda     __enf_y+1
	sbc     #$2C
	bvs     L20A3
	eor     #$80
L20A3:	bpl     L20A1
	ldx     #$2C
	lda     #$00
	sta     __enf_y
	stx     __enf_y+1
;
; _en_y = _enf_y >> 6;
;
L20A1:	lda     __enf_y
	ldx     __enf_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
;
; if (_enf_vy) {
;
	lda     __enf_vy
	ora     __enf_vy+1
	jeq     L20D1
;
; cx1 = (_en_x + 4) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L20AD
	inx
L20AD:	jsr     shrax4
	sta     _cx1
;
; cx2 = (_en_x + 11) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L20B1
	inx
L20B1:	jsr     shrax4
	sta     _cx2
;
; if (_enf_vy > 0) {
;
	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$00
	bvs     L20B4
	eor     #$80
L20B4:	bpl     L20B2
;
; rdb = 12;
;
	lda     #$0C
	sta     _rdb
;
; cy1 = cy2 = (_en_y + 11) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0B
	bcc     L20BB
	inx
L20BB:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L20C0
	dex
L20C0:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L2A71
;
; rdb = 8;
;
L20B2:	lda     #$08
	sta     _rdb
;
; cy1 = cy2 = (_en_y + 4) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$04
	bcc     L20C9
	inx
L20C9:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L20CE
	inx
L20CE:	jsr     shlax4
	sec
	sbc     #$04
L2A71:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & rdb) || (at2 & rdb)) {
;
	lda     _rdb
	and     _at1
	pha
	pla
	bne     L20D2
	lda     _rdb
	and     _at2
	pha
	pla
	beq     L20D1
;
; _enf_vy = -_enf_vy;
;
L20D2:	lda     __enf_vy
	ldx     __enf_vy+1
	jsr     negax
	sta     __enf_vy
	stx     __enf_vy+1
;
; _en_y = rda;
;
	lda     _rda
	sta     __en_y
;
; _enf_y = rda << FIXBITS;
;
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; en_fr = half_life;
;
L20D1:	lda     _half_life
	sta     _en_fr
;
; rda = (prx < _en_x); enems_facing ();
;
	lda     _prx
	cmp     __en_x
	jsr     boolult
	sta     _rda
	jsr     _enems_facing
;
; en_spr = _en_s + en_fr + _en_facing;
;
	lda     __en_s
	clc
	adc     _en_fr
	bcc     L2A83
	clc
L2A83:	adc     __en_facing
;
; break;
;
	jmp     L2A90
;
; _en_x1, _en_y1 + SPRITE_ADJUST, 
;
L20E5:	jsr     decsp3
	lda     __en_x1
	ldy     #$02
	sta     (sp),y
	lda     __en_y1
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2A84
	sec
L2A84:	sbc     #$10
	bcs     L2A85
	sec
L2A85:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_OCCLUDING_CELL]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_OCCLUDING_CELL]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$43
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; switch (_en_state) {
;
	lda     __en_state
;
; }
;
	beq     L20F5
	cmp     #$01
	beq     L2105
	jmp     L20F3
;
; if (_en_mx) {
;
L20F5:	lda     __en_mx
	beq     L20F6
;
; -- _en_mx;
;
	dec     __en_mx
	lda     __en_mx
	jpl     L20F3
;
; } else {
;
	jmp     L20F3
;
; _en_state = 1;
;
L20F6:	lda     #$01
	sta     __en_state
;
; _enf_y = _en_y1 << 6;
;
	ldx     #$00
	lda     __en_y1
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; _enf_vy = -PEZON_THRUST;
;
	ldx     #$FE
	lda     #$00
	sta     __enf_vy
	stx     __enf_vy+1
;
; sfx_play (SFX_FLOAT, 1);
;
	lda     #$10
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; break;
;
	jmp     L20F3
;
; _enf_vy += PEZON_G;
;
L2105:	lda     #$10
	clc
	adc     __enf_vy
	sta     __enf_vy
	bcc     L2108
	inc     __enf_vy+1
;
; if (_enf_vy > PEZON_VY_FALLING_MAX) _enf_vy = PEZON_VY_FALLING_MAX;
;
L2108:	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$01
	bvs     L210B
	eor     #$80
L210B:	bpl     L2109
	ldx     #$01
	lda     #$00
	sta     __enf_vy
	stx     __enf_vy+1
;
; _enf_y += _enf_vy;
;
L2109:	lda     __enf_vy
	clc
	adc     __enf_y
	sta     __enf_y
	lda     __enf_vy+1
	adc     __enf_y+1
	sta     __enf_y+1
;
; _en_y = _enf_y >> 6;
;
	lda     __enf_y
	ldx     __enf_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
;
; if (_en_y >= _en_y1) {
;
	cmp     __en_y1
	bcc     L2112
;
; _en_state = 0;
;
	lda     #$00
	sta     __en_state
;
; _en_mx = _en_my;
;
	lda     __en_my
	sta     __en_mx
;
; } else {
;
	jmp     L20F3
;
; en_spr = PEZONS_BASE_SPRID + (_enf_vy >= -64);
;
L2112:	lda     __enf_vy
	cmp     #$C0
	lda     __enf_vy+1
	sbc     #$FF
	bvs     L211D
	eor     #$80
L211D:	asl     a
	lda     #$00
	rol     a
	clc
	adc     #$3A
	sta     _en_spr
;
; _en_facing = 0;
;
L20F3:	lda     #$00
	sta     __en_facing
;
; break;
;
	jmp     L1FF0
;
; -- _en_ct; if (!_en_ct) {
;
L2122:	dec     __en_ct
	lda     __en_ct
	bne     L2124
;
; _en_state = (_en_state + 1) & 3; _en_ct = monococo_state_times [_en_state] - (rand8 () & 0x15);
;
	lda     __en_state
	clc
	adc     #$01
	and     #$03
	sta     __en_state
	ldy     __en_state
	lda     _monococo_state_times,y
	jsr     pusha0
	jsr     _rand8
	and     #$15
	jsr     tossuba0
	sta     __en_ct
;
; if (_en_state == 2 && _en_ct == MONOCOCO_FIRE_COCO_AT) {
;
L2124:	lda     __en_state
	cmp     #$02
	bne     L212F
	lda     __en_ct
	cmp     #$19
	bne     L212F
;
; rdx = _en_x + 4; rdy = _en_y + 4; cocos_shoot_aimed ();
;
	lda     __en_x
	clc
	adc     #$04
	sta     _rdx
	lda     __en_y
	clc
	adc     #$04
	sta     _rdy
	jsr     _cocos_shoot_aimed
;
; rda = (prx < rdx); enems_facing ();
;
L212F:	lda     _prx
	cmp     _rdx
	jsr     boolult
	sta     _rda
	jsr     _enems_facing
;
; ((_en_state == 1 || _en_state == 3) && half_life) ||
;
	lda     __en_state
	cmp     #$01
	beq     L2141
	lda     __en_state
	cmp     #$03
	bne     L2A65
L2141:	lda     _half_life
	bne     L213F
;
; _en_state == 2
;
L2A65:	lda     __en_state
;
; ) {
;
	cmp     #$02
	jne     L1FF0
;
; en_spr = MONOCOCO_BASE_SPRID + _en_facing + ((frame_counter >> 5) & 1);
;
L213F:	lda     __en_facing
	clc
	adc     #$22
	sta     ptr1
	ldx     #$00
	lda     _frame_counter
	jsr     asrax4
	jsr     asrax1
	and     #$01
	clc
	adc     ptr1
;
; break;
;
	jmp     L2A90
;
; switch (_en_state) {
;
L214C:	lda     __en_state
;
; }
;
	beq     L2151
	cmp     #$01
	beq     L215D
	cmp     #$02
	jeq     L2173
	jmp     L214F
;
; if (_en_ct) _en_ct --; else {
;
L2151:	lda     __en_ct
	beq     L2152
	lda     __en_ct
	sec
	sbc     #$01
	sta     __en_ct
	jmp     L214F
;
; _en_state = 1;
;
L2152:	lda     #$01
	sta     __en_state
;
; _enf_y = _en_y << FIXBITS; _enf_vy = 0;
;
	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
	lda     #$00
	sta     __enf_vy
	sta     __enf_vy+1
;
; break;
;
	jmp     L214F
;
; _enf_vy += CATACROCK_G; if (_enf_vy > CATACROCK_MAX_V) _enf_vy = CATACROCK_MAX_V;
;
L215D:	lda     #$10
	clc
	adc     __enf_vy
	sta     __enf_vy
	bcc     L2160
	inc     __enf_vy+1
L2160:	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$01
	bvs     L2163
	eor     #$80
L2163:	bpl     L2161
	ldx     #$01
	lda     #$00
	sta     __enf_vy
	stx     __enf_vy+1
;
; _enf_y += _enf_vy; _en_y = _enf_y >> FIXBITS;
;
L2161:	lda     __enf_vy
	clc
	adc     __enf_y
	sta     __enf_y
	lda     __enf_vy+1
	adc     __enf_y+1
	sta     __enf_y+1
	lda     __enf_y
	ldx     __enf_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
;
; if (_en_y > _en_y2) {
;
	sec
	sbc     __en_y2
	bcc     L214F
	beq     L214F
;
; _en_state = 2;
;
	lda     #$02
	sta     __en_state
;
; _en_ct = CATACROCK_CROCK_FRAMES;
;
	lda     #$32
	sta     __en_ct
;
; _en_y = _en_y2;
;
	lda     __en_y2
;
; break;
;
	jmp     L2A72
;
; if (_en_ct) _en_ct --; else {
;
L2173:	lda     __en_ct
	beq     L2174
	lda     __en_ct
	sec
	sbc     #$01
	sta     __en_ct
	jmp     L214F
;
; _en_state = 0;
;
L2174:	sta     __en_state
;
; _en_ct = CATACROCK_WAIT;
;
	lda     __en_mx
	sta     __en_ct
;
; _en_y = _en_y1;
;
	lda     __en_y1
L2A72:	sta     __en_y
;
; en_spr = _en_state + CATACROCK_BASE_SPRID;
;
L214F:	lda     __en_state
	clc
	adc     #$32
;
; break;
;
	jmp     L2A90
;
; if (_en_ct) {
;
L2182:	lda     __en_ct
	jeq     L1FF0
;
; _en_ct --;  
;
	lda     __en_ct
	sec
	sbc     #$01
	sta     __en_ct
;
; _enf_vy += BOIOIONG_G; if (_enf_vy > BOIOIONG_VY_MAX) _enf_vy = BOIOIONG_VY_MAX;
;
	lda     #$10
	clc
	adc     __enf_vy
	sta     __enf_vy
	bcc     L2188
	inc     __enf_vy+1
L2188:	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$01
	bvs     L218B
	eor     #$80
L218B:	bpl     L2189
	ldx     #$01
	lda     #$00
	sta     __enf_vy
	stx     __enf_vy+1
;
; _enf_y += _enf_vy;
;
L2189:	lda     __enf_vy
	clc
	adc     __enf_y
	sta     __enf_y
	lda     __enf_vy+1
	adc     __enf_y+1
	sta     __enf_y+1
;
; if (_enf_y < 0) _enf_y = 0;
;
	ldx     __enf_y+1
	cpx     #$80
	bcc     L2190
	lda     #$00
	sta     __enf_y
	sta     __enf_y+1
;
; if (_enf_y > (192 << FIXBITS)) _enf_y = (192 << FIXBITS);
;
L2190:	lda     __enf_y
	cmp     #$01
	lda     __enf_y+1
	sbc     #$30
	bvs     L2197
	eor     #$80
L2197:	bpl     L2194
	ldx     #$30
	lda     #$00
	sta     __enf_y
	stx     __enf_y+1
;
; _en_y = _enf_y >> FIXBITS; _en_x = _enf_x >> FIXBITS;
;
L2194:	lda     __enf_y
	ldx     __enf_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
	lda     __enf_x
	ldx     __enf_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; cx1 = _en_x >> 4; cx2 = (_en_x + 15) >> 4; rda = 0;
;
	ldx     #$00
	lda     __en_x
	jsr     asrax4
	sta     _cx1
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0F
	bcc     L21A4
	inx
L21A4:	jsr     shrax4
	sta     _cx2
	lda     #$00
	sta     _rda
;
; if (_enf_vy > 0) {
;
	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$00
	bvs     L21A9
	eor     #$80
L21A9:	bpl     L21A7
;
; cy1 = cy2 = (_en_y + 15) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0F
	bcc     L21AE
	inx
L21AE:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = 13; rds = -16;
;
	lda     #$0D
	sta     _rda
	lda     #$F0
;
; } else if (_enf_vy < 0) {
;
	jmp     L2A73
L21A7:	ldx     __enf_vy+1
	cpx     #$80
	bcc     L21B4
;
; cy1 = cy2 = _en_y >> 4;
;
	ldx     #$00
	lda     __en_y
	jsr     asrax4
	sta     _cy2
	sta     _cy1
;
; rda = 9; rds = 16;
;
	lda     #$09
	sta     _rda
	lda     #$10
L2A73:	sta     _rds
;
; if (rda) {
;
L21B4:	lda     _rda
	beq     L21C0
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & rda) || (at2 & rda)) {
;
	ldx     #$00
	lda     _rda
	and     _at1
	pha
	pla
	bne     L21C1
	lda     _rda
	and     _at2
	pha
	pla
	beq     L21C0
;
; _en_y = rds + (cy1 << 4);
;
L21C1:	lda     _rds
	bpl     L21C7
	dex
L21C7:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _cy1
	jsr     aslax4
	clc
	adc     ptr1
	sta     __en_y
	txa
	adc     ptr1+1
;
; _enf_vy = -_enf_vy;
;
	lda     __enf_vy
	ldx     __enf_vy+1
	jsr     negax
	sta     __enf_vy
	stx     __enf_vy+1
;
; _enf_y = _en_y << FIXBITS;
;
L21C0:	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; _enf_x += _enf_vx;
;
	lda     __enf_vx
	clc
	adc     __enf_x
	sta     __enf_x
	lda     __enf_vx+1
	adc     __enf_x+1
	sta     __enf_x+1
;
; _en_x = _enf_x >> FIXBITS;
;
	lda     __enf_x
	ldx     __enf_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; if (_enf_x < 0) _enf_x = 0;
;
	ldx     __enf_x+1
	cpx     #$80
	bcc     L21D1
	lda     #$00
	sta     __enf_x
	sta     __enf_x+1
;
; if (_enf_x > (240 << FIXBITS)) _enf_x = (240 << FIXBITS);
;
L21D1:	lda     __enf_x
	cmp     #$01
	lda     __enf_x+1
	sbc     #$3C
	bvs     L21D8
	eor     #$80
L21D8:	bpl     L21D5
	ldx     #$3C
	lda     #$00
	sta     __enf_x
	stx     __enf_x+1
;
; cy1 = _en_y >> 4; cy2 = (_en_y + 15) >> 4; rda = 0;
;
L21D5:	ldx     #$00
	lda     __en_y
	jsr     asrax4
	sta     _cy1
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0F
	bcc     L21E1
	inx
L21E1:	jsr     shrax4
	sta     _cy2
	lda     #$00
	sta     _rda
;
; if (_enf_vx) {
;
	lda     __enf_vx
	ora     __enf_vx+1
	beq     L21F7
;
; if (_enf_vx > 0) {
;
	lda     __enf_vx
	cmp     #$01
	lda     __enf_vx+1
	sbc     #$00
	bvs     L21E8
	eor     #$80
L21E8:	bpl     L21E6
;
; cx1 = cx2 = (_en_x + 15) >> 4; rds = -16;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0F
	bcc     L21ED
	inx
L21ED:	jsr     shrax4
	sta     _cx2
	sta     _cx1
	lda     #$F0
;
; } else {
;
	jmp     L2A74
;
; cx1 = cx2 = _en_x >> 4; rds = 16;
;
L21E6:	ldx     #$00
	lda     __en_x
	jsr     asrax4
	sta     _cx2
	sta     _cx1
	lda     #$10
L2A74:	sta     _rds
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 | at2) & 9) {
;
	ldx     #$00
	lda     _at2
	ora     _at1
	and     #$09
	beq     L21F7
;
; _en_x = rds + (cx1 << 4);
;
	lda     _rds
	bpl     L21FC
	dex
L21FC:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _cx1
	jsr     aslax4
	clc
	adc     ptr1
	sta     __en_x
	txa
	adc     ptr1+1
;
; _enf_vx = -_enf_vx;
;
	lda     __enf_vx
	ldx     __enf_vx+1
	jsr     negax
	sta     __enf_vx
	stx     __enf_vx+1
;
; _enf_x = _en_x << FIXBITS;
;
L21F7:	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; if (_en_ct > 50 || half_life) {
;
	lda     __en_ct
	cmp     #$33
	bcs     L2203
	lda     _half_life
	jeq     L1FF0
;
; en_spr = _en_s + ((frame_counter >> 2) & 1);
;
L2203:	ldx     #$00
	lda     _frame_counter
	jsr     asrax2
	and     #$01
	clc
	adc     __en_s
;
; break;
;
	jmp     L2A90
;
; en_spr = SIMPLE_WARPERS_BASE_SPRID;
;
L220A:	lda     #$21
;
; break;
;
	jmp     L2A90
;
; if (_en_ct) {
;
L220E:	lda     __en_ct
	beq     L220F
;
; switch (_en_state) {
;
	lda     __en_state
;
; }
;
	beq     L2213
	cmp     #$01
	bne     L2213
;
; rdx = _en_x; _en_x += _en_mx;
;
	lda     __en_x
	sta     _rdx
	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; rdy = _en_y; _en_y += _en_my;
;
	lda     __en_y
	sta     _rdy
	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; -- _en_ct;
;
L2213:	dec     __en_ct
;
; } else {
;
	jmp     L2223
;
; rda = *en_behptr [gpit] ++;
;
L220F:	tax
	lda     _gpit
	asl     a
	bcc     L2A86
	inx
	clc
L2A86:	adc     #<(_en_behptr)
	tay
	txa
	adc     #>(_en_behptr)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2227
	inx
L2227:	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
	dey
	lda     (regsave),y
	sta     _rda
;
; _en_state = 0;
;
	sty     __en_state
;
; rdc = (rda & 0x38) >> 3;
;
	lda     _rda
	and     #$38
	lsr     a
	lsr     a
	lsr     a
	sta     _rdc
;
; rdt = rda & 0x07;
;
	lda     _rda
	and     #$07
	sta     _rdt
;
; switch (rda & 0xc0) { // Command
;
	lda     _rda
	and     #$C0
;
; }
;
	beq     L2233
	cmp     #$40
	jeq     L224A
	cmp     #$80
	jeq     L2269
	cmp     #$C0
	jeq     L2279
	jmp     L2223
;
; if (rdt == 0) {
;
L2233:	lda     _rdt
	bne     L2234
;
; do_extern_action (*en_behptr [gpit] ++);    
;
	tax
	lda     _gpit
	asl     a
	bcc     L2A87
	inx
	clc
L2A87:	adc     #<(_en_behptr)
	tay
	txa
	adc     #>(_en_behptr)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2239
	inx
L2239:	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
	dey
	lda     (regsave),y
	jsr     pusha
	jsr     _do_extern_action
;
; } else {
;
	jmp     L2223
;
; rdb = 0; while (rdt --) rdb += 25;
;
L2234:	tya
L2A75:	sta     _rdb
	lda     _rdt
	pha
	sec
	sbc     #$01
	sta     _rdt
	pla
	tax
	beq     L223E
	lda     #$19
	clc
	adc     _rdb
	jmp     L2A75
;
; _en_ct = rdb;
;
L223E:	lda     _rdb
	sta     __en_ct
;
; en_rawv [gpit] = _en_s + 2 + _en_facing;
;
	lda     #<(_en_rawv)
	ldx     #>(_en_rawv)
	clc
	adc     _gpit
	bcc     L2246
	inx
L2246:	sta     ptr1
	stx     ptr1+1
	lda     __en_s
	clc
	adc     #$02
	bcc     L2A88
	clc
L2A88:	adc     __en_facing
	ldy     #$00
	sta     (ptr1),y
;
; break;
;
	jmp     L2223
;
; _en_mx = endx [rdc] << _en_x1; _en_my = endy [rdc] << _en_x1;
;
L224A:	lda     #<(_endx)
	ldx     #>(_endx)
	clc
	adc     _rdc
	bcc     L224E
	inx
L224E:	jsr     ldaidx
	jsr     pushax
	lda     __en_x1
	jsr     tosaslax
	sta     __en_mx
	lda     #<(_endy)
	ldx     #>(_endy)
	clc
	adc     _rdc
	bcc     L2252
	inx
L2252:	ldy     #$00
	jsr     ldaidx
	jsr     pushax
	lda     __en_x1
	jsr     tosaslax
	sta     __en_my
;
; if (_en_mx < 0) _en_facing = 4;
;
	lda     __en_mx
	asl     a
	bcc     L2253
	lda     #$04
;
; else if (_en_mx > 0) _en_facing = 0;
;
	jmp     L2A76
L2253:	lda     __en_mx
	sec
	sbc     #$01
	bvs     L225C
	eor     #$80
L225C:	bpl     L2258
	lda     #$00
L2A76:	sta     __en_facing
;
; en_rawv [gpit] = _en_s + _en_facing;
;
L2258:	lda     #<(_en_rawv)
	ldx     #>(_en_rawv)
	clc
	adc     _gpit
	bcc     L2261
	inx
L2261:	sta     ptr1
	stx     ptr1+1
	lda     __en_s
	clc
	adc     __en_facing
	ldy     #$00
	sta     (ptr1),y
;
; _en_ct = (rdt << 4) >> _en_x1; _en_state = 1;
;
	ldx     #$00
	lda     _rdt
	jsr     aslax4
	jsr     pushax
	lda     __en_x1
	jsr     tosasrax
	sta     __en_ct
	lda     #$01
	sta     __en_state
;
; break;
;
	jmp     L2223
;
; rdb = rda & 0x3f;
;
L2269:	lda     _rda
	and     #$3F
	sta     _rdb
;
; if (rdb > 0x3b) {
;
	cmp     #$3C
	bcc     L226C
;
; _en_x1 =0x3f - rda; // 0 for 1, 1 for 2, 2 for 4, 3 for 8
;
	lda     #$3F
	sec
	sbc     _rda
	sta     __en_x1
;
; } else {
;
	jmp     L2223
;
; rdx = _en_x + 4; rdy = _en_y + 4; cocos_shoot_aimed ();
;
L226C:	lda     __en_x
	clc
	adc     #$04
	sta     _rdx
	lda     __en_y
	clc
	adc     #$04
	sta     _rdy
	jsr     _cocos_shoot_aimed
;
; break;
;
	jmp     L2223
;
; en_behptr [gpit] -= ((rda & 0x3f) + 1);
;
L2279:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2A89
	inx
	clc
L2A89:	adc     #<(_en_behptr)
	tay
	txa
	adc     #>(_en_behptr)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     _rda
	ldx     #$00
	and     #$3F
	clc
	adc     #$01
	bcc     L227F
	inx
L227F:	jsr     tossubax
	ldy     #$00
	jsr     staxspidx
;
; en_spr = en_rawv [gpit];
;
L2223:	ldy     _gpit
	lda     _en_rawv,y
	sta     _en_spr
;
; switch (_en_state) {
;
	lda     __en_state
;
; }
;
	beq     L2288
	cmp     #$01
	beq     L228E
	jmp     L1FF0
;
; en_spr += ((frame_counter >> 3) & 1); 
;
L2288:	tax
	lda     _frame_counter
	jsr     asrax3
	and     #$01
;
; break;
;
	jmp     L2A98
;
; en_spr += en_fr;
;
L228E:	lda     _en_fr
L2A98:	clc
	adc     _en_spr
L2A90:	sta     _en_spr
;
; en_spr_id [gpit] = en_spr;
;
L1FF0:	ldy     _gpit
	lda     _en_spr
	sta     _en_spr_id,y
;
; if (!pkill) {
;
	lda     _pkill
	jne     L23CD
;
; if (_en_t == 0xff) {
;
	lda     __en_t
	cmp     #$FF
	bne     L2297
;
; ) {
;
	jsr     _collide
	tax
	jeq     L23CD
;
; n_pant = _en_mx; on_pant = 0xff;
;
	lda     __en_mx
	sta     _n_pant
	lda     #$FF
	sta     _on_pant
;
; prx = _en_x2; px = prx << FIXBITS;
;
	lda     __en_x2
	sta     _prx
	ldx     #$00
	lda     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; pry = _en_y2; py = pry << FIXBITS;
;
	lda     __en_y2
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; player_stop ();
;
	jsr     _player_stop
;
; b_button = 0;
;
	lda     #$00
	sta     _b_button
;
; break;
;
	rts
;
; if (_en_t == 4 && pregotten && !pgotten && !pj) {
;
L2297:	lda     __en_t
	cmp     #$04
	jne     L22C5
	lda     _pregotten
	jeq     L22C5
	lda     _pgotten
	jne     L22C5
	lda     _pj
	jne     L22C5
;
; if (_en_mx) {
;
	lda     __en_mx
	beq     L22B1
;
; if (pry + 16 >= _en_y && pry + 12 <= _en_y) {
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L22B3
	inx
L22B3:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L22B1
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L22B5
	inx
L22B5:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L22B2
	bne     L22B1
;
; pgotten = 1;
;
L22B2:	lda     #$01
	sta     _pgotten
;
; pgtmx = _en_mx << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_mx
	bpl     L22BB
	dex
L22BB:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmx
	stx     _pgtmx+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L22C2
	dex
L22C2:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; (_en_my < 0 && pry + 17 >= _en_y && pry + 12 <= _en_y) ||
;
L22B1:	lda     __en_my
	asl     a
	bcc     L2A66
	ldx     #$00
	lda     _pry
	clc
	adc     #$11
	bcc     L22CA
	inx
L22CA:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L2A66
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L22CB
	inx
L22CB:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L22C6
	beq     L22C6
;
; (_en_my > 0 && pry + 16 + _en_my >= _en_y && pry + 12 <= _en_y)
;
L2A66:	lda     __en_my
	sec
	sbc     #$01
	bvs     L22CF
	eor     #$80
L22CF:	jpl     L22C5
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L22D1
	inx
L22D1:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __en_my
	bpl     L22D2
	dex
L22D2:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	cmp     __en_y
	txa
	sbc     #$00
	bcc     L22C5
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L22D3
	inx
L22D3:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L22C6
	bne     L22C5
;
; pgotten = 1;
;
L22C6:	lda     #$01
	sta     _pgotten
;
; pgtmy = _en_my << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_my
	bpl     L22DA
	dex
L22DA:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmy
	stx     _pgtmy+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L22E1
	dex
L22E1:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; if (pgotten) pspin = 0;
;
L22C5:	lda     _pgotten
	beq     L22E6
	lda     #$00
	sta     _pspin
;
; if (en_invincible [gpit]) {
;
L22E6:	ldy     _gpit
	lda     _en_invincible,y
	beq     L22F1
;
; -- en_invincible [gpit];
;
	lda     #<(_en_invincible)
	ldx     #>(_en_invincible)
	clc
	adc     _gpit
	bcc     L22F0
	inx
L22F0:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (half_life) en_spr = 0xff;
;
	lda     _half_life
	beq     L22F1
	lda     #$FF
	sta     _en_spr
;
; en_is_alive == 0 // General condition.
;
L22F1:	lda     _en_is_alive
;
; || en_cttouched [gpit]
;
	jeq     L23CD
	ldy     _gpit
	lda     _en_cttouched,y
;
; || _en_t == 4
;
	jne     L23CD
	lda     __en_t
;
; || (_en_t == 9 && _en_state == 0)
;
	cmp     #$04
	jeq     L23CD
	lda     __en_t
	cmp     #$09
	bne     L2A68
	lda     __en_state
	jeq     L23CD
;
; || (_en_t == 11 && _en_mx != 2)
;
L2A68:	lda     __en_t
	cmp     #$0B
	bne     L2A69
	lda     __en_mx
	cmp     #$02
	jne     L23CD
;
; || (_en_t == 12 && _en_state != 1)
;
L2A69:	lda     __en_t
	cmp     #$0C
	bne     L2A6A
	lda     __en_state
	cmp     #$01
	jne     L23CD
;
; || (_en_t == 13 && _en_ct == 0)
;
L2A6A:	lda     __en_t
	cmp     #$0D
	bne     L22F5
	lda     __en_ct
	jeq     L23CD
;
; _en_t != 5 &&
;
L22F5:	lda     __en_t
	cmp     #$05
	jeq     L2307
;
; touched == 0 &&
;
	lda     _touched
	jne     L2307
;
; ) {
;
	jsr     _collide
	tax
	jeq     L2307
;
; en_sg_1 = 0;
;
	lda     #$00
	sta     _en_sg_1
;
; en_sg_2 = (pflickering == 0);
;
	lda     _pflickering
	jsr     booleq
	sta     _en_sg_2
;
; && _en_t != 5
;
	lda     _pspin
	beq     L2310
	lda     __en_t
;
; ) {
;
	cmp     #$05
	beq     L2310
;
; en_sg_1 = 1;
;
	lda     #$01
	sta     _en_sg_1
;
; en_sg_2 = 0;
;
	stx     _en_sg_2
;
; pvy = -pvy;
;
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	sta     _pvy
	stx     _pvy+1
;
; sfx_play (SFX_STEPON, 1);
;
	lda     #$0F
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; if (en_invincible [gpit]) en_sg_1 = 0;
;
L2310:	ldy     _gpit
	lda     _en_invincible,y
	beq     L231D
	lda     #$00
	sta     _en_sg_1
;
; if (en_sg_2) {
;
L231D:	lda     _en_sg_2
	jeq     L23C0
;
; if (prings) {
;
	lda     _prings
	jeq     L2325
;
; ring_create ();
;
	jsr     _ring_create
;
; pvx = ADD_SIGN (_en_mx, PLAYER_V_REBOUND); 
;
	lda     __en_mx
	beq     L232C
	lda     __en_mx
	sec
	sbc     #$01
	bvs     L2332
	eor     #$80
L2332:	bpl     L2333
	ldx     #$01
	jmp     L2A77
L2333:	ldx     #$FF
	jmp     L2A77
L232C:	tax
L2A77:	lda     #$00
	sta     _pvx
	stx     _pvx+1
;
; if (_en_my) pvy = ADD_SIGN (_en_my, PLAYER_V_REBOUND); else pvy = -(PLAYER_V_REBOUND >> 1);
;
	lda     __en_my
	beq     L233D
	lda     __en_my
	beq     L2343
	lda     __en_my
	sec
	sbc     #$01
	bvs     L2349
	eor     #$80
L2349:	bpl     L234A
	ldx     #$01
	jmp     L2A78
L234A:	ldx     #$FF
	jmp     L2A78
L2343:	tax
L2A78:	lda     #$00
	jmp     L2A93
L233D:	ldx     #$FF
	lda     #$80
L2A93:	sta     _pvy
	stx     _pvy+1
;
; if (_en_t != 20) {
;
	lda     __en_t
	cmp     #$14
	jeq     L2358
;
; if (!_en_mx) _en_my = ADD_SIGN (_en_y - pry, ABS (_en_my));
;
	lda     __en_mx
	bne     L235A
	lda     __en_y
	sec
	sbc     _pry
	pha
	lda     #$00
	sta     tmp1
	pla
	ora     tmp1
	beq     L2388
	lda     __en_y
	sec
	sbc     _pry
	pha
	pla
	beq     L2367
	lda     __en_my
	asl     a
	bcc     L236D
	ldx     #$00
	lda     __en_my
	bpl     L2370
	dex
L2370:	jsr     negax
L2375:	cmp     #$80
	bcc     L2388
	jmp     L2388
L236D:	lda     __en_my
	cmp     #$80
	bcc     L2375
	jmp     L2388
L2367:	lda     __en_my
	asl     a
	bcc     L237E
	ldx     #$00
	lda     __en_my
	bpl     L2381
	dex
L2381:	jsr     negax
L2386:	ldx     #$00
	cmp     #$80
	bcc     L2387
	jmp     L2A7A
L237E:	lda     __en_my
	cmp     #$80
	bcc     L2386
L2A7A:	ldx     #$FF
L2387:	jsr     negax
L2388:	sta     __en_my
;
; _en_mx = ADD_SIGN (_en_x - prx, ABS (_en_mx));
;
L235A:	lda     __en_x
	sec
	sbc     _prx
	pha
	lda     #$00
	sta     tmp1
	pla
	ora     tmp1
	beq     L23B6
	lda     __en_x
	sec
	sbc     _prx
	pha
	pla
	beq     L2395
	lda     __en_mx
	asl     a
	bcc     L239B
	ldx     #$00
	lda     __en_mx
	bpl     L239E
	dex
L239E:	jsr     negax
L23A3:	cmp     #$80
	bcc     L23B6
	jmp     L23B6
L239B:	lda     __en_mx
	cmp     #$80
	bcc     L23A3
	jmp     L23B6
L2395:	lda     __en_mx
	asl     a
	bcc     L23AC
	ldx     #$00
	lda     __en_mx
	bpl     L23AF
	dex
L23AF:	jsr     negax
L23B4:	ldx     #$00
	cmp     #$80
	bcc     L23B5
	jmp     L2A7B
L23AC:	lda     __en_mx
	cmp     #$80
	bcc     L23B4
L2A7B:	ldx     #$FF
L23B5:	jsr     negax
L23B6:	sta     __en_mx
;
; touched = 1; 
;
L2358:	lda     #$01
	sta     _touched
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; en_sg_2 = 0;
;
	lda     #$00
	sta     _en_sg_2
;
; } else psprid = pfacing + CELL_HIT;
;
	jmp     L23C0
L2325:	lda     _pfacing
	clc
	adc     #$09
	sta     _psprid
;
; if (en_sg_1) enems_hit ();
;
L23C0:	lda     _en_sg_1
	beq     L23C4
	jsr     _enems_hit
;
; if (en_sg_2) { 
;
L23C4:	lda     _en_sg_2
	beq     L23C7
;
; pkill = 1; 
;
	lda     #$01
	sta     _pkill
;
; touched = 1; 
;
L23C7:	lda     #$01
	sta     _touched
;
; || _en_t == 5
;
L2307:	lda     _touched
	bne     L23CD
	lda     __en_t
;
; || en_invincible [gpit]
;
	cmp     #$05
;
; if (en_spr != 0xff) {
;
L23CD:	lda     _en_spr
	cmp     #$FF
	beq     L23D2
;
; _en_x + en_spr_x_mod, _en_y + SPRITE_ADJUST, 
;
	jsr     decsp3
	lda     __en_x
	clc
	adc     _en_spr_x_mod
	ldy     #$02
	sta     (sp),y
	lda     __en_y
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2A8A
	sec
L2A8A:	sbc     #$10
	bcs     L2A8B
	sec
L2A8B:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [en_spr]
;
	ldx     #$00
	lda     _en_spr
	asl     a
	bcc     L2A8C
	inx
	clc
L2A8C:	adc     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [en_spr]
;
	txa
	adc     _spr_enems+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; enems_update_unsigned_char_arrays ();
;
L23D2:	jsr     _enems_update_unsigned_char_arrays
;
; } 
;
	jmp     L1F71

.endproc

; ---------------------------------------------------------------
; void __near__ draw_game_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_game_frame: near

.segment	"CODE"

;
; _y = 4; _x =  1; pr_str ("LIFE\\");
;
	lda     #$04
	sta     __y
	lda     #$01
	sta     __x
	lda     #<(L0001)
	ldx     #>(L0001)
	jsr     pushax
	jsr     _pr_str
;
; _x = 22; pr_str ("RINGOS\\");
;
	lda     #$16
	sta     __x
	lda     #<(L0001+6)
	ldx     #>(L0001+6)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ hud_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_update: near

.segment	"CODE"

;
; if (olife != plife) {
;
	lda     _plife
	cmp     _olife
	beq     L2446
;
; olife = plife;
;
	lda     _plife
	sta     _olife
;
; _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
;
	lda     #$06
	sta     __x
	lda     #$04
	sta     __y
	lda     _plife
	sta     __n
	jsr     _p_t
;
; if (oprings != prings) {
;
L2446:	lda     _prings
	cmp     _oprings
	beq     L2451
;
; oprings = prings;
;
	lda     _prings
	sta     _oprings
;
; _x = 0x1d; _y = 4; _n = prings; p_t ();
;
	lda     #$1D
	sta     __x
	lda     #$04
	sta     __y
	lda     _prings
	sta     __n
	jmp     _p_t
;
; }
;
L2451:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bat_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_in: near

.segment	"CODE"

;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; fade_delay = 4;
;
	lda     #$04
	sta     _fade_delay
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ bat_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_out: near

.segment	"CODE"

;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; oam_clear ();
;
	jsr     _oam_clear
;
; ppu_off ();
;
	jmp     _ppu_off

.endproc

; ---------------------------------------------------------------
; void __near__ pres (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pres: near

.segment	"CODE"

;
; cls ();
;
	jsr     _cls
;
; pal_bg (gp_gen);
;
	lda     _gp_gen
	ldx     _gp_gen+1
	jsr     _pal_bg
;
; (*gp_func) ();
;
	lda     _gp_func
	ldx     _gp_func+1
	jsr     callax
;
; bat_in ();
;
	jsr     _bat_in
;
; pad_read ();
;
L246F:	jsr     _pad_read
;
; if (pad_this_frame & (PAD_A|PAD_B|PAD_START)) break;
;
	lda     _pad_this_frame
	and     #$0B
	beq     L246F
	jmp     _bat_out

.endproc

; ---------------------------------------------------------------
; void __near__ show_emeralds (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_emeralds: near

.segment	"CODE"

;
; oam_index = 0; rdx = 128-32; for (gpit = 0; gpit < 6; ++ gpit) {
;
	lda     #$00
	sta     _oam_index
	lda     #$60
	sta     _rdx
	lda     #$00
	sta     _gpit
L2482:	lda     _gpit
	cmp     #$06
	bcs     L2483
;
; rdx, rdy, oam_index, pemmeralds & bits [gpit] ? ssit_07 : ssit_03
;
	jsr     decsp3
	lda     _rdx
	ldy     #$02
	sta     (sp),y
	lda     _rdy
	dey
	sta     (sp),y
	lda     _oam_index
	dey
	sta     (sp),y
	ldy     _gpit
	lda     _bits,y
	and     _pemmeralds
	pha
	pla
	beq     L2492
	lda     #<(_ssit_07)
	ldx     #>(_ssit_07)
	jmp     L2494
;
; );
;
L2492:	lda     #<(_ssit_03)
	ldx     #>(_ssit_03)
L2494:	jsr     _oam_meta_spr
	sta     _oam_index
;
; rdx += 24; if (gpit == 2) { rdx = 128-32; rdy += 24; }
;
	lda     #$18
	clc
	adc     _rdx
	sta     _rdx
	lda     _gpit
	cmp     #$02
	bne     L2484
	lda     #$60
	sta     _rdx
	lda     #$18
	clc
	adc     _rdy
	sta     _rdy
;
; oam_index = 0; rdx = 128-32; for (gpit = 0; gpit < 6; ++ gpit) {
;
L2484:	inc     _gpit
	jmp     L2482
;
; }
;
L2483:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ scr_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scr_level: near

.segment	"CODE"

;
; pal_spr (palss0);
;
	lda     #<(_palss0)
	ldx     #>(_palss0)
	jsr     _pal_spr
;
; _x =  8; _y = 15; pr_str ("]]]]]]]]]]]]]]]]");
;
	lda     #$08
	sta     __x
	lda     #$0F
	sta     __y
	lda     #<(L0001+14)
	ldx     #>(L0001+14)
	jsr     pushax
	jsr     _pr_str
;
; pr_str ((unsigned char *) level_names [level_world]);
;
	ldx     #$00
	lda     _level_world
	asl     a
	bcc     L2A9D
	inx
	clc
L2A9D:	adc     #<(_level_names)
	sta     ptr1
	txa
	adc     #>(_level_names)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	jsr     _pr_str
;
; vram_put ('['-32);
;
	lda     #$3B
	jsr     _vram_put
;
; _y = 16; pr_str ("]]]]^ZONE, ACT ");
;
	lda     #$10
	sta     __y
	lda     #<(L0001+31)
	ldx     #>(L0001+31)
	jsr     pushax
	jsr     _pr_str
;
; vram_put (level_act + 17);
;
	lda     _level_act
	clc
	adc     #$11
	jsr     _vram_put
;
; rdy = 17*8; show_emeralds ();
;
	lda     #$88
	sta     _rdy
	jmp     _show_emeralds

.endproc

; ---------------------------------------------------------------
; void __near__ title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_title: near

.segment	"CODE"

;
; bankswitch (1);
;
	lda     #$01
	jsr     _bankswitch
;
; unrle_vram (title_rle, 0x2000);
;
	lda     #<(_title_rle)
	ldx     #>(_title_rle)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _unrle_vram
;
; pal_bg (paltstitle);
;
	lda     #<(_paltstitle)
	ldx     #>(_paltstitle)
	jsr     _pal_bg
;
; if (first_game) {
;
	lda     _first_game
	beq     L24BE
;
; _x = 10; _y = 20; pr_str ("PRESS START!");
;
	lda     #$0A
	sta     __x
	lda     #$14
	sta     __y
	lda     #<(L0001+47)
	ldx     #>(L0001+47)
;
; } else {
;
	jmp     L2A9F
;
; _x = 4; _y = 19; pr_str ("PRESS START  TO BEGIN%%PRESS SELECT TO CONTINUE");
;
L24BE:	lda     #$04
	sta     __x
	lda     #$13
	sta     __y
	lda     #<(L0001+60)
	ldx     #>(L0001+60)
L2A9F:	jsr     pushax
	jsr     _pr_str
;
; _x = 5;  _y = 26; pr_str ("@ 2018 THE MOJON TWINS"); 
;
	lda     #$05
	sta     __x
	lda     #$1A
	sta     __y
	lda     #<(L0001+108)
	ldx     #>(L0001+108)
	jsr     pushax
	jsr     _pr_str
;
; bat_in ();
;
	jsr     _bat_in
;
; music_play (MUSIC_TITLE);
;
	lda     #$05
	jsr     _music_play
;
; pad_read ();
;
L24D6:	jsr     _pad_read
;
; if (pad_this_frame & PAD_START) {
;
	lda     _pad_this_frame
	and     #$08
	beq     L24DA
;
; level = 0;
;
	lda     #$00
	sta     _level
;
; pemmeralds = 0;
;
	sta     _pemmeralds
;
; free_play = 0;
;
	sta     _free_play
;
; break;
;
	jmp     L24D7
;
; if (!first_game && (pad_this_frame & PAD_SELECT)) {
;
L24DA:	lda     _first_game
	bne     L24D6
	lda     _pad_this_frame
	and     #$04
	beq     L24D6
;
; select_level = free_play;
;
	lda     _free_play
	sta     _select_level
;
; music_stop ();
;
L24D7:	jsr     _music_stop
;
; sfx_play (SFX_START, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; bat_out (); 
;
	jsr     _bat_out
;
; bankswitch (0);
;
	lda     #$00
	jmp     _bankswitch

.endproc

; ---------------------------------------------------------------
; void __near__ scr_game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scr_game_over: near

.segment	"CODE"

;
; _x = 11; _y = 15; pr_str ("GAME OVER!");
;
	lda     #$0B
	sta     __x
	lda     #$0F
	sta     __y
	lda     #<(L0001+131)
	ldx     #>(L0001+131)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ scr_the_end (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scr_the_end: near

.segment	"CODE"

;
; _x = 12; _y = 15; pr_str ("THE END");
;
	lda     #$0C
	sta     __x
	lda     #$0F
	sta     __y
	lda     #<(L0001+142)
	ldx     #>(L0001+142)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ scr_cutscene (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scr_cutscene: near

.segment	"CODE"

;
; unrle_vram (cuts_rle [rdm], 0x2000);
;
	ldx     #$00
	lda     _rdm
	asl     a
	bcc     L2AA2
	inx
	clc
L2AA2:	adc     #<(_cuts_rle)
	sta     ptr1
	txa
	adc     #>(_cuts_rle)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _unrle_vram
;
; _x = 2; _y = 18; pr_str ((unsigned char *) cutscenes [rdm]);
;
	lda     #$02
	sta     __x
	lda     #$12
	sta     __y
	ldx     #$00
	lda     _rdm
	asl     a
	bcc     L2AA3
	inx
	clc
L2AA3:	adc     #<(_cutscenes)
	sta     ptr1
	txa
	adc     #>(_cutscenes)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ cutscene (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cutscene: near

.segment	"CODE"

;
; bankswitch (1);
;
	lda     #$01
	jsr     _bankswitch
;
; scroll (0, 16);
;
	jsr     push0
	lda     #$10
	jsr     _scroll
;
; gp_gen = cuts_pal [rdm]; gp_func = scr_cutscene; pres (); 
;
	ldx     #$00
	lda     _rdm
	asl     a
	bcc     L2AA5
	inx
	clc
L2AA5:	adc     #<(_cuts_pal)
	sta     ptr1
	txa
	adc     #>(_cuts_pal)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _gp_gen+1
	dey
	lda     (ptr1),y
	sta     _gp_gen
	lda     #<(_scr_cutscene)
	sta     _gp_func
	lda     #>(_scr_cutscene)
	sta     _gp_func+1
	jsr     _pres
;
; bankswitch (0);
;
	lda     #$00
	jmp     _bankswitch

.endproc

; ---------------------------------------------------------------
; void __near__ zone_select (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_zone_select: near

.segment	"CODE"

;
; pal_spr (palss0);
;
	lda     #<(_palss0)
	ldx     #>(_palss0)
	jsr     _pal_spr
;
; pal_bg (paltstitle);
;
	lda     #<(_paltstitle)
	ldx     #>(_paltstitle)
	jsr     _pal_bg
;
; cls ();
;
	jsr     _cls
;
; _x = 11; _y = 5; pr_str ("ZONE SELECT");
;
	lda     #$0B
	sta     __x
	lda     #$05
	sta     __y
	lda     #<(L0001+150)
	ldx     #>(L0001+150)
	jsr     pushax
	jsr     _pr_str
;
; for (gpjt = 0; gpjt < 6; ++ gpjt) {
;
	lda     #$00
	sta     _gpjt
L252E:	lda     _gpjt
	cmp     #$06
	bcs     L252F
;
; _y = 8 + (gpjt << 1); pr_str ((unsigned char *) level_names [gpjt]);
;
	lda     _gpjt
	asl     a
	bcc     L2AAA
	clc
L2AAA:	adc     #$08
	sta     __y
	ldx     #$00
	lda     _gpjt
	asl     a
	bcc     L2AAB
	inx
	clc
L2AAB:	adc     #<(_level_names)
	sta     ptr1
	txa
	adc     #>(_level_names)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	jsr     _pr_str
;
; for (gpjt = 0; gpjt < 6; ++ gpjt) {
;
	inc     _gpjt
	jmp     L252E
;
; rdy = 21 * 8; show_emeralds ();
;
L252F:	lda     #$A8
	sta     _rdy
	jsr     _show_emeralds
;
; scroll (0, 0);
;
	jsr     push0
	jsr     _scroll
;
; bat_in ();
;
	jsr     _bat_in
;
; music_play (MUSIC_CUTS);
;
	lda     #$06
	jsr     _music_play
;
; oam_spr (72, 63 + (base_world [level] << 4), COCO_PATTERN, COCO_PALETTE, oam_index);
;
L2546:	jsr     decsp4
	lda     #$48
	ldy     #$03
	sta     (sp),y
	ldy     _level
	ldx     #$00
	lda     _base_world,y
	jsr     aslax4
	clc
	adc     #$3F
	ldy     #$02
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	lda     _oam_index
	jsr     _oam_spr
;
; pad_read ();
;
	jsr     _pad_read
;
; rda = level;
;
	lda     _level
	sta     _rda
;
; if (pad_this_frame & PAD_DOWN) {
;
	lda     _pad_this_frame
	and     #$20
	beq     L255A
;
; level += 3; if (level >= 18) level = 0;
;
	lda     #$03
	clc
	adc     _level
	sta     _level
	cmp     #$12
	bcc     L255A
	lda     #$00
	sta     _level
;
; if (pad_this_frame & PAD_UP) {
;
L255A:	lda     _pad_this_frame
	and     #$10
	beq     L2564
;
; if (level > 2) level -= 3; else level = 15;
;
	lda     _level
	cmp     #$03
	bcc     L2560
	lda     _level
	sec
	sbc     #$03
	jmp     L2AA9
L2560:	lda     #$0F
L2AA9:	sta     _level
;
; if (rda != level) sfx_play (SFX_HITTER, 1);
;
L2564:	lda     _level
	cmp     _rda
	beq     L2567
	lda     #$0E
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; if (pad_this_frame & (PAD_A|PAD_B|PAD_START)) break;  
;
L2567:	lda     _pad_this_frame
	and     #$0B
	bne     L2547
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; }
;
	jmp     L2546
;
; sfx_play (SFX_START, 1);
;
L2547:	lda     #$00
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; bat_out ();
;
	jsr     _bat_out
;
; level = base_level [level];
;
	ldy     _level
	lda     _base_level,y
	sta     _level
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ flickscreen_do_horizontal (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flickscreen_do_horizontal: near

.segment	"CODE"

;
; if (prx == 4 && 
;
	lda     _prx
	cmp     #$04
	bne     L2579
;
; (cfx + pvx) < 0
;
	ldx     #$00
	lda     _cfx
	bpl     L257D
	dex
L257D:	clc
	adc     _pvx
	txa
	adc     _pvx+1
	tax
;
; ) {
;
	cpx     #$80
	bcc     L2579
;
; -- n_pant;
;
	dec     _n_pant
;
; px = 244 << FIXBITS;
;
	ldx     #$3D
;
; } else if (prx == 244 && 
;
	jmp     L2AAE
L2579:	lda     _prx
	cmp     #$F4
	bne     L2585
;
; (cfx + pvx) > 0
;
	ldx     #$00
	lda     _cfx
	bpl     L2587
	dex
L2587:	clc
	adc     _pvx
	pha
	txa
	adc     _pvx+1
	tax
	pla
;
; ) {
;
	cmp     #$01
	txa
	sbc     #$00
	bvs     L2588
	eor     #$80
L2588:	bmi     L2584
L2585:	rts
;
; ++ n_pant;
;
L2584:	inc     _n_pant
;
; px = 4 << FIXBITS;
;
	ldx     #$01
L2AAE:	lda     #$00
	sta     _px
	stx     _px+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ flickscreen_do_vertical (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flickscreen_do_vertical: near

.segment	"CODE"

;
; if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
;
	lda     _pry
	bne     L258E
	ldx     _pvy+1
	cpx     #$80
	bcc     L258E
	lda     _n_pant
	cmp     _c_map_w
	bcc     L258E
;
; n_pant -= c_map_w;
;
	lda     _c_map_w
	eor     #$FF
	sec
	adc     _n_pant
	sta     _n_pant
;
; py = 192 << FIXBITS;
;
	ldx     #$30
	lda     #$00
	sta     _py
	stx     _py+1
;
; if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$FF
	bvs     L2598
	eor     #$80
L2598:	bpl     L259C
	ldx     #$FF
	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; } else if (pry >= 192 && pvy > 0 && n_pant < c_map_size - c_map_w) {
;
	rts
L258E:	lda     _pry
	cmp     #$C0
	bcc     L259E
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L259F
	eor     #$80
L259F:	bpl     L259E
	lda     _n_pant
	jsr     pusha0
	lda     _c_map_size
	sec
	sbc     _c_map_w
	jsr     tosicmp0
	bcc     L259D
L259E:	rts
;
; n_pant += c_map_w;
;
L259D:	lda     _c_map_w
	clc
	adc     _n_pant
	sta     _n_pant
;
; py = 0;
;
	lda     #$00
	sta     _py
	sta     _py+1
;
; }
;
L259C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_init: near

.segment	"CODE"

;
; win_level = game_over = 0;
;
	lda     #$00
	sta     _game_over
	sta     _win_level
;
; c_pal_bg =   l_pal_bg [level];
;
	tax
	lda     _level
	asl     a
	bcc     L2AB9
	inx
	clc
L2AB9:	adc     #<(_l_pal_bg)
	sta     ptr1
	txa
	adc     #>(_l_pal_bg)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_pal_bg+1
	dey
	lda     (ptr1),y
	sta     _c_pal_bg
;
; c_pal_fg =   l_pal_fg [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2ABA
	inx
	clc
L2ABA:	adc     #<(_l_pal_fg)
	sta     ptr1
	txa
	adc     #>(_l_pal_fg)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_pal_fg+1
	dey
	lda     (ptr1),y
	sta     _c_pal_fg
;
; c_ts_tmaps =  l_ts_tmaps [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2ABB
	inx
	clc
L2ABB:	adc     #<(_l_ts_tmaps)
	sta     ptr1
	txa
	adc     #>(_l_ts_tmaps)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_tmaps+1
	dey
	lda     (ptr1),y
	sta     _c_ts_tmaps
;
; c_ts_pals =  l_ts_pals [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2ABC
	inx
	clc
L2ABC:	adc     #<(_l_ts_pals)
	sta     ptr1
	txa
	adc     #>(_l_ts_pals)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_pals+1
	dey
	lda     (ptr1),y
	sta     _c_ts_pals
;
; c_behs =   l_behs [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2ABD
	inx
	clc
L2ABD:	adc     #<(_l_behs)
	sta     ptr1
	txa
	adc     #>(_l_behs)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_behs+1
	dey
	lda     (ptr1),y
	sta     _c_behs
;
; spr_enems =  l_spr_enems [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2ABE
	inx
	clc
L2ABE:	adc     #<(_l_spr_enems)
	sta     ptr1
	txa
	adc     #>(_l_spr_enems)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _spr_enems+1
	dey
	lda     (ptr1),y
	sta     _spr_enems
;
; c_map =   l_map [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2ABF
	inx
	clc
L2ABF:	adc     #<(_l_map)
	sta     ptr1
	txa
	adc     #>(_l_map)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_map+1
	dey
	lda     (ptr1),y
	sta     _c_map
;
; l_map_chr_rom_bank [level];
;
	ldy     _level
	lda     _l_map_chr_rom_bank,y
	sta     _c_map_chr_rom_bank
;
; c_enems =   l_enems [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2AC0
	inx
	clc
L2AC0:	adc     #<(_l_enems)
	sta     ptr1
	txa
	adc     #>(_l_enems)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_enems+1
	dey
	lda     (ptr1),y
	sta     _c_enems
;
; c_hotspots =  l_hotspots [level]; 
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2AC1
	inx
	clc
L2AC1:	adc     #<(_l_hotspots)
	sta     ptr1
	txa
	adc     #>(_l_hotspots)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_hotspots+1
	dey
	lda     (ptr1),y
	sta     _c_hotspots
;
; c_max_enems =  l_player_max_enems [level];
;
	ldy     _level
	lda     _l_player_max_enems,y
	sta     _c_max_enems
;
; c_map_w =   l_map_w [level];
;
	ldy     _level
	lda     _l_map_w,y
	sta     _c_map_w
;
; c_map_h =   l_map_h [level];
;
	ldy     _level
	lda     _l_map_h,y
	sta     _c_map_h
;
; rda = c_map_h; c_map_size = 0; while (rda --) c_map_size += c_map_w;
;
	sta     _rda
	lda     #$00
L2AB8:	sta     _c_map_size
	lda     _rda
	pha
	sec
	sbc     #$01
	sta     _rda
	pla
	tax
	beq     L25D9
	lda     _c_map_w
	clc
	adc     _c_map_size
	jmp     L2AB8
;
; pal_bg (c_pal_bg);
;
L25D9:	lda     _c_pal_bg
	ldx     _c_pal_bg+1
	jsr     _pal_bg
;
; pal_spr (c_pal_fg);
;
	lda     _c_pal_fg
	ldx     _c_pal_fg+1
	jsr     _pal_spr
;
; cls ();
;
	jsr     _cls
;
; draw_game_frame ();
;
	jsr     _draw_game_frame
;
; hotspots_load ();
;
	jsr     _hotspots_load
;
; if (!warp_to_level) {
;
	lda     _warp_to_level
	bne     L25E4
;
; n_pant = SCR_INI;
;
	ldy     _level
	lda     _l_scr_ini,y
	sta     _n_pant
;
; px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_x,y
	jsr     aslax4
	clc
	adc     #$04
	bcc     L25F2
	inx
L25F2:	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; py = (PLAYER_INI_Y << 4) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_y,y
	jsr     aslax4
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; player_to_pixels ();
;
L25E4:	jsr     _player_to_pixels
;
; player_init ();
;
	jsr     _player_init
;
; pobjs = 0;
;
	lda     #$00
	sta     _pobjs
;
; timer = TIMER_INITIAL;
;
	lda     #$14
	sta     _timer
;
; timer_frames = 50;
;
	lda     #$32
	sta     _timer_frames
;
; timer_zero = 0;
;
	lda     #$00
	sta     _timer_zero
;
; otimer = 0xff;
;
	lda     #$FF
	sta     _otimer
;
; timer_on = 0;
;
	lda     #$00
	sta     _timer_on
;
; vram_adr (MAP_CLEAR_LIST_ADDRESS);
;
	ldx     #$2C
	lda     #$40
	jsr     _vram_adr
;
; vram_fill (0, MAP_SIZE*24);
;
	lda     #$00
	jsr     pusha
	ldx     #$02
	lda     #$D0
	jsr     _vram_fill
;
; olife = oammo = oobjs = okeys = 0xff;
;
	lda     #$FF
	sta     _okeys
	sta     _oobjs
	sta     _oammo
	sta     _olife
;
; okilled = 0xff;
;
	sta     _okilled
;
; oprings = 0xff;
;
	sta     _oprings
;
; pal_cycle [0] = c_pal_bg [13];
;
	lda     _c_pal_bg
	sta     ptr1
	lda     _c_pal_bg+1
	sta     ptr1+1
	ldy     #$0D
	lda     (ptr1),y
	sta     _pal_cycle
;
; pal_cycle [1] = c_pal_bg [14];
;
	lda     _c_pal_bg
	sta     ptr1
	lda     _c_pal_bg+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _pal_cycle+1
;
; pal_cycle [2] = c_pal_bg [15];
;
	lda     _c_pal_bg
	sta     ptr1
	lda     _c_pal_bg+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _pal_cycle+2
;
; timer = 20;
;
	lda     #$14
	sta     _timer
;
; elec_state_ct = 5;
;
	lda     #$05
	sta     _elec_state_ct
;
; somari_life = 8;
;
	lda     #$08
	sta     _somari_life
;
; prings = 0; 
;
	lda     #$00
	sta     _prings
;
; underwater = 0;
;
	sta     _underwater
;
; toggle_switch = 0;
;
	sta     _toggle_switch
;
; elec_state = 0;
;
	sta     _elec_state
;
; somari_state = somari_ct = 0;
;
	sta     _somari_ct
	sta     _somari_state
;
; pdying = 0;
;
	sta     _pdying
;
; pkill = 0;
;
	sta     _pkill
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ prepare_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_scr: near

.segment	"CODE"

;
; if (!ft) {
;
	lda     _ft
	bne     L2637
;
; fade_out (); 
;
	jsr     _fade_out
;
; ppu_off ();
;
	jsr     _ppu_off
;
; rda = on_pant << 3;
;
	lda     _on_pant
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; vram_write (tile_got, MAP_CLEAR_LIST_ADDRESS + (rda << 1) + rda, 24);
;
	jsr     decsp4
	lda     #<(_tile_got)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_tile_got)
	sta     (sp),y
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L2AC7
	inx
	clc
L2AC7:	adc     #$40
	pha
	txa
	adc     #$2C
	tax
	pla
	clc
	adc     _rda
	bcc     L2AC2
	inx
L2AC2:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$18
	jsr     _vram_write
;
; } else {
;
	jmp     L2642
;
; ft = 0;
;
L2637:	lda     #$00
	sta     _ft
;
; ppu_off ();
;
	jsr     _ppu_off
;
; clear_update_list ();
;
L2642:	jsr     _clear_update_list
;
; enems_load ();
;
	jsr     _enems_load
;
; hotspots_create (); 
;
	jsr     _hotspots_create
;
; cocos_init ();
;
	jsr     _cocos_init
;
; rda = n_pant << 3;
;
	lda     _n_pant
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; vram_read (tile_got, MAP_CLEAR_LIST_ADDRESS + (rda << 1) + rda, 24);
;
	jsr     decsp4
	lda     #<(_tile_got)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_tile_got)
	sta     (sp),y
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L2AC8
	inx
	clc
L2AC8:	adc     #$40
	pha
	txa
	adc     #$2C
	tax
	pla
	clc
	adc     _rda
	bcc     L2AC3
	inx
L2AC3:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$18
	jsr     _vram_read
;
; draw_scr ();
;
	jsr     _draw_scr
;
; do_process_breakable = 0;
;
	lda     #$00
	sta     _do_process_breakable
;
; gpit = BREAKABLE_MAX; while (gpit --) brkf [gpit] = 0;
;
	lda     #$10
	sta     _gpit
L2656:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L2657
	ldy     _gpit
	lda     #$00
	sta     _brkf,y
	jmp     L2656
;
; bankswitch (l_chr_rom_bank [level]);
;
L2657:	ldy     _level
	lda     _l_chr_rom_bank,y
	jsr     _bankswitch
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; ring_timer = 0;
;
	lda     #$00
	sta     _ring_timer
;
; hrt == HOTSPOT_TYPE_EMMERALD && 
;
	lda     _hrt
	cmp     #$04
	bne     L2664
;
; pemmeralds & bits [level_world]
;
	ldy     _level_world
	lda     _bits,y
;
; ) hrt = 0;
;
	and     _pemmeralds
	pha
	pla
	beq     L2664
	lda     #$00
	sta     _hrt
;
; if (en_t [0] == 0x14) en_life [0] = 8;
;
L2664:	lda     _en_t
	cmp     #$14
	bne     L266C
	lda     #$08
	sta     _en_life
;
; if (level_world == 3) {
;
L266C:	lda     _level_world
	cmp     #$03
	bne     L2672
;
; rda = underwater;
;
	lda     _underwater
	sta     _rda
;
; timer_on = underwater = (level_act == 2 || n_pant >= 10);
;
	lda     _level_act
	cmp     #$02
	beq     L2679
	lda     _n_pant
	cmp     #$0A
	bcs     L2679
	lda     #$00
	jmp     L267A
L2679:	lda     #$01
L267A:	sta     _underwater
	sta     _timer_on
;
; if (!underwater) timer = 20;
;
	lda     _underwater
	bne     L267B
	lda     #$14
	sta     _timer
;
; if (underwater != rda) sfx_play (SFX_FLOAT, 1);
;
L267B:	lda     _rda
	cmp     _underwater
	beq     L267F
	lda     #$10
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; pal_bg (underwater ? palts3a : palts3);
;
L267F:	lda     _underwater
	beq     L2686
	lda     #<(_palts3a)
	ldx     #>(_palts3a)
	jmp     L2688
L2686:	lda     #<(_palts3)
	ldx     #>(_palts3)
L2688:	jsr     _pal_bg
;
; pal_spr (underwater ? palss0a : palss0);
;
	lda     _underwater
	beq     L268C
	lda     #<(_palss0a)
	ldx     #>(_palss0a)
	jmp     L268E
L268C:	lda     #<(_palss0)
	ldx     #>(_palss0)
L268E:	jsr     _pal_spr
;
; water_strip = (level_world == 1 && (level != 3 || n_pant > 14));
;
L2672:	lda     _level_world
	cmp     #$01
	bne     L2693
	lda     _level
	cmp     #$03
	bne     L2692
	lda     _n_pant
	cmp     #$0F
	bcs     L2692
L2693:	lda     #$00
	jmp     L2696
L2692:	lda     #$01
L2696:	sta     _water_strip
;
; oam_spr (128, water_strip ? 211 : 240, 1, 2, 0);
;
	jsr     decsp4
	lda     #$80
	ldy     #$03
	sta     (sp),y
	lda     _water_strip
	beq     L269A
	lda     #$D3
	jmp     L269C
L269A:	lda     #$F0
L269C:	dey
	sta     (sp),y
	lda     #$01
	dey
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; toggle_timer = 0;
;
	lda     #$00
	sta     _toggle_timer
;
; memfill (bridge_y, 0, 4);
;
	jsr     decsp3
	lda     #<(_bridge_y)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_bridge_y)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$04
	jsr     _memfill
;
; gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
;
	lda     #$03
	sta     _gpit
L26A9:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L26AA
	lda     #<(_en_spr_id)
	ldx     #>(_en_spr_id)
	clc
	adc     _gpit
	bcc     L26AE
	inx
L26AE:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_s,y
	ldy     #$00
	sta     (ptr1),y
	jmp     L26A9
;
; oam_index = 4;
;
L26AA:	lda     #$04
	sta     _oam_index
;
; prx = px >> FIXBITS; pry = py >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_move ();
;
	jsr     _player_move
;
; enems_move ();
;
	jsr     _enems_move
;
; if (hrt) hotspots_paint ();
;
	lda     _hrt
	beq     L26BA
	jsr     _hotspots_paint
;
; oam_hide_rest (oam_index);
;
L26BA:	lda     _oam_index
	jsr     _oam_hide_rest
;
; hud_update ();
;
	jsr     _hud_update
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; music_play (l_music [level]);
;
	ldy     _level
	lda     _l_music,y
	jsr     _music_play
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; set_vram_update (UPDATE_LIST_SIZE, update_list);
;
	lda     #$20
	jsr     pusha
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; on_pant = 99; ft = 1; fade_delay = 1;
;
	lda     #$63
	sta     _on_pant
	lda     #$01
	sta     _ft
	sta     _fade_delay
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; half_life = frame_counter = real_frame_counter = 0;
;
	lda     #$00
	sta     _real_frame_counter
	sta     _frame_counter
	sta     _half_life
;
; ntsc_frame = level_reset = warp_to_level = 0; 
;
	sta     _warp_to_level
	sta     _level_reset
	sta     _ntsc_frame
;
; oam_index = 4; ticker = 50;
;
	lda     #$04
	sta     _oam_index
	lda     #$32
	sta     _ticker
;
; hud_update ();
;
L26E3:	jsr     _hud_update
;
; if (pkill) {
;
	lda     _pkill
	beq     L26E9
;
; if (!pdying) {
;
	lda     _pdying
	bne     L26E9
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (plife) --plife; else game_over = 1;
;
	lda     _plife
	beq     L26EE
	dec     _plife
	jmp     L26F1
L26EE:	lda     #$01
	sta     _game_over
;
; pdying = 1;
;
L26F1:	lda     #$01
	sta     _pdying
;
; pvy = -320;
;
	ldx     #$FE
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; if (game_over || level_reset) break;   
;
L26E9:	lda     _game_over
	jne     L26E4
	lda     _level_reset
	jne     L26E4
;
; if (!pkill) 
;
	lda     _pkill
	jne     L2723
;
; flick_override = 0;
;
	sta     _flick_override
;
; if (level == 6 || level == 8) {
;
	lda     _level
	cmp     #$06
	beq     L2700
	lda     _level
	cmp     #$08
	bne     L26FF
;
; flick_override = 1;
;
L2700:	lda     #$01
	sta     _flick_override
;
; (prx == 4 && pvx < 0) ||
;
	lda     _prx
	cmp     #$04
	bne     L2ACB
	ldx     _pvx+1
	cpx     #$80
	bcs     L2705
;
; (prx == 244 && pvx > 0) 
;
L2ACB:	lda     _prx
	cmp     #$F4
	bne     L2704
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L270B
	eor     #$80
L270B:	bpl     L2704
;
; ) pvx = 0;
;
L2705:	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; flickscreen_do_vertical ();
;
L2704:	jsr     _flickscreen_do_vertical
;
; if ((level == 15 && n_pant >= 15) ||
;
L26FF:	lda     _level
	cmp     #$0F
	bne     L2ACD
	lda     _n_pant
	cmp     #$0F
	bcs     L2712
;
; (level == 16 && n_pant >= 24)) {
;
L2ACD:	lda     _level
	cmp     #$10
	bne     L271A
	lda     _n_pant
	cmp     #$18
	bcc     L271A
;
; if (pry >= 192 && pvy > 0) {
;
L2712:	lda     _pry
	cmp     #$C0
	bcc     L271A
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L271D
	eor     #$80
L271D:	bpl     L271A
;
; pkill = 1;
;
	lda     #$01
	sta     _pkill
;
; flick_override = 1;
;
	sta     _flick_override
;
; if (flick_override == 0) {
;
L271A:	lda     _flick_override
	bne     L2723
;
; flickscreen_do_horizontal ();
;
	jsr     _flickscreen_do_horizontal
;
; flickscreen_do_vertical ();
;
	jsr     _flickscreen_do_vertical
;
; if (on_pant != n_pant) {
;
L2723:	lda     _n_pant
	cmp     _on_pant
	beq     L2727
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; if (pmayneedrelocation) {
;
L2727:	lda     _pmayneedrelocation
	beq     L272C
;
; pmayneedrelocation = 0;
;
	lda     #$00
	sta     _pmayneedrelocation
;
; gpit = 16;
;
	lda     #$10
	sta     _gpit
;
; while (gpit --) {
;
L2732:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L2733
;
; cx1 = prx >> 4; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx1
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L273A
	inx
L273A:	jsr     shrax4
	sta     _cx2
;
; cy1 = cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L273F
	inx
L273F:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) == 0 && (at2 & 8) == 0) break;
;
	lda     _at1
	and     #$08
	bne     L2741
	lda     _at2
	and     #$08
	beq     L2733
;
; prx += 16; // Try next cell
;
L2741:	lda     #$10
	clc
	adc     _prx
	sta     _prx
;
; }
;
	jmp     L2732
;
; px = prx << FIXBITS;
;
L2733:	tax
	lda     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; if ((level_world == 2 || level_world == 4 || level == 17) && (real_frame_counter & 7) == 0) {
;
L272C:	lda     _level_world
	cmp     #$02
	beq     L274F
	lda     _level_world
	cmp     #$04
	beq     L274F
	lda     _level
	cmp     #$11
	bne     L274D
L274F:	lda     _real_frame_counter
	and     #$07
	bne     L274D
;
; __asm__ ("lda %v+2", pal_cycle);
;
	lda     _pal_cycle+2
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lda %v+1", pal_cycle);
;
	lda     _pal_cycle+1
;
; __asm__ ("sta %v+2", pal_cycle);
;
	sta     _pal_cycle+2
;
; __asm__ ("sta PAL_BUF+15");
;
	sta     PAL_BUF+15
;
; __asm__ ("lda %v", pal_cycle);
;
	lda     _pal_cycle
;
; __asm__ ("sta %v+1", pal_cycle);
;
	sta     _pal_cycle+1
;
; __asm__ ("sta PAL_BUF+14");
;
	sta     PAL_BUF+14
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("sta %v", pal_cycle);
;
	sta     _pal_cycle
;
; __asm__ ("sta PAL_BUF+13");
;
	sta     PAL_BUF+13
;
; __asm__ ("inc %v", PALUPDATE);
;
	inc     _PALUPDATE
;
; if (water_strip) split (real_frame_counter, 0);
;
L274D:	lda     _water_strip
	beq     L2761
	lda     _real_frame_counter
	jsr     pusha0
	lda     #$00
	jsr     _split
;
; if (level == 15) {
;
L2761:	lda     _level
	cmp     #$0F
	bne     L2777
;
; if (elec_state == 2) {
;
	lda     _elec_state
	cmp     #$02
	bne     L2768
;
; pal_bg (half_life ? palts5 : palts5a);
;
	lda     _half_life
	beq     L276C
	lda     #<(_palts5)
	ldx     #>(_palts5)
	jmp     L276E
L276C:	lda     #<(_palts5a)
	ldx     #>(_palts5a)
L276E:	jsr     _pal_bg
;
; ppu_mask (0x1e);
;
	lda     #$1E
	jsr     _ppu_mask
;
; if (real_frame_counter & 1) sfx_play (1, 2);
;
	lda     _real_frame_counter
	and     #$01
	beq     L2777
	lda     #$01
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; } else {
;
	jmp     L2777
;
; ppu_mask (0xfe); 
;
L2768:	lda     #$FE
	jsr     _ppu_mask
;
; update_cycle ();
;
L2777:	jsr     _update_cycle
;
; pad_read ();
;
	jsr     _pad_read
;
; a_button = (pad_this_frame & PAD_A);
;
	lda     _pad_this_frame
	and     #$01
	sta     _a_button
;
; b_button = (pad_this_frame & PAD_B);
;
	lda     _pad_this_frame
	and     #$02
	sta     _b_button
;
; ++ real_frame_counter;
;
	inc     _real_frame_counter
;
; ++ ntsc_frame; if (ntsc_frame == 6) ntsc_frame = 0;
;
	inc     _ntsc_frame
	lda     _ntsc_frame
	cmp     #$06
	bne     L2784
	lda     #$00
	sta     _ntsc_frame
;
; if (paused == 0 && (ntsc == 0 || ntsc_frame)) {
;
L2784:	lda     _paused
	jne     L28DD
	lda     _ntsc
	beq     L2789
	lda     _ntsc_frame
	jeq     L28DD
;
; if (ticker) -- ticker; else ticker = 50;
;
L2789:	lda     _ticker
	beq     L278E
	dec     _ticker
	jmp     L2791
L278E:	lda     #$32
	sta     _ticker
;
; half_life ^= 1;
;
L2791:	lda     _half_life
	eor     #$01
	sta     _half_life
;
; ++ frame_counter;
;
	inc     _frame_counter
;
; if (hrt) {
;
	lda     _hrt
	jeq     L27CE
;
; if (collide_in (prx + 4, pry + 8, hrx, hry)) {
;
	jsr     decsp8
	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L279C
	inx
L279C:	ldy     #$06
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L279E
	inx
L279E:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _hrx
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _hry
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _collide_in
	tax
	jeq     L27CE
;
; rda = 0;
;
	lda     #$00
	sta     _rda
;
; switch (hrt) {
;
	lda     _hrt
;
; }
;
	cmp     #$01
	beq     L27A7
	cmp     #$03
	beq     L27AC
	cmp     #$04
	beq     L27B8
	cmp     #$05
	beq     L27B2
	cmp     #$06
	beq     L27C0
	cmp     #$07
	beq     L27CB
	jmp     L27A5
;
; ++ pobjs;
;
L27A7:	inc     _pobjs
;
; rda = SFX_OBJECT;
;
	lda     #$02
;
; break;
;
	jmp     L2AD2
;
; plife += PLAYER_REFILL;
;
L27AC:	inc     _plife
;
; break;
;
	jmp     L2AD2
;
; rda = SFX_OBJECT;
;
L27B2:	lda     #$02
	sta     _rda
;
; timer = TIMER_INITIAL;
;
	lda     #$14
	sta     _timer
;
; break;
;
	jmp     L27A5
;
; rda = SFX_FANFARE;
;
L27B8:	lda     #$13
	sta     _rda
;
; pemmeralds |= bits [level_world];
;
	ldy     _level_world
	lda     _bits,y
	ora     _pemmeralds
	sta     _pemmeralds
;
; break;
;
	jmp     L27A5
;
; hrt = HOTSPOT_TYPE_TOGGLE_ON;
;
L27C0:	lda     #$07
	sta     _hrt
;
; toggle_timer = 50;
;
	lda     #$32
	sta     _toggle_timer
;
; toggle_switch = !toggle_switch;  // Toggle!
;
	lda     _toggle_switch
	jsr     bnega
	sta     _toggle_switch
;
; sfx_play (SFX_STEPON, 0);
;
	lda     #$0F
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; rda = 0;       // Do not clear hotspot!
;
L27CB:	lda     #$00
L2AD2:	sta     _rda
;
; if (rda) {
;
L27A5:	lda     _rda
	beq     L27CE
;
; sfx_play (rda, 1);
;
	lda     _rda
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; hrt = 0;
;
	lda     #$00
	sta     _hrt
;
; hact [n_pant] = 0;
;
	ldy     _n_pant
	sta     _hact,y
;
; if (!warp_to_level && !pkill) {
;
L27CE:	lda     _warp_to_level
	bne     L27D9
	lda     _pkill
	bne     L27D9
;
; player_move ();
;
	jsr     _player_move
;
; if (pdying) {
;
L27D9:	lda     _pdying
	beq     L27F0
;
; if (pvy <= PLAYER_VY_FALLING_MAX) pvy += PLAYER_G;
;
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$01
	bvc     L27E2
	eor     #$80
L27E2:	bpl     L27E0
	lda     #$10
	clc
	adc     _pvy
	sta     _pvy
	bcc     L27E0
	inc     _pvy+1
;
; py += pvy;
;
L27E0:	lda     _pvy
	clc
	adc     _py
	sta     _py
	lda     _pvy+1
	adc     _py+1
	sta     _py+1
;
; if (py < 0) py = 0;
;
	ldx     _py+1
	cpx     #$80
	bcc     L27E8
	lda     #$00
	sta     _py
	sta     _py+1
;
; pry = py >> FIXBITS;
;
L27E8:	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; psprid = CELL_HIT;
;
	lda     #$09
	sta     _psprid
;
; if (pry > 218) {
;
	lda     _pry
	cmp     #$DB
	bcc     L27F0
;
; level_reset = 1;  // This will break the main loop
;
	lda     #$01
	sta     _level_reset
;
; if (timer_on && timer) {
;
L27F0:	lda     _timer_on
	beq     L27F4
	lda     _timer
	beq     L27F4
;
; if (timer_frames) -- timer_frames; else {
;
	lda     _timer_frames
	beq     L27F8
	dec     _timer_frames
	jmp     L27F4
;
; timer_frames = 50;
;
L27F8:	lda     #$32
	sta     _timer_frames
;
; -- timer; 
;
	dec     _timer
;
; if (timer < TIMER_SOUND) sfx_play (SFX_COUNT, 2);
;
	lda     _timer
	cmp     #$0A
	bcs     L27FF
	lda     #$0C
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; if (timer == 0) {
;
L27FF:	lda     _timer
	bne     L2804
;
; timer_zero = 1;
;
	lda     #$01
	sta     _timer_zero
;
; if (underwater) {
;
L2804:	lda     _underwater
	beq     L27F4
;
; if (timer_zero) pkill = 1;
;
	lda     _timer_zero
	beq     L27F4
	lda     #$01
	sta     _pkill
;
; (l_player_max_objects [level] && pobjs == l_player_max_objects [level]) ||
;
L27F4:	ldy     _level
	lda     _l_player_max_objects,y
	beq     L2ACF
	ldy     _level
	lda     _l_player_max_objects,y
	cmp     _pobjs
	beq     L280F
;
; (level_act == 2 && en_flags [0] && en_cttouched [0] == 0) ||
;
L2ACF:	lda     _level_act
	cmp     #$02
	bne     L2AD0
	lda     _en_flags
	beq     L2AD0
	lda     _en_cttouched
	beq     L280F
;
; (level == 17 && somari_state == 3);
;
L2AD0:	lda     _level
	cmp     #$11
	bne     L2AD1
	lda     _somari_state
	cmp     #$03
	beq     L280F
L2AD1:	lda     #$00
	jmp     L281F
L280F:	lda     #$01
L281F:	sta     _win_level
;
; ) {
;
	lda     _win_level
	beq     L2820
;
; music_stop ();
;
	jsr     _music_stop
;
; delay (50);
;
	lda     #$32
	jsr     _delay
;
; break;
;
	jmp     L26E4
;
; cocos_do ();
;
L2820:	jsr     _cocos_do
;
; oam_index_player = oam_index; 
;
	lda     _oam_index
	sta     _oam_index_player
;
; if (!warp_to_level) player_render ();
;
	lda     _warp_to_level
	bne     L2828
	jsr     _player_render
;
; enems_move ();
;
L2828:	jsr     _enems_move
;
; if (warp_to_level) {
;
	lda     _warp_to_level
	beq     L282C
;
; update_cycle (); music_stop (); break;
;
	jsr     _update_cycle
	jsr     _music_stop
	jmp     L26E4
;
; if (hrt) hotspots_paint ();
;
L282C:	lda     _hrt
	beq     L2830
	jsr     _hotspots_paint
;
; if (do_process_breakable) breakable_do_anim ();
;
L2830:	lda     _do_process_breakable
	beq     L2833
	jsr     _breakable_do_anim
;
; ring_do ();
;
L2833:	jsr     _ring_do
;
; bridge_do ();
;
	jsr     _bridge_do
;
; if (underwater) {
;
	lda     _underwater
	jeq     L2882
;
; if (pvx < -96) pvx = -96;
;
	lda     _pvx
	cmp     #$A0
	lda     _pvx+1
	sbc     #$FF
	bvc     L283C
	eor     #$80
L283C:	bpl     L283A
	ldx     #$FF
	lda     #$A0
;
; else if (pvx > 96) pvx = 96;
;
	jmp     L2AD9
L283A:	lda     _pvx
	cmp     #$61
	lda     _pvx+1
	sbc     #$00
	bvs     L2842
	eor     #$80
L2842:	bpl     L2840
	ldx     #$00
	lda     #$60
L2AD9:	sta     _pvx
	stx     _pvx+1
;
; if (pvy > 96) pvy = 96;
;
L2840:	lda     _pvy
	cmp     #$61
	lda     _pvy+1
	sbc     #$00
	bvs     L2847
	eor     #$80
L2847:	bpl     L2845
	ldx     #$00
	lda     #$60
	sta     _pvy
	stx     _pvy+1
;
; if (pvy < -160 && !ptrampoline) pvy = -160;
;
L2845:	lda     _pvy
	cmp     #$60
	lda     _pvy+1
	sbc     #$FF
	bvc     L284C
	eor     #$80
L284C:	bpl     L284A
	lda     _ptrampoline
	bne     L284A
	ldx     #$FF
	lda     #$60
	sta     _pvy
	stx     _pvy+1
;
; if (timer_frames == 25) { bubble_x = prx; bubble_y = pry - 8; }
;
L284A:	lda     _timer_frames
	cmp     #$19
	bne     L2851
	lda     _prx
	sta     _bubble_x
	lda     _pry
	sec
	sbc     #$08
	sta     _bubble_y
;
; if (bubble_y) {
;
L2851:	lda     _bubble_y
	beq     L2858
;
; rda = rand8 ();
;
	jsr     _rand8
	sta     _rda
;
; -- bubble_y;
;
	dec     _bubble_y
;
; bubble_x += ((rda & 2) - 1);
;
	lda     _rda
	and     #$02
	sec
	sbc     #$01
	clc
	adc     _bubble_x
	sta     _bubble_x
;
; bubble_x, bubble_y + SPRITE_ADJUST, 
;
	jsr     decsp4
	lda     _bubble_x
	ldy     #$03
	sta     (sp),y
	lda     _bubble_y
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2AD5
	sec
L2AD5:	sbc     #$10
	bcs     L2AD6
	sec
L2AD6:	sbc     #$01
	dey
	sta     (sp),y
;
; 0x0c + (rda & 1),
;
	lda     _rda
	and     #$01
	clc
	adc     #$0C
	dey
	sta     (sp),y
;
; 2, 
;
	lda     #$02
	dey
	sta     (sp),y
;
; );
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (timer && timer < 10) oam_index = oam_spr (
;
L2858:	lda     _timer
	beq     L286F
	lda     _timer
	cmp     #$0A
	bcs     L286F
;
; prx, pry - 16 + SPRITE_ADJUST - (12 - (timer_frames >> 2)), 
;
	jsr     decsp4
	lda     _prx
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _pry
	sec
	sbc     #$10
	bcs     L2877
	dex
L2877:	clc
	adc     #$30
	bcc     L2878
	inx
L2878:	sec
	sbc     #$0C
	bcs     L2AD7
	dex
	sec
L2AD7:	sbc     #$10
	bcs     L2AD8
	dex
	sec
L2AD8:	sbc     #$01
	bcs     L287B
	dex
L287B:	jsr     pushax
	lda     #$0C
	jsr     pusha0
	lda     _timer_frames
	jsr     asrax2
	jsr     tossubax
	jsr     tossubax
	ldy     #$02
	sta     (sp),y
;
; 2 + timer, 
;
	lda     _timer
	clc
	adc     #$02
	dey
	sta     (sp),y
;
; 2, 
;
	lda     #$02
	dey
	sta     (sp),y
;
; );
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (ht [n_pant] == HOTSPOT_TYPE_TIME) {
;
L286F:	ldy     _n_pant
	lda     _ht,y
	cmp     #$05
	bne     L2882
;
; if (timer < 10) hrt = HOTSPOT_TYPE_TIME; // Reappear if needed w/o having to reenter
;
	lda     _timer
	cmp     #$0A
	bcs     L2886
	lda     #$05
	sta     _hrt
;
; hact [n_pant] = 1;
;
L2886:	ldy     _n_pant
	lda     #$01
	sta     _hact,y
;
; if (toggle_timer) {
;
L2882:	lda     _toggle_timer
	beq     L2891
;
; -- toggle_timer;
;
	dec     _toggle_timer
;
; if (toggle_timer == 0) {
;
	lda     _toggle_timer
	bne     L2891
;
; hrt = HOTSPOT_TYPE_TOGGLE_OFF;
;
	lda     #$06
	sta     _hrt
;
; sfx_play (SFX_STEPON, 0);
;
	lda     #$0F
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (level == 15) {
;
L2891:	lda     _level
	cmp     #$0F
	bne     L28AF
;
; if (ticker == 0 || ticker == 25) {
;
	lda     _ticker
	beq     L289B
	lda     _ticker
	cmp     #$19
	bne     L28AF
;
; if (elec_state_ct) -- elec_state_ct; else {
;
L289B:	lda     _elec_state_ct
	beq     L289D
	dec     _elec_state_ct
	jmp     L28AF
;
; ++ elec_state; if (elec_state == 3) elec_state = 0;
;
L289D:	inc     _elec_state
	lda     _elec_state
	cmp     #$03
	bne     L28A2
	lda     #$00
	sta     _elec_state
;
; elec_state_ct = elec_state_max_ct [elec_state];
;
L28A2:	ldy     _elec_state
	lda     _elec_state_max_ct,y
	sta     _elec_state_ct
;
; if (elec_state == 0) pal_bg (palts5);
;
	lda     _elec_state
	bne     L28AA
	lda     #<(_palts5)
	ldx     #>(_palts5)
	jsr     _pal_bg
;
; else if (elec_state == 1) {
;
	jmp     L28AF
L28AA:	lda     _elec_state
	cmp     #$01
	bne     L28AF
;
; __asm__ ("lda #$18");
;
	lda     #$18
;
; __asm__ ("sta PAL_BUF+11");
;
	sta     PAL_BUF+11
;
; __asm__ ("inc %v", PALUPDATE);
;
	inc     _PALUPDATE
;
; if (level == 17 && n_pant == 2) {
;
L28AF:	lda     _level
	cmp     #$11
	jne     L28DD
	lda     _n_pant
	cmp     #$02
	jne     L28DD
;
; somari_do ();
;
	jsr     _somari_do
;
; if (en_mx [0] < 0 && half_life) sfx_play (1, 2);   
;
	lda     _en_mx
	asl     a
	bcc     L28B9
	lda     _half_life
	beq     L28B9
	lda     #$01
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; if (prx > 216) {
;
L28B9:	lda     _prx
	cmp     #$D9
	bcc     L28CA
;
; prx = 216; px = prx << FIXBITS; pvx = 0;
;
	lda     #$D8
	sta     _prx
	ldx     #$00
	lda     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; if (pspin) {
;
	lda     _pspin
	beq     L28CA
;
; pvx = -512;   
;
	ldx     #$FE
	lda     #$00
	sta     _pvx
	stx     _pvx+1
;
; pflickering = 30;
;
	lda     #$1E
	sta     _pflickering
;
; if (somari_life) {
;
	lda     _somari_life
	beq     L28D0
;
; -- somari_life;
;
	dec     _somari_life
;
; somari_state = 1; 
;
	lda     #$01
;
; } else {
;
	jmp     L2AD4
;
; somari_state = 2;
;
L28D0:	lda     #$02
L2AD4:	sta     _somari_state
;
; somari_ct = 120;
;
	lda     #$78
	sta     _somari_ct
;
; sfx_play (SFX_BREAKB, 1);
;
	lda     #$11
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; if (pflickering == 0 &&
;
L28CA:	lda     _pflickering
	bne     L28DD
;
; en_mx [0] < 0 &&
;
	lda     _en_mx
	asl     a
	bcc     L28DD
;
; prx + 3 >= en_x [0] &&
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$03
	bcc     L28E2
	inx
L28E2:	cmp     _en_x
	txa
	sbc     #$00
	bcc     L28DD
;
; prx <= en_x [0] + 7
;
	lda     _prx
	jsr     pusha0
	lda     _en_x
;
; ) {
;
	clc
	adc     #$07
	bcc     L28E5
	ldx     #$01
L28E5:	jsr     tosicmp
	bcc     L28DE
	bne     L28DD
;
; pkill = 1;
;
L28DE:	lda     #$01
	sta     _pkill
;
; if ((pad0 & (PAD_B|PAD_SELECT|PAD_UP)) == (PAD_B|PAD_SELECT|PAD_UP)) break;
;
L28DD:	lda     _pad0
	and     #$16
	cmp     #$16
	beq     L26E4
;
; if (pad_this_frame & PAD_START) {
;
	lda     _pad_this_frame
	and     #$08
	jeq     L26E3
;
; paused ^= 1;
;
	lda     _paused
	eor     #$01
	sta     _paused
;
; pal_bright (4 - paused);
;
	lda     #$04
	sec
	sbc     _paused
	jsr     _pal_bright
;
; music_pause (paused);
;
	lda     _paused
	jsr     _music_pause
;
; }
;
	jmp     L26E3
;
; fade_delay = 4;
;
L26E4:	lda     #$04
	sta     _fade_delay
;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; set_vram_update (0, 0);
;
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
;
; ppu_off ();
;
	jsr     _ppu_off
;
; oam_clear ();
;
	jmp     _oam_clear

.endproc

; ---------------------------------------------------------------
; void __near__ game_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_do: near

.segment	"CODE"

;
; gp_gen = paltstitle; gp_func = scr_level; pres ();
;
	lda     #<(_paltstitle)
	sta     _gp_gen
	lda     #>(_paltstitle)
	sta     _gp_gen+1
	lda     #<(_scr_level)
	sta     _gp_func
	lda     #>(_scr_level)
	sta     _gp_func+1
	jsr     _pres
;
; game_init (); 
;
	jsr     _game_init
;
; game_loop ();
;
	jmp     _game_loop

.endproc

; ---------------------------------------------------------------
; void __near__ game_ending (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_ending: near

.segment	"CODE"

;
; rdm = 4; cutscene ();
;
	lda     #$04
	sta     _rdm
	jsr     _cutscene
;
; gp_gen = cuts_pal [rdm]; gp_func = scr_the_end; pres ();
;
	ldx     #$00
	lda     _rdm
	asl     a
	bcc     L2ADB
	inx
	clc
L2ADB:	adc     #<(_cuts_pal)
	sta     ptr1
	txa
	adc     #>(_cuts_pal)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _gp_gen+1
	dey
	lda     (ptr1),y
	sta     _gp_gen
	lda     #<(_scr_the_end)
	sta     _gp_func
	lda     #>(_scr_the_end)
	sta     _gp_func+1
	jsr     _pres
;
; free_play = 1;
;
	lda     #$01
	sta     _free_play
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; bank_spr (1);
;
	lda     #$01
	jsr     _bank_spr
;
; bank_bg (0);
;
	lda     #$00
	jsr     _bank_bg
;
; ppu_off ();
;
	jsr     _ppu_off
;
; ntsc = ppu_system ();
;
	jsr     _ppu_system
	sta     _ntsc
;
; first_game = 1;
;
	lda     #$01
L2ADD:	sta     _first_game
;
; title (); // level* vars are set there.
;
	jsr     _title
;
; plife = PLAYER_LIFE;
;
	lda     #$05
	sta     _plife
;
; if (free_play == 0) {
;
	lda     _free_play
	bne     L2931
;
; if (level == 0) {
;
	lda     _level
	bne     L2926
;
; music_play (MUSIC_CUTS);
;
	lda     #$06
	jsr     _music_play
;
; rdm = 0; cutscene ();
;
	lda     #$00
	sta     _rdm
	jsr     _cutscene
;
; rdm = 1; cutscene ();
;
	lda     #$01
	sta     _rdm
	jsr     _cutscene
;
; music_stop ();
;
	jsr     _music_stop
;
; } else level = base_level [level];
;
	jmp     L2931
L2926:	ldy     _level
	lda     _base_level,y
	sta     _level
;
; if (select_level) {
;
L2931:	lda     _select_level
	beq     L2939
;
; zone_select ();
;
	jsr     _zone_select
;
; select_level = 0;
;
	lda     #$00
	sta     _select_level
;
; scroll (0, SCROLL_Y);
;
L2939:	jsr     push0
	lda     #$0C
	jsr     _scroll
;
; level_world = base_world [level];
;
	ldy     _level
	lda     _base_world,y
	sta     _level_world
;
; level_act = base_act [level];
;
	ldy     _level
	lda     _base_act,y
	sta     _level_act
;
; game_do ();
;
	jsr     _game_do
;
; if (game_over) {
;
	lda     _game_over
	beq     L294A
;
; level_reset = 0;
;
	lda     #$00
	sta     _level_reset
;
; gp_gen = palts0; gp_func = scr_game_over;
;
	lda     #<(_palts0)
	sta     _gp_gen
	lda     #>(_palts0)
	sta     _gp_gen+1
	lda     #<(_scr_game_over)
	sta     _gp_func
	lda     #>(_scr_game_over)
	sta     _gp_func+1
;
; break;
;
	jmp     L2937
;
; } else if (level_reset) {
;
L294A:	lda     _level_reset
;
; } else {
;
	bne     L2931
;
; if (!free_play || level_act < 2) {
;
	lda     _free_play
	beq     L2957
	lda     _level_act
	cmp     #$02
	bcs     L2956
;
; ++ level;
;
L2957:	inc     _level
;
; if (level == MAX_LEVELS) {
;
	lda     _level
	cmp     #$12
	bne     L296E
;
; music_play (MUSIC_CUTS);
;
	lda     #$06
	jsr     _music_play
;
; rdm = 2; cutscene ();
;
	lda     #$02
	sta     _rdm
	jsr     _cutscene
;
; if (pemmeralds != 0x3f) { 
;
	lda     _pemmeralds
	cmp     #$3F
	beq     L2ADC
;
; rdm = 3; cutscene (); 
;
	lda     #$03
	sta     _rdm
	jsr     _cutscene
;
; free_play = select_level = 1;
;
	lda     #$01
	sta     _select_level
	sta     _free_play
;
; level = 0;
;
	lda     #$00
	sta     _level
;
; } else {
;
	jmp     L296E
;
; } else if (pemmeralds == 0x3f) {
;
L2956:	lda     _pemmeralds
	cmp     #$3F
	bne     L296E
;
; game_ending ();
;
L2ADC:	jsr     _game_ending
;
; if (free_play && level_act == 2) select_level = 1;
;
L296E:	lda     _free_play
	jeq     L2931
	lda     _level_act
	cmp     #$02
	jne     L2931
	lda     #$01
	sta     _select_level
;
; }
;
	jmp     L2931
;
; first_game = 0;
;
L2937:	lda     #$00
;
; }
;
	jmp     L2ADD

.endproc

