;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_mask
	.import		_ppu_system
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_ppu_waitnmi
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_split
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_read
	.import		_vram_write
	.import		_unrle_vram
	.import		_memfill
	.import		_delay
	.import		_bankswitch
	.export		_monococo_state_times
	.export		_coco_dx
	.export		_coco_dy
	.export		_endx
	.export		_endy
	.export		_bits
	.export		_jitter
	.export		_palcuts0
	.export		_palcuts1
	.export		_palcuts2
	.export		_palss0
	.export		_palss0a
	.export		_palss1
	.export		_palss2
	.export		_palts0
	.export		_palts1
	.export		_palts2
	.export		_palts2a
	.export		_palts3
	.export		_palts3a
	.export		_palts4
	.export		_palts4a
	.export		_palts5
	.export		_palts5a
	.export		_palts5b
	.export		_palts5c
	.export		_paltstitle
	.export		_behs0
	.export		_behs1
	.export		_behs2
	.export		_behs3
	.export		_behs4
	.export		_behs4b
	.export		_behs5
	.export		_behs5b
	.export		_map_01_scr_offsets
	.export		_map_10_scr_offsets
	.export		_map_11_scr_offsets
	.export		_map_20_scr_offsets
	.export		_map_21_scr_offsets
	.export		_map_30_scr_offsets
	.export		_map_31_scr_offsets
	.export		_map_02_scr_offsets
	.export		_map_12_scr_offsets
	.export		_map_22_scr_offsets
	.export		_map_00_scr_offsets
	.export		_map_32_scr_offsets
	.export		_map_40_scr_offsets
	.export		_map_41_scr_offsets
	.export		_map_42_scr_offsets
	.export		_map_50_scr_offsets
	.export		_map_51_scr_offsets
	.export		_map_52_scr_offsets
	.export		_sspl_00_a
	.export		_sspl_00_b
	.export		_sspl_01_a
	.export		_sspl_01_b
	.export		_sspl_02_a
	.export		_sspl_02_b
	.export		_sspl_03_a
	.export		_sspl_03_b
	.export		_sspl_04
	.export		_sspl_05
	.export		_sspl_06
	.export		_ssen_00_a
	.export		_ssen_00_b
	.export		_ssen_01_a
	.export		_ssen_01_b
	.export		_ssen_02_a
	.export		_ssen_02_b
	.export		_ssen_03_a
	.export		_ssen_03_b
	.export		_ssen_04_a
	.export		_ssen_04_b
	.export		_ssen_05_a
	.export		_ssen_05_b
	.export		_ssen_06_a
	.export		_ssen_06_b
	.export		_ssen_07_a
	.export		_ssen_07_b
	.export		_ssen_08_a
	.export		_ssen_08_b
	.export		_ssen_09_a
	.export		_ssen_09_b
	.export		_ssen_0A_a
	.export		_ssen_0A_b
	.export		_ssen_0B_a
	.export		_ssen_0B_b
	.export		_ssfant_00_a
	.export		_ssfant_00_b
	.export		_ssfant_01_a
	.export		_ssfant_01_b
	.export		_ssmc_00_a
	.export		_ssmc_00_b
	.export		_ssmc_01_a
	.export		_ssmc_01_b
	.export		_sstrunk_00
	.export		_sstrunk_01
	.export		_sstrunk_02
	.export		_sspez_00
	.export		_sspez_01
	.export		_ssbomb_00
	.export		_ssbomb_01
	.export		_sscan_00
	.export		_sscan_01
	.export		_sscan_02
	.export		_sscan_03
	.export		_ssboss_00_a
	.export		_ssboss_00_b
	.export		_ssboss_01_a
	.export		_ssboss_01_b
	.export		_ssplat_00
	.export		_ssplat_01
	.export		_ssplat_02
	.export		_ssplat_03
	.export		_ssplat_04
	.export		_ssexpl_00
	.export		_ssoccl_00
	.export		_ssit_00
	.export		_ssit_01
	.export		_ssit_02
	.export		_ssit_03
	.export		_ssit_04
	.export		_ssit_05
	.export		_ssit_06
	.export		_ssit_07
	.export		_ssit_08
	.export		_ssit_09
	.export		_ssit_0A
	.export		_ssray_00
	.export		_ssray_01
	.export		_ssray_02
	.export		_sssom_00
	.export		_sssom_01
	.export		_sssom_02
	.export		_sssom_03
	.export		_sssom_04
	.export		_ssmon_00
	.export		_ssmon_01
	.export		_ts0_pals
	.export		_ts0_tmaps
	.export		_ts1_pals
	.export		_ts1_tmaps
	.export		_ts2_pals
	.export		_ts2_tmaps
	.export		_ts3_pals
	.export		_ts3_tmaps
	.export		_ts4_pals
	.export		_ts4_tmaps
	.export		_ts4b_pals
	.export		_ts4b_tmaps
	.export		_ts5_pals
	.export		_ts5_tmaps
	.export		_ts5b_pals
	.export		_ts5b_tmaps
	.export		_spr_player
	.export		_spr_enems1
	.export		_spr_enems2
	.export		_spr_enems3
	.export		_spr_enems4
	.export		_spr_enems5
	.export		_spr_hs
	.export		_cutscene_0
	.export		_cutscene_1
	.export		_cutscene_2
	.export		_cutscene_3
	.export		_cutscene_4
	.export		_cutscenes
	.export		_beh0
	.export		_beh1
	.export		_beh2
	.export		_beh3
	.export		_beh4
	.export		_en_behptrs
	.export		_l_scr_ini
	.export		_l_ini_x
	.export		_l_ini_y
	.export		_l_map_w
	.export		_l_map_h
	.export		_l_player_max_objects
	.export		_l_player_max_enems
	.export		_l_pal_bg
	.export		_l_pal_fg
	.export		_l_ts_tmaps
	.export		_l_ts_pals
	.export		_l_behs
	.export		_l_spr_enems
	.export		_l_map_chr_rom_bank
	.export		_l_map
	.export		_l_enems_chr_rombank
	.export		_l_enems
	.export		_l_hotspots
	.export		_l_chr_rom_bank
	.export		_l_music
	.export		_cuts0_rle
	.export		_cuts1_rle
	.export		_cuts2_rle
	.export		_title_rle
	.export		__x
	.export		__y
	.export		__n
	.export		__t
	.export		__z
	.export		_pad0
	.export		_pad_this_frame
	.export		_gpit
	.export		_gpjt
	.export		_gpitu
	.export		_gpaux
	.export		_rds16
	.export		_gp_gen
	.export		_gp_tmap
	.export		_gp_tma2
	.export		_gp_ram
	.export		_gp_ram_aux
	.export		_gp_addr
	.export		_rdx
	.export		_rdy
	.export		_rdt
	.export		_rdit
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdd
	.export		_rdm
	.export		_rds
	.export		_rdct
	.export		_ticker
	.export		_at1
	.export		_at2
	.export		_cx1
	.export		_cx2
	.export		_cy1
	.export		_cy2
	.export		_caux
	.export		_oam_index
	.export		_en_initial
	.export		_en_offs
	.export		_en_fr
	.export		_en_collx
	.export		_en_colly
	.export		_en_spr
	.export		_touched
	.export		_en_is_alive
	.export		_pregotten
	.export		_en_cttouched
	.export		_en_flags
	.export		_en_life
	.export		_en_status
	.export		_en_ct
	.export		_en_rawv
	.export		_en_behptr
	.export		__en_t
	.export		__en_s
	.export		__en_x
	.export		__en_y
	.export		__en_x1
	.export		__en_y1
	.export		__en_x2
	.export		__en_y2
	.export		__en_mx
	.export		__en_my
	.export		__en_ct
	.export		__en_facing
	.export		__en_state
	.export		__enf_x
	.export		__enf_y
	.export		__enf_vx
	.export		__enf_vy
	.export		_en_sg_1
	.export		_en_sg_2
	.export		_vertical_engine_type
	.export		_px
	.export		_py
	.export		_pvx
	.export		_pvy
	.export		_prx
	.export		_pry
	.export		_pcx
	.export		_pcy
	.export		_pfacing
	.export		_pfr
	.export		_pctfr
	.export		_psprid
	.export		_a_button
	.export		_b_button
	.export		_pj
	.export		_pctj
	.export		_pgotten
	.export		_ppossee
	.export		_oppossee
	.export		_pflickering
	.export		_pbouncing
	.export		_phit
	.export		_pgtmx
	.export		_pgtmy
	.export		_ptrampoline
	.export		_pspin
	.export		_hitv
	.export		_hith
	.export		_prx_old
	.export		_pry_old
	.export		_pkill
	.export		_pice
	.export		_pnotsafe
	.export		_pcontinues
	.export		_plife
	.export		_pobjs
	.export		_pammo
	.export		_pkilled
	.export		_pfiring
	.export		_n_pant_safe
	.export		_px_safe
	.export		_py_safe
	.export		_coco_it
	.export		_hrx
	.export		_hry
	.export		_hrt
	.export		_do_process_breakable
	.export		_ft
	.export		_c_map_w
	.export		_c_map_h
	.export		_c_map_size
	.export		_c_ts_pals
	.export		_c_ts_tmaps
	.export		_c_behs
	.export		_spr_enems
	.export		_c_pal_bg
	.export		_c_pal_fg
	.export		_c_map
	.export		_c_map_chr_rom_bank
	.export		_c_locks
	.export		_c_enems
	.export		_c_hotspots
	.export		_c_max_bolts
	.export		_ntsc
	.export		_ntsc_frame
	.export		_update_index
	.export		_update_list
	.export		_fader
	.export		_fade_delay
	.export		_map_attr
	.export		_map_buff
	.export		_first_game
	.export		_level
	.export		_c_max_enems
	.export		_n_pant
	.export		_on_pant
	.export		_half_life
	.export		_frame_counter
	.export		_paused
	.export		_win_level
	.export		_game_over
	.export		_warp_to_level
	.export		_level_reset
	.export		_flick_override
	.export		_olife
	.export		_okeys
	.export		_oobjs
	.export		_oammo
	.export		_okilled
	.export		_oam_index_player
	.export		_coco_slots
	.export		_coco_slots_i
	.export		_coco_on
	.export		_coco_x
	.export		_coco_y
	.export		_coco_vx
	.export		_coco_vy
	.export		_brk_buff
	.export		_brkf
	.export		_brkx
	.export		_brky
	.export		_pmayneedrelocation
	.export		_hyx
	.export		_ht
	.export		_hact
	.export		_flags
	.export		_en_t
	.export		_en_x
	.export		_en_y
	.export		_en_x1
	.export		_en_y1
	.export		_en_x2
	.export		_en_y2
	.export		_en_mx
	.export		_en_my
	.export		_en_s
	.export		_en_facing
	.export		_en_state
	.export		_en_spr_x_mod
	.export		_enf_x
	.export		_enf_vx
	.export		_enf_y
	.export		_enf_vy
	.export		_en_spr_id
	.export		_en_invincible
	.export		_cfx
	.export		_timer
	.export		_otimer
	.export		_timer_frames
	.export		_timer_zero
	.export		_timer_on
	.export		_tile_got
	.export		_ring_x
	.export		_ring_y
	.export		_ring_vx
	.export		_ring_vy
	.export		_ring_timer
	.export		_prings
	.export		_oprings
	.export		_pemmeralds
	.export		_level_world
	.export		_level_act
	.export		_water_strip
	.export		_underwater
	.export		_bubble_x
	.export		_bubble_y
	.export		_toggle_switch
	.export		_toggle_timer
	.export		_elec_state
	.export		_elec_state_ct
	.export		_somari_state
	.export		_somari_ct
	.export		_somari_life
	.export		_base_level
	.export		_base_world
	.export		_base_act
	.export		_spr_ring
	.export		_pal_cycle
	.export		_level5_bg
	.export		_elec_state_max_ct
	.export		_player_render
	.export		_do_extern_action
	.export		_fade_out
	.export		_fade_in
	.export		_clear_update_list
	.export		_cls
	.export		_ul_putc
	.export		_p_t
	.export		_bitmasks
	.export		_attr_table
	.export		_upd_attr_table
	.export		_draw_tile
	.export		_update_list_tile
	.export		_map_set
	.export		_get_byte
	.export		_add_tile
	.export		_draw_scr
	.export		_pr_str
	.export		_cm_two_points
	.export		_collide_in
	.export		_collide
	.export		_add_sign
	.export		_saturate
	.export		_pad_read
	.export		_distance
	.export		_jump_start
	.export		_update_cycle
	.export		_ring_create
	.export		_ring_do
	.export		_somari_do
	.export		_breakable_do_anim
	.export		_breakable_break
	.export		_hotspots_load
	.export		_hotspots_paint
	.export		_hotspots_create
	.export		_cocos_init
	.export		_cocos_shoot_aimed
	.export		_cocos_shoot_linear
	.export		_cocos_destroy
	.export		_cocos_do
	.export		_player_register_safe_spot
	.export		_player_stop
	.export		_player_init
	.export		_player_to_pixels
	.export		_player_kill
	.export		_player_move
	.export		_enems_update_unsigned_char_arrays
	.export		_enems_facing
	.export		_enems_init_fp
	.export		_enems_boioiong_init
	.export		_enems_load
	.export		_enems_kill
	.export		_enems_hit
	.export		_enems_move
	.export		_draw_game_frame
	.export		_hud_update
	.export		_bat_in
	.export		_bat_out
	.export		_pres
	.export		_level_name_0
	.export		_level_name_1
	.export		_level_name_2
	.export		_level_name_3
	.export		_level_name_4
	.export		_level_name_5
	.export		_level_names
	.export		_scr_level
	.export		_title
	.export		_scr_game_over
	.export		_scr_the_end
	.export		_cuts_rle
	.export		_cuts_pal
	.export		_scr_cutscene
	.export		_cutscene
	.export		_flickscreen_do_horizontal
	.export		_flickscreen_do_vertical
	.export		_game_init
	.export		_prepare_scr
	.export		_game_loop
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_monococo_state_times:
	.byte	$96
	.byte	$32
	.byte	$32
	.byte	$32
_coco_dx:
	.word	$FF80
	.word	$0000
	.word	$0080
	.word	$0000
_coco_dy:
	.word	$0000
	.word	$FF80
	.word	$0000
	.word	$0080
_endx:
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$FF
_endy:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$FF
_bits:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80
_jitter:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
_palcuts0:
	.byte	$0F
	.byte	$01
	.byte	$00
	.byte	$30
	.byte	$0F
	.byte	$12
	.byte	$23
	.byte	$36
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$34
	.byte	$0F
	.byte	$12
	.byte	$25
	.byte	$34
_palcuts1:
	.byte	$0F
	.byte	$01
	.byte	$00
	.byte	$30
	.byte	$0F
	.byte	$12
	.byte	$23
	.byte	$36
	.byte	$0F
	.byte	$1C
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$15
	.byte	$26
	.byte	$37
_palcuts2:
	.byte	$0F
	.byte	$01
	.byte	$00
	.byte	$30
	.byte	$0F
	.byte	$12
	.byte	$23
	.byte	$36
	.byte	$0F
	.byte	$15
	.byte	$25
	.byte	$34
	.byte	$0F
	.byte	$15
	.byte	$26
	.byte	$37
_palss0:
	.byte	$21
	.byte	$0F
	.byte	$25
	.byte	$34
	.byte	$21
	.byte	$08
	.byte	$17
	.byte	$34
	.byte	$21
	.byte	$1D
	.byte	$00
	.byte	$30
	.byte	$21
	.byte	$0F
	.byte	$16
	.byte	$28
_palss0a:
	.byte	$21
	.byte	$03
	.byte	$23
	.byte	$33
	.byte	$21
	.byte	$1D
	.byte	$1A
	.byte	$3B
	.byte	$21
	.byte	$0F
	.byte	$1C
	.byte	$31
	.byte	$21
	.byte	$0F
	.byte	$18
	.byte	$29
_palss1:
	.byte	$21
	.byte	$0F
	.byte	$25
	.byte	$34
	.byte	$21
	.byte	$1D
	.byte	$18
	.byte	$34
	.byte	$21
	.byte	$13
	.byte	$21
	.byte	$30
	.byte	$21
	.byte	$0F
	.byte	$26
	.byte	$38
_palss2:
	.byte	$21
	.byte	$0F
	.byte	$25
	.byte	$34
	.byte	$21
	.byte	$08
	.byte	$17
	.byte	$34
	.byte	$21
	.byte	$03
	.byte	$23
	.byte	$30
	.byte	$21
	.byte	$0F
	.byte	$16
	.byte	$28
_palts0:
	.byte	$0B
	.byte	$0F
	.byte	$1A
	.byte	$30
	.byte	$0B
	.byte	$08
	.byte	$17
	.byte	$28
	.byte	$0B
	.byte	$07
	.byte	$26
	.byte	$1A
	.byte	$0B
	.byte	$15
	.byte	$25
	.byte	$3D
_palts1:
	.byte	$13
	.byte	$0F
	.byte	$23
	.byte	$30
	.byte	$13
	.byte	$08
	.byte	$17
	.byte	$28
	.byte	$13
	.byte	$08
	.byte	$18
	.byte	$29
	.byte	$13
	.byte	$05
	.byte	$25
	.byte	$35
_palts2:
	.byte	$0C
	.byte	$07
	.byte	$17
	.byte	$28
	.byte	$0C
	.byte	$17
	.byte	$28
	.byte	$38
	.byte	$0C
	.byte	$07
	.byte	$19
	.byte	$29
	.byte	$0C
	.byte	$12
	.byte	$22
	.byte	$31
_palts2a:
	.byte	$0F
	.byte	$1D
	.byte	$08
	.byte	$18
	.byte	$0F
	.byte	$08
	.byte	$18
	.byte	$27
	.byte	$0F
	.byte	$0C
	.byte	$0B
	.byte	$19
	.byte	$0F
	.byte	$02
	.byte	$12
	.byte	$22
_palts3:
	.byte	$08
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$0F
	.byte	$17
	.byte	$28
	.byte	$08
	.byte	$18
	.byte	$28
	.byte	$38
	.byte	$08
	.byte	$0C
	.byte	$0A
	.byte	$31
_palts3a:
	.byte	$0C
	.byte	$0F
	.byte	$11
	.byte	$31
	.byte	$0C
	.byte	$0F
	.byte	$1A
	.byte	$3A
	.byte	$0C
	.byte	$0A
	.byte	$1A
	.byte	$2A
	.byte	$0C
	.byte	$05
	.byte	$25
	.byte	$35
_palts4:
	.byte	$1D
	.byte	$0C
	.byte	$1C
	.byte	$2C
	.byte	$1D
	.byte	$08
	.byte	$17
	.byte	$38
	.byte	$1D
	.byte	$06
	.byte	$28
	.byte	$29
	.byte	$1D
	.byte	$18
	.byte	$28
	.byte	$30
_palts4a:
	.byte	$0F
	.byte	$1D
	.byte	$0C
	.byte	$1C
	.byte	$0F
	.byte	$02
	.byte	$12
	.byte	$21
	.byte	$0F
	.byte	$02
	.byte	$28
	.byte	$29
	.byte	$0F
	.byte	$13
	.byte	$23
	.byte	$33
_palts5:
	.byte	$02
	.byte	$0F
	.byte	$12
	.byte	$22
	.byte	$02
	.byte	$0F
	.byte	$0C
	.byte	$1C
	.byte	$02
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$01
	.byte	$12
_palts5a:
	.byte	$11
	.byte	$0C
	.byte	$00
	.byte	$20
	.byte	$11
	.byte	$08
	.byte	$17
	.byte	$28
	.byte	$11
	.byte	$0C
	.byte	$00
	.byte	$38
	.byte	$11
	.byte	$0C
	.byte	$1C
	.byte	$11
_palts5b:
	.byte	$1D
	.byte	$0C
	.byte	$1C
	.byte	$2B
	.byte	$1D
	.byte	$02
	.byte	$12
	.byte	$21
	.byte	$1D
	.byte	$0C
	.byte	$15
	.byte	$25
	.byte	$1D
	.byte	$0F
	.byte	$0C
	.byte	$1C
_palts5c:
	.byte	$1D
	.byte	$0C
	.byte	$11
	.byte	$2B
	.byte	$1D
	.byte	$08
	.byte	$17
	.byte	$38
	.byte	$1D
	.byte	$02
	.byte	$28
	.byte	$29
	.byte	$1D
	.byte	$13
	.byte	$23
	.byte	$33
_paltstitle:
	.byte	$02
	.byte	$0F
	.byte	$17
	.byte	$20
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$14
	.byte	$24
	.byte	$02
	.byte	$2D
	.byte	$10
	.byte	$20
_behs0:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$4A
	.byte	$08
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_behs1:
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$4A
	.byte	$14
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$22
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_behs2:
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$22
	.byte	$04
	.byte	$01
	.byte	$08
	.byte	$4A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_behs3:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$22
	.byte	$4A
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
_behs4:
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$22
	.byte	$4A
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$28
	.byte	$28
	.byte	$29
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
_behs4b:
	.byte	$00
	.byte	$28
	.byte	$08
	.byte	$29
	.byte	$08
	.byte	$22
	.byte	$4A
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$28
	.byte	$28
	.byte	$29
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
_behs5:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$22
	.byte	$4A
	.byte	$01
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_behs5b:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_map_01_scr_offsets:
	.word	$0000
	.word	$0047
	.word	$0092
	.word	$00DA
	.word	$0102
	.word	$0137
	.word	$015E
	.word	$015E
	.word	$015E
	.word	$015E
	.word	$016A
	.word	$0199
	.word	$01C8
	.word	$015E
	.word	$020D
	.word	$0257
	.word	$0290
	.word	$02AE
	.word	$015E
	.word	$015E
	.word	$015E
	.word	$02D1
	.word	$02F8
	.word	$0321
	.word	$0336
	.word	$015E
	.word	$015E
	.word	$0360
	.word	$03A5
	.word	$03D0
_map_10_scr_offsets:
	.word	$03FE
	.word	$03FE
	.word	$03FE
	.word	$040A
	.word	$041A
	.word	$0434
	.word	$046A
	.word	$0499
	.word	$03FE
	.word	$03FE
	.word	$04A6
	.word	$03FE
	.word	$03FE
	.word	$03FE
	.word	$03FE
	.word	$04B8
	.word	$04D2
	.word	$04FC
	.word	$0555
	.word	$05B3
	.word	$05E0
	.word	$060E
	.word	$0634
	.word	$066C
	.word	$069A
	.word	$06B3
	.word	$06E1
	.word	$0711
	.word	$0739
	.word	$0761
_map_11_scr_offsets:
	.word	$0781
	.word	$07AB
	.word	$07CA
	.word	$07EA
	.word	$080B
	.word	$084D
	.word	$088E
	.word	$08C6
	.word	$08ED
	.word	$0920
	.word	$0951
	.word	$0984
	.word	$09B1
	.word	$09EC
	.word	$0A25
	.word	$0A50
	.word	$0A9C
	.word	$0AB1
	.word	$0AEC
	.word	$0B20
	.word	$0B4F
	.word	$0B89
	.word	$0BBD
	.word	$0BCF
	.word	$0BEE
_map_20_scr_offsets:
	.word	$0C25
	.word	$0C6E
	.word	$0CB7
	.word	$0CF3
	.word	$0D2F
	.word	$0D63
	.word	$0D97
	.word	$0DFB
	.word	$0E45
	.word	$0E72
	.word	$0EAA
	.word	$0EEA
	.word	$0F1F
	.word	$0F61
	.word	$0F9E
	.word	$0FD3
	.word	$1011
	.word	$1053
	.word	$1092
	.word	$10CD
_map_21_scr_offsets:
	.word	$10FD
	.word	$10FD
	.word	$10FD
	.word	$1109
	.word	$1127
	.word	$116C
	.word	$1198
	.word	$11BA
	.word	$11D4
	.word	$11F1
	.word	$10FD
	.word	$10FD
	.word	$120B
	.word	$10FD
	.word	$10FD
	.word	$1234
	.word	$1293
	.word	$12E0
	.word	$130A
	.word	$10FD
	.word	$10FD
	.word	$134F
	.word	$1374
	.word	$10FD
	.word	$13AB
	.word	$13C3
	.word	$1410
	.word	$1448
	.word	$147A
	.word	$1494
_map_30_scr_offsets:
	.word	$14B2
	.word	$14E1
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$1515
	.word	$154E
	.word	$0000
	.word	$159C
	.word	$15DB
	.word	$1605
	.word	$1669
	.word	$16A1
	.word	$1702
	.word	$0000
	.word	$1749
	.word	$1791
	.word	$17CD
	.word	$1827
	.word	$0000
	.word	$0000
	.word	$1860
	.word	$189D
	.word	$18E0
	.word	$0000
_map_31_scr_offsets:
	.word	$1926
	.word	$195A
	.word	$1975
	.word	$19A9
	.word	$19DF
	.word	$1A04
	.word	$1A30
	.word	$1A5F
	.word	$1AAA
	.word	$1AF1
	.word	$1B0C
	.word	$1B3E
	.word	$1B87
	.word	$1BDC
	.word	$1C1C
	.word	$1C3E
	.word	$1C7A
	.word	$1CC7
	.word	$1D16
	.word	$0000
	.word	$1D5D
	.word	$1D85
	.word	$1DA6
	.word	$1DD6
	.word	$0000
_map_02_scr_offsets:
	.word	$1E02
	.word	$1E42
	.word	$1E8F
_map_12_scr_offsets:
	.word	$1EC2
	.word	$1EE0
	.word	$1EF5
_map_22_scr_offsets:
	.word	$1F1C
	.word	$1F3C
	.word	$1F6D
_map_00_scr_offsets:
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$000C
	.word	$001A
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0031
	.word	$0066
	.word	$0000
	.word	$008B
	.word	$00B9
	.word	$0000
	.word	$00DA
	.word	$0120
	.word	$014D
	.word	$018E
	.word	$01BC
	.word	$01FB
	.word	$0229
	.word	$0258
	.word	$0277
	.word	$02AC
_map_32_scr_offsets:
	.word	$02E6
	.word	$0320
_map_40_scr_offsets:
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0355
	.word	$038E
	.word	$03BF
	.word	$0000
	.word	$0000
	.word	$03F6
	.word	$0430
	.word	$044B
	.word	$0461
	.word	$0482
	.word	$0493
	.word	$04AB
	.word	$04DA
	.word	$050B
	.word	$0537
	.word	$0567
	.word	$0592
	.word	$05C4
	.word	$05D8
	.word	$0607
	.word	$0632
	.word	$0000
	.word	$0670
	.word	$0670
	.word	$0000
	.word	$0000
	.word	$0000
_map_41_scr_offsets:
	.word	$0000
	.word	$06B1
	.word	$06D5
	.word	$06FC
	.word	$0718
	.word	$0000
	.word	$0733
	.word	$06D5
	.word	$0765
	.word	$0798
	.word	$0000
	.word	$06B1
	.word	$06D5
	.word	$0765
	.word	$0798
	.word	$0000
	.word	$0733
	.word	$06D5
	.word	$0765
	.word	$0798
	.word	$07E7
	.word	$0805
	.word	$0816
	.word	$082F
	.word	$0850
_map_42_scr_offsets:
	.word	$087E
	.word	$08B2
	.word	$08EC
_map_50_scr_offsets:
	.word	$0000
	.word	$0000
	.word	$0916
	.word	$0933
	.word	$095B
	.word	$09BC
	.word	$0A0E
	.word	$0A60
	.word	$0ABA
	.word	$0B20
	.word	$0B82
	.word	$0BB3
	.word	$0000
	.word	$0BDA
	.word	$0C11
	.word	$0C58
	.word	$0C8E
	.word	$0CE3
	.word	$0D3F
	.word	$0D3F
	.word	$0000
	.word	$0D3F
	.word	$0D3F
	.word	$0D3F
	.word	$0D3F
	.word	$0D74
	.word	$0DB6
	.word	$0DED
	.word	$0E39
	.word	$0000
_map_51_scr_offsets:
	.word	$0E97
	.word	$0EBB
	.word	$0EBB
	.word	$0EBB
	.word	$0EBB
	.word	$0ECF
	.word	$0EED
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0F32
	.word	$0F48
	.word	$0FAB
	.word	$0000
	.word	$1010
	.word	$104A
	.word	$0000
	.word	$106D
	.word	$10BC
	.word	$0000
	.word	$110E
	.word	$1135
	.word	$0000
	.word	$114A
	.word	$1168
	.word	$1168
	.word	$1176
	.word	$0000
_map_52_scr_offsets:
	.word	$118D
	.word	$11A4
	.word	$11BF
_sspl_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0F
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$80
_sspl_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$0F
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$11
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$13
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$12
	.byte	$40
	.byte	$80
_sspl_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$14
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$15
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$17
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$19
	.byte	$00
	.byte	$80
_sspl_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$15
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$14
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$17
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$16
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$19
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$18
	.byte	$40
	.byte	$80
_sspl_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$1A
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$1B
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$1E
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1F
	.byte	$00
	.byte	$80
_sspl_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$1B
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$1A
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$1D
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$1C
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1F
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$1E
	.byte	$40
	.byte	$80
_sspl_03_a:
	.byte	$FC
	.byte	$F8
	.byte	$20
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$21
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$25
	.byte	$00
	.byte	$80
_sspl_03_b:
	.byte	$FC
	.byte	$F8
	.byte	$21
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$20
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$23
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$22
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$25
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$24
	.byte	$40
	.byte	$80
_sspl_04:
	.byte	$FC
	.byte	$00
	.byte	$26
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$26
	.byte	$80
	.byte	$04
	.byte	$08
	.byte	$26
	.byte	$C0
	.byte	$80
_sspl_05:
	.byte	$FC
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$28
	.byte	$80
	.byte	$04
	.byte	$08
	.byte	$28
	.byte	$C0
	.byte	$80
_sspl_06:
	.byte	$FC
	.byte	$00
	.byte	$2A
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$2B
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$2A
	.byte	$80
	.byte	$04
	.byte	$08
	.byte	$2A
	.byte	$C0
	.byte	$80
_ssen_00_a:
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$2D
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$2E
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$2F
	.byte	$03
	.byte	$80
_ssen_00_b:
	.byte	$00
	.byte	$00
	.byte	$2D
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$2F
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$2E
	.byte	$43
	.byte	$80
_ssen_01_a:
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$31
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$32
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$33
	.byte	$03
	.byte	$80
_ssen_01_b:
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$30
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$33
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$32
	.byte	$43
	.byte	$80
_ssen_02_a:
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$35
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$36
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$37
	.byte	$03
	.byte	$80
_ssen_02_b:
	.byte	$00
	.byte	$00
	.byte	$35
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$37
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$36
	.byte	$43
	.byte	$80
_ssen_03_a:
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$39
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$3A
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$3B
	.byte	$03
	.byte	$80
_ssen_03_b:
	.byte	$00
	.byte	$00
	.byte	$39
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$38
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$3B
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$3A
	.byte	$43
	.byte	$80
_ssen_04_a:
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$3D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3D
	.byte	$42
	.byte	$80
_ssen_04_b:
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$3D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3D
	.byte	$42
	.byte	$80
_ssen_05_a:
	.byte	$00
	.byte	$00
	.byte	$3E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3E
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$3F
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3F
	.byte	$42
	.byte	$80
_ssen_05_b:
	.byte	$00
	.byte	$00
	.byte	$3E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3E
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$3F
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3F
	.byte	$42
	.byte	$80
_ssen_06_a:
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$41
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$42
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$43
	.byte	$02
	.byte	$80
_ssen_06_b:
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$40
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$43
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$42
	.byte	$42
	.byte	$80
_ssen_07_a:
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$45
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$46
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$47
	.byte	$02
	.byte	$80
_ssen_07_b:
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$44
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$47
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$46
	.byte	$42
	.byte	$80
_ssen_08_a:
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$4A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$4B
	.byte	$00
	.byte	$80
_ssen_08_b:
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$48
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$4B
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$4A
	.byte	$40
	.byte	$80
_ssen_09_a:
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$4D
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$4E
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$4F
	.byte	$00
	.byte	$80
_ssen_09_b:
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$4C
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$4F
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$4E
	.byte	$40
	.byte	$80
_ssen_0A_a:
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$52
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$53
	.byte	$02
	.byte	$80
_ssen_0A_b:
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$50
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$52
	.byte	$42
	.byte	$80
_ssen_0B_a:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$55
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$56
	.byte	$02
	.byte	$80
_ssen_0B_b:
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$54
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$56
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$55
	.byte	$42
	.byte	$80
_ssfant_00_a:
	.byte	$00
	.byte	$00
	.byte	$57
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$58
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$59
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$5A
	.byte	$02
	.byte	$80
_ssfant_00_b:
	.byte	$00
	.byte	$00
	.byte	$58
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$57
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$5A
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$59
	.byte	$42
	.byte	$80
_ssfant_01_a:
	.byte	$00
	.byte	$00
	.byte	$5B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$5D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$5E
	.byte	$02
	.byte	$80
_ssfant_01_b:
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$5B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$5E
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$5D
	.byte	$42
	.byte	$80
_ssmc_00_a:
	.byte	$00
	.byte	$F8
	.byte	$5F
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$60
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$62
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$63
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$64
	.byte	$02
	.byte	$80
_ssmc_00_b:
	.byte	$00
	.byte	$F8
	.byte	$60
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$5F
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$64
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$63
	.byte	$42
	.byte	$80
_ssmc_01_a:
	.byte	$00
	.byte	$F8
	.byte	$65
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$60
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$62
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$63
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$64
	.byte	$02
	.byte	$80
_ssmc_01_b:
	.byte	$00
	.byte	$F8
	.byte	$60
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$65
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$64
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$63
	.byte	$42
	.byte	$80
_sstrunk_00:
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$66
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$66
	.byte	$C1
	.byte	$80
_sstrunk_01:
	.byte	$00
	.byte	$00
	.byte	$67
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$68
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$69
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$6A
	.byte	$01
	.byte	$80
_sstrunk_02:
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$6C
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6D
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$6E
	.byte	$01
	.byte	$80
_sspez_00:
	.byte	$00
	.byte	$00
	.byte	$6F
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$71
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$72
	.byte	$03
	.byte	$80
_sspez_01:
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$74
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$75
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$76
	.byte	$03
	.byte	$80
_ssbomb_00:
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$78
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$82
	.byte	$80
_ssbomb_01:
	.byte	$00
	.byte	$00
	.byte	$79
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$78
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$82
	.byte	$80
_sscan_00:
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$7B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$7A
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$7C
	.byte	$02
	.byte	$80
_sscan_01:
	.byte	$00
	.byte	$00
	.byte	$7D
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$7D
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$7E
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$7F
	.byte	$02
	.byte	$80
_sscan_02:
	.byte	$00
	.byte	$00
	.byte	$7B
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$7A
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$7C
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$7A
	.byte	$C2
	.byte	$80
_sscan_03:
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$82
	.byte	$08
	.byte	$00
	.byte	$7F
	.byte	$82
	.byte	$00
	.byte	$08
	.byte	$7D
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$7D
	.byte	$C2
	.byte	$80
_ssboss_00_a:
	.byte	$00
	.byte	$F4
	.byte	$80
	.byte	$01
	.byte	$08
	.byte	$F4
	.byte	$81
	.byte	$01
	.byte	$F8
	.byte	$FC
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$83
	.byte	$01
	.byte	$08
	.byte	$FC
	.byte	$84
	.byte	$01
	.byte	$10
	.byte	$FC
	.byte	$85
	.byte	$00
	.byte	$F8
	.byte	$04
	.byte	$86
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$87
	.byte	$02
	.byte	$08
	.byte	$04
	.byte	$88
	.byte	$02
	.byte	$10
	.byte	$04
	.byte	$89
	.byte	$02
	.byte	$F8
	.byte	$0C
	.byte	$8A
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$8B
	.byte	$02
	.byte	$08
	.byte	$0C
	.byte	$8B
	.byte	$42
	.byte	$10
	.byte	$0C
	.byte	$8A
	.byte	$42
	.byte	$80
_ssboss_00_b:
	.byte	$00
	.byte	$F4
	.byte	$81
	.byte	$41
	.byte	$08
	.byte	$F4
	.byte	$80
	.byte	$41
	.byte	$F8
	.byte	$FC
	.byte	$85
	.byte	$40
	.byte	$00
	.byte	$FC
	.byte	$84
	.byte	$41
	.byte	$08
	.byte	$FC
	.byte	$83
	.byte	$41
	.byte	$10
	.byte	$FC
	.byte	$82
	.byte	$40
	.byte	$F8
	.byte	$04
	.byte	$89
	.byte	$42
	.byte	$00
	.byte	$04
	.byte	$88
	.byte	$42
	.byte	$08
	.byte	$04
	.byte	$87
	.byte	$42
	.byte	$10
	.byte	$04
	.byte	$86
	.byte	$42
	.byte	$F8
	.byte	$0C
	.byte	$8A
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$8B
	.byte	$02
	.byte	$08
	.byte	$0C
	.byte	$8B
	.byte	$42
	.byte	$10
	.byte	$0C
	.byte	$8A
	.byte	$42
	.byte	$80
_ssboss_01_a:
	.byte	$00
	.byte	$F4
	.byte	$8C
	.byte	$01
	.byte	$08
	.byte	$F4
	.byte	$8D
	.byte	$01
	.byte	$F8
	.byte	$FC
	.byte	$8E
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$8F
	.byte	$00
	.byte	$08
	.byte	$FC
	.byte	$8F
	.byte	$40
	.byte	$10
	.byte	$FC
	.byte	$8E
	.byte	$40
	.byte	$F8
	.byte	$04
	.byte	$90
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$91
	.byte	$02
	.byte	$08
	.byte	$04
	.byte	$91
	.byte	$42
	.byte	$10
	.byte	$04
	.byte	$90
	.byte	$42
	.byte	$F8
	.byte	$0C
	.byte	$8A
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$8B
	.byte	$02
	.byte	$08
	.byte	$0C
	.byte	$8B
	.byte	$42
	.byte	$10
	.byte	$0C
	.byte	$8A
	.byte	$42
	.byte	$80
_ssboss_01_b:
	.byte	$00
	.byte	$F4
	.byte	$8D
	.byte	$41
	.byte	$08
	.byte	$F4
	.byte	$8C
	.byte	$41
	.byte	$F8
	.byte	$FC
	.byte	$8E
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$8F
	.byte	$00
	.byte	$08
	.byte	$FC
	.byte	$8F
	.byte	$40
	.byte	$10
	.byte	$FC
	.byte	$8E
	.byte	$40
	.byte	$F8
	.byte	$04
	.byte	$90
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$91
	.byte	$02
	.byte	$08
	.byte	$04
	.byte	$91
	.byte	$42
	.byte	$10
	.byte	$04
	.byte	$90
	.byte	$42
	.byte	$F8
	.byte	$0C
	.byte	$8A
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$8B
	.byte	$02
	.byte	$08
	.byte	$0C
	.byte	$8B
	.byte	$42
	.byte	$10
	.byte	$0C
	.byte	$8A
	.byte	$42
	.byte	$80
_ssplat_00:
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$94
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$41
	.byte	$80
_ssplat_01:
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$95
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$95
	.byte	$41
	.byte	$80
_ssplat_02:
	.byte	$00
	.byte	$00
	.byte	$96
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$97
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$98
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$99
	.byte	$01
	.byte	$80
_ssplat_03:
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$9B
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$9C
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$9D
	.byte	$01
	.byte	$80
_ssplat_04:
	.byte	$00
	.byte	$00
	.byte	$9E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$9F
	.byte	$02
	.byte	$80
_ssexpl_00:
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$A1
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$A2
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$A3
	.byte	$02
	.byte	$80
_ssoccl_00:
	.byte	$00
	.byte	$00
	.byte	$A4
	.byte	$22
	.byte	$08
	.byte	$00
	.byte	$A4
	.byte	$62
	.byte	$00
	.byte	$08
	.byte	$A4
	.byte	$A2
	.byte	$08
	.byte	$08
	.byte	$A4
	.byte	$E2
	.byte	$80
_ssit_00:
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$A6
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$A5
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$A6
	.byte	$81
	.byte	$80
_ssit_01:
	.byte	$00
	.byte	$00
	.byte	$A7
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$A8
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$A9
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$AA
	.byte	$02
	.byte	$80
_ssit_02:
	.byte	$00
	.byte	$00
	.byte	$AB
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$AC
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$AD
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$AE
	.byte	$02
	.byte	$80
_ssit_03:
	.byte	$00
	.byte	$00
	.byte	$AF
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$AF
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$AF
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$C1
	.byte	$80
_ssit_04:
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$B1
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$B0
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$B1
	.byte	$81
	.byte	$80
_ssit_05:
	.byte	$00
	.byte	$00
	.byte	$B2
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$B2
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$B2
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$B2
	.byte	$C1
	.byte	$80
_ssit_06:
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$B0
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$B1
	.byte	$C1
	.byte	$08
	.byte	$08
	.byte	$B0
	.byte	$C1
	.byte	$80
_ssit_07:
	.byte	$00
	.byte	$00
	.byte	$B3
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$B3
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$B4
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$B4
	.byte	$41
	.byte	$80
_ssit_08:
	.byte	$00
	.byte	$00
	.byte	$B5
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$B6
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$B7
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$B8
	.byte	$02
	.byte	$80
_ssit_09:
	.byte	$00
	.byte	$00
	.byte	$B9
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$BA
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$BB
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$BC
	.byte	$01
	.byte	$80
_ssit_0A:
	.byte	$00
	.byte	$08
	.byte	$B9
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$BA
	.byte	$01
	.byte	$80
_ssray_00:
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$78
	.byte	$C1
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$81
	.byte	$00
	.byte	$10
	.byte	$BD
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$BE
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$BD
	.byte	$02
	.byte	$08
	.byte	$20
	.byte	$BE
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$28
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$BD
	.byte	$02
	.byte	$08
	.byte	$30
	.byte	$BE
	.byte	$02
	.byte	$00
	.byte	$38
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$38
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$BD
	.byte	$02
	.byte	$08
	.byte	$40
	.byte	$BE
	.byte	$02
	.byte	$00
	.byte	$48
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$48
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$50
	.byte	$77
	.byte	$01
	.byte	$08
	.byte	$50
	.byte	$78
	.byte	$01
	.byte	$00
	.byte	$58
	.byte	$78
	.byte	$C1
	.byte	$08
	.byte	$58
	.byte	$78
	.byte	$81
	.byte	$80
_ssray_01:
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$78
	.byte	$C1
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$81
	.byte	$00
	.byte	$10
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$BD
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$BE
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$20
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$BD
	.byte	$02
	.byte	$08
	.byte	$28
	.byte	$BE
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$30
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$38
	.byte	$BD
	.byte	$02
	.byte	$08
	.byte	$38
	.byte	$BE
	.byte	$02
	.byte	$00
	.byte	$40
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$40
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$48
	.byte	$BD
	.byte	$02
	.byte	$08
	.byte	$48
	.byte	$BE
	.byte	$02
	.byte	$00
	.byte	$50
	.byte	$77
	.byte	$01
	.byte	$08
	.byte	$50
	.byte	$78
	.byte	$01
	.byte	$00
	.byte	$58
	.byte	$78
	.byte	$C1
	.byte	$08
	.byte	$58
	.byte	$78
	.byte	$81
	.byte	$80
_ssray_02:
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$78
	.byte	$C1
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$81
	.byte	$00
	.byte	$50
	.byte	$77
	.byte	$01
	.byte	$08
	.byte	$50
	.byte	$78
	.byte	$01
	.byte	$00
	.byte	$58
	.byte	$78
	.byte	$C1
	.byte	$08
	.byte	$58
	.byte	$78
	.byte	$81
	.byte	$80
_sssom_00:
	.byte	$00
	.byte	$F8
	.byte	$C1
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$C2
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$C4
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$C5
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$C6
	.byte	$01
	.byte	$80
_sssom_01:
	.byte	$00
	.byte	$F8
	.byte	$C7
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$C8
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$C9
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$CA
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$CB
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$80
_sssom_02:
	.byte	$00
	.byte	$F8
	.byte	$CD
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$CE
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$C9
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$CA
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$CF
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$D0
	.byte	$01
	.byte	$80
_sssom_03:
	.byte	$00
	.byte	$F8
	.byte	$D1
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$D2
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$D3
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$D4
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$D5
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$D5
	.byte	$41
	.byte	$80
_sssom_04:
	.byte	$00
	.byte	$F8
	.byte	$D6
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$D7
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$D8
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$D9
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$DA
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$DB
	.byte	$02
	.byte	$80
_ssmon_00:
	.byte	$00
	.byte	$00
	.byte	$DC
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$DD
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$DE
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$DF
	.byte	$03
	.byte	$80
_ssmon_01:
	.byte	$00
	.byte	$00
	.byte	$DC
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$E0
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$E1
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$E2
	.byte	$03
	.byte	$80
_ts0_pals:
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
_ts0_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$0D
	.byte	$09
	.byte	$02
	.byte	$02
	.byte	$0B
	.byte	$0D
	.byte	$1C
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$02
	.byte	$0D
	.byte	$0D
	.byte	$02
	.byte	$02
	.byte	$0D
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$59
	.byte	$0D
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$1E
	.byte	$1B
	.byte	$1E
	.byte	$1B
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5B
	.byte	$5B
	.byte	$5D
	.byte	$5B
	.byte	$5E
_ts1_pals:
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
_ts1_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$60
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$61
	.byte	$61
	.byte	$64
	.byte	$64
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$65
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$67
	.byte	$67
	.byte	$68
	.byte	$68
	.byte	$69
	.byte	$67
	.byte	$02
	.byte	$68
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$1D
	.byte	$1D
	.byte	$1D
	.byte	$1D
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$1E
	.byte	$1B
	.byte	$1E
	.byte	$1B
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5B
	.byte	$5B
	.byte	$5D
	.byte	$5B
	.byte	$5E
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$00
	.byte	$00
_ts2_pals:
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
_ts2_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$76
	.byte	$77
	.byte	$77
	.byte	$78
	.byte	$78
	.byte	$79
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7A
	.byte	$7B
	.byte	$7B
	.byte	$7B
	.byte	$7B
	.byte	$7B
	.byte	$7B
	.byte	$7C
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7D
	.byte	$7E
	.byte	$7E
	.byte	$7F
	.byte	$7F
	.byte	$80
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$82
	.byte	$82
	.byte	$85
	.byte	$84
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$82
	.byte	$86
	.byte	$85
	.byte	$87
	.byte	$88
	.byte	$88
	.byte	$89
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$8E
	.byte	$7F
	.byte	$8F
	.byte	$80
	.byte	$7F
	.byte	$90
	.byte	$80
	.byte	$80
	.byte	$76
	.byte	$76
	.byte	$91
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$92
	.byte	$82
	.byte	$93
	.byte	$94
	.byte	$84
	.byte	$95
	.byte	$00
	.byte	$96
	.byte	$96
_ts3_pals:
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_ts3_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$9F
	.byte	$9F
	.byte	$A0
	.byte	$A0
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$47
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$A1
	.byte	$A2
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$A4
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$A5
	.byte	$0D
	.byte	$0D
	.byte	$9B
	.byte	$A6
	.byte	$A7
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$A8
	.byte	$A9
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AA
	.byte	$AB
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$B1
	.byte	$B1
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$A1
	.byte	$A2
	.byte	$02
	.byte	$A1
	.byte	$98
	.byte	$02
	.byte	$B2
	.byte	$A2
	.byte	$02
	.byte	$99
	.byte	$B3
	.byte	$02
	.byte	$B2
	.byte	$B3
	.byte	$9A
	.byte	$9B
	.byte	$A6
	.byte	$A7
	.byte	$02
	.byte	$A6
	.byte	$9C
	.byte	$02
	.byte	$B4
	.byte	$9D
	.byte	$B5
	.byte	$00
	.byte	$B6
	.byte	$02
	.byte	$B4
	.byte	$B7
	.byte	$B8
_ts4_pals:
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts4_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B9
	.byte	$B9
	.byte	$BA
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$00
	.byte	$00
	.byte	$BD
	.byte	$BD
	.byte	$BE
	.byte	$BE
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$0D
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$97
	.byte	$A1
	.byte	$A2
	.byte	$02
	.byte	$C3
	.byte	$C3
	.byte	$C4
	.byte	$C4
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$C5
	.byte	$C5
	.byte	$C5
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$C3
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$A1
	.byte	$A2
	.byte	$02
	.byte	$A1
	.byte	$98
	.byte	$02
	.byte	$B2
	.byte	$A2
	.byte	$02
	.byte	$99
	.byte	$B3
	.byte	$02
	.byte	$B2
	.byte	$B3
	.byte	$9A
	.byte	$DE
	.byte	$DF
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
_ts4b_pals:
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts4b_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B9
	.byte	$B9
	.byte	$BA
	.byte	$BA
	.byte	$E6
	.byte	$E7
	.byte	$E8
	.byte	$E9
	.byte	$BD
	.byte	$BD
	.byte	$BE
	.byte	$BE
	.byte	$EA
	.byte	$EB
	.byte	$E8
	.byte	$E9
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$97
	.byte	$A1
	.byte	$A2
	.byte	$02
	.byte	$C3
	.byte	$C3
	.byte	$C4
	.byte	$C4
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$C5
	.byte	$C5
	.byte	$C5
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$C3
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$A1
	.byte	$A2
	.byte	$02
	.byte	$A1
	.byte	$98
	.byte	$02
	.byte	$B2
	.byte	$A2
	.byte	$02
	.byte	$99
	.byte	$B3
	.byte	$02
	.byte	$B2
	.byte	$B3
	.byte	$9A
	.byte	$DE
	.byte	$DF
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
_ts5_pals:
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts5_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$C3
	.byte	$EC
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$A1
	.byte	$A1
	.byte	$A1
	.byte	$A1
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$3F
	.byte	$C6
	.byte	$3F
	.byte	$C8
	.byte	$C3
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$C5
	.byte	$3F
	.byte	$C5
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$F5
	.byte	$F6
	.byte	$F7
	.byte	$F8
	.byte	$00
	.byte	$F9
	.byte	$FA
	.byte	$FB
	.byte	$00
	.byte	$FC
	.byte	$FD
	.byte	$00
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$C6
	.byte	$3F
	.byte	$C8
	.byte	$C7
	.byte	$3F
	.byte	$C9
	.byte	$3F
	.byte	$3F
	.byte	$C5
	.byte	$3F
	.byte	$C5
	.byte	$C5
	.byte	$3F
	.byte	$C5
	.byte	$3F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts5b_pals:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts5b_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$C4
	.byte	$3F
	.byte	$02
	.byte	$C4
	.byte	$C4
	.byte	$02
	.byte	$02
	.byte	$A6
	.byte	$A6
	.byte	$EC
	.byte	$EC
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$A6
	.byte	$A6
	.byte	$09
	.byte	$00
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$09
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$88
	.byte	$88
	.byte	$89
	.byte	$89
	.byte	$A6
	.byte	$A6
	.byte	$C4
	.byte	$C4
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$A1
	.byte	$A1
	.byte	$B3
	.byte	$B3
	.byte	$B5
	.byte	$A1
	.byte	$B6
	.byte	$B7
	.byte	$A1
	.byte	$A1
	.byte	$50
	.byte	$50
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$FB
	.byte	$00
	.byte	$FC
	.byte	$FD
	.byte	$00
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$3F
	.byte	$00
	.byte	$3F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A6
	.byte	$A6
	.byte	$09
	.byte	$00
	.byte	$A6
	.byte	$A6
	.byte	$00
	.byte	$09
	.byte	$09
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_spr_player:
	.addr	_sspl_01_a
	.addr	_sspl_01_a
	.addr	_sspl_02_a
	.addr	_sspl_01_a
	.addr	_sspl_00_a
	.addr	_sspl_04
	.addr	_sspl_05
	.addr	_sspl_04
	.addr	_sspl_06
	.addr	_sspl_03_a
	.addr	_sspl_01_b
	.addr	_sspl_01_b
	.addr	_sspl_02_b
	.addr	_sspl_01_b
	.addr	_sspl_00_b
	.addr	_sspl_04
	.addr	_sspl_05
	.addr	_sspl_04
	.addr	_sspl_06
	.addr	_sspl_03_b
_spr_enems1:
	.addr	_ssen_08_a
	.addr	_ssen_09_a
	.word	$0000
	.word	$0000
	.addr	_ssen_08_b
	.addr	_ssen_09_b
	.word	$0000
	.word	$0000
	.addr	_ssen_02_a
	.addr	_ssen_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen_02_b
	.addr	_ssen_03_b
	.word	$0000
	.word	$0000
	.addr	_ssen_04_a
	.addr	_ssen_05_a
	.word	$0000
	.word	$0000
	.addr	_ssen_04_b
	.addr	_ssen_05_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssexpl_00
	.addr	_ssoccl_00
	.addr	_ssmc_00_a
	.addr	_ssmc_01_a
	.word	$0000
	.word	$0000
	.addr	_ssmc_00_b
	.addr	_ssmc_01_b
	.word	$0000
	.word	$0000
	.addr	_ssboss_00_a
	.addr	_ssboss_00_a
	.addr	_ssboss_01_a
	.addr	_ssboss_01_a
	.addr	_ssboss_00_b
	.addr	_ssboss_00_b
	.addr	_ssboss_01_b
	.addr	_ssboss_01_b
	.addr	_ssfant_00_a
	.addr	_ssfant_01_a
	.word	$0000
	.word	$0000
	.addr	_ssfant_00_b
	.addr	_ssfant_01_b
	.word	$0000
	.word	$0000
	.addr	_sspez_00
	.addr	_sspez_01
_spr_enems2:
	.addr	_ssen_00_a
	.addr	_ssen_01_a
	.word	$0000
	.word	$0000
	.addr	_ssen_00_b
	.addr	_ssen_01_b
	.word	$0000
	.word	$0000
	.addr	_ssen_06_a
	.addr	_ssen_07_a
	.word	$0000
	.word	$0000
	.addr	_ssen_06_b
	.addr	_ssen_07_b
	.word	$0000
	.word	$0000
	.addr	_ssen_04_a
	.addr	_ssen_05_a
	.word	$0000
	.word	$0000
	.addr	_ssen_04_b
	.addr	_ssen_05_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_02
	.addr	_ssplat_03
	.word	$0000
	.word	$0000
	.addr	_ssplat_02
	.addr	_ssplat_03
	.word	$0000
	.word	$0000
	.addr	_ssexpl_00
	.addr	_ssoccl_00
	.addr	_ssmc_00_a
	.addr	_ssmc_01_a
	.word	$0000
	.word	$0000
	.addr	_ssmc_00_b
	.addr	_ssmc_01_b
	.word	$0000
	.word	$0000
	.addr	_ssboss_00_a
	.addr	_ssboss_00_a
	.addr	_ssboss_01_a
	.addr	_ssboss_01_a
	.addr	_ssboss_00_b
	.addr	_ssboss_00_b
	.addr	_ssboss_01_b
	.addr	_ssboss_01_b
	.addr	_sstrunk_00
	.addr	_sstrunk_01
	.addr	_sstrunk_02
	.word	$0000
	.addr	_ssbomb_00
	.addr	_ssbomb_01
	.word	$0000
	.word	$0000
	.addr	_sspez_00
	.addr	_sspez_01
_spr_enems3:
	.addr	_ssen_06_a
	.addr	_ssen_07_a
	.word	$0000
	.word	$0000
	.addr	_ssen_06_b
	.addr	_ssen_07_b
	.word	$0000
	.word	$0000
	.addr	_ssen_08_a
	.addr	_ssen_09_a
	.word	$0000
	.word	$0000
	.addr	_ssen_08_b
	.addr	_ssen_09_b
	.word	$0000
	.word	$0000
	.addr	_ssen_0A_a
	.addr	_ssen_0B_a
	.word	$0000
	.word	$0000
	.addr	_ssen_0A_b
	.addr	_ssen_0B_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_02
	.addr	_ssplat_03
	.word	$0000
	.word	$0000
	.addr	_ssplat_02
	.addr	_ssplat_03
	.word	$0000
	.word	$0000
	.addr	_ssexpl_00
	.addr	_ssoccl_00
	.addr	_sscan_00
	.addr	_sscan_01
	.addr	_sscan_02
	.addr	_sscan_03
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_ssboss_00_a
	.addr	_ssboss_00_a
	.addr	_ssboss_01_a
	.addr	_ssboss_01_a
	.addr	_ssboss_00_b
	.addr	_ssboss_00_b
	.addr	_ssboss_01_b
	.addr	_ssboss_01_b
_spr_enems4:
	.addr	_ssen_06_a
	.addr	_ssen_07_a
	.word	$0000
	.word	$0000
	.addr	_ssen_06_b
	.addr	_ssen_07_b
	.word	$0000
	.word	$0000
	.addr	_ssen_02_a
	.addr	_ssen_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen_02_b
	.addr	_ssen_03_b
	.word	$0000
	.word	$0000
	.addr	_ssen_0A_a
	.addr	_ssen_0B_a
	.word	$0000
	.word	$0000
	.addr	_ssen_0A_b
	.addr	_ssen_0B_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_04
	.addr	_ssplat_04
	.word	$0000
	.word	$0000
	.addr	_ssplat_04
	.addr	_ssplat_04
	.word	$0000
	.word	$0000
	.addr	_ssexpl_00
	.addr	_ssoccl_00
	.addr	_sscan_00
	.addr	_sscan_01
	.addr	_sscan_02
	.addr	_sscan_03
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_ssboss_00_a
	.addr	_ssboss_00_a
	.addr	_ssboss_01_a
	.addr	_ssboss_01_a
	.addr	_ssboss_00_b
	.addr	_ssboss_00_b
	.addr	_ssboss_01_b
	.addr	_ssboss_01_b
	.addr	_ssfant_00_a
	.addr	_ssfant_01_a
	.word	$0000
	.word	$0000
	.addr	_ssfant_00_b
	.addr	_ssfant_01_b
	.word	$0000
	.word	$0000
_spr_enems5:
	.addr	_ssray_02
	.addr	_ssray_02
	.word	$0000
	.word	$0000
	.addr	_ssray_00
	.addr	_ssray_01
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_ssexpl_00
	.addr	_ssoccl_00
	.addr	_ssmon_00
	.addr	_ssmon_01
	.word	$0000
	.word	$0000
	.addr	_ssmon_00
	.addr	_ssmon_01
	.word	$0000
	.word	$0000
	.addr	_sssom_00
	.addr	_sssom_01
	.addr	_sssom_02
	.addr	_sssom_03
	.addr	_sssom_04
_spr_hs:
	.word	$0000
	.addr	_ssit_08
	.word	$0000
	.addr	_ssit_02
	.addr	_ssit_07
	.addr	_ssit_01
	.addr	_ssit_09
	.addr	_ssit_0A
_cutscene_0:
	.byte	$57,$41,$4C,$4B,$49,$4E,$47,$20,$41,$52,$4F,$55,$4E,$44,$20,$54
	.byte	$48,$45,$20,$4A,$55,$4E,$4B,$59,$41,$52,$44,$25,$25,$43,$48,$45
	.byte	$52,$49,$4C,$20,$46,$4F,$55,$4E,$44,$20,$53,$4F,$4D,$45,$54,$48
	.byte	$49,$4E,$47,$20,$4F,$46,$25,$25,$49,$4E,$54,$45,$52,$45,$53,$54
	.byte	$2E,$2E,$2E,$20,$41,$20,$44,$49,$52,$54,$59,$2C,$20,$42,$52,$4F
	.byte	$4B,$45,$4E,$25,$25,$50,$55,$50,$50,$45,$54,$20,$53,$48,$45,$20
	.byte	$46,$4F,$55,$4E,$44,$20,$46,$41,$4D,$49,$4C,$49,$41,$52,$2E,$2E
	.byte	$2E,$25,$25,$27,$57,$48,$41,$54,$20,$44,$49,$44,$20,$54,$48,$45
	.byte	$20,$44,$4F,$20,$54,$4F,$20,$59,$4F,$55,$3F,$00
_cutscene_1:
	.byte	$4D,$4F,$56,$45,$44,$20,$42,$59,$20,$41,$20,$53,$54,$52,$41,$4E
	.byte	$47,$45,$20,$46,$4F,$52,$43,$45,$2C,$25,$25,$43,$48,$45,$52,$49
	.byte	$4C,$20,$46,$45,$4C,$54,$20,$54,$48,$45,$20,$55,$52,$47,$45,$20
	.byte	$54,$4F,$20,$25,$25,$57,$45,$41,$52,$20,$54,$48,$45,$20,$50,$55
	.byte	$50,$50,$45,$54,$2E,$20,$41,$53,$20,$53,$48,$45,$25,$25,$43,$4C
	.byte	$4F,$53,$45,$44,$20,$54,$48,$45,$20,$5A,$49,$50,$2C,$20,$48,$45
	.byte	$52,$20,$47,$4F,$41,$4C,$25,$25,$42,$45,$43,$41,$4D,$45,$20,$43
	.byte	$4C,$45,$41,$52,$20,$4F,$4E,$20,$48,$45,$52,$20,$4D,$49,$4E,$44
	.byte	$2E,$25,$25,$00
_cutscene_2:
	.byte	$43,$48,$45,$52,$49,$4C,$20,$47,$4F,$54,$20,$4F,$55,$54,$20,$4F
	.byte	$46,$20,$54,$48,$45,$20,$4F,$4C,$44,$25,$25,$50,$55,$50,$50,$45
	.byte	$54,$2E,$20,$27,$49,$20,$54,$48,$49,$4E,$4B,$20,$57,$45,$20,$4D
	.byte	$41,$44,$45,$25,$25,$49,$54,$27,$2C,$20,$53,$48,$45,$20,$53,$41
	.byte	$49,$44,$2E,$25,$25,$00
_cutscene_3:
	.byte	$27,$4E,$4F,$54,$20,$52,$45,$41,$4C,$4C,$59,$27,$2C,$20,$53,$41
	.byte	$49,$44,$20,$41,$20,$47,$48,$4F,$53,$54,$4C,$59,$25,$25,$49,$4D
	.byte	$41,$47,$45,$2E,$20,$27,$59,$4F,$55,$20,$48,$41,$56,$45,$20,$54
	.byte	$4F,$20,$43,$4F,$4C,$4C,$45,$43,$54,$25,$25,$54,$48,$45,$20,$53
	.byte	$49,$58,$20,$53,$41,$43,$52,$45,$44,$20,$45,$4D,$4D,$45,$52,$41
	.byte	$4C,$44,$53,$20,$4F,$46,$25,$25,$50,$4F,$44,$45,$57,$57,$57,$52
	.byte	$21,$27,$2C,$20,$41,$4E,$44,$20,$54,$48,$45,$4E,$20,$49,$54,$25
	.byte	$25,$56,$41,$4E,$49,$53,$48,$45,$44,$2E,$2E,$2E,$00
_cutscene_4:
	.byte	$27,$59,$45,$53,$27,$2C,$20,$53,$41,$49,$44,$20,$41,$20,$47,$48
	.byte	$4F,$53,$54,$4C,$59,$20,$49,$4D,$41,$47,$45,$2C,$25,$25,$27,$59
	.byte	$4F,$55,$20,$4D,$41,$4E,$41,$47,$45,$44,$20,$54,$4F,$20,$43,$4F
	.byte	$4C,$4C,$45,$43,$54,$20,$41,$4C,$4C,$25,$25,$53,$49,$58,$20,$45
	.byte	$4D,$4D,$45,$52,$41,$4E,$44,$53,$20,$4F,$46,$20,$50,$4F,$44,$45
	.byte	$57,$57,$57,$52,$2E,$25,$25,$4E,$4F,$57,$20,$49,$27,$4D,$20,$46
	.byte	$52,$45,$45,$20,$54,$4F,$20,$47,$4F,$2E,$20,$54,$48,$41,$4E,$4B
	.byte	$53,$2C,$25,$25,$4B,$49,$4E,$44,$20,$57,$4F,$4D,$41,$4E,$21,$27
	.byte	$2E,$20,$41,$4E,$44,$20,$56,$41,$4E,$49,$53,$48,$45,$44,$2E,$00
_cutscenes:
	.addr	_cutscene_0
	.addr	_cutscene_1
	.addr	_cutscene_2
	.addr	_cutscene_3
	.addr	_cutscene_4
_beh0:
	.byte	$47
	.byte	$46
	.byte	$67
	.byte	$66
	.byte	$47
	.byte	$46
	.byte	$0A
	.byte	$57
	.byte	$BC
	.byte	$67
	.byte	$66
	.byte	$BF
	.byte	$77
	.byte	$CD
	.byte	$00
_beh1:
	.byte	$0A
	.byte	$74
	.byte	$80
	.byte	$80
	.byte	$09
	.byte	$54
	.byte	$BD
	.byte	$46
	.byte	$45
	.byte	$BF
	.byte	$0A
	.byte	$74
	.byte	$80
	.byte	$80
	.byte	$09
	.byte	$54
	.byte	$BD
	.byte	$66
	.byte	$65
	.byte	$BF
	.byte	$D4
	.byte	$00
_beh2:
	.byte	$BD
	.byte	$66
	.byte	$BF
	.byte	$53
	.byte	$09
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$73
	.byte	$BD
	.byte	$46
	.byte	$45
	.byte	$BF
	.byte	$53
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$73
	.byte	$BD
	.byte	$65
	.byte	$D5
	.byte	$00
_beh3:
	.byte	$BD
	.byte	$55
	.byte	$55
	.byte	$46
	.byte	$BE
	.byte	$74
	.byte	$0A
	.byte	$80
	.byte	$0A
	.byte	$54
	.byte	$BD
	.byte	$46
	.byte	$75
	.byte	$75
	.byte	$63
	.byte	$BE
	.byte	$54
	.byte	$09
	.byte	$80
	.byte	$0A
	.byte	$74
	.byte	$BD
	.byte	$66
	.byte	$BE
	.byte	$54
	.byte	$09
	.byte	$80
	.byte	$0A
	.byte	$74
	.byte	$BD
	.byte	$63
	.byte	$DF
	.byte	$00
_beh4:
	.byte	$43
	.byte	$80
	.byte	$43
	.byte	$80
	.byte	$43
	.byte	$80
	.byte	$44
	.byte	$67
	.byte	$66
	.byte	$80
	.byte	$43
	.byte	$80
	.byte	$43
	.byte	$80
	.byte	$43
	.byte	$80
	.byte	$44
	.byte	$0A
	.byte	$57
	.byte	$BC
	.byte	$67
	.byte	$66
	.byte	$BF
	.byte	$77
	.byte	$D8
	.byte	$00
_en_behptrs:
	.addr	_beh0
	.addr	_beh1
	.addr	_beh2
	.addr	_beh3
	.addr	_beh4
_l_scr_ini:
	.byte	$14
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$18
	.byte	$00
	.byte	$13
	.byte	$0F
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$14
	.byte	$00
	.byte	$0F
	.byte	$13
	.byte	$00
_l_ini_x:
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$0C
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
_l_ini_y:
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
_l_map_w:
	.byte	$0A
	.byte	$0A
	.byte	$03
	.byte	$0F
	.byte	$19
	.byte	$03
	.byte	$01
	.byte	$0F
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$0F
	.byte	$05
	.byte	$03
	.byte	$0F
	.byte	$06
	.byte	$03
_l_map_h:
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$14
	.byte	$02
	.byte	$03
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$01
_l_player_max_objects:
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
_l_player_max_enems:
	.byte	$05
	.byte	$11
	.byte	$01
	.byte	$13
	.byte	$35
	.byte	$01
	.byte	$08
	.byte	$0B
	.byte	$01
	.byte	$07
	.byte	$02
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$0E
	.byte	$01
_l_pal_bg:
	.addr	_palts0
	.addr	_palts0
	.addr	_palts0
	.addr	_palts1
	.addr	_palts1
	.addr	_palts1
	.addr	_palts2
	.addr	_palts2a
	.addr	_palts2
	.addr	_palts3
	.addr	_palts3
	.addr	_palts3
	.addr	_palts4
	.addr	_palts4
	.addr	_palts4a
	.addr	_palts5
	.addr	_palts5b
	.addr	_palts5c
_l_pal_fg:
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss1
	.addr	_palss1
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
	.addr	_palss2
	.addr	_palss0
	.addr	_palss0
	.addr	_palss0
_l_ts_tmaps:
	.addr	_ts0_tmaps
	.addr	_ts0_tmaps
	.addr	_ts0_tmaps
	.addr	_ts1_tmaps
	.addr	_ts1_tmaps
	.addr	_ts1_tmaps
	.addr	_ts2_tmaps
	.addr	_ts2_tmaps
	.addr	_ts2_tmaps
	.addr	_ts3_tmaps
	.addr	_ts3_tmaps
	.addr	_ts3_tmaps
	.addr	_ts4_tmaps
	.addr	_ts4b_tmaps
	.addr	_ts4_tmaps
	.addr	_ts5_tmaps
	.addr	_ts5b_tmaps
	.addr	_ts4_tmaps
_l_ts_pals:
	.addr	_ts0_pals
	.addr	_ts0_pals
	.addr	_ts0_pals
	.addr	_ts1_pals
	.addr	_ts1_pals
	.addr	_ts1_pals
	.addr	_ts2_pals
	.addr	_ts2_pals
	.addr	_ts2_pals
	.addr	_ts3_pals
	.addr	_ts3_pals
	.addr	_ts3_pals
	.addr	_ts4_pals
	.addr	_ts4b_pals
	.addr	_ts4_pals
	.addr	_ts5_pals
	.addr	_ts5b_pals
	.addr	_ts4_pals
_l_behs:
	.addr	_behs0
	.addr	_behs0
	.addr	_behs0
	.addr	_behs1
	.addr	_behs1
	.addr	_behs1
	.addr	_behs2
	.addr	_behs2
	.addr	_behs2
	.addr	_behs3
	.addr	_behs3
	.addr	_behs3
	.addr	_behs4
	.addr	_behs4b
	.addr	_behs4
	.addr	_behs5
	.addr	_behs5b
	.addr	_behs4
_l_spr_enems:
	.addr	_spr_enems1
	.addr	_spr_enems1
	.addr	_spr_enems1
	.addr	_spr_enems1
	.addr	_spr_enems1
	.addr	_spr_enems1
	.addr	_spr_enems2
	.addr	_spr_enems2
	.addr	_spr_enems2
	.addr	_spr_enems3
	.addr	_spr_enems3
	.addr	_spr_enems3
	.addr	_spr_enems4
	.addr	_spr_enems4
	.addr	_spr_enems4
	.addr	_spr_enems4
	.addr	_spr_enems4
	.addr	_spr_enems5
_l_map_chr_rom_bank:
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
_l_map:
	.addr	_map_00_scr_offsets
	.addr	_map_01_scr_offsets
	.addr	_map_02_scr_offsets
	.addr	_map_10_scr_offsets
	.addr	_map_11_scr_offsets
	.addr	_map_12_scr_offsets
	.addr	_map_20_scr_offsets
	.addr	_map_21_scr_offsets
	.addr	_map_22_scr_offsets
	.addr	_map_30_scr_offsets
	.addr	_map_31_scr_offsets
	.addr	_map_32_scr_offsets
	.addr	_map_40_scr_offsets
	.addr	_map_41_scr_offsets
	.addr	_map_42_scr_offsets
	.addr	_map_50_scr_offsets
	.addr	_map_51_scr_offsets
	.addr	_map_52_scr_offsets
_l_enems_chr_rombank:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
_l_enems:
	.word	$1000
	.word	$11A4
	.word	$1348
	.word	$1372
	.word	$1516
	.word	$1674
	.word	$169E
	.word	$17B6
	.word	$195A
	.word	$1984
	.word	$1AE2
	.word	$1C40
	.word	$1C5C
	.word	$1E00
	.word	$1F5E
	.word	$1800
	.word	$19A4
	.word	$1B48
_l_hotspots:
	.word	$1168
	.word	$130C
	.word	$136C
	.word	$14DA
	.word	$1642
	.word	$1698
	.word	$178E
	.word	$191E
	.word	$197E
	.word	$1AB0
	.word	$1C0E
	.word	$1C58
	.word	$1DC4
	.word	$1F2C
	.word	$1F82
	.word	$1968
	.word	$1B0C
	.word	$1B6C
_l_chr_rom_bank:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_l_music:
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
_cuts0_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$0B
	.byte	$0D
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$03
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$04
	.byte	$0F
	.byte	$1A
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$1B
	.byte	$1C
	.byte	$1E
	.byte	$3B
	.byte	$42
	.byte	$43
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$48
	.byte	$49
	.byte	$4C
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$1D
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$45
	.byte	$04
	.byte	$04
	.byte	$46
	.byte	$47
	.byte	$4A
	.byte	$4B
	.byte	$4D
	.byte	$4E
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$4F
	.byte	$51
	.byte	$52
	.byte	$55
	.byte	$56
	.byte	$59
	.byte	$5A
	.byte	$5D
	.byte	$5E
	.byte	$61
	.byte	$62
	.byte	$65
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$50
	.byte	$53
	.byte	$54
	.byte	$57
	.byte	$58
	.byte	$5B
	.byte	$5C
	.byte	$5F
	.byte	$60
	.byte	$63
	.byte	$64
	.byte	$66
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$67
	.byte	$69
	.byte	$6A
	.byte	$6D
	.byte	$00
	.byte	$00
	.byte	$6F
	.byte	$72
	.byte	$73
	.byte	$76
	.byte	$77
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$68
	.byte	$6B
	.byte	$6C
	.byte	$6E
	.byte	$00
	.byte	$70
	.byte	$71
	.byte	$74
	.byte	$75
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$DC
	.byte	$44
	.byte	$55
	.byte	$55
	.byte	$F5
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$44
	.byte	$55
	.byte	$AD
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$01
	.byte	$00
_cuts1_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$7B
	.byte	$7E
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$81
	.byte	$84
	.byte	$85
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$7C
	.byte	$7D
	.byte	$7F
	.byte	$80
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$82
	.byte	$83
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$8A
	.byte	$8C
	.byte	$8D
	.byte	$90
	.byte	$91
	.byte	$94
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$96
	.byte	$97
	.byte	$9A
	.byte	$9B
	.byte	$9E
	.byte	$9F
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$8B
	.byte	$8E
	.byte	$8F
	.byte	$92
	.byte	$93
	.byte	$95
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$98
	.byte	$99
	.byte	$9C
	.byte	$9D
	.byte	$A0
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$A1
	.byte	$A3
	.byte	$A4
	.byte	$A7
	.byte	$A8
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$AB
	.byte	$AC
	.byte	$AF
	.byte	$B0
	.byte	$B3
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$A2
	.byte	$A5
	.byte	$A6
	.byte	$A9
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$AD
	.byte	$AE
	.byte	$B1
	.byte	$B2
	.byte	$B4
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$B5
	.byte	$B6
	.byte	$B9
	.byte	$BA
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$BB
	.byte	$BC
	.byte	$BE
	.byte	$BF
	.byte	$C2
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$B7
	.byte	$B8
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$BD
	.byte	$C0
	.byte	$C1
	.byte	$C3
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$DB
	.byte	$A8
	.byte	$A2
	.byte	$CC
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$8A
	.byte	$22
	.byte	$CC
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$01
	.byte	$00
_cuts2_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$C4
	.byte	$C7
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$C5
	.byte	$C6
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$CE
	.byte	$D0
	.byte	$D1
	.byte	$D4
	.byte	$D5
	.byte	$D8
	.byte	$D9
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$CF
	.byte	$D2
	.byte	$D3
	.byte	$D6
	.byte	$D7
	.byte	$DA
	.byte	$DB
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$DC
	.byte	$DD
	.byte	$E0
	.byte	$E1
	.byte	$E4
	.byte	$E5
	.byte	$E8
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$DE
	.byte	$DF
	.byte	$E2
	.byte	$E3
	.byte	$E6
	.byte	$E7
	.byte	$E9
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$EA
	.byte	$EB
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$00
	.byte	$F2
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$EC
	.byte	$ED
	.byte	$F0
	.byte	$F1
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$E3
	.byte	$FF
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$AA
	.byte	$8A
	.byte	$00
	.byte	$01
	.byte	$22
	.byte	$01
	.byte	$00
_title_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$F3
	.byte	$F4
	.byte	$01
	.byte	$0F
	.byte	$F5
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$F6
	.byte	$F7
	.byte	$3E
	.byte	$F7
	.byte	$3E
	.byte	$F8
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$F8
	.byte	$3E
	.byte	$F7
	.byte	$3E
	.byte	$F8
	.byte	$3C
	.byte	$F7
	.byte	$3E
	.byte	$FB
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$F6
	.byte	$F8
	.byte	$F6
	.byte	$F9
	.byte	$3C
	.byte	$F8
	.byte	$FA
	.byte	$3D
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$F8
	.byte	$F6
	.byte	$3D
	.byte	$3D
	.byte	$F8
	.byte	$F6
	.byte	$FB
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$F6
	.byte	$F9
	.byte	$FC
	.byte	$FC
	.byte	$FA
	.byte	$3D
	.byte	$00
	.byte	$3D
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$F9
	.byte	$FC
	.byte	$3D
	.byte	$3D
	.byte	$F9
	.byte	$FC
	.byte	$FB
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$F6
	.byte	$FD
	.byte	$01
	.byte	$0F
	.byte	$FB
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$FE
	.byte	$FD
	.byte	$01
	.byte	$0F
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$F8
	.byte	$0C
	.byte	$A0
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$01
	.byte	$00
_base_level:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$06
	.byte	$06
	.byte	$06
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0F
	.byte	$0F
	.byte	$0F
_base_world:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
_base_act:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
_spr_ring:
	.addr	_ssit_00
	.addr	_ssit_04
	.addr	_ssit_05
	.addr	_ssit_06
_level5_bg:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_elec_state_max_ct:
	.byte	$06
	.byte	$01
	.byte	$04
_bitmasks:
	.byte	$FC
	.byte	$F3
	.byte	$CF
	.byte	$3F
_level_name_0:
	.byte	$42,$45,$4E,$4E,$59,$20,$48,$49,$4C,$4C,$5B,$5D,$5D,$5D,$5D,$5D
	.byte	$00
_level_name_1:
	.byte	$42,$52,$4F,$4B,$45,$4E,$20,$46,$52,$49,$44,$47,$45,$5B,$5D,$5D
	.byte	$00
_level_name_2:
	.byte	$42,$4F,$53,$51,$55,$45,$20,$42,$41,$44,$41,$4A,$4F,$5A,$5B,$5D
	.byte	$00
_level_name_3:
	.byte	$57,$45,$54,$20,$52,$55,$49,$4E,$53,$5B,$5D,$5D,$5D,$5D,$5D,$5D
	.byte	$00
_level_name_4:
	.byte	$43,$52,$41,$50,$20,$42,$52,$41,$49,$4E,$5B,$5D,$5D,$5D,$5D,$5D
	.byte	$00
_level_name_5:
	.byte	$4F,$4C,$41,$20,$4B,$20,$41,$53,$45,$5B,$5D,$5D,$5D,$5D,$5D,$5D
	.byte	$00
_level_names:
	.addr	_level_name_0
	.addr	_level_name_1
	.addr	_level_name_2
	.addr	_level_name_3
	.addr	_level_name_4
	.addr	_level_name_5
_cuts_rle:
	.addr	_cuts0_rle
	.addr	_cuts2_rle
	.addr	_cuts2_rle
	.addr	_cuts1_rle
	.addr	_cuts1_rle
_cuts_pal:
	.addr	_palcuts0
	.addr	_palcuts2
	.addr	_palcuts2
	.addr	_palcuts1
	.addr	_palcuts1
L0001:
	.byte	$4C,$49,$46,$45,$5C,$00,$52,$49,$4E,$47,$4F,$53,$5C,$00,$5D,$5D
	.byte	$5D,$5D,$5E,$5A,$4F,$4E,$45,$2C,$20,$41,$43,$54,$20,$00,$50,$52
	.byte	$45,$53,$53,$20,$53,$54,$41,$52,$54,$21,$00,$50,$52,$45,$53,$53
	.byte	$20,$53,$54,$41,$52,$54,$20,$20,$54,$4F,$20,$42,$45,$47,$49,$4E
	.byte	$25,$25,$50,$52,$45,$53,$53,$20,$53,$45,$4C,$45,$43,$54,$20,$54
	.byte	$4F,$20,$43,$4F,$4E,$54,$49,$4E,$55,$45,$00,$40,$20,$32,$30,$31
	.byte	$38,$20,$54,$48,$45,$20,$4D,$4F,$4A,$4F,$4E,$20,$54,$57,$49,$4E
	.byte	$53,$00,$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$21,$00,$54,$48,$45
	.byte	$20,$45,$4E,$44,$00

.segment	"BSS"

.segment	"ZEROPAGE"
__x:
	.res	1,$00
__y:
	.res	1,$00
__n:
	.res	1,$00
__t:
	.res	1,$00
__z:
	.res	1,$00
_pad0:
	.res	1,$00
_pad_this_frame:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_gpitu:
	.res	1,$00
_gpaux:
	.res	1,$00
_rds16:
	.res	2,$00
_gp_gen:
	.res	2,$00
_gp_tmap:
	.res	2,$00
_gp_tma2:
	.res	2,$00
_gp_ram:
	.res	2,$00
_gp_ram_aux:
	.res	2,$00
_gp_addr:
	.res	2,$00
_rdx:
	.res	1,$00
_rdy:
	.res	1,$00
_rdt:
	.res	1,$00
_rdit:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdd:
	.res	1,$00
_rdm:
	.res	1,$00
_rds:
	.res	1,$00
_rdct:
	.res	1,$00
_ticker:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
_cx1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy1:
	.res	1,$00
_cy2:
	.res	1,$00
_caux:
	.res	1,$00
_oam_index:
	.res	1,$00
_en_initial:
	.res	1,$00
_en_offs:
	.res	1,$00
_en_fr:
	.res	1,$00
_en_collx:
	.res	1,$00
_en_colly:
	.res	1,$00
_en_spr:
	.res	1,$00
_touched:
	.res	1,$00
_en_is_alive:
	.res	1,$00
_pregotten:
	.res	1,$00
_en_cttouched:
	.res	3,$00
_en_flags:
	.res	3,$00
_en_life:
	.res	3,$00
_en_status:
	.res	3,$00
_en_ct:
	.res	3,$00
_en_rawv:
	.res	3,$00
_en_behptr:
	.res	6,$00
__en_t:
	.res	1,$00
__en_s:
	.res	1,$00
__en_x:
	.res	1,$00
__en_y:
	.res	1,$00
__en_x1:
	.res	1,$00
__en_y1:
	.res	1,$00
__en_x2:
	.res	1,$00
__en_y2:
	.res	1,$00
__en_mx:
	.res	1,$00
__en_my:
	.res	1,$00
__en_ct:
	.res	1,$00
__en_facing:
	.res	1,$00
__en_state:
	.res	1,$00
__enf_x:
	.res	2,$00
__enf_y:
	.res	2,$00
__enf_vx:
	.res	2,$00
__enf_vy:
	.res	2,$00
_en_sg_1:
	.res	1,$00
_en_sg_2:
	.res	1,$00
_vertical_engine_type:
	.res	1,$00
_px:
	.res	2,$00
_py:
	.res	2,$00
_pvx:
	.res	2,$00
_pvy:
	.res	2,$00
_prx:
	.res	1,$00
_pry:
	.res	1,$00
_pcx:
	.res	1,$00
_pcy:
	.res	1,$00
_pfacing:
	.res	1,$00
_pfr:
	.res	1,$00
_pctfr:
	.res	1,$00
_psprid:
	.res	1,$00
_a_button:
	.res	1,$00
_b_button:
	.res	1,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_pgotten:
	.res	1,$00
_ppossee:
	.res	1,$00
_oppossee:
	.res	1,$00
_pflickering:
	.res	1,$00
_pbouncing:
	.res	1,$00
_phit:
	.res	1,$00
_pgtmx:
	.res	2,$00
_pgtmy:
	.res	2,$00
_ptrampoline:
	.res	1,$00
_pspin:
	.res	1,$00
_hitv:
	.res	1,$00
_hith:
	.res	1,$00
_prx_old:
	.res	1,$00
_pry_old:
	.res	1,$00
_pkill:
	.res	1,$00
_pice:
	.res	1,$00
_pnotsafe:
	.res	1,$00
_pcontinues:
	.res	1,$00
_plife:
	.res	1,$00
_pobjs:
	.res	1,$00
_pammo:
	.res	1,$00
_pkilled:
	.res	1,$00
_pfiring:
	.res	1,$00
_n_pant_safe:
	.res	1,$00
_px_safe:
	.res	2,$00
_py_safe:
	.res	2,$00
_coco_it:
	.res	1,$00
_hrx:
	.res	1,$00
_hry:
	.res	1,$00
_hrt:
	.res	1,$00
_do_process_breakable:
	.res	1,$00
_ft:
	.res	1,$00
_c_map_w:
	.res	1,$00
_c_map_h:
	.res	1,$00
_c_map_size:
	.res	1,$00
_c_ts_pals:
	.res	2,$00
_c_ts_tmaps:
	.res	2,$00
_c_behs:
	.res	2,$00
_spr_enems:
	.res	2,$00
_c_pal_bg:
	.res	2,$00
_c_pal_fg:
	.res	2,$00
_c_map:
	.res	2,$00
_c_map_chr_rom_bank:
	.res	1,$00
_c_locks:
	.res	2,$00
_c_enems:
	.res	2,$00
_c_hotspots:
	.res	2,$00
_c_max_bolts:
	.res	1,$00
.segment	"BSS"
_ntsc:
	.res	1,$00
_ntsc_frame:
	.res	1,$00
_update_index:
	.res	1,$00
_update_list:
	.res	96,$00
_fader:
	.res	1,$00
_fade_delay:
	.res	1,$00
_map_attr:
	.res	192,$00
_map_buff:
	.res	192,$00
_first_game:
	.res	1,$00
_level:
	.res	1,$00
_c_max_enems:
	.res	1,$00
_n_pant:
	.res	1,$00
_on_pant:
	.res	1,$00
_half_life:
	.res	1,$00
_frame_counter:
	.res	1,$00
_paused:
	.res	1,$00
_win_level:
	.res	1,$00
_game_over:
	.res	1,$00
_warp_to_level:
	.res	1,$00
_level_reset:
	.res	1,$00
_flick_override:
	.res	1,$00
_olife:
	.res	1,$00
_okeys:
	.res	1,$00
_oobjs:
	.res	1,$00
_oammo:
	.res	1,$00
_okilled:
	.res	1,$00
_oam_index_player:
	.res	1,$00
_coco_slots:
	.res	4,$00
_coco_slots_i:
	.res	1,$00
_coco_on:
	.res	4,$00
_coco_x:
	.res	8,$00
_coco_y:
	.res	8,$00
_coco_vx:
	.res	8,$00
_coco_vy:
	.res	8,$00
_brk_buff:
	.res	192,$00
_brkf:
	.res	16,$00
_brkx:
	.res	16,$00
_brky:
	.res	16,$00
_pmayneedrelocation:
	.res	1,$00
_hyx:
	.res	30,$00
_ht:
	.res	30,$00
_hact:
	.res	30,$00
_flags:
	.res	2,$00
_en_t:
	.res	3,$00
_en_x:
	.res	3,$00
_en_y:
	.res	3,$00
_en_x1:
	.res	3,$00
_en_y1:
	.res	3,$00
_en_x2:
	.res	3,$00
_en_y2:
	.res	3,$00
_en_mx:
	.res	3,$00
_en_my:
	.res	3,$00
_en_s:
	.res	3,$00
_en_facing:
	.res	3,$00
_en_state:
	.res	3,$00
_en_spr_x_mod:
	.res	1,$00
_enf_x:
	.res	6,$00
_enf_vx:
	.res	6,$00
_enf_y:
	.res	6,$00
_enf_vy:
	.res	6,$00
_en_spr_id:
	.res	3,$00
_en_invincible:
	.res	3,$00
_cfx:
	.res	1,$00
_timer:
	.res	1,$00
_otimer:
	.res	1,$00
_timer_frames:
	.res	1,$00
_timer_zero:
	.res	1,$00
_timer_on:
	.res	1,$00
_tile_got:
	.res	24,$00
_ring_x:
	.res	2,$00
_ring_y:
	.res	2,$00
_ring_vx:
	.res	2,$00
_ring_vy:
	.res	2,$00
_ring_timer:
	.res	1,$00
_prings:
	.res	1,$00
_oprings:
	.res	1,$00
_pemmeralds:
	.res	1,$00
_level_world:
	.res	1,$00
_level_act:
	.res	1,$00
_water_strip:
	.res	1,$00
_underwater:
	.res	1,$00
_bubble_x:
	.res	1,$00
_bubble_y:
	.res	1,$00
_toggle_switch:
	.res	1,$00
_toggle_timer:
	.res	1,$00
_elec_state:
	.res	1,$00
_elec_state_ct:
	.res	1,$00
_somari_state:
	.res	1,$00
_somari_ct:
	.res	1,$00
_somari_life:
	.res	1,$00
_pal_cycle:
	.res	3,$00
_attr_table:
	.res	64,$00

; ---------------------------------------------------------------
; void __near__ player_render (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_render: near

.segment	"CODE"

;
; if (0 == pflickering || half_life) 
;
	lda     _pflickering
	beq     L1B32
	lda     _half_life
	bne     L1B32
	rts
;
; prx, pry + SPRITE_ADJUST, 
;
L1B32:	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L28B2
	sec
L28B2:	sbc     #$10
	bcs     L28B3
	sec
L28B3:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_player [psprid]
;
	ldx     #$00
	lda     _psprid
	asl     a
	bcc     L28B4
	inx
	clc
L28B4:	adc     #<(_spr_player)
;
; );
;
	sta     ptr1
;
; spr_player [psprid]
;
	txa
	adc     #>(_spr_player)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ do_extern_action (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_extern_action: near

.segment	"CODE"

;
; if (n < 2) {
;
	ldy     #$00
	lda     (sp),y
	cmp     #$02
	jcs     incsp1
;
; rdb = n + 1;
;
	lda     (sp),y
	clc
	adc     #$01
	sta     _rdb
;
; if (0 == en_ct [rdb] || en_flags [rdb]) {
;
	ldy     _rdb
	lda     _en_ct,y
	beq     L23CB
	ldy     _rdb
	lda     _en_flags,y
	jeq     incsp1
;
; en_x [rdb] = en_x1 [rdb]; en_y [rdb] = en_y1 [rdb];
;
L23CB:	lda     #<(_en_x)
	ldx     #>(_en_x)
	clc
	adc     _rdb
	bcc     L23D3
	inx
L23D3:	sta     ptr1
	stx     ptr1+1
	ldy     _rdb
	lda     _en_x1,y
	ldy     #$00
	sta     (ptr1),y
	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _rdb
	bcc     L23D9
	inx
L23D9:	sta     ptr1
	stx     ptr1+1
	ldy     _rdb
	lda     _en_y1,y
	ldy     #$00
	sta     (ptr1),y
;
; en_ct [rdb] = 250;
;
	ldy     _rdb
	lda     #$FA
	sta     _en_ct,y
;
; en_flags [rdb] = 0;
;
	ldy     _rdb
	lda     #$00
	sta     _en_flags,y
;
; en_life [rdb] = 1;
;
	ldy     _rdb
	lda     #$01
	sta     _en_life,y
;
; en_t [rdb] = 13;
;
	ldy     _rdb
	lda     #$0D
	sta     _en_t,y
;
; enf_x [rdb] = en_x [rdb] << 6;
;
	ldx     #$00
	lda     _rdb
	asl     a
	bcc     L28BC
	inx
	clc
L28BC:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldy     _rdb
	ldx     #$00
	lda     _en_x,y
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_y [rdb]= en_y [rdb] << 6;
;
	ldx     #$00
	lda     _rdb
	asl     a
	bcc     L28BD
	inx
	clc
L28BD:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	ldy     _rdb
	ldx     #$00
	lda     _en_y,y
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_vy [rdb] = 0; 
;
	ldx     #$00
	lda     _rdb
	asl     a
	bcc     L28BE
	inx
	clc
L28BE:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; enf_vx [rdb] = ADD_SIGN2 (en_x2 [rdb], en_x1 [rdb], en_mx [rdb]) << FIXBITS;
;
	tax
	lda     _rdb
	asl     a
	bcc     L28BF
	inx
	clc
L28BF:	adc     #<(_enf_vx)
	tay
	txa
	adc     #>(_enf_vx)
	tax
	tya
	jsr     pushax
	ldy     _rdb
	ldx     #$00
	lda     _en_x2,y
	sta     ptr1
	stx     ptr1+1
	ldy     _rdb
	lda     _en_x1,y
	cpx     ptr1+1
	bne     L2404
	cmp     ptr1
	bne     L2404
	txa
	jmp     L2407
L2404:	ldy     _rdb
	lda     _en_x2,y
	jsr     pusha0
	ldy     _rdb
	lda     _en_x1,y
	jsr     tosicmp0
	bcc     L2411
	beq     L2411
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _rdb
	bcc     L2415
	inx
L2415:	ldy     #$00
	jsr     ldaidx
L241C:	ldx     #$00
	cmp     #$80
	bcc     L2416
	jmp     L28BB
L2411:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _rdb
	bcc     L241B
	inx
L241B:	ldy     #$00
	jsr     ldaidx
	jsr     negax
	cmp     #$80
	bcc     L241C
L28BB:	ldx     #$FF
L2416:	jsr     aslax4
	jsr     aslax2
L2407:	ldy     #$00
	jsr     staxspidx
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for (fader = 4; fader > -1; fader --) {
;
	lda     #$04
L28C0:	sta     _fader
	tax
	bmi     L15D2
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 4; fader > -1; fader --) {
;
	lda     _fader
	sec
	sbc     #$01
	jmp     L28C0
;
; }
;
L15D2:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     #$00
L28C1:	sta     _fader
	sec
	sbc     #$05
	bvc     L15E8
	eor     #$80
L15E8:	bpl     L15E1
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     _fader
	clc
	adc     #$01
	jmp     L28C1
;
; }
;
L15E1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clear_update_list (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_update_list: near

.segment	"CODE"

;
; memfill (update_list, 0, UPDATE_LIST_SIZE*3);
;
	jsr     decsp3
	lda     #<(_update_list)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_update_list)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$60
	jsr     _memfill
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; vram_adr(0x2000); vram_fill(0x00,0x400);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ ul_putc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_putc: near

.segment	"CODE"

;
; update_list [update_index++] = MSB (gp_addr);
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	sta     ptr1
	lda     #$00
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _gp_addr+1
	ldy     #$00
	sta     (ptr1),y
;
; update_list [update_index++] = LSB (gp_addr++);
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	tay
	lda     #$00
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	clc
	adc     #$01
	bcc     L1609
	inx
L1609:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldy     #$00
	jsr     staspidx
;
; update_list [update_index++] = _n;
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	sta     ptr1
	lda     #$00
	adc     #>(_update_list)
	sta     ptr1+1
	lda     __n
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ p_t (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t: near

.segment	"CODE"

;
; gp_addr = (_y << 5) + _x + 0x2000;
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L28C2
	inx
L28C2:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; __asm__ ("lda %v", _n);
;
	lda     __n
;
; __asm__ ("ldx #$ff");
;
	ldx     #$ff
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("inx");
;
L1614:	inx
;
; __asm__ ("sbc #10");
;
	sbc     #10
;
; __asm__ ("bcs %g", p_t_loop);
;
	bcs     L1614
;
; __asm__ ("adc #10");
;
	adc     #10
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("stx %v", _n);
;
	stx     __n
;
; _n += 16;      ul_putc ();
;
	lda     #$10
	clc
	adc     __n
	sta     __n
	jsr     _ul_putc
;
; _n = rda + 16; ul_putc ();
;
	lda     _rda
	clc
	adc     #$10
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ upd_attr_table (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_upd_attr_table: near

.segment	"CODE"

;
; rdc = (_x >> 2) + ((_y >> 2) << 3);
;
	ldx     #$00
	lda     __x
	jsr     asrax2
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __y
	jsr     asrax2
	jsr     aslax3
	clc
	adc     ptr1
	sta     _rdc
	txa
	adc     ptr1+1
;
; rdb = ((_x >> 1) & 1) + (((_y >> 1) & 1) << 1);
;
	ldx     #$00
	lda     __x
	jsr     asrax1
	and     #$01
	sta     ptr1
	ldx     #$00
	lda     __y
	jsr     asrax1
	and     #$01
	asl     a
	bcc     L28C6
	clc
L28C6:	adc     ptr1
	sta     _rdb
;
; rda = attr_table [rdc];
;
	ldy     _rdc
	lda     _attr_table,y
	sta     _rda
;
; rda = (rda & bitmasks [rdb]) | (c_ts_pals [_t] << (rdb << 1));
;
	ldy     _rdb
	lda     _bitmasks,y
	and     _rda
	jsr     pusha0
	lda     _c_ts_pals
	ldx     _c_ts_pals+1
	ldy     __t
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	jsr     pusha0
	lda     _rdb
	asl     a
	jsr     tosaslax
	jsr     tosorax
	sta     _rda
;
; attr_table [rdc] = rda;
;
	ldy     _rdc
	lda     _rda
	sta     _attr_table,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + 0x2000);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L28C7
	inx
L28C7:	pha
	txa
	clc
	adc     #$20
	tax
	pla
	sta     _gp_addr
	stx     _gp_addr+1
;
; vram_adr (gp_addr++);
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L164F
	inx
L164F:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; SET_FROM_PTR (_z, gp_tmap); gp_tmap ++; vram_put (_z);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __z
	lda     _gp_tmap
	ldx     _gp_tmap+1
	clc
	adc     #$01
	bcc     L1654
	inx
L1654:	sta     _gp_tmap
	stx     _gp_tmap+1
	lda     __z
	jsr     _vram_put
;
; SET_FROM_PTR (_z, gp_tmap); gp_tmap ++; vram_put (_z);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __z
	lda     _gp_tmap
	ldx     _gp_tmap+1
	clc
	adc     #$01
	bcc     L165B
	inx
L165B:	sta     _gp_tmap
	stx     _gp_tmap+1
	lda     __z
	jsr     _vram_put
;
; gp_addr += 31;
;
	lda     #$1F
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L1660
	inc     _gp_addr+1
;
; vram_adr (gp_addr++);
;
L1660:	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1663
	inx
L1663:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; SET_FROM_PTR (_z, gp_tmap); gp_tmap ++; vram_put (_z);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __z
	lda     _gp_tmap
	ldx     _gp_tmap+1
	clc
	adc     #$01
	bcc     L1668
	inx
L1668:	sta     _gp_tmap
	stx     _gp_tmap+1
	lda     __z
	jsr     _vram_put
;
; SET_FROM_PTR (_z, gp_tmap);             vram_put (_z);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __z
	jmp     _vram_put

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_addr = 0x23c0 + rdc;
;
	lda     _rdc
	clc
	adc     #$C0
	sta     _gp_addr
	lda     #$00
	adc     #$23
	sta     _gp_addr+1
;
; _n = rda; ul_putc ();
;
	lda     _rda
	sta     __n
	jsr     _ul_putc
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + 0x2000);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L28C8
	inx
L28C8:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; SET_FROM_PTR (_n, gp_tmap); gp_tmap ++; ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	lda     _gp_tmap
	ldx     _gp_tmap+1
	clc
	adc     #$01
	bcc     L1682
	inx
L1682:	sta     _gp_tmap
	stx     _gp_tmap+1
	jsr     _ul_putc
;
; SET_FROM_PTR (_n, gp_tmap); gp_tmap ++; ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	lda     _gp_tmap
	ldx     _gp_tmap+1
	clc
	adc     #$01
	bcc     L1688
	inx
L1688:	sta     _gp_tmap
	stx     _gp_tmap+1
	jsr     _ul_putc
;
; gp_addr += 30;
;
	lda     #$1E
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L168C
	inc     _gp_addr+1
;
; SET_FROM_PTR (_n, gp_tmap); gp_tmap ++; ul_putc ();
;
L168C:	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	lda     _gp_tmap
	ldx     _gp_tmap+1
	clc
	adc     #$01
	bcc     L1691
	inx
L1691:	sta     _gp_tmap
	stx     _gp_tmap+1
	jsr     _ul_putc
;
; SET_FROM_PTR (_n, gp_tmap);             ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ map_set (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_map_set: near

.segment	"CODE"

;
; map_buff [COORDS (_x, _y)] = _t;
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	clc
	adc     #<(_map_buff)
	sta     ptr1
	txa
	adc     #>(_map_buff)
	sta     ptr1+1
	lda     __t
	ldy     #$00
	sta     (ptr1),y
;
; map_attr [COORDS (_x, _y)] = c_behs [_t];
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	clc
	adc     #<(_map_attr)
	tay
	txa
	adc     #>(_map_attr)
	tax
	tya
	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     __t
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; _x = _x << 1; _y = TOP_ADJUST + (_y << 1);
;
	lda     __x
	asl     a
	sta     __x
	lda     __y
	asl     a
	bcc     L28CB
	clc
L28CB:	adc     #$06
	sta     __y
;
; update_list_tile (); 
;
	jmp     _update_list_tile

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_byte: near

.segment	"CODE"

;
; -- rdit; return *gp_gen ++;
;
	dec     _rdit
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L16B1
	inx
L16B1:	sta     _gp_gen
	stx     _gp_gen+1
	ldx     #$00
	lda     (regsave,x)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_tile: near

.segment	"CODE"

;
; map_buff [rdm] = rda;
;
	ldy     _rdm
	lda     _rda
	sta     _map_buff,y
;
; ++ rdm;
;
	inc     _rdm
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_scr: near

.segment	"CODE"

;
; rdm = 0;
;
	lda     #$00
	sta     _rdm
;
; bankswitch (c_map_chr_rom_bank);
;
	lda     _c_map_chr_rom_bank
	jsr     _bankswitch
;
; vram_adr (c_map [n_pant]);
;
	ldx     #$00
	lda     _n_pant
	asl     a
	bcc     L28D7
	inx
	clc
L28D7:	adc     _c_map
	sta     ptr1
	txa
	adc     _c_map+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _vram_adr
;
; rdt = VRAM_READ;  // Dummy read.
;
	lda     $2007
	sta     _rdt
;
; while (rdm < 192) {
;
L16C5:	lda     _rdm
	cmp     #$C0
	bcs     L16C6
;
; rdt = VRAM_READ;
;
	lda     $2007
	sta     _rdt
;
; rda = rdt & 0x0f;
;
	and     #$0F
	sta     _rda
;
; rdct = rdt;
;
	lda     _rdt
L28D4:	sta     _rdct
;
; while (rdct >= 16) {
;
	cmp     #$10
	bcc     L16D2
;
; add_tile (); rdct -= 16;
;
	jsr     _add_tile
	lda     _rdct
	sec
	sbc     #$10
;
; } add_tile ();
;
	jmp     L28D4
L16D2:	jsr     _add_tile
;
; }
;
	jmp     L16C5
;
; set_rand (n_pant + 1);
;
L16C6:	ldx     #$00
	lda     _n_pant
	clc
	adc     #$01
	bcc     L16DA
	inx
L16DA:	jsr     _set_rand
;
; switch (level_world) {
;
	lda     _level_world
;
; }
;
	beq     L16E4
	cmp     #$01
	beq     L16DF
	cmp     #$02
	jeq     L175C
	cmp     #$03
	jeq     L175C
	cmp     #$04
	jeq     L1756
	cmp     #$05
	jeq     L1713
	jmp     L16DD
;
; if (level != 3 || n_pant > 14) {
;
L16DF:	lda     _level
	cmp     #$03
	bne     L16E1
	lda     _n_pant
	cmp     #$0F
	bcc     L16E4
;
; for (gpit = 176; gpit < 192; gpit ++) map_buff [gpit] = 18;
;
L16E1:	lda     #$B0
L28DA:	sta     _gpit
	cmp     #$C0
	bcs     L16E4
	ldy     _gpit
	lda     #$12
	sta     _map_buff,y
	lda     _gpit
	clc
	adc     #$01
	jmp     L28DA
;
; gpit = 4; while (gpit --) {
;
L16E4:	lda     #$04
	sta     _gpit
L16F3:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	jeq     L16DD
;
; gpjt = 4; while (gpjt --) {
;
	lda     #$04
	sta     _gpjt
L16F8:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	beq     L16F3
;
; rdx = rand8 () & 0xf;
;
	jsr     _rand8
	and     #$0F
	sta     _rdx
;
; rdy = rand8 () & 0xf;
;
	jsr     _rand8
	and     #$0F
	sta     _rdy
;
; rda = (rdy << 4) | rdx;
;
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	sta     ptr1
	ldx     #$00
	lda     _rdx
	ora     ptr1
	sta     _rda
;
; if (map_buff [rda] == 0 && map_buff [rda + 1] == 0 && rdy < 12) {
;
	ldy     _rda
	lda     _map_buff,y
	bne     L16F8
	lda     _rda
	clc
	adc     #$01
	bcc     L1708
	inx
L1708:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	bne     L16F8
	lda     _rdy
	cmp     #$0C
	bcs     L16F8
;
; map_buff [rda] = 16;
;
	ldy     _rda
	lda     #$10
	sta     _map_buff,y
;
; map_buff [rda + 1] = 17;
;
	ldx     #$00
	lda     _rda
	clc
	adc     #$01
	bcc     L28D8
	inx
	clc
L28D8:	adc     #<(_map_buff)
	sta     ptr1
	txa
	adc     #>(_map_buff)
	sta     ptr1+1
	lda     #$11
	ldy     #$00
	sta     (ptr1),y
;
; break;
;
	jmp     L16F3
;
; if (level_act < 2) {
;
L1713:	lda     _level_act
	cmp     #$02
	jcs     L1756
;
; for (gpit = 0; gpit < 192; gpit ++) {
;
	lda     #$00
L28DC:	sta     _gpit
	cmp     #$C0
	jcs     L16DD
;
; rdt = map_buff [gpit];
;
	ldy     _gpit
	lda     _map_buff,y
	sta     _rdt
;
; switch (level_act) {
;
	lda     _level_act
;
; }
;
	beq     L1726
	cmp     #$01
	beq     L1739
	cmp     #$02
	beq     L1724
	jmp     L1724
;
; if (rdt == 0) rdt = level5_bg [gpit]; 
;
L1726:	lda     _rdt
	bne     L1727
	ldy     _gpit
	lda     _level5_bg,y
;
; else {
;
	jmp     L28DB
;
; if ((rdt == 8 || rdt == 10) && map_buff [gpit - 1] == rdt) rdt += 17;
;
L1727:	lda     _rdt
	cmp     #$08
	beq     L1747
	lda     _rdt
	cmp     #$0A
;
; break;
;
	jmp     L28EF
;
; if (rdt == 0) {
;
L1739:	lda     _rdt
	bne     L173A
;
; if (n_pant > 5 && n_pant != 16) rdt = level5_bg [gpit]; 
;
	lda     _n_pant
	cmp     #$06
	bcc     L1724
	lda     _n_pant
	cmp     #$10
	beq     L1724
	ldy     _gpit
	lda     _level5_bg,y
;
; } else {
;
	jmp     L28DB
;
; if ((rdt == 5 || rdt == 7) && map_buff [gpit - 1] == rdt) rdt += 17;
;
L173A:	lda     _rdt
	cmp     #$05
	beq     L1747
	lda     _rdt
	cmp     #$07
L28EF:	bne     L1724
L1747:	ldx     #$00
	lda     _gpit
	sec
	sbc     #$01
	bcs     L174B
	dex
L174B:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	cmp     _rdt
	bne     L1724
	lda     #$11
	clc
	adc     _rdt
L28DB:	sta     _rdt
;
; map_buff [gpit] = rdt;
;
L1724:	ldy     _gpit
	lda     _rdt
	sta     _map_buff,y
;
; for (gpit = 0; gpit < 192; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L28DC
;
; rdc = (map_buff [0] != 4); // Cheap way to distinguish between outside / inside
;
L1756:	lda     _map_buff
	cmp     #$04
	jsr     boolne
	sta     _rdc
;
; for (gpit = 0; gpit < 192; gpit ++) {
;
L175C:	lda     #$00
L28DD:	sta     _gpit
	cmp     #$C0
	jcs     L16DD
;
; rdt = map_buff [gpit];
;
	ldy     _gpit
	lda     _map_buff,y
	sta     _rdt
;
; rdb = rand8 ();
;
	jsr     _rand8
	sta     _rdb
;
; if (level_world == 2) {
;
	lda     _level_world
	cmp     #$02
	jne     L176D
;
; if (gpit > 16) {
;
	lda     _gpit
	cmp     #$11
	bcc     L1788
;
; rda = map_buff [gpit - 16];
;
	ldx     #$00
	lda     _gpit
	sec
	sbc     #$10
	bcs     L1774
	dex
L1774:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	sta     _rda
;
; if (rdt == 8) {
;
	lda     _rdt
	cmp     #$08
	bne     L1775
;
; if (rda == 4) rdt = 16;
;
	lda     _rda
	cmp     #$04
	bne     L1777
	lda     #$10
;
; else if (rda == 6) rdt = 17;
;
	jmp     L28D5
L1777:	lda     _rda
	cmp     #$06
	bne     L1788
	lda     #$11
;
; } else if (rdt == 10 && rda == 13) rdt = 20;
;
	jmp     L28D5
L1775:	lda     _rdt
	cmp     #$0A
	bne     L1781
	lda     _rda
	cmp     #$0D
	bne     L1781
	lda     #$14
;
; else if (rdt == 2 && rda != 2 && rda != 19) rdt = 3;
;
	jmp     L28D5
L1781:	lda     _rdt
	cmp     #$02
	bne     L1788
	lda     _rda
	cmp     #$02
	beq     L1788
	lda     _rda
	cmp     #$13
	beq     L1788
	lda     #$03
L28D5:	sta     _rdt
;
; if (gpit < 176) {
;
L1788:	lda     _gpit
	cmp     #$B0
	jcs     L17D4
;
; rda = map_buff [gpit + 16];
;
	ldx     #$00
	lda     _gpit
	clc
	adc     #$10
	bcc     L1793
	inx
L1793:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	sta     _rda
;
; if (rdt == 0 && rda == 2) rdt = 19;
;
	lda     _rdt
	bne     L1794
	lda     _rda
	cmp     #$02
	bne     L1794
	lda     #$13
;
; else if (rdt == 2 && rda != 2) rdt = 18;
;
	jmp     L28D3
L1794:	lda     _rdt
	cmp     #$02
	jne     L17D4
	lda     _rda
	cmp     #$02
	jeq     L17D4
	lda     #$12
;
; } else {    
;
	jmp     L28D3
;
; if (level_world == 3) {
;
L176D:	lda     _level_world
	cmp     #$03
	bne     L17A2
;
; if (rdt == 1) rdt = 16 + (rdb & 3);
;
	lda     _rdt
	cmp     #$01
	jne     L17CC
	lda     _rdb
	and     #$03
	clc
	adc     #$10
	jcc     L28D6
;
; } else {
;
	jmp     L28D6
;
; if (rdt == 1 || rdt == 3) {
;
L17A2:	lda     _rdt
	cmp     #$01
	beq     L17AC
	lda     _rdt
	cmp     #$03
	bne     L17BF
;
; rda = map_buff [gpit - 1];
;
L17AC:	ldx     #$00
	lda     _gpit
	sec
	sbc     #$01
	bcs     L17B1
	dex
L17B1:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	sta     _rda
;
; if (rda != rdt && rda != rdt + 16) rdt = rdt + 16;
;
	lda     _rdt
	cmp     _rda
	beq     L17B2
	ldx     #$00
	lda     _rdt
	clc
	adc     #$10
	bcc     L17B5
	inx
L17B5:	cpx     #$00
	bne     L17B3
	cmp     _rda
	beq     L17B2
L17B3:	lda     _rdt
	clc
	adc     #$10
	bcc     L17C3
;
; else {
;
	jmp     L17C3
;
; rda = map_buff [gpit + 1];
;
L17B2:	ldx     #$00
	lda     _gpit
	clc
	adc     #$01
	bcc     L17BE
	inx
L17BE:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	sta     _rda
;
; if (rda != rdt) rdt = rdt + 17;
;
	lda     _rdt
	cmp     _rda
	beq     L17BF
	lda     _rdt
	clc
	adc     #$11
L17C3:	sta     _rdt
;
; if (level_act == 1) {
;
L17BF:	lda     _level_act
	cmp     #$01
	bne     L17CC
;
; if (rdt == 2 && toggle_switch == 0) rdt = 0;
;
	lda     _rdt
	cmp     #$02
	bne     L17C6
	lda     _toggle_switch
	bne     L17C6
	sta     _rdt
;
; if (rdt == 4 && toggle_switch) rdt = 0;
;
L17C6:	lda     _rdt
	cmp     #$04
	bne     L17CC
	lda     _toggle_switch
	beq     L17CC
	lda     #$00
L28D6:	sta     _rdt
;
; switch (rdt) {     
;
L17CC:	lda     _rdt
;
; }
;
	cmp     #$08
	beq     L17D6
	cmp     #$0C
	bne     L17D4
;
; rdt = 16 + rdt + (gpit & 1) + ((gpit >> 3) & 2);
;
L17D6:	lda     _rdt
	clc
	adc     #$10
	sta     ptr1
	lda     _gpit
	and     #$01
	clc
	adc     ptr1
	sta     ptr1
	ldx     #$00
	lda     _gpit
	jsr     asrax3
	and     #$02
	clc
	adc     ptr1
L28D3:	sta     _rdt
;
; if (rdt == 0 && (rdb & 7) == 1 && (rdc || level_world < 4)) rdt = 21;
;
L17D4:	lda     _rdt
	bne     L17DF
	lda     _rdb
	and     #$07
	cmp     #$01
	bne     L17DF
	lda     _rdc
	bne     L17E0
	lda     _level_world
	cmp     #$04
	bcs     L17DF
L17E0:	lda     #$15
	sta     _rdt
;
; map_buff [gpit] = rdt;
;
L17DF:	ldy     _gpit
	lda     _rdt
	sta     _map_buff,y
;
; for (gpit = 0; gpit < 192; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L28DD
;
; rdd = 0;
;
L16DD:	lda     #$00
	sta     _rdd
;
; _x = 0; _y = TOP_ADJUST; gp_ram = map_buff;
;
	sta     __x
	lda     #$06
	sta     __y
	lda     #<(_map_buff)
	sta     _gp_ram
	lda     #>(_map_buff)
	sta     _gp_ram+1
;
; for (rdm = 0; rdm < 192; rdm ++) {
;
	lda     #$00
L28DE:	sta     _rdm
	cmp     #$C0
	jcs     L17F6
;
; SET_FROM_PTR (rdt, gp_ram); gp_ram ++;
;
	ldy     #0
	lda     (_gp_ram),y
	sta     _rdt
	lda     _gp_ram
	ldx     _gp_ram+1
	clc
	adc     #$01
	bcc     L1801
	inx
L1801:	sta     _gp_ram
	stx     _gp_ram+1
;
; if (tile_got [rdd] & bits [rdm & 7]) rdt = 0;
;
	ldy     _rdd
	lda     _tile_got,y
	sta     sreg
	lda     _rdm
	and     #$07
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_bits)
	sta     ptr1+1
	ldy     #<(_bits)
	lda     (ptr1),y
	and     sreg
	pha
	pla
	beq     L1802
	lda     #$00
	sta     _rdt
;
; if ((rdm & 7) == 7) ++ rdd;
;
L1802:	lda     _rdm
	and     #$07
	cmp     #$07
	bne     L1809
	inc     _rdd
;
; map_attr [rdm] = c_behs [rdt];
;
L1809:	lda     #<(_map_attr)
	ldx     #>(_map_attr)
	clc
	adc     _rdm
	bcc     L1810
	inx
L1810:	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     _rdt
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; brk_buff [rdm] = 1;
;
	ldy     _rdm
	lda     #$01
	sta     _brk_buff,y
;
; _t = rdt; draw_tile ();
;
	lda     _rdt
	sta     __t
	jsr     _draw_tile
;
; _x = (_x + 2) & 0x1f; if (!_x) _y += 2;
;
	lda     __x
	clc
	adc     #$02
	and     #$1F
	sta     __x
	lda     __x
	bne     L17F7
	lda     #$02
	clc
	adc     __y
	sta     __y
;
; for (rdm = 0; rdm < 192; rdm ++) {
;
L17F7:	lda     _rdm
	clc
	adc     #$01
	jmp     L28DE
;
; vram_write (attr_table, 0x23c0, 64);
;
L17F6:	jsr     decsp4
	lda     #<(_attr_table)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_attr_table)
	sta     (sp),y
	lda     #$C0
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$23
	sta     (sp),y
	ldx     #$00
	lda     #$40
	jmp     _vram_write

.endproc

; ---------------------------------------------------------------
; void __near__ pr_str (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pr_str: near

.segment	"CODE"

;
; vram_adr (((_y << 5) | _x) + 0x2000);
;
L28FF:	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     __x
	ora     ptr1
	pha
	lda     tmp1
	clc
	adc     #$20
	tax
	pla
	jsr     _vram_adr
;
; while (gpit = *s++) {
;
L182B:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L182F
	inx
L182F:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     _gpit
	tax
	jeq     incsp2
;
; if (gpit == '%') {
;
	lda     _gpit
	cmp     #$25
	bne     L1830
;
; ++ _y; vram_adr (((_y << 5) | _x) + 0x2000);
;
	inc     __y
;
; else vram_put (gpit - 32); 
;
	jmp     L28FF
L1830:	lda     _gpit
	sec
	sbc     #$20
	jsr     _vram_put
;
; }
;
	jmp     L182B

.endproc

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; if (cy1 > 12 || cy2 > 12) { at1 = at2 = 0; return; }
;
	lda     _cy1
	cmp     #$0D
	bcs     L183D
	lda     _cy2
	cmp     #$0D
	bcc     L183C
L183D:	lda     #$00
	sta     _at2
	sta     _at1
	rts
;
; at1 = map_attr [COORDS (cx1, cy1 ? cy1 - 1 : 0)];
;
L183C:	lda     _cy1
	beq     L1849
	ldx     #$00
	lda     _cy1
	sec
	sbc     #$01
	bcs     L184C
	dex
	jmp     L184C
L1849:	tax
L184C:	jsr     shlax4
	ora     _cx1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at1
;
; at2 = map_attr [COORDS (cx2, cy2 ? cy2 - 1 : 0)];
;
	lda     _cy2
	beq     L1855
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L1858
	dex
	jmp     L1858
L1855:	tax
L1858:	jsr     shlax4
	ora     _cx2
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide_in (int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide_in: near

.segment	"CODE"

;
; return (x0 >= x1 && x0 <= x1 + 15 && y0 >= y1 && y0 <= y1 + 15); 
;
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L185D
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0F
	bcc     L185E
	inx
L185E:	jsr     tosicmp
	beq     L2900
	bpl     L185D
L2900:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L185D
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0F
	bcc     L185F
	inx
L185F:	jsr     tosicmp
	bmi     L185C
	beq     L185C
L185D:	ldx     #$00
	txa
	jmp     incsp8
L185C:	ldx     #$00
	lda     #$01
;
; }
;
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide: near

.segment	"CODE"

;
; prx + 3 >= _en_x && 
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$03
	bcc     L1864
	inx
L1864:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L1865
;
; prx <= _en_x + 11 && 
;
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0B
	bcc     L1866
	ldx     #$01
L1866:	jsr     tosicmp
	beq     L2902
	bcs     L1865
;
; pry + 13 + ENEMS_COLLISION_VSTRETCH_FG >= _en_y &&
;
L2902:	ldx     #$00
	lda     _pry
	clc
	adc     #$0D
	bcc     L1867
	inx
L1867:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L1865
;
; pry <= _en_y + 13 + PLAYER_COLLISION_VSTRETCH_FG
;
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$0D
	bcc     L2901
	ldx     #$01
;
; );
;
	clc
L2901:	adc     #$FC
	pha
	txa
	adc     #$FF
	tax
	pla
	jsr     tosicmp
	bcc     L1863
	beq     L1863
L1865:	ldx     #$00
	txa
	rts
L1863:	ldx     #$00
	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ add_sign (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_sign: near

.segment	"CODE"

;
; return sign == 0 ? 0 : sign < 0 ? -value : value;
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L186D
	cmp     #$00
	jeq     incsp4
L186D:	iny
	lda     (sp),y
	tax
	cpx     #$80
	bcc     L1871
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L1871:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ saturate (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_saturate: near

.segment	"CODE"

;
; return v >= 0 ? (v > max ? max : v) : (v < -max ? -max : v);
;
	ldy     #$03
	lda     (sp),y
	bmi     L1877
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L1881
	beq     L1881
	ldy     #$01
	jmp     L2909
L1877:	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jsr     tosicmp
	bpl     L1881
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L1881:	ldy     #$03
L2909:	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ pad_read (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pad_read: near

.segment	"CODE"

;
; pad_this_frame = pad0;
;
	lda     _pad0
	sta     _pad_this_frame
;
; pad0 = pad_poll (0);   // Read pads here.
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad0
;
; pad_this_frame = (pad_this_frame ^ pad0) & pad0;
;
	eor     _pad_this_frame
	sta     ptr1
	lda     _pad0
	and     ptr1
	sta     _pad_this_frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ distance (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_distance: near

.segment	"CODE"

;
; rda = DELTA (prx, rdx); // dx
;
	ldx     #$00
	lda     _prx
	cmp     _rdx
	bcs     L1894
	lda     _rdx
	sec
	sbc     _prx
	jmp     L2910
L1894:	lda     _prx
	sec
	sbc     _rdx
L2910:	sta     _rda
;
; rdb = DELTA (pry, rdy); // dy
;
	lda     _pry
	cmp     _rdy
	bcs     L18A1
	lda     _rdy
	sec
	sbc     _pry
	jmp     L2911
L18A1:	lda     _pry
	sec
	sbc     _rdy
L2911:	sta     _rdb
;
; rdc = MIN (rda, rdb);
;
	lda     _rda
	cmp     _rdb
	bcs     L18AE
	lda     _rda
	jmp     L290D
L18AE:	lda     _rdb
L290D:	sta     _rdc
;
; return (rda + rdb - (rdc >> 1) - (rdc >> 2) + (rdc >> 4));
;
	lda     _rda
	clc
	adc     _rdb
	bcc     L290A
	inx
L290A:	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax1
	jsr     tossubax
	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax2
	jsr     tossubax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rdc
	jsr     asrax4
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ jump_start (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_jump_start: near

.segment	"CODE"

;
; pj = 1; pctj = 0; 
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
;
; if (ptrampoline) {
;
	lda     _ptrampoline
	beq     L18BE
;
; sfx_play (SFX_TRAMPOLINE, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pvy = -PLAYER_VY_MK2_JUMP_INITIAL_TRAMPOLINE;
;
	ldx     #$FE
	lda     #$D8
;
; } else
;
	jmp     L2913
;
; sfx_play (SFX_JUMP, 0);
;
L18BE:	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pvy = -PLAYER_VY_MK2_JUMP_INITIAL;
;
	ldx     #$FF
	lda     #$20
L2913:	sta     _pvy
	stx     _pvy+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_cycle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_cycle: near

.segment	"CODE"

;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ring_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ring_create: near

.segment	"CODE"

;
; if (!ring_timer) {
;
	lda     _ring_timer
	bne     L18D3
;
; ring_x = px;
;
	lda     _px
	sta     _ring_x
	lda     _px+1
	sta     _ring_x+1
;
; ring_y = py;
;
	lda     _py
	sta     _ring_y
	lda     _py+1
	sta     _ring_y+1
;
; ring_vy = -384;
;
	ldx     #$FE
	lda     #$80
	sta     _ring_vy
	stx     _ring_vy+1
;
; ring_vx = pvx >> 2;
;
	lda     _pvx
	ldx     _pvx+1
	jsr     asrax2
	sta     _ring_vx
	stx     _ring_vx+1
;
; ring_timer = RING_TIMER_CREATE;
;
	lda     #$B4
	sta     _ring_timer
;
; }
;
L18D3:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ring_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ring_do: near

.segment	"CODE"

;
; if (ring_timer) {
;
	lda     _ring_timer
	bne     L291D
;
; }
;
	rts
;
; ring_timer --;
;
L291D:	lda     _ring_timer
	sec
	sbc     #$01
	sta     _ring_timer
;
; ring_vy += PLAYER_G;
;
	lda     #$10
	clc
	adc     _ring_vy
	sta     _ring_vy
	bcc     L18E5
	inc     _ring_vy+1
;
; ring_y += ring_vy; if (ring_y < 0) ring_y = 0;
;
L18E5:	lda     _ring_vy
	clc
	adc     _ring_y
	sta     _ring_y
	lda     _ring_vy+1
	adc     _ring_y+1
	sta     _ring_y+1
	ldx     _ring_y+1
	cpx     #$80
	bcc     L18E8
	lda     #$00
	sta     _ring_y
	sta     _ring_y+1
;
; _en_y = ring_y >> FIXBITS;
;
L18E8:	lda     _ring_y
	ldx     _ring_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
;
; _en_x = 8 + (ring_x >> FIXBITS); cx1 = _en_x >> 4;
;
	lda     _ring_x
	ldx     _ring_x+1
	jsr     asrax4
	jsr     asrax2
	clc
	adc     #$08
	sta     __en_x
	ldx     #$00
	lda     __en_x
	jsr     asrax4
	sta     _cx1
;
; if (ring_vy > 0) {
;
	lda     _ring_vy
	cmp     #$01
	lda     _ring_vy+1
	sbc     #$00
	bvs     L18F6
	eor     #$80
L18F6:	bpl     L18F4
;
; cy1 = (_en_y - 1); // _en_y + 15 - 16
;
	lda     __en_y
	sec
	sbc     #$01
	sta     _cy1
;
; if (map_attr [(cy1 & 0xf0) | cx1] & 13) {
;
	and     #$F0
	sta     ptr1
	lda     _cx1
	ora     ptr1
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	and     #$0D
	beq     L190D
;
; _en_y = cy1 & 0xf0; ring_vy = - ((ring_vy >> 1) + (ring_vy >> 2)) ;
;
	lda     _cy1
	and     #$F0
	sta     __en_y
	lda     _ring_vy
	ldx     _ring_vy+1
	jsr     asrax1
	sta     ptr1
	stx     ptr1+1
	lda     _ring_vy
	ldx     _ring_vy+1
	jsr     asrax2
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     negax
;
; } else if (ring_vy < 0) {
;
	jmp     L291A
L18F4:	ldx     _ring_vy+1
	cpx     #$80
	bcc     L190D
;
; cy1 = (_en_y - 16);
;
	lda     __en_y
	sec
	sbc     #$10
	sta     _cy1
;
; if (map_attr [(cy1 & 0xf0) | cx1] & 9) {
;
	and     #$F0
	sta     ptr1
	ldx     #$00
	lda     _cx1
	ora     ptr1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	and     #$09
	beq     L190D
;
; _en_y = 32 + (cy1 & 0xf0); ring_vy = 0;
;
	lda     _cy1
	and     #$F0
	clc
	adc     #$20
	sta     __en_y
	txa
L291A:	sta     _ring_vy
	stx     _ring_vy+1
;
; ring_y = _en_y << FIXBITS;
;
L190D:	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     _ring_y
	stx     _ring_y+1
;
; if (ring_vx > 0) {
;
	lda     _ring_vx
	cmp     #$01
	lda     _ring_vx+1
	sbc     #$00
	bvs     L191B
	eor     #$80
L191B:	bpl     L1919
;
; ring_vx -= RING_A; if (ring_vx < 0) ring_vx = 0;
;
	lda     _ring_vx
	sec
	sbc     #$04
	sta     _ring_vx
	bcs     L191E
	dec     _ring_vx+1
L191E:	ldx     _ring_vx+1
	cpx     #$80
	bcc     L1929
;
; } else if (ring_vx < 0) {
;
	jmp     L291C
L1919:	ldx     _ring_vx+1
	cpx     #$80
	bcc     L1929
;
; ring_vx += RING_A; if (ring_vx > 0) ring_vx = 0;
;
	lda     #$04
	clc
	adc     _ring_vx
	sta     _ring_vx
	bcc     L1928
	inc     _ring_vx+1
L1928:	lda     _ring_vx
	cmp     #$01
	lda     _ring_vx+1
	sbc     #$00
	bvs     L192B
	eor     #$80
L192B:	bpl     L1929
L291C:	lda     #$00
	sta     _ring_vx
	sta     _ring_vx+1
;
; _en_x = ring_x >> FIXBITS;
;
L1929:	lda     _ring_x
	ldx     _ring_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; ring_x += ring_vx;
;
	lda     _ring_vx
	clc
	adc     _ring_x
	sta     _ring_x
	lda     _ring_vx+1
	adc     _ring_x+1
	sta     _ring_x+1
;
; if (ring_x < 0 || ring_x > 15360) {
;
	ldx     _ring_x+1
	cpx     #$80
	bcs     L1933
	lda     _ring_x
	cmp     #$01
	lda     _ring_x+1
	sbc     #$3C
	bvs     L1934
	eor     #$80
L1934:	bpl     L1932
;
; ring_timer = 0;
;
L1933:	lda     #$00
	sta     _ring_timer
;
; return;
;
	rts
;
; _en_y = (ring_y >> FIXBITS) - 16 + 15;
;
L1932:	lda     _ring_y
	ldx     _ring_y+1
	jsr     asrax4
	jsr     asrax2
	sec
	sbc     #$10
	clc
	adc     #$0F
	sta     __en_y
;
; cx1 = (ring_x >> FIXBITS) + 8;
;
	lda     _ring_x
	ldx     _ring_x+1
	jsr     asrax4
	jsr     asrax2
	clc
	adc     #$08
	sta     _cx1
;
; if (map_attr [(_en_y & 0xf0)|(cx1>>4)] & 8) {
;
	lda     __en_y
	and     #$F0
	sta     ptr1
	ldx     #$00
	lda     _cx1
	jsr     asrax4
	ora     ptr1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	and     #$08
	beq     L1941
;
; ring_x = _en_x << FIXBITS;
;
	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
	sta     _ring_x
	stx     _ring_x+1
;
; ring_vx = -ring_vx;
;
	lda     _ring_vx
	ldx     _ring_vx+1
	jsr     negax
	sta     _ring_vx
	stx     _ring_vx+1
;
; } else _en_x = ring_x >> FIXBITS;
;
	jmp     L194A
L1941:	lda     _ring_x
	ldx     _ring_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; if (ring_timer < RING_TIMER_GET && collide ()) {
;
L194A:	lda     _ring_timer
	cmp     #$82
	bcs     L194D
	jsr     _collide
	tax
	beq     L194D
;
; sfx_play (SFX_RING, 1);
;
	lda     #$12
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; prings = 1; ring_timer = 0; return;
;
	lda     #$01
	sta     _prings
	lda     #$00
	sta     _ring_timer
	rts
;
; if (ring_timer > 50 || half_life) oam_index = oam_meta_spr (
;
L194D:	lda     _ring_timer
	cmp     #$33
	bcs     L1959
	lda     _half_life
	bne     L1959
	rts
;
; _en_x, _en_y + SPRITE_ADJUST,
;
L1959:	jsr     decsp3
	lda     __en_x
	ldy     #$02
	sta     (sp),y
	lda     __en_y
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2917
	sec
L2917:	sbc     #$10
	bcs     L2918
	sec
L2918:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_ring [(frame_counter >> 1) & 3]
;
	ldx     #$00
	lda     _frame_counter
	jsr     asrax1
	ldx     #$00
	and     #$03
	asl     a
	bcc     L2919
	inx
	clc
L2919:	adc     #<(_spr_ring)
;
; );
;
	sta     ptr1
;
; spr_ring [(frame_counter >> 1) & 3]
;
	txa
	adc     #>(_spr_ring)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ somari_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_somari_do: near

.segment	"CODE"

;
; switch (somari_state) {
;
	lda     _somari_state
;
; }
;
	beq     L196C
	cmp     #$01
	beq     L1973
	cmp     #$02
	beq     L1981
	jmp     L196A
;
; en_spr = 42 + ((frame_counter >> 3) & 3);
;
L196C:	tax
	lda     _frame_counter
	jsr     asrax3
	and     #$03
	clc
	adc     #$2A
	sta     _en_spr
;
; break;
;
	jmp     L196A
;
; en_spr = half_life ? 44 : 46;
;
L1973:	lda     _half_life
	beq     L1976
	lda     #$2C
	jmp     L1978
L1976:	lda     #$2E
L1978:	sta     _en_spr
;
; if (somari_ct) somari_ct --; else somari_state = 0;
;
	lda     _somari_ct
	beq     L291F
	lda     _somari_ct
	sec
	sbc     #$01
	sta     _somari_ct
	jmp     L196A
;
; en_spr = 46;
;
L1981:	lda     #$2E
	sta     _en_spr
;
; if (somari_ct) somari_ct --; else somari_state = 3;
;
	lda     _somari_ct
	beq     L1984
	lda     _somari_ct
	sec
	sbc     #$01
	sta     _somari_ct
	jmp     L196A
L1984:	lda     #$03
L291F:	sta     _somari_state
;
; 232, SPRITE_ADJUST + 128, 
;
L196A:	jsr     decsp3
	lda     #$E8
	ldy     #$02
	sta     (sp),y
	lda     #$93
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [en_spr]
;
	ldx     #$00
	lda     _en_spr
	asl     a
	bcc     L2920
	inx
	clc
L2920:	adc     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [en_spr]
;
	txa
	adc     _spr_enems+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ breakable_do_anim (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_breakable_do_anim: near

.segment	"CODE"

;
; do_process_breakable = 0;
;
	lda     #$00
	sta     _do_process_breakable
;
; gpit = BREAKABLE_MAX; while (gpit --) {
;
	lda     #$10
	sta     _gpit
L1996:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1997
;
; if (brkf [gpit]) {
;
	ldy     _gpit
	lda     _brkf,y
	beq     L1996
;
; ++ brkf [gpit];
;
	lda     #<(_brkf)
	ldx     #>(_brkf)
	clc
	adc     _gpit
	bcc     L199F
	inx
L199F:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (brkf [gpit] == BREAKABLE_MAX_FRAMES) {
;
	ldy     _gpit
	lda     _brkf,y
	cmp     #$18
	bne     L19A0
;
; brkf [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _brkf,y
;
; _x = brkx [gpit]; _y = brky [gpit]; _t = BREAKABLE_ERASE;
;
	ldy     _gpit
	lda     _brkx,y
	sta     __x
	ldy     _gpit
	lda     _brky,y
	sta     __y
	lda     #$00
	sta     __t
;
; map_set ();
;
	jsr     _map_set
;
; } else {
;
	jmp     L1996
;
; do_process_breakable = 1;
;
L19A0:	lda     #$01
	sta     _do_process_breakable
;
; }
;
	jmp     L1996
;
; }
;
L1997:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ breakable_break (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_breakable_break: near

.segment	"CODE"

;
; gpaux = COORDS (x, y);
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax4
	ldy     #$01
	ora     (sp),y
	sta     _gpaux
;
; if (brk_buff [gpaux] < BREAKABLE_LIFE) {
;
	ldy     _gpaux
	lda     _brk_buff,y
	cmp     #$04
	bcs     L19BD
;
; ++ brk_buff [gpaux];
;
	lda     #<(_brk_buff)
	ldx     #>(_brk_buff)
	clc
	adc     _gpaux
	bcc     L19C3
	inx
L19C3:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; } else 
;
	jmp     incsp2
;
; sfx_play (SFX_BREAKH, 1);
;
L19BD:	lda     #$0D
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; gpit = BREAKABLE_MAX; while (gpit --) {
;
	lda     #$10
	sta     _gpit
L19CA:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	jeq     incsp2
;
; if (!brkf [gpit]) {
;
	ldy     _gpit
	lda     _brkf,y
	bne     L19CA
;
; do_process_breakable = 1;
;
	lda     #$01
	sta     _do_process_breakable
;
; brkf [gpit] = 1;
;
	ldy     _gpit
	sta     _brkf,y
;
; _x = brkx [gpit] = x;
;
	lda     #<(_brkx)
	ldx     #>(_brkx)
	clc
	adc     _gpit
	bcc     L19DA
	inx
L19DA:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	dey
	sta     (ptr1),y
	sta     __x
;
; _y = brky [gpit] = y;
;
	lda     #<(_brky)
	ldx     #>(_brky)
	clc
	adc     _gpit
	bcc     L19DF
	inx
L19DF:	sta     ptr1
	stx     ptr1+1
	lda     (sp),y
	sta     (ptr1),y
	sta     __y
;
; _t = BREAKABLE_BREAKING;
;
	lda     #$13
	sta     __t
;
; map_set ();     // Break tile!
;
	jsr     _map_set
;
; sfx_play (SFX_BREAKB, 1);
;
	lda     #$11
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; break;      // HA HA HA
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_load: near

.segment	"CODE"

;
; bankswitch (l_enems_chr_rombank [level]);
;
	ldy     _level
	lda     _l_enems_chr_rombank,y
	jsr     _bankswitch
;
; vram_adr (c_hotspots);
;
	lda     _c_hotspots
	ldx     _c_hotspots+1
	jsr     _vram_adr
;
; rda = VRAM_READ;  // Dummy read.
;
	lda     $2007
	sta     _rda
;
; for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
;
	lda     #$00
L2921:	sta     _gpit
	cmp     #$1E
	bcs     L19F4
;
; ht [gpit] = VRAM_READ;
;
	ldy     _gpit
	lda     $2007
	sta     _ht,y
;
; hyx [gpit] = VRAM_READ;
;
	ldy     _gpit
	lda     $2007
	sta     _hyx,y
;
; hact [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _hact,y
;
; for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L2921
;
; }
;
L19F4:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_paint: near

.segment	"CODE"

;
; rda = hrt;
;
	lda     _hrt
	sta     _rda
;
; hrx, hry + SPRITE_ADJUST, 
;
	jsr     decsp3
	lda     _hrx
	ldy     #$02
	sta     (sp),y
	lda     _hry
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2923
	sec
L2923:	sbc     #$10
	bcs     L2924
	sec
L2924:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [rda]
;
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L2925
	inx
	clc
L2925:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [rda]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_create: near

.segment	"CODE"

;
; if (ht [n_pant] && hact [n_pant]) {
;
	ldy     _n_pant
	lda     _ht,y
	beq     L1A1C
	ldy     _n_pant
	lda     _hact,y
	beq     L1A1C
;
; hrt = ht [n_pant];
;
	ldy     _n_pant
	lda     _ht,y
	sta     _hrt
;
; hrx = hyx [n_pant] << 4;
;
	ldy     _n_pant
	lda     _hyx,y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _hrx
;
; hry = hyx [n_pant] & 0xf0;
;
	ldy     _n_pant
	lda     _hyx,y
	and     #$F0
	sta     _hry
;
; } else hrt = 0;
;
	rts
L1A1C:	lda     #$00
	sta     _hrt
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_init: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it --) {
;
	lda     #$04
	sta     _coco_it
L1A36:	lda     _coco_it
	pha
	sec
	sbc     #$01
	sta     _coco_it
	pla
	tax
	beq     L1A37
;
; coco_slots [coco_it] = coco_it;
;
	ldy     _coco_it
	lda     _coco_it
	sta     _coco_slots,y
;
; coco_on [coco_it] = 0;
;
	ldy     _coco_it
	lda     #$00
	sta     _coco_on,y
;
; }
;
	jmp     L1A36
;
; coco_slots_i = COCOS_MAX;
;
L1A37:	lda     #$04
	sta     _coco_slots_i
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_shoot_aimed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_shoot_aimed: near

.segment	"CODE"

;
; rdct = distance ();
;
	jsr     _distance
	sta     _rdct
;
; if (coco_slots_i)
;
	lda     _coco_slots_i
	bne     L2936
;
; }
;
	rts
;
; -- coco_slots_i; coco_it = coco_slots [coco_slots_i];
;
L2936:	dec     _coco_slots_i
	ldy     _coco_slots_i
	lda     _coco_slots,y
	sta     _coco_it
;
; coco_x [coco_it] = rdx << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L292E
	inx
	clc
L292E:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldx     #$00
	lda     _rdx
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_y [coco_it] = rdy << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L292F
	inx
	clc
L292F:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	jsr     aslax2
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; rds16 = COCO_V * rda / rdct; coco_vx [coco_it] = ADD_SIGN2 (px, coco_x [coco_it], rds16);
;
	lda     #$80
	jsr     pusha0
	lda     _rda
	jsr     tosumula0
	jsr     pushax
	lda     _rdct
	jsr     tosudiva0
	sta     _rds16
	stx     _rds16+1
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2930
	inx
	clc
L2930:	adc     #<(_coco_vx)
	tay
	txa
	adc     #>(_coco_vx)
	tax
	tya
	jsr     pushax
	lda     _px
	ldx     _px+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2931
	inx
	clc
L2931:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bne     L1A5C
	ldx     #$00
	txa
	jmp     L1A69
L1A5C:	lda     _px
	ldx     _px+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2932
	inx
	clc
L2932:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bmi     L1A66
	beq     L1A66
	lda     _rds16
	ldx     _rds16+1
	jmp     L1A69
L1A66:	lda     _rds16
	ldx     _rds16+1
	jsr     negax
L1A69:	ldy     #$00
	jsr     staxspidx
;
; rds16 = COCO_V * rdb / rdct; coco_vy [coco_it] = ADD_SIGN2 (py, coco_y [coco_it], rds16);
;
	lda     #$80
	jsr     pusha0
	lda     _rdb
	jsr     tosumula0
	jsr     pushax
	lda     _rdct
	jsr     tosudiva0
	sta     _rds16
	stx     _rds16+1
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2933
	inx
	clc
L2933:	adc     #<(_coco_vy)
	tay
	txa
	adc     #>(_coco_vy)
	tax
	tya
	jsr     pushax
	lda     _py
	ldx     _py+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2934
	inx
	clc
L2934:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bne     L1A76
	ldx     #$00
	txa
	jmp     L1A83
L1A76:	lda     _py
	ldx     _py+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2935
	inx
	clc
L2935:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bmi     L1A80
	beq     L1A80
	lda     _rds16
	ldx     _rds16+1
	jmp     L1A83
L1A80:	lda     _rds16
	ldx     _rds16+1
	jsr     negax
L1A83:	ldy     #$00
	jsr     staxspidx
;
; coco_on [coco_it] = 1;
;
	ldy     _coco_it
	lda     #$01
	sta     _coco_on,y
;
; sfx_play (SFX_COCO, 2);
;
	lda     #$0A
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_shoot_linear (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_shoot_linear: near

.segment	"CODE"

;
; if (coco_slots_i == 0) return;
;
	lda     _coco_slots_i
	bne     L2943
;
; }
;
	rts
;
; -- coco_slots_i; coco_it = coco_slots [coco_slots_i];
;
L2943:	dec     _coco_slots_i
	ldy     _coco_slots_i
	lda     _coco_slots,y
	sta     _coco_it
;
; coco_x [coco_it] = rdx << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L293D
	inx
	clc
L293D:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldx     #$00
	lda     _rdx
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_y [coco_it] = rdy << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L293E
	inx
	clc
L293E:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	jsr     aslax2
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_vx [coco_it] = coco_dx [rda];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L293F
	inx
	clc
L293F:	adc     #<(_coco_vx)
	tay
	txa
	adc     #>(_coco_vx)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L2940
	inx
	clc
L2940:	adc     #<(_coco_dx)
	sta     ptr1
	txa
	adc     #>(_coco_dx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; coco_vy [coco_it] = coco_dy [rda];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2941
	inx
	clc
L2941:	adc     #<(_coco_vy)
	tay
	txa
	adc     #>(_coco_vy)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L2942
	inx
	clc
L2942:	adc     #<(_coco_dy)
	sta     ptr1
	txa
	adc     #>(_coco_dy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; coco_on [coco_it] = 1;
;
	ldy     _coco_it
	lda     #$01
	sta     _coco_on,y
;
; sfx_play (SFX_COCO, 2);
;
	lda     #$0A
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_destroy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_destroy: near

.segment	"CODE"

;
; coco_on [coco_it] = 0;
;
	ldy     _coco_it
	lda     #$00
	sta     _coco_on,y
;
; coco_slots [coco_slots_i] = coco_it; coco_slots_i ++;
;
	ldy     _coco_slots_i
	lda     _coco_it
	sta     _coco_slots,y
	lda     _coco_slots_i
	clc
	adc     #$01
	sta     _coco_slots_i
;
; sfx_play (SFX_DUMMY1, 2);
;
	lda     #$05
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_do: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it --) if (coco_on [coco_it]) {
;
	lda     #$04
	sta     _coco_it
L1ABB:	lda     _coco_it
	pha
	sec
	sbc     #$01
	sta     _coco_it
	pla
	tax
	bne     L295C
;
; }
;
	rts
;
; coco_it = COCOS_MAX; while (coco_it --) if (coco_on [coco_it]) {
;
L295C:	ldy     _coco_it
	lda     _coco_on,y
	beq     L1ABB
;
; coco_x [coco_it] += coco_vx [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L294E
	inx
	clc
L294E:	adc     #<(_coco_x)
	tay
	txa
	adc     #>(_coco_x)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L294F
	inx
	clc
L294F:	adc     #<(_coco_vx)
	sta     ptr1
	txa
	adc     #>(_coco_vx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; coco_y [coco_it] += coco_vy [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2950
	inx
	clc
L2950:	adc     #<(_coco_y)
	tay
	txa
	adc     #>(_coco_y)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2951
	inx
	clc
L2951:	adc     #<(_coco_vy)
	sta     ptr1
	txa
	adc     #>(_coco_vy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; if (coco_x [coco_it] < 0 || coco_x [coco_it] > 248<<FIXBITS || coco_y [coco_it] < 16<<FIXBITS || coco_y [coco_it] > 200<<FIXBITS) {
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2952
	inx
	clc
L2952:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	cpx     #$80
	bcs     L1ACB
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2953
	inx
	clc
L2953:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$3E
	bvs     L1ACE
	eor     #$80
L1ACE:	bmi     L1ACB
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2954
	inx
	clc
L2954:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$00
	txa
	sbc     #$04
	bvc     L1AD0
	eor     #$80
L1AD0:	bmi     L1ACB
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2955
	inx
	clc
L2955:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$32
	bvs     L1AD2
	eor     #$80
L1AD2:	bpl     L1ACA
;
; cocos_destroy ();
;
L1ACB:	jsr     _cocos_destroy
;
; continue;
;
	jmp     L1ABB
;
; rdx = coco_x [coco_it] >> 6;
;
L1ACA:	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2956
	inx
	clc
L2956:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     _rdx
;
; rdy = coco_y [coco_it] >> 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L2957
	inx
	clc
L2957:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     _rdy
;
; oam_index = oam_spr (rdx, rdy + SPRITE_ADJUST, COCO_PATTERN, COCO_PALETTE, oam_index);
;
	jsr     decsp4
	lda     _rdx
	ldy     #$03
	sta     (sp),y
	lda     _rdy
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2958
	sec
L2958:	sbc     #$10
	bcs     L2959
	sec
L2959:	sbc     #$01
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (pflickering == 0 && 
;
	lda     _pflickering
	jne     L1ABB
;
; rdx + 7 >= prx && 
;
	tax
	lda     _rdx
	clc
	adc     #$07
	bcc     L1AE9
	inx
L1AE9:	cmp     _prx
	txa
	sbc     #$00
	jcc     L1ABB
;
; rdx <= prx + 7 && 
;
	lda     _rdx
	jsr     pusha0
	lda     _prx
	clc
	adc     #$07
	bcc     L1AEA
	ldx     #$01
L1AEA:	jsr     tosicmp
	beq     L295B
	jcs     L1ABB
;
; rdy + 7 + PLAYER_COLLISION_VSTRETCH_FG >= pry && 
;
L295B:	ldx     #$00
	lda     _rdy
	clc
	adc     #$07
	bcc     L295A
	inx
	clc
L295A:	adc     #$FC
	pha
	txa
	adc     #$FF
	tax
	pla
	cmp     _pry
	txa
	sbc     #$00
	jcc     L1ABB
;
; rdy <= pry + 12
;
	lda     _rdy
	jsr     pusha0
	lda     _pry
;
; ) {
;
	clc
	adc     #$0C
	bcc     L1AEC
	ldx     #$01
L1AEC:	jsr     tosicmp
	bcc     L1AE7
	jne     L1ABB
;
; en_sg_2 = 1;
;
L1AE7:	lda     #$01
	sta     _en_sg_2
;
; if (prings) {
;
	lda     _prings
	beq     L1AF0
;
; ring_create ();
;
	jsr     _ring_create
;
; prings = 0;
;
	lda     #$00
	sta     _prings
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pbouncing = 16;
;
	lda     #$10
	sta     _pbouncing
;
; pflickering = 100;
;
	lda     #$64
	sta     _pflickering
;
; en_sg_2 = 0;
;
	lda     #$00
	sta     _en_sg_2
;
; } else psprid = pfacing + CELL_HIT;
;
	jmp     L1AFE
L1AF0:	lda     _pfacing
	clc
	adc     #$09
	sta     _psprid
;
; pkill = !!en_sg_2;
;
L1AFE:	lda     _en_sg_2
	jsr     bnega
	jsr     bnega
	sta     _pkill
;
; cocos_destroy ();
;
	jsr     _cocos_destroy
;
; }
;
	jmp     L1ABB

.endproc

; ---------------------------------------------------------------
; void __near__ player_register_safe_spot (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_register_safe_spot: near

.segment	"CODE"

;
; px_safe = px;
;
	lda     _px
	sta     _px_safe
	lda     _px+1
	sta     _px_safe+1
;
; py_safe = py;
;
	lda     _py
	sta     _py_safe
	lda     _py+1
	sta     _py_safe+1
;
; n_pant_safe = n_pant;
;
	lda     _n_pant
	sta     _n_pant_safe
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_stop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_stop: near

.segment	"CODE"

;
; pvx = pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
	sta     _pvx
	sta     _pvx+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; if (!warp_to_level) player_stop ();
;
	lda     _warp_to_level
	bne     L1B11
	jsr     _player_stop
;
; pfacing = 0;
;
L1B11:	lda     #$00
	sta     _pfacing
;
; pfr = pctfr = 0;
;
	sta     _pctfr
	sta     _pfr
;
; pj = pctj = 0;
;
	sta     _pctj
	sta     _pj
;
; psprid = 0;
;
	sta     _psprid
;
; pobjs = 0;
;
	sta     _pobjs
;
; pgotten = 0;
;
	sta     _pgotten
;
; pfiring = 0;
;
	sta     _pfiring
;
; pkilled = 0;
;
	sta     _pkilled
;
; pflickering = pbouncing = 0;
;
	sta     _pbouncing
	sta     _pflickering
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; vertical_engine_type = ENGINE_TYPE_JUMP;
;
	lda     #$00
	sta     _vertical_engine_type
;
; ptrampoline = 0;
;
	sta     _ptrampoline
;
; pspin = 0;
;
	sta     _pspin
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_to_pixels (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_to_pixels: near

.segment	"CODE"

;
; prx = px >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
;
; pry = py >> FIXBITS;
;
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_kill: near

.segment	"CODE"

;
; oam_index = oam_index_player;
;
	lda     _oam_index_player
	sta     _oam_index
;
; player_render ();
;
	jsr     _player_render
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; pkill = phit = 0;
;
	lda     #$00
	sta     _phit
	sta     _pkill
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (plife) -- plife; else game_over = 1;
;
	lda     _plife
	beq     L1B4F
	dec     _plife
	jmp     L1B52
L1B4F:	lda     #$01
	sta     _game_over
;
; pflickering = PLAYER_FLICKERS;
;
L1B52:	lda     #$64
	sta     _pflickering
;
; pbouncing = PLAYER_BOUNCES;
;
	lda     #$10
	sta     _pbouncing
;
; music_pause (1);
;
	lda     #$01
	jsr     _music_pause
;
; delay (60);
;
	lda     #$3C
	jsr     _delay
;
; level_reset = 1;
;
	lda     #$01
	sta     _level_reset
;
; pmayneedrelocation = 1;
;
	sta     _pmayneedrelocation
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; if (pflickering) -- pflickering;
;
	lda     _pflickering
	beq     L1B62
	dec     _pflickering
;
; if (pbouncing) -- pbouncing;
;
L1B62:	lda     _pbouncing
	beq     L1B65
	dec     _pbouncing
;
; hitv = hith = 0;
;
L1B65:	lda     #$00
	sta     _hith
	sta     _hitv
;
; pcx = prx; pcy = pry;
;
	lda     _prx
	sta     _pcx
	lda     _pry
	sta     _pcy
;
; pnotsafe = 0;
;
	lda     #$00
	sta     _pnotsafe
;
; oppossee = ppossee;
;
	lda     _ppossee
	sta     _oppossee
;
; ppossee = 0;
;
	lda     #$00
	sta     _ppossee
;
; if (vertical_engine_type != ENGINE_TYPE_SWIM) {
;
	lda     _vertical_engine_type
	cmp     #$02
	beq     L1B82
;
; ) {
;
	lda     _pgotten
	bne     L1B82
;
; if (!pj) {
;
	lda     _pj
	bne     L1B79
;
; pvy += PLAYER_G;
;
	lda     #$10
;
; } else pvy += PLAYER_G_MK2_JUMPING;
;
	jmp     L2974
L1B79:	lda     #$04
L2974:	clc
	adc     _pvy
	sta     _pvy
	bcc     L1B81
	inc     _pvy+1
;
; if (pvy > PLAYER_VY_FALLING_MAX) pvy = PLAYER_VY_FALLING_MAX; 
;
L1B81:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$01
	bvs     L1B84
	eor     #$80
L1B84:	bpl     L1B82
	ldx     #$01
	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; if (pgotten) pvy = 0;   
;
L1B82:	lda     _pgotten
	beq     L1B87
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; py += pvy;
;
L1B87:	lda     _pvy
	clc
	adc     _py
	sta     _py
	lda     _pvy+1
	adc     _py+1
	sta     _py+1
;
; if (py < 0) py = 0;
;
	ldx     _py+1
	cpx     #$80
	bcc     L1B8D
	lda     #$00
	sta     _py
	sta     _py+1
;
; pry = py >> FIXBITS;
;
L1B8D:	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; cx1 = prx >> 4;
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx1
;
; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L1B99
	inx
L1B99:	jsr     shrax4
	sta     _cx2
;
; rds16 = pvy + pgtmy;
;
	lda     _pvy
	clc
	adc     _pgtmy
	sta     _rds16
	lda     _pvy+1
	adc     _pgtmy+1
	tax
	stx     _rds16+1
;
; if (rds16 < 0)
;
	cpx     #$80
	bcc     L1B9C
;
; cy1 = cy2 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;   
;
	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L1BA4
	lda     _at2
	and     #$08
	beq     L1BA3
;
; pry = ((cy1 + 1) << 4) + PLAYER_COLLISION_VSTRETCH_BG;
;
L1BA4:	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L1BAC
	inx
L1BAC:	jsr     shlax4
	clc
	adc     #$FC
	sta     _pry
	txa
	adc     #$FF
;
; pvy = 0; py = pry << FIXBITS;
;
	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L1C2D
L1BA3:	lda     _at1
	and     #$01
	jne     L296E
	lda     _at2
	and     #$01
	jeq     L1C2D
;
; } else if (rds16 > 0)
;
	jmp     L296E
L1B9C:	lda     _rds16
	cmp     #$01
	lda     _rds16+1
	sbc     #$00
	bvs     L1BC0
	eor     #$80
L1BC0:	jpl     L1C2D
;
; cy1 = cy2 = (pry + 16) >> 4; 
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L1BC5
	inx
L1BC5:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points (); 
;
	jsr     _cm_two_points
;
; pry < ((cy1 - 1) << 4) + 4 && 
;
	lda     _pry
	jsr     pusha0
	lda     _cy1
	sec
	sbc     #$01
	bcs     L1BCB
	ldx     #$FF
L1BCB:	jsr     shlax4
	clc
	adc     #$04
	bcc     L1BCC
	inx
L1BCC:	jsr     tosicmp
	jcs     L1BC7
;
; (at1 & 12) || (at2 & 12)
;
	lda     _at1
	and     #$0C
	bne     L1BC8
	lda     _at2
	and     #$0C
;
; )
;
	jeq     L1BC7
;
; pvy = 0; pry = ((cy1 - 1) << 4);py = pry << FIXBITS;
;
L1BC8:	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _cy1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; ppossee = 1;
;
	sta     _ppossee
;
; if (at1 == 74 || at2 == 74) {
;
	lda     _at1
	cmp     #$4A
	beq     L1BE3
	lda     _at2
	cmp     #$4A
	bne     L1BE2
;
; a_button = 1; ptrampoline = 1;
;
L1BE3:	lda     #$01
	sta     _a_button
	sta     _ptrampoline
;
; pspin = 0;
;
	lda     #$00
	sta     _pspin
;
; cfx = 0;
;
L1BE2:	lda     #$00
	sta     _cfx
;
; if ((at1 & 40) == 40) { if (at1 & 1) cfx = pgtmx = PLAYER_VX_CONVEYORS; else cfx = pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; } 
;
	lda     _at1
	and     #$28
	cmp     #$28
	bne     L1BED
	lda     _at1
	and     #$01
	beq     L1BF1
	ldx     #$00
	lda     #$40
	jmp     L296F
L1BF1:	ldx     #$FF
	lda     #$C0
L296F:	sta     _pgtmx
	stx     _pgtmx+1
	sta     _cfx
	lda     #$01
	sta     _pgotten
;
; if (cx1 != cx2) if ((at2 & 40) == 40) { if (at2 & 1) cfx = pgtmx = PLAYER_VX_CONVEYORS; else cfx = pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; } 
;
L1BED:	lda     _cx2
	cmp     _cx1
	beq     L1BFE
	lda     _at2
	and     #$28
	cmp     #$28
	bne     L1BFE
	lda     _at2
	and     #$01
	beq     L1C02
	ldx     #$00
	lda     #$40
	jmp     L2970
L1C02:	ldx     #$FF
	lda     #$C0
L2970:	sta     _pgtmx
	stx     _pgtmx+1
	sta     _cfx
	lda     #$01
	sta     _pgotten
;
; if (at1 & 16) { breakable_break (cx1, cy1 - 1); pnotsafe = 1; }
;
L1BFE:	lda     _at1
	and     #$10
	beq     L1C0D
	jsr     decsp2
	lda     _cx1
	ldy     #$01
	sta     (sp),y
	lda     _cy1
	sec
	sbc     #$01
	dey
	sta     (sp),y
	jsr     _breakable_break
	lda     #$01
	sta     _pnotsafe
;
; if (cx1 != cx2 && (at2 & 16)) { breakable_break (cx2, cy1 - 1); pnotsafe = 1; }
;
L1C0D:	lda     _cx2
	cmp     _cx1
	beq     L1C15
	lda     _at2
	and     #$10
	beq     L1C15
	jsr     decsp2
	lda     _cx2
	ldy     #$01
	sta     (sp),y
	lda     _cy1
	sec
	sbc     #$01
	dey
	sta     (sp),y
	jsr     _breakable_break
	lda     #$01
	sta     _pnotsafe
;
; if ((at1 & 1) || (at2 & 1)) pnotsafe = 1; 
;
L1C15:	lda     _at1
	and     #$01
	bne     L1C21
	lda     _at2
	and     #$01
	beq     L1C2D
L1C21:	lda     #$01
	sta     _pnotsafe
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L1C2D
L1BC7:	lda     _at1
	and     #$01
	bne     L1C29
	lda     _at2
	and     #$01
	beq     L1C2D
;
; if ((pry & 15) > 4) hitv = 1;
;
L1C29:	lda     _pry
	and     #$0F
	cmp     #$05
	bcc     L1C2D
L296E:	lda     #$01
	sta     _hitv
;
; if (vertical_engine_type == ENGINE_TYPE_JUMP) {
;
L1C2D:	lda     _vertical_engine_type
	jne     L1C5A
;
; && !pj
;
	lda     _a_button
	beq     L1C40
;
; && (
;
	lda     _pj
	bne     L1C40
;
; pgotten || ppossee || hitv
;
	lda     _pgotten
	bne     L1C35
	lda     _ppossee
	bne     L1C35
;
; )
;
	lda     _hitv
	beq     L1C40
;
; jump_start ();
;
L1C35:	jsr     _jump_start
;
; if (!(pgotten || hitv || pnotsafe)) {
;
	lda     _pgotten
	bne     L1C3D
	lda     _hitv
	bne     L1C3D
	lda     _pnotsafe
	beq     L1C3E
L1C3D:	lda     #$01
L1C3E:	jsr     bnega
	beq     L1C3B
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; if (!ptrampoline)
;
L1C3B:	lda     _ptrampoline
	bne     L1C40
;
; pspin = 1;
;
	lda     #$01
	sta     _pspin
;
; if (pj) {
;
L1C40:	lda     _pj
	beq     L1C5A
;
; if (ptrampoline) {
;
	lda     _ptrampoline
	beq     L1C46
;
; ++ pctj; if (pctj == PLAYER_VY_MK2_TRAMPOLINE_A_STEPS)
;
	inc     _pctj
	lda     _pctj
	cmp     #$20
	bne     L1C5A
;
; { pj = 0; ptrampoline = 0; }
;
	lda     #$00
	sta     _pj
	sta     _ptrampoline
;
; } else 
;
	jmp     L1C5A
;
; if (pad0 & PAD_A) {
;
L1C46:	lda     _pad0
	and     #$01
	beq     L1C50
;
; ++ pctj; if (pctj == PLAYER_VY_MK2_JUMP_A_STEPS) pj = 0;
;
	inc     _pctj
	lda     _pctj
	cmp     #$10
	bne     L1C5A
	lda     #$00
	sta     _pj
;
; } else {
;
	jmp     L1C5A
;
; pj = 0; if (pvy < -PLAYER_VY_MK2_JUMP_RELEASE) pvy = -PLAYER_VY_MK2_JUMP_RELEASE;
;
L1C50:	sta     _pj
	lda     _pvy
	cmp     #$A0
	lda     _pvy+1
	sbc     #$FF
	bvc     L1C5C
	eor     #$80
L1C5C:	bpl     L1C5A
	ldx     #$FF
	lda     #$A0
	sta     _pvy
	stx     _pvy+1
;
; if (pad0 & PAD_DOWN) {
;
L1C5A:	lda     _pad0
	and     #$20
	beq     L1C61
;
; if (ppossee && ABS (pvx) > PLAYER_VX_MIN) {
;
	lda     _ppossee
	beq     L1C61
	ldx     _pvx+1
	cpx     #$80
	bcc     L1C66
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	jmp     L1C69
L1C66:	lda     _pvx
	ldx     _pvx+1
L1C69:	cmp     #$11
	txa
	sbc     #$00
	bvs     L1C6D
	eor     #$80
L1C6D:	bpl     L1C61
;
; if (!pspin) sfx_play (SFX_DUMMY2, 0);
;
	lda     _pspin
	bne     L1C6F
	lda     #$07
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pspin = 1; 
;
L1C6F:	lda     #$01
	sta     _pspin
;
; if (!(pad0 & PAD_LEFT || pad0 & PAD_RIGHT)) {
;
L1C61:	lda     _pad0
	and     #$40
	bne     L1C78
	lda     _pad0
	and     #$80
	beq     L1C79
L1C78:	lda     #$01
L1C79:	jsr     bnega
	beq     L1C8C
;
; if (!pspin)
;
	lda     _pspin
	bne     L1C8C
;
; if (pvx > 0) {
;
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L1C7E
	eor     #$80
L1C7E:	bpl     L1C7C
;
; pvx -= PLAYER_RX;
;
	lda     _pvx
	sec
	sbc     #$08
	sta     _pvx
	bcs     L1C81
	dec     _pvx+1
;
; if (pvx < 0) pvx = 0;
;
L1C81:	ldx     _pvx+1
	cpx     #$80
	bcc     L1C8C
;
; } else if (pvx < 0) {
;
	jmp     L2971
L1C7C:	ldx     _pvx+1
	cpx     #$80
	bcc     L1C8C
;
; pvx += PLAYER_RX;
;
	lda     #$08
	clc
	adc     _pvx
	sta     _pvx
	bcc     L1C8B
	inc     _pvx+1
;
; if (pvx > 0) pvx = 0;
;
L1C8B:	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L1C8E
	eor     #$80
L1C8E:	bpl     L1C8C
L2971:	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; if (pad0 & PAD_LEFT) {
;
L1C8C:	lda     _pad0
	and     #$40
	beq     L1C95
;
; pfacing = CELL_FACING_LEFT;  
;
	lda     #$0A
	sta     _pfacing
;
; if (pvx > -PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$61
	lda     _pvx+1
	sbc     #$FF
	bvs     L1C97
	eor     #$80
L1C97:	bpl     L1C95
;
; pvx -= PLAYER_AX;
;
	lda     _pvx
	sec
	sbc     #$08
	sta     _pvx
	bcs     L1C95
	dec     _pvx+1
;
; if (pad0 & PAD_RIGHT) {
;
L1C95:	lda     _pad0
	and     #$80
	beq     L1C9F
;
; pfacing = CELL_FACING_RIGHT;
;
	lda     #$00
	sta     _pfacing
;
; if (pvx < PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$A0
	lda     _pvx+1
	sbc     #$00
	bvc     L1CA1
	eor     #$80
L1CA1:	bpl     L1C9F
;
; pvx += PLAYER_AX;
;
	lda     #$08
	clc
	adc     _pvx
	sta     _pvx
	bcc     L1C9F
	inc     _pvx+1
;
; px += pvx;
;
L1C9F:	lda     _pvx
	clc
	adc     _px
	sta     _px
	lda     _pvx+1
	adc     _px+1
	sta     _px+1
;
; if (pgotten) px += pgtmx;
;
	lda     _pgotten
	beq     L1CA7
	lda     _pgtmx
	clc
	adc     _px
	sta     _px
	lda     _pgtmx+1
	adc     _px+1
	sta     _px+1
;
; if (px < (4<<FIXBITS)) { px = 4 << FIXBITS; prx = 4;}
;
L1CA7:	lda     _px
	cmp     #$00
	lda     _px+1
	sbc     #$01
	bvc     L1CAE
	eor     #$80
L1CAE:	bpl     L1CAB
	ldx     #$01
	lda     #$00
	sta     _px
	stx     _px+1
	lda     #$04
	sta     _prx
;
; else if (px > (244<<FIXBITS)) { px = 244 << FIXBITS; prx = 244; }
;
	jmp     L1CBC
L1CAB:	lda     _px
	cmp     #$01
	lda     _px+1
	sbc     #$3D
	bvs     L1CB7
	eor     #$80
L1CB7:	bpl     L1CB4
	ldx     #$3D
	lda     #$00
	sta     _px
	stx     _px+1
	lda     #$F4
	sta     _prx
;
; else player_to_pixels ();
;
	jmp     L1CBC
L1CB4:	jsr     _player_to_pixels
;
; cy1 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;
;
L1CBC:	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L1CC4
	inx
L1CC4:	jsr     shrax4
	sta     _cy2
;
; rds16 = pvx + pgtmx;
;
	lda     _pvx
	clc
	adc     _pgtmx
	sta     _rds16
	lda     _pvx+1
	adc     _pgtmx+1
	sta     _rds16+1
;
; if (rds16)  {
;
	lda     _rds16
	ora     _rds16+1
	jeq     L1CF9
;
; if (rds16 < 0) {
;
	ldx     _rds16+1
	cpx     #$80
	bcc     L1CC9
;
; cx1 = cx2 = prx >> 4; 
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx2
	sta     _cx1
;
; rda = (cx1 + 1) << 4;
;
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; rdm = cx1 - 1;
;
	lda     _cx1
	sec
	sbc     #$01
	bcs     L1CE3
;
; } else {
;
	jmp     L1CE3
;
; cx1 = cx2 = (prx + 8) >> 4;
;
L1CC9:	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L1CDA
	inx
L1CDA:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 - 1) << 4) + 8;
;
	ldx     #$00
	lda     _cx1
	sec
	sbc     #$01
	bcs     L1CDF
	dex
L1CDF:	jsr     shlax4
	clc
	adc     #$08
	sta     _rda
;
; rdm = cx1 + 1;
;
	lda     _cx1
	clc
	adc     #$01
L1CE3:	sta     _rdm
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L1CE6
	lda     _at2
	and     #$08
	beq     L1CE5
;
; pvx = 0; prx = rda; px = prx << FIXBITS; pfiring = 1;
;
L1CE6:	ldx     #$00
	txa
	sta     _pvx
	sta     _pvx+1
	lda     _rda
	sta     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
	lda     #$01
	sta     _pfiring
;
; } else {
;
	jmp     L1CF2
;
; hith = ((at1 & 1) || (at2 & 1));
;
L1CE5:	lda     _at1
	and     #$01
	bne     L1CF5
	lda     _at2
	and     #$01
	beq     L1CF8
L1CF5:	lda     #$01
L1CF8:	sta     _hith
;
; if (pvy > 0) hith &= ((pry & 15) > 4);
;
L1CF2:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L1CFB
	eor     #$80
L1CFB:	bpl     L1CF9
	lda     _pry
	and     #$0F
	cmp     #$05
	lda     #$00
	rol     a
	and     _hith
	sta     _hith
;
; if ((!pvx && (ppossee || pgotten) && !pj) || (ppossee && !oppossee)) pspin = 0;
;
L1CF9:	lda     _pvx
	ora     _pvx+1
	bne     L2960
	lda     _ppossee
	bne     L1D04
	lda     _pgotten
	beq     L2960
L1D04:	lda     _pj
	beq     L1D01
L2960:	lda     _ppossee
	beq     L1D00
	lda     _oppossee
	bne     L1D00
L1D01:	sta     _pspin
;
; phit = 0;
;
L1D00:	lda     #$00
	sta     _phit
;
; if (pgotten == 0) {
;
	lda     _pgotten
	jne     L1D4E
;
; if (hitv) { phit = 1; pvy = ADD_SIGN (-pvy, PLAYER_V_REBOUND); pry = pcy; py = pry << FIXBITS; } 
;
	lda     _hitv
	beq     L1D11
	lda     #$01
	sta     _phit
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L1D19
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L1D1E
	eor     #$80
L1D1E:	bpl     L1D1F
	ldx     #$01
	jmp     L2965
L1D1F:	ldx     #$FF
	jmp     L2965
L1D19:	tax
L2965:	lda     #$00
	sta     _pvy
	stx     _pvy+1
	lda     _pcy
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; else
;
	jmp     L1D2E
;
; if (hith) { phit = 1; pvx = ADD_SIGN (-pvx, PLAYER_V_REBOUND); prx = pcx; px = prx << FIXBITS; }
;
L1D11:	lda     _hith
	beq     L1D2E
	lda     #$01
	sta     _phit
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L1D36
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L1D3B
	eor     #$80
L1D3B:	bpl     L1D3C
	ldx     #$01
	jmp     L2966
L1D3C:	ldx     #$FF
	jmp     L2966
L1D36:	tax
L2966:	lda     #$00
	sta     _pvx
	stx     _pvx+1
	lda     _pcx
	sta     _prx
	ldx     #$00
	lda     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; if (!pflickering && !pbouncing) if (phit) { 
;
L1D2E:	lda     _pflickering
	bne     L1D4E
	lda     _pbouncing
	bne     L1D4E
	lda     _phit
	beq     L1D4E
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; en_sg_2 = 1;
;
	lda     #$01
	sta     _en_sg_2
;
; if (prings) {
;
	lda     _prings
	beq     L1D53
;
; ring_create ();
;
	jsr     _ring_create
;
; prings = 0;
;
	lda     #$00
	sta     _prings
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pbouncing = 16;
;
	lda     #$10
	sta     _pbouncing
;
; pflickering = 100;
;
	lda     #$64
	sta     _pflickering
;
; en_sg_2 = 0;
;
	lda     #$00
	sta     _en_sg_2
;
; if (en_sg_2)
;
L1D53:	lda     _en_sg_2
	beq     L1D61
;
; pkill = 1; 
;
	lda     #$01
	sta     _pkill
;
; pspin = 0;
;
L1D61:	lda     #$00
	sta     _pspin
;
; cx1 = cx2 = (prx + 4) >> 4;
;
L1D4E:	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L1D6B
	inx
L1D6B:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; cy1 = cy2 = (pry + 8) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L1D70
	inx
L1D70:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (!pflickering && !pbouncing) {
;
	lda     _pflickering
	bne     L1D87
	lda     _pbouncing
	bne     L1D87
;
; if (at1 == 66) {
;
	lda     _at1
	cmp     #$42
	bne     L1D87
;
; if (elec_state == 2) {
;
	lda     _elec_state
	cmp     #$02
	bne     L1D87
;
; if (prings) {
;
	lda     _prings
	beq     L1D7A
;
; ring_create ();
;
	jsr     _ring_create
;
; prings = 0;
;
	lda     #$00
	sta     _prings
;
; pvx = -pvx; pvy = -64; 
;
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	sta     _pvx
	stx     _pvx+1
	ldx     #$FF
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; pbouncing = 16;
;
	lda     #$10
	sta     _pbouncing
;
; pflickering = 100;
;
	lda     #$64
	sta     _pflickering
;
; } else pkill = 1;
;
	jmp     L1D87
L1D7A:	lda     #$01
	sta     _pkill
;
; if (cy1 && at1 == 34) {
;
L1D87:	lda     _cy1
	jeq     L1D8A
	lda     _at1
	cmp     #$22
	jne     L1D8A
;
; -- cy1;
;
	dec     _cy1
;
; _x = cx1; _y = cy1; _t = 0; map_set ();
;
	lda     _cx1
	sta     __x
	lda     _cy1
	sta     __y
	lda     #$00
	sta     __t
	jsr     _map_set
;
; sfx_play (SFX_RING, 2);
;
	lda     #$12
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; prings ++;
;
	lda     _prings
	clc
	adc     #$01
	sta     _prings
;
; if (prings == 100) {
;
	cmp     #$64
	bne     L1D9A
;
; prings = 0;
;
	lda     #$00
	sta     _prings
;
; plife ++;
;
	lda     _plife
	clc
	adc     #$01
	sta     _plife
;
; sfx_play (SFX_USE, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; tile_got [(cy1 << 1) | (cx1 > 7)] |= bits [cx1 & 7];
;
L1D9A:	ldx     #$00
	lda     _cy1
	asl     a
	bcc     L295D
	inx
L295D:	sta     ptr1
	stx     ptr1+1
	lda     _cx1
	cmp     #$08
	lda     #$00
	rol     a
	ora     ptr1
	clc
	adc     #<(_tile_got)
	tay
	lda     ptr1+1
	adc     #>(_tile_got)
	tax
	tya
	sta     ptr2
	stx     ptr2+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     sreg
	lda     _cx1
	and     #$07
	sta     ptr1
	tya
	clc
	adc     #>(_bits)
	sta     ptr1+1
	ldy     #<(_bits)
	lda     (ptr1),y
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; if (pbouncing || phit || pkill) {
;
L1D8A:	lda     _pbouncing
	bne     L1DA9
	lda     _phit
	bne     L1DA9
	lda     _pkill
	beq     L1DA8
;
; psprid = CELL_HIT;
;
L1DA9:	lda     #$09
;
; } else if (pspin) {
;
	jmp     L2967
L1DA8:	lda     _pspin
	beq     L1DAE
;
; psprid = CELL_SPIN_CYCLE + ((frame_counter >> 4) & 3);
;
	ldx     #$00
	lda     _frame_counter
	jsr     asrax4
	and     #$03
	clc
	adc     #$05
	bcc     L2967
;
; } else if (ppossee || pgotten) {
;
	jmp     L2967
L1DAE:	lda     _ppossee
	bne     L1DB7
	lda     _pgotten
	beq     L1DB6
;
; if (pvx > PLAYER_VX_MIN || pvx < -PLAYER_VX_MIN) {
;
L1DB7:	lda     _pvx
	cmp     #$11
	lda     _pvx+1
	sbc     #$00
	bvs     L1DBC
	eor     #$80
L1DBC:	bmi     L1DBA
	lda     _pvx
	cmp     #$F0
	lda     _pvx+1
	sbc     #$FF
	bvc     L1DBE
	eor     #$80
L1DBE:	bpl     L1DB9
;
; psprid = CELL_WALK_CYCLE + ((prx >> 3) & 3);
;
L1DBA:	ldx     #$00
	lda     _prx
	jsr     asrax3
	and     #$03
	clc
	adc     #$01
	bcc     L2967
;
; } else {
;
	jmp     L2967
;
; psprid = CELL_IDLE;
;
L1DB9:	lda     #$00
;
; } else {
;
	jmp     L2967
;
; psprid = CELL_AIRBORNE;
;
L1DB6:	lda     #$04
L2967:	sta     _psprid
;
; psprid += pfacing;
;
	lda     _pfacing
	clc
	adc     _psprid
	sta     _psprid
;
; prx_old = prx;
;
	lda     _prx
	sta     _prx_old
;
; pry_old = pry;
;
	lda     _pry
	sta     _pry_old
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_update_unsigned_char_arrays (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_update_unsigned_char_arrays: near

.segment	"CODE"

;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v", _en_t);
;
	lda     __en_t
;
; __asm__ ("sta %v, y", en_t);
;
	sta     _en_t,y
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("sta %v, y", en_s);
;
	sta     _en_s,y
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("sta %v, y", en_x);
;
	sta     _en_x,y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("sta %v, y", en_y);
;
	sta     _en_y,y
;
; __asm__ ("lda %v", _en_x1);
;
	lda     __en_x1
;
; __asm__ ("sta %v, y", en_x1);
;
	sta     _en_x1,y
;
; __asm__ ("lda %v", _en_x2);
;
	lda     __en_x2
;
; __asm__ ("sta %v, y", en_x2);
;
	sta     _en_x2,y
;
; __asm__ ("lda %v", _en_y1);
;
	lda     __en_y1
;
; __asm__ ("sta %v, y", en_y1);
;
	sta     _en_y1,y
;
; __asm__ ("lda %v", _en_y2);
;
	lda     __en_y2
;
; __asm__ ("sta %v, y", en_y2);
;
	sta     _en_y2,y
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("sta %v, y", en_mx);
;
	sta     _en_mx,y
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("sta %v, y", en_my);
;
	sta     _en_my,y
;
; __asm__ ("lda %v", _en_ct);
;
	lda     __en_ct
;
; __asm__ ("sta %v, y", en_ct);
;
	sta     _en_ct,y
;
; __asm__ ("lda %v", _en_facing);
;
	lda     __en_facing
;
; __asm__ ("sta %v, y", en_facing);
;
	sta     _en_facing,y
;
; __asm__ ("lda %v", _en_state);
;
	lda     __en_state
;
; __asm__ ("sta %v, y", en_state);
;
	sta     _en_state,y
;
; enf_x [gpit] = _enf_x; enf_vx [gpit] = _enf_vx;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2979
	inx
	clc
L2979:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	lda     __enf_x
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     __enf_x+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L297A
	inx
	clc
L297A:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	lda     __enf_vx
	dey
	sta     (ptr1),y
	iny
	lda     __enf_vx+1
	sta     (ptr1),y
;
; enf_y [gpit] = _enf_y; enf_vy [gpit] = _enf_vy;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L297B
	inx
	clc
L297B:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	lda     __enf_y
	dey
	sta     (ptr1),y
	iny
	lda     __enf_y+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L297C
	inx
	clc
L297C:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	lda     __enf_vy
	dey
	sta     (ptr1),y
	iny
	lda     __enf_vy+1
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_facing (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_facing: near

.segment	"CODE"

;
; _en_facing = rda << 2;
;
	lda     _rda
	asl     a
	asl     a
	sta     __en_facing
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_init_fp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_init_fp: near

.segment	"CODE"

;
; _enf_x = _en_x << 6;
;
	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y = _en_y << 6;
;
	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_boioiong_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_boioiong_init: near

.segment	"CODE"

;
; enems_init_fp ();
;
	jsr     _enems_init_fp
;
; _enf_vy = 0; 
;
	ldx     #$00
	txa
	sta     __enf_vy
	sta     __enf_vy+1
;
; _enf_vx = ADD_SIGN2 (_en_x2, _en_x1, rdm << FIXBITS);
;
	lda     __en_x1
	cmp     __en_x2
	bne     L1E0A
	txa
	jmp     L1E16
L1E0A:	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L1E13
	beq     L1E13
	lda     _rdm
	jsr     aslax4
	jsr     aslax2
	jmp     L1E16
L1E13:	lda     _rdm
	jsr     aslax4
	jsr     aslax2
	jsr     negax
L1E16:	sta     __enf_vx
	stx     __enf_vx+1
;
; _en_ct = 0;
;
	lda     #$00
	sta     __en_ct
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_load: near

.segment	"CODE"

;
; bankswitch (l_enems_chr_rombank [level]);
;
	ldy     _level
	lda     _l_enems_chr_rombank,y
	jsr     _bankswitch
;
; vram_adr (c_enems + (n_pant << 2) + (n_pant << 3)); 
;
	ldx     #$00
	lda     _n_pant
	jsr     aslax2
	clc
	adc     _c_enems
	sta     ptr1
	txa
	adc     _c_enems+1
	sta     ptr1+1
	ldx     #$00
	lda     _n_pant
	jsr     aslax3
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     _vram_adr
;
; rda = VRAM_READ;  // Dummy read.
;
	lda     $2007
	sta     _rda
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     #$00
L2987:	sta     _gpit
	cmp     #$03
	bcc     L2988
;
; }
;
	rts
;
; _en_t = VRAM_READ;
;
L2988:	lda     $2007
	sta     __en_t
;
; _en_state = 0;
;
	lda     #$00
	sta     __en_state
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; _en_y1 = rda & 0xf0;
;
	and     #$F0
	sta     __en_y1
;
; _en_x1 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x1
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; _en_y2 = rda & 0xf0;
;
	and     #$F0
	sta     __en_y2
;
; _en_x2 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x2
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; rdd = rda & 0xf0;  // Used for respawn speed!
;
	and     #$F0
	sta     _rdd
;
; rdm = rda & 0x0f;  // Actual speed.
;
	lda     _rda
	and     #$0F
	sta     _rdm
;
; _en_x = _en_x1;
;
	lda     __en_x1
	sta     __en_x
;
; _en_y = _en_y1;
;
	lda     __en_y1
	sta     __en_y
;
; switch (_en_t & 0x3f) {
;
	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L1E5C
	cmp     #$02
	beq     L1E5C
	cmp     #$03
	beq     L1E5C
	cmp     #$04
	beq     L1E5C
	cmp     #$05
	jeq     L1EB5
	cmp     #$06
	jeq     L1ED0
	cmp     #$09
	jeq     L1EDA
	cmp     #$0B
	jeq     L1EE5
	cmp     #$0C
	jeq     L1EEE
	cmp     #$0D
	jeq     L1EF6
	cmp     #$14
	jeq     L1EFE
	cmp     #$3F
	jeq     L1F0D
	jmp     L1E5A
;
; _en_ct = 0;   
;
L1E5C:	lda     #$00
	sta     __en_ct
;
; _en_s = (_en_t - 1) << 3;
;
	lda     __en_t
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	sta     __en_s
;
; _en_mx = ADD_SIGN2 (_en_x2, _en_x1, rdm);
;
	lda     __en_x1
	cmp     __en_x2
	bne     L1E6E
	lda     #$00
	jmp     L1E7A
L1E6E:	ldx     #$00
	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L1E77
	beq     L1E77
	lda     _rdm
	jmp     L1E7A
L1E77:	lda     _rdm
	jsr     negax
L1E7A:	sta     __en_mx
;
; _en_my = ADD_SIGN2 (_en_y2, _en_y1, rdm);
;
	lda     __en_y1
	cmp     __en_y2
	bne     L1E83
	lda     #$00
	jmp     L1E8F
L1E83:	ldx     #$00
	lda     __en_y2
	sec
	sbc     __en_y1
	bcc     L1E8C
	beq     L1E8C
	lda     _rdm
	jmp     L1E8F
L1E8C:	lda     _rdm
	jsr     negax
L1E8F:	sta     __en_my
;
; if (rdm == 1) {
;
	lda     _rdm
	cmp     #$01
	bne     L1E93
;
; en_status [gpit] = 1; 
;
	ldy     _gpit
	sta     _en_status,y
;
; } else {
;
	jmp     L1E99
;
; en_status [gpit] = 0;
;
L1E93:	ldy     _gpit
	lda     #$00
	sta     _en_status,y
;
; _en_mx >>= 1;
;
	tax
	lda     __en_mx
	bpl     L1E9F
	dex
L1E9F:	jsr     asrax1
	sta     __en_mx
;
; _en_my >>= 1;
;
	ldx     #$00
	lda     __en_my
	bpl     L1EA2
	dex
L1EA2:	jsr     asrax1
	sta     __en_my
;
; if (_en_x1 > _en_x2) { rda = _en_x1; _en_x1 = _en_x2; _en_x2 = rda; }
;
L1E99:	lda     __en_x1
	sec
	sbc     __en_x2
	bcc     L1EA4
	beq     L1EA4
	lda     __en_x1
	sta     _rda
	lda     __en_x2
	sta     __en_x1
	lda     _rda
	sta     __en_x2
;
; if (_en_y1 > _en_y2) { rda = _en_y1; _en_y1 = _en_y2; _en_y2 = rda; }
;
L1EA4:	lda     __en_y1
	sec
	sbc     __en_y2
	jcc     L1E5A
	jeq     L1E5A
	lda     __en_y1
	sta     _rda
	lda     __en_y2
	sta     __en_y1
	lda     _rda
	sta     __en_y2
;
; break;
;
	jmp     L1E5A
;
; if (_en_x2 > _en_x1) _en_my = 2;
;
L1EB5:	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L1EB6
	beq     L1EB6
	lda     #$02
;
; else if (_en_x2 < _en_x1) _en_my = 0;
;
	jmp     L2984
L1EB6:	lda     __en_x2
	cmp     __en_x1
	bcs     L1EBB
	lda     #$00
;
; else if (_en_y2 > _en_y1) _en_my = 3;
;
	jmp     L2984
L1EBB:	lda     __en_y2
	sec
	sbc     __en_y1
	bcc     L1EC0
	beq     L1EC0
	lda     #$03
;
; else _en_my = 1;
;
	jmp     L2984
L1EC0:	lda     #$01
L2984:	sta     __en_my
;
; _en_s = STEADY_SHOOTERS_BASE_SPRID + _en_my;
;
	clc
	adc     #$22
	sta     __en_s
;
; _en_ct = _en_mx = rda;
;
	lda     _rda
	sta     __en_mx
	sta     __en_ct
;
; break;
;
	jmp     L1E5A
;
; enems_init_fp ();
;
L1ED0:	jsr     _enems_init_fp
;
; _enf_vx = _enf_vy = 0;
;
	lda     #$00
	sta     __enf_vy
	sta     __enf_vy+1
	sta     __enf_vx
	sta     __enf_vx+1
;
; _en_ct = FANTY_BASE_TIMER;
;
	lda     #$78
	sta     __en_ct
;
; _en_s = FANTY_BASE_SPRID;
;
	lda     #$32
	sta     __en_s
;
; break;
;
	jmp     L1E5A
;
; _en_my = PEZON_WAIT + (rda << 3); // Speed in colocador defines idle time! (x8)
;
L1EDA:	ldx     #$00
	lda     _rda
	jsr     aslax3
	clc
	adc     #$32
	sta     __en_my
;
; _en_mx = _en_my;
;
	sta     __en_mx
;
; _en_s = PEZONS_BASE_SPRID;
;
	lda     #$3A
	sta     __en_s
;
; break;
;
	jmp     L1E5A
;
; _en_state = 0; _en_ct = MONOCOCO_BASE_TIME_HIDDEN - (rand8 () & 0x15);
;
L1EE5:	lda     #$00
	sta     __en_state
	lda     #$96
	jsr     pusha0
	jsr     _rand8
	and     #$15
	jsr     tossuba0
	sta     __en_ct
;
; _en_s = MONOCOCO_BASE_SPRID;
;
	lda     #$22
	sta     __en_s
;
; break;
;
	jmp     L1E5A
;
; enems_init_fp ();
;
L1EEE:	jsr     _enems_init_fp
;
; _en_state = 0;
;
	lda     #$00
	sta     __en_state
;
; CATACROCK_WAIT = _en_ct = rdm << 5;
;
	tax
	lda     _rdm
	jsr     aslax4
	asl     a
	sta     __en_ct
;
; break;
;
	jmp     L1F10
;
; enems_boioiong_init ();
;
L1EF6:	jsr     _enems_boioiong_init
;
; _en_mx = rdm; // Store
;
	lda     _rdm
	sta     __en_mx
;
; _en_s = BOIOIONG_BASE_SPRID;
;
	lda     #$36
	sta     __en_s
;
; break;
;
	jmp     L1E5A
;
; _en_ct = 0;
;
L1EFE:	lda     #$00
	sta     __en_ct
;
; en_rawv [gpit] = _en_s = COMPILED_ENEMS_BASE_SPRID;
;
	lda     #<(_en_rawv)
	ldx     #>(_en_rawv)
	clc
	adc     _gpit
	bcc     L1F03
	inx
L1F03:	jsr     pushax
	lda     #$2A
	sta     __en_s
	ldy     #$00
	jsr     staspidx
;
; en_behptr [gpit] = en_behptrs [rda];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2985
	inx
	clc
L2985:	adc     #<(_en_behptr)
	tay
	txa
	adc     #>(_en_behptr)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L2986
	inx
	clc
L2986:	adc     #<(_en_behptrs)
	sta     ptr1
	txa
	adc     #>(_en_behptrs)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; _en_x1 = 1;  // Repurpose for speed
;
	lda     #$01
	sta     __en_x1
;
; break;
;
	jmp     L1E5A
;
; _en_mx = rda;
;
L1F0D:	lda     _rda
L1F10:	sta     __en_mx
;
; en_life [gpit] = ENEMS_LIFE_GAUGE;
;
L1E5A:	ldy     _gpit
	lda     #$01
	sta     _en_life,y
;
; en_cttouched [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_cttouched,y
;
; en_flags [gpit] = 0;
;
	ldy     _gpit
	sta     _en_flags,y
;
; en_invincible [gpit] = 0;
;
	ldy     _gpit
	sta     _en_invincible,y
;
; enems_update_unsigned_char_arrays ();
;
	jsr     _enems_update_unsigned_char_arrays
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L2987

.endproc

; ---------------------------------------------------------------
; void __near__ enems_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_kill: near

.segment	"CODE"

;
; en_flags [gpit] |= EN_STATE_DEAD;
;
	lda     #<(_en_flags)
	ldx     #>(_en_flags)
	clc
	adc     _gpit
	bcc     L1F25
	inx
L1F25:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$01
	sta     (ptr1),y
;
; if (_en_t != 5)
;
	lda     __en_t
	cmp     #$05
	beq     L1F27
;
; ++ pkilled;
;
	inc     _pkilled
;
; }
;
L1F27:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_hit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_hit: near

.segment	"CODE"

;
; _en_facing = ((_en_x < prx) ? 0 : 4);
;
	lda     __en_x
	cmp     _prx
	bcs     L1F2F
	lda     #$00
	jmp     L1F31
L1F2F:	lda     #$04
L1F31:	sta     __en_facing
;
; en_cttouched [gpit] = ENEMS_TOUCHED_FRAMES;
;
	ldy     _gpit
	lda     #$10
	sta     _en_cttouched,y
;
; -- en_life [gpit]; 
;
	lda     #<(_en_life)
	ldx     #>(_en_life)
	clc
	adc     _gpit
	bcc     L1F39
	inx
L1F39:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (en_life [gpit] == 0) 
;
	ldy     _gpit
	lda     _en_life,y
;
; enems_kill ();
;
	jeq     _enems_kill
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_move: near

.segment	"CODE"

;
; pgotten = pgtmx = pgtmy = 0;
;
	lda     #$00
	sta     _pgtmy
	sta     _pgtmy+1
	sta     _pgtmx
	sta     _pgtmx+1
	sta     _pgotten
;
; touched = 0;
;
	sta     _touched
;
; ++ en_initial; if (en_initial >= 3) en_initial = 0;
;
	inc     _en_initial
	lda     _en_initial
	cmp     #$03
	bcc     L1F47
	lda     #$00
	sta     _en_initial
;
; gpit = en_initial;
;
L1F47:	lda     _en_initial
	sta     _gpit
;
; gpjt = 3; while (gpjt --) {
;
	lda     #$03
	sta     _gpjt
L1F4F:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	bne     L29D5
;
; }
;
	rts
;
; gpit += 2; if (gpit > 2) gpit -=3;
;
L29D5:	lda     #$02
	clc
	adc     _gpit
	sta     _gpit
	cmp     #$03
	bcc     L1F54
	lda     _gpit
	sec
	sbc     #$03
	sta     _gpit
;
; __asm__ ("ldy %v", gpit);
;
L1F54:	ldy     _gpit
;
; __asm__ ("lda %v, y", en_t);
;
	lda     _en_t,y
;
; __asm__ ("sta %v", _en_t);
;
	sta     __en_t
;
; __asm__ ("lda %v, y", en_s);
;
	lda     _en_s,y
;
; __asm__ ("sta %v", _en_s);
;
	sta     __en_s
;
; __asm__ ("lda %v, y", en_x);
;
	lda     _en_x,y
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v, y", en_y);
;
	lda     _en_y,y
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v, y", en_x1);
;
	lda     _en_x1,y
;
; __asm__ ("sta %v", _en_x1);
;
	sta     __en_x1
;
; __asm__ ("lda %v, y", en_x2);
;
	lda     _en_x2,y
;
; __asm__ ("sta %v", _en_x2);
;
	sta     __en_x2
;
; __asm__ ("lda %v, y", en_y1);
;
	lda     _en_y1,y
;
; __asm__ ("sta %v", _en_y1);
;
	sta     __en_y1
;
; __asm__ ("lda %v, y", en_y2);
;
	lda     _en_y2,y
;
; __asm__ ("sta %v", _en_y2);
;
	sta     __en_y2
;
; __asm__ ("lda %v, y", en_mx);
;
	lda     _en_mx,y
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v, y", en_my);
;
	lda     _en_my,y
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; __asm__ ("lda %v, y", en_ct);
;
	lda     _en_ct,y
;
; __asm__ ("sta %v", _en_ct);
;
	sta     __en_ct
;
; __asm__ ("lda %v, y", en_facing);
;
	lda     _en_facing,y
;
; __asm__ ("sta %v", _en_facing);
;
	sta     __en_facing
;
; __asm__ ("lda %v, y", en_state);
;
	lda     _en_state,y
;
; __asm__ ("sta %v", _en_state);
;
	sta     __en_state
;
; _enf_x = enf_x [gpit]; _enf_vx = enf_vx [gpit];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L29B8
	inx
	clc
L29B8:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     __enf_x+1
	dey
	lda     (ptr1),y
	sta     __enf_x
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L29B9
	inx
	clc
L29B9:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_vx+1
	dey
	lda     (ptr1),y
	sta     __enf_vx
;
; _enf_y = enf_y [gpit]; _enf_vy = enf_vy [gpit];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L29BA
	inx
	clc
L29BA:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_y+1
	dey
	lda     (ptr1),y
	sta     __enf_y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L29BB
	inx
	clc
L29BB:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_vy+1
	dey
	lda     (ptr1),y
	sta     __enf_vy
;
; if (_en_t == 0) continue;
;
	lda     __en_t
	jeq     L1F4F
;
; en_is_alive = !(en_flags [gpit] & EN_STATE_DEAD);
;
	ldy     _gpit
	lda     _en_flags,y
	and     #$01
	jsr     bnega
	sta     _en_is_alive
;
; en_spr = 0xff;
;
	lda     #$FF
	sta     _en_spr
;
; en_spr_x_mod = 0;
;
	lda     #$00
	sta     _en_spr_x_mod
;
; if (en_cttouched [gpit]) {
;
	ldy     _gpit
	lda     _en_cttouched,y
	jeq     L1F8A
;
; -- en_cttouched [gpit];
;
	lda     #<(_en_cttouched)
	ldx     #>(_en_cttouched)
	clc
	adc     _gpit
	bcc     L1F90
	inx
L1F90:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; rda = frame_counter & 0xf;
;
	lda     _frame_counter
	and     #$0F
	sta     _rda
;
; _en_x + jitter [rda],
;
	jsr     decsp3
	ldy     _rda
	lda     _jitter,y
	clc
	adc     __en_x
	ldy     #$02
	sta     (sp),y
;
; _en_y + jitter [15 - rda] + SPRITE_ADJUST, 
;
	lda     #$0F
	sec
	sbc     _rda
	sta     ptr1
;
; _en_x + jitter [rda],
;
	lda     #$00
;
; _en_y + jitter [15 - rda] + SPRITE_ADJUST, 
;
	clc
	adc     #>(_jitter)
	sta     ptr1+1
	ldy     #<(_jitter)
	lda     (ptr1),y
	clc
	adc     __en_y
	bcc     L29D3
	clc
L29D3:	adc     #$30
	sec
	sbc     #$0C
	bcs     L29BC
	sec
L29BC:	sbc     #$10
	bcs     L29BD
	sec
L29BD:	sbc     #$01
	ldy     #$01
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$41
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; if (en_life [gpit]) en_spr = en_spr_id [gpit];
;
	ldy     _gpit
	lda     _en_life,y
	beq     L1FA1
	ldy     _gpit
	lda     _en_spr_id,y
	sta     _en_spr
;
; en_spr_x_mod = half_life;
;
L1FA1:	lda     _half_life
	sta     _en_spr_x_mod
;
; if (en_cttouched [gpit] == 0 && en_life [gpit])
;
	ldy     _gpit
	lda     _en_cttouched,y
	jne     L23B1
	ldy     _gpit
	lda     _en_life,y
	jeq     L23B1
;
; en_invincible [gpit] = ENEMS_INVINCIBILITY;
;
	ldy     _gpit
	lda     #$19
	sta     _en_invincible,y
;
; } else
;
	jmp     L23B1
;
; if (en_is_alive) {
;
L1F8A:	lda     _en_is_alive
	jeq     L23B1
;
; pregotten = (prx + 7 >= _en_x && prx <= _en_x + 15);
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L1FBD
	inx
L1FBD:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L1FBE
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0F
	bcc     L1FBF
	ldx     #$01
L1FBF:	jsr     tosicmp
	bcc     L1FBC
	beq     L1FBC
L1FBE:	lda     #$00
	jmp     L1FC0
L1FBC:	lda     #$01
L1FC0:	sta     _pregotten
;
; en_fr = ((((_en_mx) ? _en_x : _en_y)+4) >> 3) & 1;
;
	lda     __en_mx
	beq     L1FC7
	lda     __en_x
	jmp     L29A8
L1FC7:	lda     __en_y
L29A8:	ldx     #$00
	clc
	adc     #$04
	bcc     L1FCB
	inx
L1FCB:	jsr     shrax3
	and     #$01
	sta     _en_fr
;
; switch (_en_t & 63) {
;
	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L1FD6
	cmp     #$02
	beq     L1FD6
	cmp     #$03
	beq     L1FD6
	cmp     #$04
	beq     L1FD6
	cmp     #$05
	jeq     L1FFC
	cmp     #$06
	jeq     L2011
	cmp     #$09
	jeq     L20C3
	cmp     #$0B
	jeq     L2100
	cmp     #$0C
	jeq     L212A
	cmp     #$0D
	jeq     L2160
	cmp     #$14
	jeq     L21EE
	cmp     #$3F
	jeq     L21EA
	jmp     L1FCE
;
; if (!en_status [gpit] || half_life) {
;
L1FD6:	ldy     _gpit
	lda     _en_status,y
	beq     L1FD8
	lda     _half_life
	beq     L1FE8
;
; _en_x += _en_mx;
;
L1FD8:	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; _en_y += _en_my;
;
	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; if (_en_x == _en_x1 || _en_x == _en_x2) _en_mx = -_en_mx;
;
	lda     __en_x1
	cmp     __en_x
	beq     L1FE3
	lda     __en_x2
	cmp     __en_x
	bne     L1FE2
L1FE3:	ldx     #$00
	lda     __en_mx
	bpl     L1FE7
	dex
L1FE7:	jsr     negax
	sta     __en_mx
;
; if (_en_y == _en_y1 || _en_y == _en_y2) _en_my = -_en_my;      
;
L1FE2:	lda     __en_y1
	cmp     __en_y
	beq     L1FE9
	lda     __en_y2
	cmp     __en_y
	bne     L1FE8
L1FE9:	ldx     #$00
	lda     __en_my
	bpl     L1FED
	dex
L1FED:	jsr     negax
	sta     __en_my
;
; rda = _en_mx ? (_en_mx < 0) : (_en_my < 0); enems_facing ();
;
L1FE8:	lda     __en_mx
	beq     L1FF0
	lda     __en_mx
	jmp     L29D1
L1FF0:	lda     __en_my
L29D1:	asl     a
	lda     #$00
	rol     a
	sta     _rda
	jsr     _enems_facing
;
; en_spr = _en_s + en_fr + _en_facing;
;
	lda     __en_s
	clc
	adc     _en_fr
	bcc     L29BE
	clc
L29BE:	adc     __en_facing
;
; break;
;
	jmp     L29CC
;
; if (ticker == 0) {
;
L1FFC:	lda     _ticker
	bne     L2002
;
; if (_en_ct) -- _en_ct; else {
;
	lda     __en_ct
	beq     L1FFF
	dec     __en_ct
	jmp     L2002
;
; _en_ct = _en_mx; // reset counter
;
L1FFF:	lda     __en_mx
	sta     __en_ct
;
; rda = _en_my;   // direction
;
	lda     __en_my
	sta     _rda
;
; rdx = _en_x + 4;
;
	lda     __en_x
	clc
	adc     #$04
	sta     _rdx
;
; rdy = _en_y + 4;
;
	lda     __en_y
	clc
	adc     #$04
	sta     _rdy
;
; cocos_shoot_linear ();
;
	jsr     _cocos_shoot_linear
;
; en_spr = _en_s;
;
L2002:	lda     __en_s
;
; break;
;
	jmp     L29CC
;
; if (_en_ct) _en_ct --; else {
;
L2011:	lda     __en_ct
	beq     L2012
	lda     __en_ct
	sec
	sbc     #$01
	sta     __en_ct
	jmp     L20AF
;
; if (px < _enf_x) {
;
L2012:	lda     _px
	cmp     __enf_x
	lda     _px+1
	sbc     __enf_x+1
	bvc     L299D
	eor     #$80
L299D:	bpl     L2016
;
; _enf_vx -= FANTY_A; if (_enf_vx < -FANTY_MAXV) _enf_vx = -FANTY_MAXV;
;
	lda     __enf_vx
	sec
	sbc     #$04
	sta     __enf_vx
	bcs     L201A
	dec     __enf_vx+1
L201A:	lda     __enf_vx
	cmp     #$D0
	lda     __enf_vx+1
	sbc     #$FF
	bvc     L201D
	eor     #$80
L201D:	bpl     L2024
	ldx     #$FF
	lda     #$D0
;
; } else {
;
	jmp     L29CD
;
; _enf_vx += FANTY_A; if (_enf_vx > FANTY_MAXV) _enf_vx = FANTY_MAXV;
;
L2016:	lda     #$04
	clc
	adc     __enf_vx
	sta     __enf_vx
	bcc     L2023
	inc     __enf_vx+1
L2023:	lda     __enf_vx
	cmp     #$31
	lda     __enf_vx+1
	sbc     #$00
	bvs     L2026
	eor     #$80
L2026:	bpl     L2024
	ldx     #$00
	lda     #$30
L29CD:	sta     __enf_vx
	stx     __enf_vx+1
;
; if (py < _enf_y) {
;
L2024:	lda     _py
	cmp     __enf_y
	lda     _py+1
	sbc     __enf_y+1
	bvc     L299E
	eor     #$80
L299E:	bpl     L2029
;
; _enf_vy -= FANTY_A; if (_enf_vy < -FANTY_MAXV) _enf_vy = -FANTY_MAXV;
;
	lda     __enf_vy
	sec
	sbc     #$04
	sta     __enf_vy
	bcs     L202D
	dec     __enf_vy+1
L202D:	lda     __enf_vy
	cmp     #$D0
	lda     __enf_vy+1
	sbc     #$FF
	bvc     L2030
	eor     #$80
L2030:	bpl     L2037
	ldx     #$FF
	lda     #$D0
;
; } else {
;
	jmp     L29CE
;
; _enf_vy += FANTY_A; if (_enf_vy > FANTY_MAXV) _enf_vy = FANTY_MAXV;
;
L2029:	lda     #$04
	clc
	adc     __enf_vy
	sta     __enf_vy
	bcc     L2036
	inc     __enf_vy+1
L2036:	lda     __enf_vy
	cmp     #$31
	lda     __enf_vy+1
	sbc     #$00
	bvs     L2039
	eor     #$80
L2039:	bpl     L2037
	ldx     #$00
	lda     #$30
L29CE:	sta     __enf_vy
	stx     __enf_vy+1
;
; _enf_x += _enf_vx; 
;
L2037:	lda     __enf_vx
	clc
	adc     __enf_x
	sta     __enf_x
	lda     __enf_vx+1
	adc     __enf_x+1
	sta     __enf_x+1
;
; if (_enf_x < 0) _enf_x = 0;
;
	ldx     __enf_x+1
	cpx     #$80
	bcc     L203E
	lda     #$00
	sta     __enf_x
	sta     __enf_x+1
;
; if (_enf_x > 15360) _enf_x = 15360;
;
L203E:	lda     __enf_x
	cmp     #$01
	lda     __enf_x+1
	sbc     #$3C
	bvs     L2044
	eor     #$80
L2044:	bpl     L2042
	ldx     #$3C
	lda     #$00
	sta     __enf_x
	stx     __enf_x+1
;
; _en_x = _enf_x >> 6;
;
L2042:	lda     __enf_x
	ldx     __enf_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; if (_enf_vx) {
;
	lda     __enf_vx
	ora     __enf_vx+1
	jeq     L206E
;
; cy1 = (_en_y + 4) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$04
	bcc     L204E
	inx
L204E:	jsr     shrax4
	sta     _cy1
;
; cy2 = (_en_y + 11) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0B
	bcc     L2052
	inx
L2052:	jsr     shrax4
	sta     _cy2
;
; if (_enf_vx > 0) {
;
	lda     __enf_vx
	cmp     #$01
	lda     __enf_vx+1
	sbc     #$00
	bvs     L2055
	eor     #$80
L2055:	bpl     L2053
;
; cx1 = cx2 = (_en_x + 11) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L205A
	inx
L205A:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cx2
	sec
	sbc     #$01
	bcs     L205F
	dex
L205F:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L29AC
;
; cx1 = cx2 = (_en_x + 4) >> 4;
;
L2053:	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L2066
	inx
L2066:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cx1
	clc
	adc     #$01
	bcc     L206B
	inx
L206B:	jsr     shlax4
	sec
	sbc     #$04
L29AC:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L206F
	lda     _at2
	and     #$08
	beq     L206E
;
; _enf_vx = -_enf_vx;
;
L206F:	lda     __enf_vx
	ldx     __enf_vx+1
	jsr     negax
	sta     __enf_vx
	stx     __enf_vx+1
;
; _en_x = rda; 
;
	lda     _rda
	sta     __en_x
;
; _enf_x = rda << FIXBITS;
;
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y += _enf_vy; 
;
L206E:	lda     __enf_vy
	clc
	adc     __enf_y
	sta     __enf_y
	lda     __enf_vy+1
	adc     __enf_y+1
	sta     __enf_y+1
;
; if (_enf_y < 0) _enf_y = 0;
;
	ldx     __enf_y+1
	cpx     #$80
	bcc     L207B
	lda     #$00
	sta     __enf_y
	sta     __enf_y+1
;
; if (_enf_y > 11264) _enf_y = 11264;
;
L207B:	lda     __enf_y
	cmp     #$01
	lda     __enf_y+1
	sbc     #$2C
	bvs     L2081
	eor     #$80
L2081:	bpl     L207F
	ldx     #$2C
	lda     #$00
	sta     __enf_y
	stx     __enf_y+1
;
; _en_y = _enf_y >> 6;
;
L207F:	lda     __enf_y
	ldx     __enf_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
;
; if (_enf_vy) {
;
	lda     __enf_vy
	ora     __enf_vy+1
	jeq     L20AF
;
; cx1 = (_en_x + 4) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L208B
	inx
L208B:	jsr     shrax4
	sta     _cx1
;
; cx2 = (_en_x + 11) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L208F
	inx
L208F:	jsr     shrax4
	sta     _cx2
;
; if (_enf_vy > 0) {
;
	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$00
	bvs     L2092
	eor     #$80
L2092:	bpl     L2090
;
; rdb = 12;
;
	lda     #$0C
	sta     _rdb
;
; cy1 = cy2 = (_en_y + 11) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0B
	bcc     L2099
	inx
L2099:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L209E
	dex
L209E:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L29AD
;
; rdb = 8;
;
L2090:	lda     #$08
	sta     _rdb
;
; cy1 = cy2 = (_en_y + 4) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$04
	bcc     L20A7
	inx
L20A7:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L20AC
	inx
L20AC:	jsr     shlax4
	sec
	sbc     #$04
L29AD:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & rdb) || (at2 & rdb)) {
;
	lda     _rdb
	and     _at1
	pha
	pla
	bne     L20B0
	lda     _rdb
	and     _at2
	pha
	pla
	beq     L20AF
;
; _enf_vy = -_enf_vy;
;
L20B0:	lda     __enf_vy
	ldx     __enf_vy+1
	jsr     negax
	sta     __enf_vy
	stx     __enf_vy+1
;
; _en_y = rda;
;
	lda     _rda
	sta     __en_y
;
; _enf_y = rda << FIXBITS;
;
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; en_fr = half_life;
;
L20AF:	lda     _half_life
	sta     _en_fr
;
; rda = (prx < _en_x); enems_facing ();
;
	lda     _prx
	cmp     __en_x
	jsr     boolult
	sta     _rda
	jsr     _enems_facing
;
; en_spr = _en_s + en_fr + _en_facing;
;
	lda     __en_s
	clc
	adc     _en_fr
	bcc     L29BF
	clc
L29BF:	adc     __en_facing
;
; break;
;
	jmp     L29CC
;
; _en_x1, _en_y1 + SPRITE_ADJUST, 
;
L20C3:	jsr     decsp3
	lda     __en_x1
	ldy     #$02
	sta     (sp),y
	lda     __en_y1
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L29C0
	sec
L29C0:	sbc     #$10
	bcs     L29C1
	sec
L29C1:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_OCCLUDING_CELL]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_OCCLUDING_CELL]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$43
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; switch (_en_state) {
;
	lda     __en_state
;
; }
;
	beq     L20D3
	cmp     #$01
	beq     L20E3
	jmp     L20D1
;
; if (_en_mx) {
;
L20D3:	lda     __en_mx
	beq     L20D4
;
; -- _en_mx;
;
	dec     __en_mx
	lda     __en_mx
	jpl     L20D1
;
; } else {
;
	jmp     L20D1
;
; _en_state = 1;
;
L20D4:	lda     #$01
	sta     __en_state
;
; _enf_y = _en_y1 << 6;
;
	ldx     #$00
	lda     __en_y1
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; _enf_vy = -PEZON_THRUST;
;
	ldx     #$FE
	lda     #$00
	sta     __enf_vy
	stx     __enf_vy+1
;
; sfx_play (SFX_FLOAT, 1);
;
	lda     #$10
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; break;
;
	jmp     L20D1
;
; _enf_vy += PEZON_G;
;
L20E3:	lda     #$10
	clc
	adc     __enf_vy
	sta     __enf_vy
	bcc     L20E6
	inc     __enf_vy+1
;
; if (_enf_vy > PEZON_VY_FALLING_MAX) _enf_vy = PEZON_VY_FALLING_MAX;
;
L20E6:	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$01
	bvs     L20E9
	eor     #$80
L20E9:	bpl     L20E7
	ldx     #$01
	lda     #$00
	sta     __enf_vy
	stx     __enf_vy+1
;
; _enf_y += _enf_vy;
;
L20E7:	lda     __enf_vy
	clc
	adc     __enf_y
	sta     __enf_y
	lda     __enf_vy+1
	adc     __enf_y+1
	sta     __enf_y+1
;
; _en_y = _enf_y >> 6;
;
	lda     __enf_y
	ldx     __enf_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
;
; if (_en_y >= _en_y1) {
;
	cmp     __en_y1
	bcc     L20F0
;
; _en_state = 0;
;
	lda     #$00
	sta     __en_state
;
; _en_mx = _en_my;
;
	lda     __en_my
	sta     __en_mx
;
; } else {
;
	jmp     L20D1
;
; en_spr = PEZONS_BASE_SPRID + (_enf_vy >= -64);
;
L20F0:	lda     __enf_vy
	cmp     #$C0
	lda     __enf_vy+1
	sbc     #$FF
	bvs     L20FB
	eor     #$80
L20FB:	asl     a
	lda     #$00
	rol     a
	clc
	adc     #$3A
	sta     _en_spr
;
; _en_facing = 0;
;
L20D1:	lda     #$00
	sta     __en_facing
;
; break;
;
	jmp     L1FCE
;
; -- _en_ct; if (!_en_ct) {
;
L2100:	dec     __en_ct
	lda     __en_ct
	bne     L2102
;
; _en_state = (_en_state + 1) & 3; _en_ct = monococo_state_times [_en_state] - (rand8 () & 0x15);
;
	lda     __en_state
	clc
	adc     #$01
	and     #$03
	sta     __en_state
	ldy     __en_state
	lda     _monococo_state_times,y
	jsr     pusha0
	jsr     _rand8
	and     #$15
	jsr     tossuba0
	sta     __en_ct
;
; if (_en_state == 2 && _en_ct == MONOCOCO_FIRE_COCO_AT) {
;
L2102:	lda     __en_state
	cmp     #$02
	bne     L210D
	lda     __en_ct
	cmp     #$19
	bne     L210D
;
; rdx = _en_x + 4; rdy = _en_y + 4; cocos_shoot_aimed ();
;
	lda     __en_x
	clc
	adc     #$04
	sta     _rdx
	lda     __en_y
	clc
	adc     #$04
	sta     _rdy
	jsr     _cocos_shoot_aimed
;
; rda = (prx < rdx); enems_facing ();
;
L210D:	lda     _prx
	cmp     _rdx
	jsr     boolult
	sta     _rda
	jsr     _enems_facing
;
; ((_en_state == 1 || _en_state == 3) && half_life) ||
;
	lda     __en_state
	cmp     #$01
	beq     L211F
	lda     __en_state
	cmp     #$03
	bne     L29A1
L211F:	lda     _half_life
	bne     L211D
;
; _en_state == 2
;
L29A1:	lda     __en_state
;
; ) {
;
	cmp     #$02
	jne     L1FCE
;
; en_spr = MONOCOCO_BASE_SPRID + _en_facing + ((frame_counter >> 5) & 1);
;
L211D:	lda     __en_facing
	clc
	adc     #$22
	sta     ptr1
	ldx     #$00
	lda     _frame_counter
	jsr     asrax4
	jsr     asrax1
	and     #$01
	clc
	adc     ptr1
;
; break;
;
	jmp     L29CC
;
; switch (_en_state) {
;
L212A:	lda     __en_state
;
; }
;
	beq     L212F
	cmp     #$01
	beq     L213B
	cmp     #$02
	jeq     L2151
	jmp     L212D
;
; if (_en_ct) _en_ct --; else {
;
L212F:	lda     __en_ct
	beq     L2130
	lda     __en_ct
	sec
	sbc     #$01
	sta     __en_ct
	jmp     L212D
;
; _en_state = 1;
;
L2130:	lda     #$01
	sta     __en_state
;
; _enf_y = _en_y << FIXBITS; _enf_vy = 0;
;
	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
	lda     #$00
	sta     __enf_vy
	sta     __enf_vy+1
;
; break;
;
	jmp     L212D
;
; _enf_vy += CATACROCK_G; if (_enf_vy > CATACROCK_MAX_V) _enf_vy = CATACROCK_MAX_V;
;
L213B:	lda     #$10
	clc
	adc     __enf_vy
	sta     __enf_vy
	bcc     L213E
	inc     __enf_vy+1
L213E:	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$01
	bvs     L2141
	eor     #$80
L2141:	bpl     L213F
	ldx     #$01
	lda     #$00
	sta     __enf_vy
	stx     __enf_vy+1
;
; _enf_y += _enf_vy; _en_y = _enf_y >> FIXBITS;
;
L213F:	lda     __enf_vy
	clc
	adc     __enf_y
	sta     __enf_y
	lda     __enf_vy+1
	adc     __enf_y+1
	sta     __enf_y+1
	lda     __enf_y
	ldx     __enf_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
;
; if (_en_y > _en_y2) {
;
	sec
	sbc     __en_y2
	bcc     L212D
	beq     L212D
;
; _en_state = 2;
;
	lda     #$02
	sta     __en_state
;
; _en_ct = CATACROCK_CROCK_FRAMES;
;
	lda     #$32
	sta     __en_ct
;
; _en_y = _en_y2;
;
	lda     __en_y2
;
; break;
;
	jmp     L29AE
;
; if (_en_ct) _en_ct --; else {
;
L2151:	lda     __en_ct
	beq     L2152
	lda     __en_ct
	sec
	sbc     #$01
	sta     __en_ct
	jmp     L212D
;
; _en_state = 0;
;
L2152:	sta     __en_state
;
; _en_ct = CATACROCK_WAIT;
;
	lda     __en_mx
	sta     __en_ct
;
; _en_y = _en_y1;
;
	lda     __en_y1
L29AE:	sta     __en_y
;
; en_spr = _en_state + CATACROCK_BASE_SPRID;
;
L212D:	lda     __en_state
	clc
	adc     #$32
;
; break;
;
	jmp     L29CC
;
; if (_en_ct) {
;
L2160:	lda     __en_ct
	jeq     L1FCE
;
; _en_ct --;  
;
	lda     __en_ct
	sec
	sbc     #$01
	sta     __en_ct
;
; _enf_vy += BOIOIONG_G; if (_enf_vy > BOIOIONG_VY_MAX) _enf_vy = BOIOIONG_VY_MAX;
;
	lda     #$10
	clc
	adc     __enf_vy
	sta     __enf_vy
	bcc     L2166
	inc     __enf_vy+1
L2166:	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$01
	bvs     L2169
	eor     #$80
L2169:	bpl     L2167
	ldx     #$01
	lda     #$00
	sta     __enf_vy
	stx     __enf_vy+1
;
; _enf_y += _enf_vy;
;
L2167:	lda     __enf_vy
	clc
	adc     __enf_y
	sta     __enf_y
	lda     __enf_vy+1
	adc     __enf_y+1
	sta     __enf_y+1
;
; if (_enf_y < 0) _enf_y = 0;
;
	ldx     __enf_y+1
	cpx     #$80
	bcc     L216E
	lda     #$00
	sta     __enf_y
	sta     __enf_y+1
;
; if (_enf_y > (192 << FIXBITS)) _enf_y = (192 << FIXBITS);
;
L216E:	lda     __enf_y
	cmp     #$01
	lda     __enf_y+1
	sbc     #$30
	bvs     L2175
	eor     #$80
L2175:	bpl     L2172
	ldx     #$30
	lda     #$00
	sta     __enf_y
	stx     __enf_y+1
;
; _en_y = _enf_y >> FIXBITS; _en_x = _enf_x >> FIXBITS;
;
L2172:	lda     __enf_y
	ldx     __enf_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
	lda     __enf_x
	ldx     __enf_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; cx1 = _en_x >> 4; cx2 = (_en_x + 15) >> 4; rda = 0;
;
	ldx     #$00
	lda     __en_x
	jsr     asrax4
	sta     _cx1
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0F
	bcc     L2182
	inx
L2182:	jsr     shrax4
	sta     _cx2
	lda     #$00
	sta     _rda
;
; if (_enf_vy > 0) {
;
	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$00
	bvs     L2187
	eor     #$80
L2187:	bpl     L2185
;
; cy1 = cy2 = (_en_y + 15) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0F
	bcc     L218C
	inx
L218C:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = 13; rds = -16;
;
	lda     #$0D
	sta     _rda
	lda     #$F0
;
; } else if (_enf_vy < 0) {
;
	jmp     L29AF
L2185:	ldx     __enf_vy+1
	cpx     #$80
	bcc     L2192
;
; cy1 = cy2 = _en_y >> 4;
;
	ldx     #$00
	lda     __en_y
	jsr     asrax4
	sta     _cy2
	sta     _cy1
;
; rda = 9; rds = 16;
;
	lda     #$09
	sta     _rda
	lda     #$10
L29AF:	sta     _rds
;
; if (rda) {
;
L2192:	lda     _rda
	beq     L219E
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & rda) || (at2 & rda)) {
;
	ldx     #$00
	lda     _rda
	and     _at1
	pha
	pla
	bne     L219F
	lda     _rda
	and     _at2
	pha
	pla
	beq     L219E
;
; _en_y = rds + (cy1 << 4);
;
L219F:	lda     _rds
	bpl     L21A5
	dex
L21A5:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _cy1
	jsr     aslax4
	clc
	adc     ptr1
	sta     __en_y
	txa
	adc     ptr1+1
;
; _enf_vy = -_enf_vy;
;
	lda     __enf_vy
	ldx     __enf_vy+1
	jsr     negax
	sta     __enf_vy
	stx     __enf_vy+1
;
; _enf_y = _en_y << FIXBITS;
;
L219E:	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; _enf_x += _enf_vx;
;
	lda     __enf_vx
	clc
	adc     __enf_x
	sta     __enf_x
	lda     __enf_vx+1
	adc     __enf_x+1
	sta     __enf_x+1
;
; _en_x = _enf_x >> FIXBITS;
;
	lda     __enf_x
	ldx     __enf_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; if (_enf_x < 0) _enf_x = 0;
;
	ldx     __enf_x+1
	cpx     #$80
	bcc     L21AF
	lda     #$00
	sta     __enf_x
	sta     __enf_x+1
;
; if (_enf_x > (240 << FIXBITS)) _enf_x = (240 << FIXBITS);
;
L21AF:	lda     __enf_x
	cmp     #$01
	lda     __enf_x+1
	sbc     #$3C
	bvs     L21B6
	eor     #$80
L21B6:	bpl     L21B3
	ldx     #$3C
	lda     #$00
	sta     __enf_x
	stx     __enf_x+1
;
; cy1 = _en_y >> 4; cy2 = (_en_y + 15) >> 4; rda = 0;
;
L21B3:	ldx     #$00
	lda     __en_y
	jsr     asrax4
	sta     _cy1
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0F
	bcc     L21BF
	inx
L21BF:	jsr     shrax4
	sta     _cy2
	lda     #$00
	sta     _rda
;
; if (_enf_vx) {
;
	lda     __enf_vx
	ora     __enf_vx+1
	beq     L21D5
;
; if (_enf_vx > 0) {
;
	lda     __enf_vx
	cmp     #$01
	lda     __enf_vx+1
	sbc     #$00
	bvs     L21C6
	eor     #$80
L21C6:	bpl     L21C4
;
; cx1 = cx2 = (_en_x + 15) >> 4; rds = -16;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0F
	bcc     L21CB
	inx
L21CB:	jsr     shrax4
	sta     _cx2
	sta     _cx1
	lda     #$F0
;
; } else {
;
	jmp     L29B0
;
; cx1 = cx2 = _en_x >> 4; rds = 16;
;
L21C4:	ldx     #$00
	lda     __en_x
	jsr     asrax4
	sta     _cx2
	sta     _cx1
	lda     #$10
L29B0:	sta     _rds
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 9) || (at2 & 9)) {
;
	lda     _at1
	and     #$09
	bne     L21D6
	lda     _at2
	and     #$09
	beq     L21D5
;
; _en_x = rds + (cx1 << 4);
;
L21D6:	ldx     #$00
	lda     _rds
	bpl     L21DC
	dex
L21DC:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _cx1
	jsr     aslax4
	clc
	adc     ptr1
	sta     __en_x
	txa
	adc     ptr1+1
;
; _enf_vx = -_enf_vx;
;
	lda     __enf_vx
	ldx     __enf_vx+1
	jsr     negax
	sta     __enf_vx
	stx     __enf_vx+1
;
; _enf_x = _en_x << FIXBITS;
;
L21D5:	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; if (_en_ct > 50 || half_life) {
;
	lda     __en_ct
	cmp     #$33
	bcs     L21E3
	lda     _half_life
	jeq     L1FCE
;
; en_spr = _en_s + ((frame_counter >> 2) & 1);
;
L21E3:	ldx     #$00
	lda     _frame_counter
	jsr     asrax2
	and     #$01
	clc
	adc     __en_s
;
; break;
;
	jmp     L29CC
;
; en_spr = SIMPLE_WARPERS_BASE_SPRID;
;
L21EA:	lda     #$21
;
; break;
;
	jmp     L29CC
;
; if (_en_ct) {
;
L21EE:	lda     __en_ct
	beq     L21EF
;
; switch (_en_state) {
;
	lda     __en_state
;
; }
;
	beq     L21F3
	cmp     #$01
	bne     L21F3
;
; rdx = _en_x; _en_x += _en_mx;
;
	lda     __en_x
	sta     _rdx
	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; rdy = _en_y; _en_y += _en_my;
;
	lda     __en_y
	sta     _rdy
	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; -- _en_ct;
;
L21F3:	dec     __en_ct
;
; } else {
;
	jmp     L2203
;
; rda = *en_behptr [gpit] ++;
;
L21EF:	tax
	lda     _gpit
	asl     a
	bcc     L29C2
	inx
	clc
L29C2:	adc     #<(_en_behptr)
	tay
	txa
	adc     #>(_en_behptr)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2207
	inx
L2207:	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
	dey
	lda     (regsave),y
	sta     _rda
;
; _en_state = 0;
;
	sty     __en_state
;
; rdc = (rda & 0x38) >> 3;
;
	lda     _rda
	and     #$38
	lsr     a
	lsr     a
	lsr     a
	sta     _rdc
;
; rdt = rda & 0x07;
;
	lda     _rda
	and     #$07
	sta     _rdt
;
; switch (rda & 0xc0) { // Command
;
	lda     _rda
	and     #$C0
;
; }
;
	beq     L2213
	cmp     #$40
	jeq     L222A
	cmp     #$80
	jeq     L2249
	cmp     #$C0
	jeq     L2259
	jmp     L2203
;
; if (rdt == 0) {
;
L2213:	lda     _rdt
	bne     L2214
;
; do_extern_action (*en_behptr [gpit] ++);    
;
	tax
	lda     _gpit
	asl     a
	bcc     L29C3
	inx
	clc
L29C3:	adc     #<(_en_behptr)
	tay
	txa
	adc     #>(_en_behptr)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L2219
	inx
L2219:	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
	dey
	lda     (regsave),y
	jsr     pusha
	jsr     _do_extern_action
;
; } else {
;
	jmp     L2203
;
; rdb = 0; while (rdt --) rdb += 25;
;
L2214:	tya
L29B1:	sta     _rdb
	lda     _rdt
	pha
	sec
	sbc     #$01
	sta     _rdt
	pla
	tax
	beq     L221E
	lda     #$19
	clc
	adc     _rdb
	jmp     L29B1
;
; _en_ct = rdb;
;
L221E:	lda     _rdb
	sta     __en_ct
;
; en_rawv [gpit] = _en_s + 2 + _en_facing;
;
	lda     #<(_en_rawv)
	ldx     #>(_en_rawv)
	clc
	adc     _gpit
	bcc     L2226
	inx
L2226:	sta     ptr1
	stx     ptr1+1
	lda     __en_s
	clc
	adc     #$02
	bcc     L29C4
	clc
L29C4:	adc     __en_facing
	ldy     #$00
	sta     (ptr1),y
;
; break;
;
	jmp     L2203
;
; _en_mx = endx [rdc] << _en_x1; _en_my = endy [rdc] << _en_x1;
;
L222A:	lda     #<(_endx)
	ldx     #>(_endx)
	clc
	adc     _rdc
	bcc     L222E
	inx
L222E:	jsr     ldaidx
	jsr     pushax
	lda     __en_x1
	jsr     tosaslax
	sta     __en_mx
	lda     #<(_endy)
	ldx     #>(_endy)
	clc
	adc     _rdc
	bcc     L2232
	inx
L2232:	ldy     #$00
	jsr     ldaidx
	jsr     pushax
	lda     __en_x1
	jsr     tosaslax
	sta     __en_my
;
; if (_en_mx < 0) _en_facing = 4;
;
	lda     __en_mx
	asl     a
	bcc     L2233
	lda     #$04
;
; else if (_en_mx > 0) _en_facing = 0;
;
	jmp     L29B2
L2233:	lda     __en_mx
	sec
	sbc     #$01
	bvs     L223C
	eor     #$80
L223C:	bpl     L2238
	lda     #$00
L29B2:	sta     __en_facing
;
; en_rawv [gpit] = _en_s + _en_facing;
;
L2238:	lda     #<(_en_rawv)
	ldx     #>(_en_rawv)
	clc
	adc     _gpit
	bcc     L2241
	inx
L2241:	sta     ptr1
	stx     ptr1+1
	lda     __en_s
	clc
	adc     __en_facing
	ldy     #$00
	sta     (ptr1),y
;
; _en_ct = (rdt << 4) >> _en_x1; _en_state = 1;
;
	ldx     #$00
	lda     _rdt
	jsr     aslax4
	jsr     pushax
	lda     __en_x1
	jsr     tosasrax
	sta     __en_ct
	lda     #$01
	sta     __en_state
;
; break;
;
	jmp     L2203
;
; rdb = rda & 0x3f;
;
L2249:	lda     _rda
	and     #$3F
	sta     _rdb
;
; if (rdb > 0x3b) {
;
	cmp     #$3C
	bcc     L224C
;
; _en_x1 =0x3f - rda; // 0 for 1, 1 for 2, 2 for 4, 3 for 8
;
	lda     #$3F
	sec
	sbc     _rda
	sta     __en_x1
;
; } else {
;
	jmp     L2203
;
; rdx = _en_x + 4; rdy = _en_y + 4; cocos_shoot_aimed ();
;
L224C:	lda     __en_x
	clc
	adc     #$04
	sta     _rdx
	lda     __en_y
	clc
	adc     #$04
	sta     _rdy
	jsr     _cocos_shoot_aimed
;
; break;
;
	jmp     L2203
;
; en_behptr [gpit] -= ((rda & 0x3f) + 1);
;
L2259:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L29C5
	inx
	clc
L29C5:	adc     #<(_en_behptr)
	tay
	txa
	adc     #>(_en_behptr)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     _rda
	ldx     #$00
	and     #$3F
	clc
	adc     #$01
	bcc     L225F
	inx
L225F:	jsr     tossubax
	ldy     #$00
	jsr     staxspidx
;
; en_spr = en_rawv [gpit];
;
L2203:	ldy     _gpit
	lda     _en_rawv,y
	sta     _en_spr
;
; switch (_en_state) {
;
	lda     __en_state
;
; }
;
	beq     L2268
	cmp     #$01
	beq     L226E
	jmp     L1FCE
;
; en_spr += ((frame_counter >> 3) & 1); 
;
L2268:	tax
	lda     _frame_counter
	jsr     asrax3
	and     #$01
;
; break;
;
	jmp     L29D4
;
; en_spr += en_fr;
;
L226E:	lda     _en_fr
L29D4:	clc
	adc     _en_spr
L29CC:	sta     _en_spr
;
; en_spr_id [gpit] = en_spr;
;
L1FCE:	ldy     _gpit
	lda     _en_spr
	sta     _en_spr_id,y
;
; if (_en_t == 0xff) {
;
	lda     __en_t
	cmp     #$FF
	bne     L2275
;
; ) {
;
	jsr     _collide
	tax
	jeq     L23B1
;
; n_pant = _en_mx; on_pant = 0xff;
;
	lda     __en_mx
	sta     _n_pant
	lda     #$FF
	sta     _on_pant
;
; prx = _en_x2; px = prx << FIXBITS;
;
	lda     __en_x2
	sta     _prx
	ldx     #$00
	lda     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; pry = _en_y2; py = pry << FIXBITS;
;
	lda     __en_y2
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; player_stop ();
;
	jsr     _player_stop
;
; b_button = 0;
;
	lda     #$00
	sta     _b_button
;
; break;
;
	rts
;
; if (_en_t == 4 && pregotten && !pgotten && !pj) {
;
L2275:	lda     __en_t
	cmp     #$04
	jne     L22A3
	lda     _pregotten
	jeq     L22A3
	lda     _pgotten
	jne     L22A3
	lda     _pj
	jne     L22A3
;
; if (_en_mx) {
;
	lda     __en_mx
	beq     L228F
;
; if (pry + 16 >= _en_y && pry + 12 <= _en_y) {
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L2291
	inx
L2291:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L228F
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L2293
	inx
L2293:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L2290
	bne     L228F
;
; pgotten = 1;
;
L2290:	lda     #$01
	sta     _pgotten
;
; pgtmx = _en_mx << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_mx
	bpl     L2299
	dex
L2299:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmx
	stx     _pgtmx+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L22A0
	dex
L22A0:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; (_en_my < 0 && pry + 17 >= _en_y && pry + 12 <= _en_y) ||
;
L228F:	lda     __en_my
	asl     a
	bcc     L29A2
	ldx     #$00
	lda     _pry
	clc
	adc     #$11
	bcc     L22A8
	inx
L22A8:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L29A2
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L22A9
	inx
L22A9:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L22A4
	beq     L22A4
;
; (_en_my > 0 && pry + 16 + _en_my >= _en_y && pry + 12 <= _en_y)
;
L29A2:	lda     __en_my
	sec
	sbc     #$01
	bvs     L22AD
	eor     #$80
L22AD:	jpl     L22A3
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L22AF
	inx
L22AF:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __en_my
	bpl     L22B0
	dex
L22B0:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	cmp     __en_y
	txa
	sbc     #$00
	bcc     L22A3
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L22B1
	inx
L22B1:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L22A4
	bne     L22A3
;
; pgotten = 1;
;
L22A4:	lda     #$01
	sta     _pgotten
;
; pgtmy = _en_my << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_my
	bpl     L22B8
	dex
L22B8:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmy
	stx     _pgtmy+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L22BF
	dex
L22BF:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; if (pgotten) pspin = 0;
;
L22A3:	lda     _pgotten
	beq     L22C4
	lda     #$00
	sta     _pspin
;
; if (en_invincible [gpit]) {
;
L22C4:	ldy     _gpit
	lda     _en_invincible,y
	beq     L22CF
;
; -- en_invincible [gpit];
;
	lda     #<(_en_invincible)
	ldx     #>(_en_invincible)
	clc
	adc     _gpit
	bcc     L22CE
	inx
L22CE:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (half_life) en_spr = 0xff;
;
	lda     _half_life
	beq     L22CF
	lda     #$FF
	sta     _en_spr
;
; en_is_alive == 0 // General condition.
;
L22CF:	lda     _en_is_alive
;
; || en_cttouched [gpit]
;
	jeq     L23B1
	ldy     _gpit
	lda     _en_cttouched,y
;
; || _en_t == 4
;
	jne     L23B1
	lda     __en_t
;
; || (_en_t == 9 && _en_state == 0)
;
	cmp     #$04
	jeq     L23B1
	lda     __en_t
	cmp     #$09
	bne     L29A4
	lda     __en_state
	jeq     L23B1
;
; || (_en_t == 11 && _en_mx != 2)
;
L29A4:	lda     __en_t
	cmp     #$0B
	bne     L29A5
	lda     __en_mx
	cmp     #$02
	jne     L23B1
;
; || (_en_t == 12 && _en_state != 1)
;
L29A5:	lda     __en_t
	cmp     #$0C
	bne     L29A6
	lda     __en_state
	cmp     #$01
	jne     L23B1
;
; || (_en_t == 13 && _en_ct == 0)
;
L29A6:	lda     __en_t
	cmp     #$0D
	bne     L22D3
	lda     __en_ct
	jeq     L23B1
;
; _en_t != 5 &&
;
L22D3:	lda     __en_t
	cmp     #$05
	jeq     L22E5
;
; touched == 0 &&
;
	lda     _touched
	jne     L22E5
;
; ) {
;
	jsr     _collide
	tax
	jeq     L22E5
;
; en_sg_1 = 0;
;
	lda     #$00
	sta     _en_sg_1
;
; en_sg_2 = (pflickering == 0);
;
	lda     _pflickering
	jsr     booleq
	sta     _en_sg_2
;
; && _en_t != 5
;
	lda     _pspin
	beq     L22EE
	lda     __en_t
;
; ) {
;
	cmp     #$05
	beq     L22EE
;
; en_sg_1 = 1;
;
	lda     #$01
	sta     _en_sg_1
;
; en_sg_2 = 0;
;
	stx     _en_sg_2
;
; pvy = -pvy;
;
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	sta     _pvy
	stx     _pvy+1
;
; sfx_play (SFX_STEPON, 1);
;
	lda     #$0F
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; if (en_invincible [gpit]) en_sg_1 = 0;
;
L22EE:	ldy     _gpit
	lda     _en_invincible,y
	beq     L22FB
	lda     #$00
	sta     _en_sg_1
;
; if (en_sg_2) {
;
L22FB:	lda     _en_sg_2
	jeq     L23A4
;
; if (prings) {
;
	lda     _prings
	jeq     L2303
;
; ring_create ();
;
	jsr     _ring_create
;
; prings = 0;
;
	lda     #$00
	sta     _prings
;
; pvx = ADD_SIGN (_en_mx, PLAYER_V_REBOUND); 
;
	lda     __en_mx
	beq     L230C
	lda     __en_mx
	sec
	sbc     #$01
	bvs     L2312
	eor     #$80
L2312:	bpl     L2313
	ldx     #$01
	jmp     L29B3
L2313:	ldx     #$FF
	jmp     L29B3
L230C:	tax
L29B3:	lda     #$00
	sta     _pvx
	stx     _pvx+1
;
; if (_en_my) pvy = ADD_SIGN (_en_my, PLAYER_V_REBOUND); else pvy = -(PLAYER_V_REBOUND >> 1);
;
	lda     __en_my
	beq     L231D
	lda     __en_my
	beq     L2323
	lda     __en_my
	sec
	sbc     #$01
	bvs     L2329
	eor     #$80
L2329:	bpl     L232A
	ldx     #$01
	jmp     L29B4
L232A:	ldx     #$FF
	jmp     L29B4
L2323:	tax
L29B4:	lda     #$00
	jmp     L29CF
L231D:	ldx     #$FF
	lda     #$80
L29CF:	sta     _pvy
	stx     _pvy+1
;
; if (_en_t != 20) {
;
	lda     __en_t
	cmp     #$14
	jeq     L2338
;
; if (!_en_mx) _en_my = ADD_SIGN (_en_y - pry, ABS (_en_my));
;
	lda     __en_mx
	bne     L233A
	lda     __en_y
	sec
	sbc     _pry
	pha
	lda     #$00
	sta     tmp1
	pla
	ora     tmp1
	beq     L2368
	lda     __en_y
	sec
	sbc     _pry
	pha
	pla
	beq     L2347
	lda     __en_my
	asl     a
	bcc     L234D
	ldx     #$00
	lda     __en_my
	bpl     L2350
	dex
L2350:	jsr     negax
L2355:	cmp     #$80
	bcc     L2368
	jmp     L2368
L234D:	lda     __en_my
	cmp     #$80
	bcc     L2355
	jmp     L2368
L2347:	lda     __en_my
	asl     a
	bcc     L235E
	ldx     #$00
	lda     __en_my
	bpl     L2361
	dex
L2361:	jsr     negax
L2366:	ldx     #$00
	cmp     #$80
	bcc     L2367
	jmp     L29B6
L235E:	lda     __en_my
	cmp     #$80
	bcc     L2366
L29B6:	ldx     #$FF
L2367:	jsr     negax
L2368:	sta     __en_my
;
; _en_mx = ADD_SIGN (_en_x - prx, ABS (_en_mx));
;
L233A:	lda     __en_x
	sec
	sbc     _prx
	pha
	lda     #$00
	sta     tmp1
	pla
	ora     tmp1
	beq     L2396
	lda     __en_x
	sec
	sbc     _prx
	pha
	pla
	beq     L2375
	lda     __en_mx
	asl     a
	bcc     L237B
	ldx     #$00
	lda     __en_mx
	bpl     L237E
	dex
L237E:	jsr     negax
L2383:	cmp     #$80
	bcc     L2396
	jmp     L2396
L237B:	lda     __en_mx
	cmp     #$80
	bcc     L2383
	jmp     L2396
L2375:	lda     __en_mx
	asl     a
	bcc     L238C
	ldx     #$00
	lda     __en_mx
	bpl     L238F
	dex
L238F:	jsr     negax
L2394:	ldx     #$00
	cmp     #$80
	bcc     L2395
	jmp     L29B7
L238C:	lda     __en_mx
	cmp     #$80
	bcc     L2394
L29B7:	ldx     #$FF
L2395:	jsr     negax
L2396:	sta     __en_mx
;
; touched = 1; 
;
L2338:	lda     #$01
	sta     _touched
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pbouncing = 16;
;
	lda     #$10
	sta     _pbouncing
;
; pflickering = 100;
;
	lda     #$64
	sta     _pflickering
;
; en_sg_2 = 0;
;
	lda     #$00
	sta     _en_sg_2
;
; } else psprid = pfacing + CELL_HIT;
;
	jmp     L23A4
L2303:	lda     _pfacing
	clc
	adc     #$09
	sta     _psprid
;
; if (en_sg_1) enems_hit ();
;
L23A4:	lda     _en_sg_1
	beq     L23A8
	jsr     _enems_hit
;
; if (en_sg_2) { 
;
L23A8:	lda     _en_sg_2
	beq     L23AB
;
; pkill = 1; 
;
	lda     #$01
	sta     _pkill
;
; touched = 1; 
;
L23AB:	lda     #$01
	sta     _touched
;
; || _en_t == 5
;
L22E5:	lda     _touched
	bne     L23B1
	lda     __en_t
;
; || en_invincible [gpit]
;
	cmp     #$05
;
; if (en_spr != 0xff) {
;
L23B1:	lda     _en_spr
	cmp     #$FF
	beq     L23B6
;
; _en_x + en_spr_x_mod, _en_y + SPRITE_ADJUST, 
;
	jsr     decsp3
	lda     __en_x
	clc
	adc     _en_spr_x_mod
	ldy     #$02
	sta     (sp),y
	lda     __en_y
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L29C6
	sec
L29C6:	sbc     #$10
	bcs     L29C7
	sec
L29C7:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [en_spr]
;
	ldx     #$00
	lda     _en_spr
	asl     a
	bcc     L29C8
	inx
	clc
L29C8:	adc     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [en_spr]
;
	txa
	adc     _spr_enems+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; enems_update_unsigned_char_arrays ();
;
L23B6:	jsr     _enems_update_unsigned_char_arrays
;
; } 
;
	jmp     L1F4F

.endproc

; ---------------------------------------------------------------
; void __near__ draw_game_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_game_frame: near

.segment	"CODE"

;
; _y = 4; _x =  1; pr_str ("LIFE\\");
;
	lda     #$04
	sta     __y
	lda     #$01
	sta     __x
	lda     #<(L0001)
	ldx     #>(L0001)
	jsr     pushax
	jsr     _pr_str
;
; _x = 22; pr_str ("RINGOS\\");
;
	lda     #$16
	sta     __x
	lda     #<(L0001+6)
	ldx     #>(L0001+6)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ hud_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_update: near

.segment	"CODE"

;
; if (olife != plife) {
;
	lda     _plife
	cmp     _olife
	beq     L242A
;
; olife = plife;
;
	lda     _plife
	sta     _olife
;
; _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
;
	lda     #$06
	sta     __x
	lda     #$04
	sta     __y
	lda     _plife
	sta     __n
	jsr     _p_t
;
; if (oprings != prings) {
;
L242A:	lda     _prings
	cmp     _oprings
	beq     L2435
;
; oprings = prings;
;
	lda     _prings
	sta     _oprings
;
; _x = 0x1d; _y = 4; _n = prings; p_t ();
;
	lda     #$1D
	sta     __x
	lda     #$04
	sta     __y
	lda     _prings
	sta     __n
	jmp     _p_t
;
; }
;
L2435:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bat_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_in: near

.segment	"CODE"

;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; while (pad_poll (0));
;
L2444:	lda     #$00
	jsr     _pad_poll
	tax
	bne     L2444
;
; fade_delay = 4;
;
	lda     #$04
	sta     _fade_delay
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ bat_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_out: near

.segment	"CODE"

;
; fade_out ();
;
	jsr     _fade_out
;
; oam_clear ();
;
	jsr     _oam_clear
;
; ppu_off ();
;
	jmp     _ppu_off

.endproc

; ---------------------------------------------------------------
; void __near__ pres (__near__ const unsigned char*, __near__ __near__ function returning void*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pres: near

.segment	"CODE"

;
; cls ();
;
	jsr     _cls
;
; pal_bg (p);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _pal_bg
;
; (*func) ();
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     callax
;
; bat_in ();
;
	jsr     _bat_in
;
; pad_read ();
;
L2456:	jsr     _pad_read
;
; if (pad_this_frame & (PAD_A|PAD_B|PAD_START)) break;
;
	lda     _pad_this_frame
	and     #$0B
	beq     L2456
;
; bat_out ();
;
	jsr     _bat_out
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ scr_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scr_level: near

.segment	"CODE"

;
; pal_spr (palss0);
;
	lda     #<(_palss0)
	ldx     #>(_palss0)
	jsr     _pal_spr
;
; _x =  8; _y = 15; pr_str ((unsigned char *) level_names [level_world]);
;
	lda     #$08
	sta     __x
	lda     #$0F
	sta     __y
	ldx     #$00
	lda     _level_world
	asl     a
	bcc     L29D9
	inx
	clc
L29D9:	adc     #<(_level_names)
	sta     ptr1
	txa
	adc     #>(_level_names)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	jsr     _pr_str
;
; _y = 16; pr_str ("]]]]^ZONE, ACT ");
;
	lda     #$10
	sta     __y
	lda     #<(L0001+14)
	ldx     #>(L0001+14)
	jsr     pushax
	jsr     _pr_str
;
; vram_put (level_act + 17);
;
	lda     _level_act
	clc
	adc     #$11
	jsr     _vram_put
;
; oam_index = 0; rdx = 128-32; rdy = 17*8; for (gpit = 0; gpit < 6; gpit ++) {
;
	lda     #$00
	sta     _oam_index
	lda     #$60
	sta     _rdx
	lda     #$88
	sta     _rdy
	lda     #$00
L29DA:	sta     _gpit
	cmp     #$06
	bcs     L247C
;
; rdx, rdy, oam_index, pemmeralds & bits [gpit] ? ssit_07 : ssit_03
;
	jsr     decsp3
	lda     _rdx
	ldy     #$02
	sta     (sp),y
	lda     _rdy
	dey
	sta     (sp),y
	lda     _oam_index
	dey
	sta     (sp),y
	ldy     _gpit
	lda     _bits,y
	and     _pemmeralds
	pha
	pla
	beq     L248B
	lda     #<(_ssit_07)
	ldx     #>(_ssit_07)
	jmp     L248D
;
; );
;
L248B:	lda     #<(_ssit_03)
	ldx     #>(_ssit_03)
L248D:	jsr     _oam_meta_spr
	sta     _oam_index
;
; rdx += 24; if (gpit == 2) { rdx = 128-32; rdy += 24; }
;
	lda     #$18
	clc
	adc     _rdx
	sta     _rdx
	lda     _gpit
	cmp     #$02
	bne     L247D
	lda     #$60
	sta     _rdx
	lda     #$18
	clc
	adc     _rdy
	sta     _rdy
;
; oam_index = 0; rdx = 128-32; rdy = 17*8; for (gpit = 0; gpit < 6; gpit ++) {
;
L247D:	lda     _gpit
	clc
	adc     #$01
	jmp     L29DA
;
; }
;
L247C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_title: near

.segment	"CODE"

;
; bankswitch (1);
;
	lda     #$01
	jsr     _bankswitch
;
; unrle_vram (title_rle, 0x2000);
;
	lda     #<(_title_rle)
	ldx     #>(_title_rle)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _unrle_vram
;
; pal_bg (paltstitle);
;
	lda     #<(_paltstitle)
	ldx     #>(_paltstitle)
	jsr     _pal_bg
;
; if (first_game) {
;
	lda     _first_game
	beq     L249F
;
; _x = 10; _y = 20; pr_str ("PRESS START!");
;
	lda     #$0A
	sta     __x
	lda     #$14
	sta     __y
	lda     #<(L0001+30)
	ldx     #>(L0001+30)
;
; } else {
;
	jmp     L29DC
;
; _x = 4; _y = 19; pr_str ("PRESS START  TO BEGIN%%PRESS SELECT TO CONTINUE");
;
L249F:	lda     #$04
	sta     __x
	lda     #$13
	sta     __y
	lda     #<(L0001+43)
	ldx     #>(L0001+43)
L29DC:	jsr     pushax
	jsr     _pr_str
;
; _x = 5;  _y = 26; pr_str ("@ 2018 THE MOJON TWINS"); 
;
	lda     #$05
	sta     __x
	lda     #$1A
	sta     __y
	lda     #<(L0001+91)
	ldx     #>(L0001+91)
	jsr     pushax
	jsr     _pr_str
;
; bat_in ();
;
	jsr     _bat_in
;
; music_play (MUSIC_TITLE);
;
	lda     #$05
	jsr     _music_play
;
; pad_read ();
;
L24B7:	jsr     _pad_read
;
; if (pad_this_frame & PAD_START) {
;
	lda     _pad_this_frame
	and     #$08
	beq     L24BB
;
; level = 0;
;
	lda     #$00
	sta     _level
;
; pemmeralds = 0;
;
	sta     _pemmeralds
;
; break;
;
	jmp     L24B8
;
; if (pad_this_frame & PAD_SELECT) {
;
L24BB:	lda     _pad_this_frame
	and     #$04
	beq     L24B7
;
; level = base_level [level];
;
	ldy     _level
	lda     _base_level,y
	sta     _level
;
; sfx_play (SFX_START, 0);
;
L24B8:	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; bat_out (); 
;
	jsr     _bat_out
;
; bankswitch (0);
;
	lda     #$00
	jmp     _bankswitch

.endproc

; ---------------------------------------------------------------
; void __near__ scr_game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scr_game_over: near

.segment	"CODE"

;
; _x = 11; _y = 15; pr_str ("GAME OVER!");
;
	lda     #$0B
	sta     __x
	lda     #$0F
	sta     __y
	lda     #<(L0001+114)
	ldx     #>(L0001+114)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ scr_the_end (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scr_the_end: near

.segment	"CODE"

;
; _x = 12; _y = 15; pr_str ("THE END");
;
	lda     #$0C
	sta     __x
	lda     #$0F
	sta     __y
	lda     #<(L0001+125)
	ldx     #>(L0001+125)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ scr_cutscene (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scr_cutscene: near

.segment	"CODE"

;
; unrle_vram (cuts_rle [rdm], 0x2000);
;
	ldx     #$00
	lda     _rdm
	asl     a
	bcc     L29DF
	inx
	clc
L29DF:	adc     #<(_cuts_rle)
	sta     ptr1
	txa
	adc     #>(_cuts_rle)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _unrle_vram
;
; _x = 2; _y = 18; pr_str ((unsigned char *) cutscenes [rdm]);
;
	lda     #$02
	sta     __x
	lda     #$12
	sta     __y
	ldx     #$00
	lda     _rdm
	asl     a
	bcc     L29E0
	inx
	clc
L29E0:	adc     #<(_cutscenes)
	sta     ptr1
	txa
	adc     #>(_cutscenes)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ cutscene (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cutscene: near

.segment	"CODE"

;
; bankswitch (1);
;
	lda     #$01
	jsr     _bankswitch
;
; pres (cuts_pal [rdm], scr_cutscene);
;
	jsr     decsp4
	ldx     #$00
	lda     _rdm
	asl     a
	bcc     L29E2
	inx
	clc
L29E2:	adc     #<(_cuts_pal)
	sta     ptr1
	txa
	adc     #>(_cuts_pal)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #<(_scr_cutscene)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_scr_cutscene)
	sta     (sp),y
	jsr     _pres
;
; bankswitch (0);
;
	lda     #$00
	jmp     _bankswitch

.endproc

; ---------------------------------------------------------------
; void __near__ flickscreen_do_horizontal (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flickscreen_do_horizontal: near

.segment	"CODE"

;
; if (prx == 4 && 
;
	lda     _prx
	cmp     #$04
	bne     L24FB
;
; (cfx + pvx) < 0
;
	ldx     #$00
	lda     _cfx
	bpl     L24FF
	dex
L24FF:	clc
	adc     _pvx
	txa
	adc     _pvx+1
	tax
;
; ) {
;
	cpx     #$80
	bcc     L24FB
;
; -- n_pant;
;
	dec     _n_pant
;
; px = 244 << FIXBITS;
;
	ldx     #$3D
;
; } else if (prx == 244 && 
;
	jmp     L29E5
L24FB:	lda     _prx
	cmp     #$F4
	bne     L2507
;
; (cfx + pvx) > 0
;
	ldx     #$00
	lda     _cfx
	bpl     L2509
	dex
L2509:	clc
	adc     _pvx
	pha
	txa
	adc     _pvx+1
	tax
	pla
;
; ) {
;
	cmp     #$01
	txa
	sbc     #$00
	bvs     L250A
	eor     #$80
L250A:	bmi     L2506
L2507:	rts
;
; ++ n_pant;
;
L2506:	inc     _n_pant
;
; px = 4 << FIXBITS;
;
	ldx     #$01
L29E5:	lda     #$00
	sta     _px
	stx     _px+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ flickscreen_do_vertical (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flickscreen_do_vertical: near

.segment	"CODE"

;
; if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
;
	lda     _pry
	bne     L2510
	ldx     _pvy+1
	cpx     #$80
	bcc     L2510
	lda     _n_pant
	cmp     _c_map_w
	bcc     L2510
;
; n_pant -= c_map_w;
;
	lda     _c_map_w
	eor     #$FF
	sec
	adc     _n_pant
	sta     _n_pant
;
; py = 192 << FIXBITS;
;
	ldx     #$30
	lda     #$00
	sta     _py
	stx     _py+1
;
; if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$FF
	bvs     L251A
	eor     #$80
L251A:	bpl     L251E
	ldx     #$FF
	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; } else if (pry >= 192 && pvy > 0 && n_pant < c_map_size - c_map_w) {
;
	rts
L2510:	lda     _pry
	cmp     #$C0
	bcc     L2520
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L2521
	eor     #$80
L2521:	bpl     L2520
	lda     _n_pant
	jsr     pusha0
	lda     _c_map_size
	sec
	sbc     _c_map_w
	jsr     tosicmp0
	bcc     L251F
L2520:	rts
;
; n_pant += c_map_w;
;
L251F:	lda     _c_map_w
	clc
	adc     _n_pant
	sta     _n_pant
;
; py = 0;
;
	lda     #$00
	sta     _py
	sta     _py+1
;
; }
;
L251E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_init: near

.segment	"CODE"

;
; win_level = game_over = 0;
;
	lda     #$00
	sta     _game_over
	sta     _win_level
;
; c_pal_bg =   l_pal_bg [level];
;
	tax
	lda     _level
	asl     a
	bcc     L29F0
	inx
	clc
L29F0:	adc     #<(_l_pal_bg)
	sta     ptr1
	txa
	adc     #>(_l_pal_bg)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_pal_bg+1
	dey
	lda     (ptr1),y
	sta     _c_pal_bg
;
; c_pal_fg =   l_pal_fg [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L29F1
	inx
	clc
L29F1:	adc     #<(_l_pal_fg)
	sta     ptr1
	txa
	adc     #>(_l_pal_fg)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_pal_fg+1
	dey
	lda     (ptr1),y
	sta     _c_pal_fg
;
; c_ts_tmaps =  l_ts_tmaps [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L29F2
	inx
	clc
L29F2:	adc     #<(_l_ts_tmaps)
	sta     ptr1
	txa
	adc     #>(_l_ts_tmaps)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_tmaps+1
	dey
	lda     (ptr1),y
	sta     _c_ts_tmaps
;
; c_ts_pals =  l_ts_pals [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L29F3
	inx
	clc
L29F3:	adc     #<(_l_ts_pals)
	sta     ptr1
	txa
	adc     #>(_l_ts_pals)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_pals+1
	dey
	lda     (ptr1),y
	sta     _c_ts_pals
;
; c_behs =   l_behs [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L29F4
	inx
	clc
L29F4:	adc     #<(_l_behs)
	sta     ptr1
	txa
	adc     #>(_l_behs)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_behs+1
	dey
	lda     (ptr1),y
	sta     _c_behs
;
; spr_enems =  l_spr_enems [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L29F5
	inx
	clc
L29F5:	adc     #<(_l_spr_enems)
	sta     ptr1
	txa
	adc     #>(_l_spr_enems)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _spr_enems+1
	dey
	lda     (ptr1),y
	sta     _spr_enems
;
; c_map =   l_map [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L29F6
	inx
	clc
L29F6:	adc     #<(_l_map)
	sta     ptr1
	txa
	adc     #>(_l_map)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_map+1
	dey
	lda     (ptr1),y
	sta     _c_map
;
; l_map_chr_rom_bank [level];
;
	ldy     _level
	lda     _l_map_chr_rom_bank,y
	sta     _c_map_chr_rom_bank
;
; c_enems =   l_enems [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L29F7
	inx
	clc
L29F7:	adc     #<(_l_enems)
	sta     ptr1
	txa
	adc     #>(_l_enems)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_enems+1
	dey
	lda     (ptr1),y
	sta     _c_enems
;
; c_hotspots =  l_hotspots [level]; 
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L29F8
	inx
	clc
L29F8:	adc     #<(_l_hotspots)
	sta     ptr1
	txa
	adc     #>(_l_hotspots)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_hotspots+1
	dey
	lda     (ptr1),y
	sta     _c_hotspots
;
; c_max_enems =  l_player_max_enems [level];
;
	ldy     _level
	lda     _l_player_max_enems,y
	sta     _c_max_enems
;
; c_map_w =   l_map_w [level];
;
	ldy     _level
	lda     _l_map_w,y
	sta     _c_map_w
;
; c_map_h =   l_map_h [level];
;
	ldy     _level
	lda     _l_map_h,y
	sta     _c_map_h
;
; rda = c_map_h; c_map_size = 0; while (rda --) c_map_size += c_map_w;
;
	sta     _rda
	lda     #$00
L29EF:	sta     _c_map_size
	lda     _rda
	pha
	sec
	sbc     #$01
	sta     _rda
	pla
	tax
	beq     L255B
	lda     _c_map_w
	clc
	adc     _c_map_size
	jmp     L29EF
;
; pal_bg (c_pal_bg);
;
L255B:	lda     _c_pal_bg
	ldx     _c_pal_bg+1
	jsr     _pal_bg
;
; pal_spr (c_pal_fg);
;
	lda     _c_pal_fg
	ldx     _c_pal_fg+1
	jsr     _pal_spr
;
; cls ();
;
	jsr     _cls
;
; draw_game_frame ();
;
	jsr     _draw_game_frame
;
; hotspots_load ();
;
	jsr     _hotspots_load
;
; if (!warp_to_level) {
;
	lda     _warp_to_level
	bne     L2566
;
; n_pant = SCR_INI;
;
	ldy     _level
	lda     _l_scr_ini,y
	sta     _n_pant
;
; px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_x,y
	jsr     aslax4
	clc
	adc     #$04
	bcc     L2574
	inx
L2574:	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; py = (PLAYER_INI_Y << 4) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_y,y
	jsr     aslax4
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; player_to_pixels ();
;
L2566:	jsr     _player_to_pixels
;
; player_init ();
;
	jsr     _player_init
;
; pobjs = 0;
;
	lda     #$00
	sta     _pobjs
;
; timer = TIMER_INITIAL;
;
	lda     #$14
	sta     _timer
;
; timer_frames = 50;
;
	lda     #$32
	sta     _timer_frames
;
; timer_zero = 0;
;
	lda     #$00
	sta     _timer_zero
;
; otimer = 0xff;
;
	lda     #$FF
	sta     _otimer
;
; timer_on = 0;
;
	lda     #$00
	sta     _timer_on
;
; vram_adr (MAP_CLEAR_LIST_ADDRESS);
;
	ldx     #$2C
	lda     #$40
	jsr     _vram_adr
;
; vram_fill (0, MAP_SIZE*24);
;
	lda     #$00
	jsr     pusha
	ldx     #$02
	lda     #$D0
	jsr     _vram_fill
;
; half_life = 0;
;
	lda     #$00
	sta     _half_life
;
; frame_counter = 0;
;
	sta     _frame_counter
;
; olife = oammo = oobjs = okeys = 0xff;
;
	lda     #$FF
	sta     _okeys
	sta     _oobjs
	sta     _oammo
	sta     _olife
;
; okilled = 0xff;
;
	sta     _okilled
;
; prings = 0; oprings = 0xff;
;
	lda     #$00
	sta     _prings
	lda     #$FF
	sta     _oprings
;
; pal_cycle [0] = c_pal_bg [13];
;
	lda     _c_pal_bg
	sta     ptr1
	lda     _c_pal_bg+1
	sta     ptr1+1
	ldy     #$0D
	lda     (ptr1),y
	sta     _pal_cycle
;
; pal_cycle [1] = c_pal_bg [14];
;
	lda     _c_pal_bg
	sta     ptr1
	lda     _c_pal_bg+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _pal_cycle+1
;
; pal_cycle [2] = c_pal_bg [15];
;
	lda     _c_pal_bg
	sta     ptr1
	lda     _c_pal_bg+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _pal_cycle+2
;
; underwater = 0;
;
	lda     #$00
	sta     _underwater
;
; timer = 20;
;
	lda     #$14
	sta     _timer
;
; toggle_switch = 0;
;
	lda     #$00
	sta     _toggle_switch
;
; elec_state_ct = 5;
;
	lda     #$05
	sta     _elec_state_ct
;
; elec_state = 0;
;
	lda     #$00
	sta     _elec_state
;
; somari_state = somari_ct = 0;
;
	sta     _somari_ct
	sta     _somari_state
;
; somari_life = 8;
;
	lda     #$08
	sta     _somari_life
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ prepare_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_scr: near

.segment	"CODE"

;
; if (!ft) {
;
	lda     _ft
	bne     L25B9
;
; fade_out (); 
;
	jsr     _fade_out
;
; ppu_off ();
;
	jsr     _ppu_off
;
; rda = on_pant << 3;
;
	lda     _on_pant
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; vram_write (tile_got, MAP_CLEAR_LIST_ADDRESS + (rda << 1) + rda, 24);
;
	jsr     decsp4
	lda     #<(_tile_got)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_tile_got)
	sta     (sp),y
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L29FD
	inx
	clc
L29FD:	adc     #$40
	pha
	txa
	adc     #$2C
	tax
	pla
	clc
	adc     _rda
	bcc     L29F9
	inx
L29F9:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$18
	jsr     _vram_write
;
; } else {
;
	jmp     L25C4
;
; ft = 0;
;
L25B9:	lda     #$00
	sta     _ft
;
; ppu_off ();
;
	jsr     _ppu_off
;
; clear_update_list ();
;
L25C4:	jsr     _clear_update_list
;
; enems_load ();
;
	jsr     _enems_load
;
; hotspots_create (); 
;
	jsr     _hotspots_create
;
; cocos_init ();
;
	jsr     _cocos_init
;
; rda = n_pant << 3;
;
	lda     _n_pant
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; vram_read (tile_got, MAP_CLEAR_LIST_ADDRESS + (rda << 1) + rda, 24);
;
	jsr     decsp4
	lda     #<(_tile_got)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_tile_got)
	sta     (sp),y
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L29FE
	inx
	clc
L29FE:	adc     #$40
	pha
	txa
	adc     #$2C
	tax
	pla
	clc
	adc     _rda
	bcc     L29FA
	inx
L29FA:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     #$18
	jsr     _vram_read
;
; draw_scr ();
;
	jsr     _draw_scr
;
; do_process_breakable = 0;
;
	lda     #$00
	sta     _do_process_breakable
;
; gpit = BREAKABLE_MAX; while (gpit --) brkf [gpit] = 0;
;
	lda     #$10
	sta     _gpit
L25D8:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L25D9
	ldy     _gpit
	lda     #$00
	sta     _brkf,y
	jmp     L25D8
;
; bankswitch (l_chr_rom_bank [level]);
;
L25D9:	ldy     _level
	lda     _l_chr_rom_bank,y
	jsr     _bankswitch
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; ring_timer = 0;
;
	lda     #$00
	sta     _ring_timer
;
; hrt == HOTSPOT_TYPE_EMMERALD && 
;
	lda     _hrt
	cmp     #$04
	bne     L25E6
;
; pemmeralds & bits [level_world]
;
	ldy     _level_world
	lda     _bits,y
;
; ) hrt = 0;
;
	and     _pemmeralds
	pha
	pla
	beq     L25E6
	lda     #$00
	sta     _hrt
;
; if (en_t [0] == 0x14) en_life [0] = 8;
;
L25E6:	lda     _en_t
	cmp     #$14
	bne     L25EE
	lda     #$08
	sta     _en_life
;
; if (level_world == 3) {
;
L25EE:	lda     _level_world
	cmp     #$03
	bne     L25F4
;
; timer_on = underwater = (level_act == 2 || n_pant >= 10);
;
	lda     _level_act
	cmp     #$02
	beq     L25F9
	lda     _n_pant
	cmp     #$0A
	bcs     L25F9
	lda     #$00
	jmp     L25FA
L25F9:	lda     #$01
L25FA:	sta     _underwater
	sta     _timer_on
;
; if (!underwater) timer = 20;
;
	lda     _underwater
	bne     L25FB
	lda     #$14
	sta     _timer
;
; pal_bg (underwater ? palts3a : palts3);
;
L25FB:	lda     _underwater
	beq     L2601
	lda     #<(_palts3a)
	ldx     #>(_palts3a)
	jmp     L2603
L2601:	lda     #<(_palts3)
	ldx     #>(_palts3)
L2603:	jsr     _pal_bg
;
; pal_spr (underwater ? palss0a : palss0);
;
	lda     _underwater
	beq     L2607
	lda     #<(_palss0a)
	ldx     #>(_palss0a)
	jmp     L2609
L2607:	lda     #<(_palss0)
	ldx     #>(_palss0)
L2609:	jsr     _pal_spr
;
; water_strip = (level_world == 1 && (level != 3 || n_pant > 14));
;
L25F4:	lda     _level_world
	cmp     #$01
	bne     L260E
	lda     _level
	cmp     #$03
	bne     L260D
	lda     _n_pant
	cmp     #$0F
	bcs     L260D
L260E:	lda     #$00
	jmp     L2611
L260D:	lda     #$01
L2611:	sta     _water_strip
;
; oam_spr (128, water_strip ? 211 : 240, 1, 2, 0);
;
	jsr     decsp4
	lda     #$80
	ldy     #$03
	sta     (sp),y
	lda     _water_strip
	beq     L2615
	lda     #$D3
	jmp     L2617
L2615:	lda     #$F0
L2617:	dey
	sta     (sp),y
	lda     #$01
	dey
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; toggle_timer = 0;
;
	lda     #$00
	sta     _toggle_timer
;
; gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
;
	lda     #$03
	sta     _gpit
L2620:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L2621
	lda     #<(_en_spr_id)
	ldx     #>(_en_spr_id)
	clc
	adc     _gpit
	bcc     L2625
	inx
L2625:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_s,y
	ldy     #$00
	sta     (ptr1),y
	jmp     L2620
;
; oam_index = 4;
;
L2621:	lda     #$04
	sta     _oam_index
;
; prx = px >> FIXBITS; pry = py >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_move ();
;
	jsr     _player_move
;
; enems_move ();
;
	jsr     _enems_move
;
; if (hrt) hotspots_paint ();
;
	lda     _hrt
	beq     L2631
	jsr     _hotspots_paint
;
; oam_hide_rest (oam_index);
;
L2631:	lda     _oam_index
	jsr     _oam_hide_rest
;
; hud_update ();
;
	jsr     _hud_update
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; music_play (l_music [level]);
;
	ldy     _level
	lda     _l_music,y
	jsr     _music_play
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; set_vram_update (UPDATE_LIST_SIZE, update_list);
;
	lda     #$20
	jsr     pusha
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; on_pant = 99; ft = 1; fade_delay = 1;
;
	lda     #$63
	sta     _on_pant
	lda     #$01
	sta     _ft
	sta     _fade_delay
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; ntsc_frame = level_reset = warp_to_level = 0; 
;
	lda     #$00
	sta     _warp_to_level
	sta     _level_reset
	sta     _ntsc_frame
;
; oam_index = 4; ticker = 50;
;
	lda     #$04
	sta     _oam_index
	lda     #$32
	sta     _ticker
;
; hud_update ();
;
L2656:	jsr     _hud_update
;
; if (pkill) player_kill ();
;
	lda     _pkill
	beq     L265A
	jsr     _player_kill
;
; if (game_over || level_reset) break;   
;
L265A:	lda     _game_over
	jne     L2657
	lda     _level_reset
	jne     L2657
;
; flick_override = 0;
;
	sta     _flick_override
;
; if (level == 6 || level == 8) {
;
	lda     _level
	cmp     #$06
	beq     L2663
	lda     _level
	cmp     #$08
	bne     L2662
;
; flick_override = 1;
;
L2663:	lda     #$01
	sta     _flick_override
;
; (prx == 4 && pvx < 0) ||
;
	lda     _prx
	cmp     #$04
	bne     L2A01
	ldx     _pvx+1
	cpx     #$80
	bcs     L2668
;
; (prx == 244 && pvx > 0) 
;
L2A01:	lda     _prx
	cmp     #$F4
	bne     L2667
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L266E
	eor     #$80
L266E:	bpl     L2667
;
; ) pvx = 0;
;
L2668:	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; flickscreen_do_vertical ();
;
L2667:	jsr     _flickscreen_do_vertical
;
; if ((level == 15 && n_pant >= 15) ||
;
L2662:	lda     _level
	cmp     #$0F
	bne     L2A03
	lda     _n_pant
	cmp     #$0F
	bcs     L2675
;
; (level == 16 && n_pant >= 24)) {
;
L2A03:	lda     _level
	cmp     #$10
	bne     L267D
	lda     _n_pant
	cmp     #$18
	bcc     L267D
;
; if (pry >= 192 && pvy > 0) {
;
L2675:	lda     _pry
	cmp     #$C0
	bcc     L267D
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L2680
	eor     #$80
L2680:	bpl     L267D
;
; pkill = 1;
;
	lda     #$01
	sta     _pkill
;
; flick_override = 1;
;
	sta     _flick_override
;
; if (flick_override == 0) {
;
L267D:	lda     _flick_override
	bne     L2686
;
; flickscreen_do_horizontal ();
;
	jsr     _flickscreen_do_horizontal
;
; flickscreen_do_vertical ();
;
	jsr     _flickscreen_do_vertical
;
; if (on_pant != n_pant) {
;
L2686:	lda     _n_pant
	cmp     _on_pant
	beq     L268A
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; if (pmayneedrelocation) {
;
L268A:	lda     _pmayneedrelocation
	beq     L268F
;
; pmayneedrelocation = 0;
;
	lda     #$00
	sta     _pmayneedrelocation
;
; gpit = 16;
;
	lda     #$10
	sta     _gpit
;
; while (gpit --) {
;
L2695:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L2696
;
; cx1 = prx >> 4; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx1
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L269D
	inx
L269D:	jsr     shrax4
	sta     _cx2
;
; cy1 = cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L26A2
	inx
L26A2:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) == 0 && (at2 & 8) == 0) break;
;
	lda     _at1
	and     #$08
	bne     L26A4
	lda     _at2
	and     #$08
	beq     L2696
;
; prx += 16; // Try next cell
;
L26A4:	lda     #$10
	clc
	adc     _prx
	sta     _prx
;
; }
;
	jmp     L2695
;
; px = prx << FIXBITS;
;
L2696:	tax
	lda     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; if ((level_world == 2 || level_world == 4 || level == 17) && (frame_counter & 7) == 0) {
;
L268F:	lda     _level_world
	cmp     #$02
	beq     L26B2
	lda     _level_world
	cmp     #$04
	beq     L26B2
	lda     _level
	cmp     #$11
	bne     L26B0
L26B2:	lda     _frame_counter
	and     #$07
	bne     L26B0
;
; rda = pal_cycle [2];
;
	lda     _pal_cycle+2
	sta     _rda
;
; pal_cycle [2] = pal_cycle [1]; pal_col (15, pal_cycle [2]);
;
	lda     _pal_cycle+1
	sta     _pal_cycle+2
	lda     #$0F
	jsr     pusha
	lda     _pal_cycle+2
	jsr     _pal_col
;
; pal_cycle [1] = pal_cycle [0]; pal_col (14, pal_cycle [1]);
;
	lda     _pal_cycle
	sta     _pal_cycle+1
	lda     #$0E
	jsr     pusha
	lda     _pal_cycle+1
	jsr     _pal_col
;
; pal_cycle [0] = rda;           pal_col (13, pal_cycle [0]);
;
	lda     _rda
	sta     _pal_cycle
	lda     #$0D
	jsr     pusha
	lda     _pal_cycle
	jsr     _pal_col
;
; if (water_strip) split (frame_counter, 0);
;
L26B0:	lda     _water_strip
	beq     L26D2
	lda     _frame_counter
	jsr     pusha0
	lda     #$00
	jsr     _split
;
; if (level == 15) {
;
L26D2:	lda     _level
	cmp     #$0F
	bne     L26E8
;
; if (elec_state == 2) {
;
	lda     _elec_state
	cmp     #$02
	bne     L26D9
;
; pal_bg (half_life ? palts5 : palts5a);
;
	lda     _half_life
	beq     L26DD
	lda     #<(_palts5)
	ldx     #>(_palts5)
	jmp     L26DF
L26DD:	lda     #<(_palts5a)
	ldx     #>(_palts5a)
L26DF:	jsr     _pal_bg
;
; ppu_mask (0x1e);
;
	lda     #$1E
	jsr     _ppu_mask
;
; if (half_life) sfx_play (1, 2);
;
	lda     _half_life
	beq     L26E8
	lda     #$01
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; } else {
;
	jmp     L26E8
;
; ppu_mask (0xfe); 
;
L26D9:	lda     #$FE
	jsr     _ppu_mask
;
; update_cycle ();
;
L26E8:	jsr     _update_cycle
;
; pad_read ();
;
	jsr     _pad_read
;
; a_button = (pad_this_frame & PAD_A);
;
	lda     _pad_this_frame
	and     #$01
	sta     _a_button
;
; b_button = (pad_this_frame & PAD_B);
;
	lda     _pad_this_frame
	and     #$02
	sta     _b_button
;
; ntsc_frame ++; if (ntsc_frame == 6) ntsc_frame = 0;
;
	lda     _ntsc_frame
	clc
	adc     #$01
	sta     _ntsc_frame
	cmp     #$06
	bne     L26F4
	lda     #$00
	sta     _ntsc_frame
;
; if (paused == 0 && (ntsc == 0 || ntsc_frame)) {
;
L26F4:	lda     _paused
	jne     L283A
	lda     _ntsc
	beq     L26F9
	lda     _ntsc_frame
	jeq     L283A
;
; if (ticker) -- ticker; else ticker = 50;
;
L26F9:	lda     _ticker
	beq     L26FE
	dec     _ticker
	jmp     L2701
L26FE:	lda     #$32
	sta     _ticker
;
; half_life ^= 1;
;
L2701:	lda     _half_life
	eor     #$01
	sta     _half_life
;
; ++ frame_counter;
;
	inc     _frame_counter
;
; if (hrt) {
;
	lda     _hrt
	jeq     L273E
;
; if (collide_in (prx + 4, pry + 8, hrx, hry)) {
;
	jsr     decsp8
	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L270C
	inx
L270C:	ldy     #$06
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L270E
	inx
L270E:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _hrx
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _hry
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _collide_in
	tax
	jeq     L273E
;
; rda = 0;
;
	lda     #$00
	sta     _rda
;
; switch (hrt) {
;
	lda     _hrt
;
; }
;
	cmp     #$01
	beq     L2717
	cmp     #$03
	beq     L271C
	cmp     #$04
	beq     L2728
	cmp     #$05
	beq     L2722
	cmp     #$06
	beq     L2730
	cmp     #$07
	beq     L273B
	jmp     L2715
;
; ++ pobjs;
;
L2717:	inc     _pobjs
;
; rda = SFX_OBJECT;
;
	lda     #$02
;
; break;
;
	jmp     L2A05
;
; plife += PLAYER_REFILL;
;
L271C:	inc     _plife
;
; break;
;
	jmp     L2A05
;
; rda = SFX_OBJECT;
;
L2722:	lda     #$02
	sta     _rda
;
; timer = TIMER_INITIAL;
;
	lda     #$14
	sta     _timer
;
; break;
;
	jmp     L2715
;
; rda = SFX_FANFARE;
;
L2728:	lda     #$13
	sta     _rda
;
; pemmeralds |= bits [level_world];
;
	ldy     _level_world
	lda     _bits,y
	ora     _pemmeralds
	sta     _pemmeralds
;
; break;
;
	jmp     L2715
;
; hrt = HOTSPOT_TYPE_TOGGLE_ON;
;
L2730:	lda     #$07
	sta     _hrt
;
; toggle_timer = 50;
;
	lda     #$32
	sta     _toggle_timer
;
; toggle_switch = !toggle_switch;  // Toggle!
;
	lda     _toggle_switch
	jsr     bnega
	sta     _toggle_switch
;
; sfx_play (SFX_STEPON, 0);
;
	lda     #$0F
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; rda = 0;       // Do not clear hotspot!
;
L273B:	lda     #$00
L2A05:	sta     _rda
;
; if (rda) {
;
L2715:	lda     _rda
	beq     L273E
;
; sfx_play (rda, 1);
;
	lda     _rda
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; hrt = 0;
;
	lda     #$00
	sta     _hrt
;
; hact [n_pant] = 0;
;
	ldy     _n_pant
	sta     _hact,y
;
; if (!warp_to_level) {
;
L273E:	lda     _warp_to_level
	bne     L2749
;
; player_move ();
;
	jsr     _player_move
;
; if (timer_on && timer) {
;
L2749:	lda     _timer_on
	beq     L274C
	lda     _timer
	beq     L274C
;
; if (timer_frames) -- timer_frames; else {
;
	lda     _timer_frames
	beq     L2750
	dec     _timer_frames
	jmp     L274C
;
; timer_frames = 50;
;
L2750:	lda     #$32
	sta     _timer_frames
;
; -- timer; 
;
	dec     _timer
;
; if (timer < TIMER_SOUND) sfx_play (SFX_COUNT, 2);
;
	lda     _timer
	cmp     #$0A
	bcs     L2757
	lda     #$0C
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; if (timer == 0) {
;
L2757:	lda     _timer
	bne     L275C
;
; timer_zero = 1;
;
	lda     #$01
	sta     _timer_zero
;
; if (underwater) {
;
L275C:	lda     _underwater
	beq     L274C
;
; bubble_x = prx; bubble_y = pry - 8; 
;
	lda     _prx
	sta     _bubble_x
	lda     _pry
	sec
	sbc     #$08
	sta     _bubble_y
;
; if (timer_zero) {
;
	lda     _timer_zero
	beq     L274C
;
; psprid = CELL_HIT;
;
	lda     #$09
	sta     _psprid
;
; pkill = 1;
;
	lda     #$01
	sta     _pkill
;
; if (l_player_max_objects [level] && pobjs == l_player_max_objects [level]) win_level = 1;
;
L274C:	ldy     _level
	lda     _l_player_max_objects,y
	beq     L276D
	ldy     _level
	lda     _l_player_max_objects,y
	cmp     _pobjs
	bne     L276D
	lda     #$01
	sta     _win_level
;
; if (level_act == 2 && en_flags [0] && en_cttouched [0] == 0) win_level = 1;
;
L276D:	lda     _level_act
	cmp     #$02
	bne     L2777
	lda     _en_flags
	beq     L2777
	lda     _en_cttouched
	bne     L2777
	lda     #$01
	sta     _win_level
;
; if (level == 17 && somari_state == 3) win_level = 1;
;
L2777:	lda     _level
	cmp     #$11
	bne     L277F
	lda     _somari_state
	cmp     #$03
	bne     L277F
	lda     #$01
	sta     _win_level
;
; ) {
;
L277F:	lda     _win_level
	beq     L2785
;
; music_stop ();
;
	jsr     _music_stop
;
; delay (50);
;
	lda     #$32
	jsr     _delay
;
; break;
;
	jmp     L2657
;
; cocos_do ();
;
L2785:	jsr     _cocos_do
;
; oam_index_player = oam_index; 
;
	lda     _oam_index
	sta     _oam_index_player
;
; if (!warp_to_level) player_render ();
;
	lda     _warp_to_level
	bne     L278D
	jsr     _player_render
;
; enems_move ();
;
L278D:	jsr     _enems_move
;
; if (warp_to_level) {
;
	lda     _warp_to_level
	beq     L2791
;
; update_cycle (); music_stop (); break;
;
	jsr     _update_cycle
	jsr     _music_stop
	jmp     L2657
;
; if (hrt) hotspots_paint ();
;
L2791:	lda     _hrt
	beq     L2795
	jsr     _hotspots_paint
;
; if (do_process_breakable) breakable_do_anim ();
;
L2795:	lda     _do_process_breakable
	beq     L2798
	jsr     _breakable_do_anim
;
; ring_do ();
;
L2798:	jsr     _ring_do
;
; if (underwater) {
;
	lda     _underwater
	jeq     L27DF
;
; if (pvx < -96) pvx = -96;
;
	lda     _pvx
	cmp     #$A0
	lda     _pvx+1
	sbc     #$FF
	bvc     L27A0
	eor     #$80
L27A0:	bpl     L279E
	ldx     #$FF
	lda     #$A0
;
; else if (pvx > 96) pvx = 96;
;
	jmp     L2A0C
L279E:	lda     _pvx
	cmp     #$61
	lda     _pvx+1
	sbc     #$00
	bvs     L27A6
	eor     #$80
L27A6:	bpl     L27A4
	ldx     #$00
	lda     #$60
L2A0C:	sta     _pvx
	stx     _pvx+1
;
; if (pvy > 96) pvy = 96;
;
L27A4:	lda     _pvy
	cmp     #$61
	lda     _pvy+1
	sbc     #$00
	bvs     L27AB
	eor     #$80
L27AB:	bpl     L27A9
	ldx     #$00
	lda     #$60
	sta     _pvy
	stx     _pvy+1
;
; if (pvy < -160 && !ptrampoline) pvy = -160;
;
L27A9:	lda     _pvy
	cmp     #$60
	lda     _pvy+1
	sbc     #$FF
	bvc     L27B0
	eor     #$80
L27B0:	bpl     L27AE
	lda     _ptrampoline
	bne     L27AE
	ldx     #$FF
	lda     #$60
	sta     _pvy
	stx     _pvy+1
;
; if (bubble_y) {
;
L27AE:	lda     _bubble_y
	beq     L27B5
;
; rda = rand8 ();
;
	jsr     _rand8
	sta     _rda
;
; bubble_y --;   
;
	lda     _bubble_y
	sec
	sbc     #$01
	sta     _bubble_y
;
; bubble_x += ((rda & 2) - 1);
;
	lda     _rda
	and     #$02
	sec
	sbc     #$01
	clc
	adc     _bubble_x
	sta     _bubble_x
;
; bubble_x, bubble_y + SPRITE_ADJUST, 
;
	jsr     decsp4
	lda     _bubble_x
	ldy     #$03
	sta     (sp),y
	lda     _bubble_y
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2A08
	sec
L2A08:	sbc     #$10
	bcs     L2A09
	sec
L2A09:	sbc     #$01
	dey
	sta     (sp),y
;
; 0x0c + (rda & 1),
;
	lda     _rda
	and     #$01
	clc
	adc     #$0C
	dey
	sta     (sp),y
;
; 2, 
;
	lda     #$02
	dey
	sta     (sp),y
;
; );
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (timer && timer < 10) oam_index = oam_spr (
;
L27B5:	lda     _timer
	beq     L27CC
	lda     _timer
	cmp     #$0A
	bcs     L27CC
;
; prx, pry - 16 + SPRITE_ADJUST - (12 - (timer_frames >> 2)), 
;
	jsr     decsp4
	lda     _prx
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     _pry
	sec
	sbc     #$10
	bcs     L27D4
	dex
L27D4:	clc
	adc     #$30
	bcc     L27D5
	inx
L27D5:	sec
	sbc     #$0C
	bcs     L2A0A
	dex
	sec
L2A0A:	sbc     #$10
	bcs     L2A0B
	dex
	sec
L2A0B:	sbc     #$01
	bcs     L27D8
	dex
L27D8:	jsr     pushax
	lda     #$0C
	jsr     pusha0
	lda     _timer_frames
	jsr     asrax2
	jsr     tossubax
	jsr     tossubax
	ldy     #$02
	sta     (sp),y
;
; 2 + timer, 
;
	lda     _timer
	clc
	adc     #$02
	dey
	sta     (sp),y
;
; 2, 
;
	lda     #$02
	dey
	sta     (sp),y
;
; );
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (ht [n_pant] == HOTSPOT_TYPE_TIME) {
;
L27CC:	ldy     _n_pant
	lda     _ht,y
	cmp     #$05
	bne     L27DF
;
; if (timer < 10) hrt = HOTSPOT_TYPE_TIME; // Reappear if needed w/o having to reenter
;
	lda     _timer
	cmp     #$0A
	bcs     L27E3
	lda     #$05
	sta     _hrt
;
; hact [n_pant] = 1;
;
L27E3:	ldy     _n_pant
	lda     #$01
	sta     _hact,y
;
; if (toggle_timer) {
;
L27DF:	lda     _toggle_timer
	beq     L27EE
;
; toggle_timer --;
;
	lda     _toggle_timer
	sec
	sbc     #$01
	sta     _toggle_timer
;
; if (toggle_timer == 0) {
;
	lda     _toggle_timer
	bne     L27EE
;
; hrt = HOTSPOT_TYPE_TOGGLE_OFF;
;
	lda     #$06
	sta     _hrt
;
; sfx_play (SFX_STEPON, 0);
;
	lda     #$0F
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (level == 15) {
;
L27EE:	lda     _level
	cmp     #$0F
	bne     L280C
;
; if (ticker == 0 || ticker == 25) {
;
	lda     _ticker
	beq     L27F8
	lda     _ticker
	cmp     #$19
	bne     L280C
;
; if (elec_state_ct) -- elec_state_ct; else {
;
L27F8:	lda     _elec_state_ct
	beq     L27FA
	dec     _elec_state_ct
	jmp     L280C
;
; ++ elec_state; if (elec_state == 3) elec_state = 0;
;
L27FA:	inc     _elec_state
	lda     _elec_state
	cmp     #$03
	bne     L27FF
	lda     #$00
	sta     _elec_state
;
; elec_state_ct = elec_state_max_ct [elec_state];
;
L27FF:	ldy     _elec_state
	lda     _elec_state_max_ct,y
	sta     _elec_state_ct
;
; if (elec_state == 0) pal_bg (palts5);
;
	lda     _elec_state
	bne     L2807
	lda     #<(_palts5)
	ldx     #>(_palts5)
	jsr     _pal_bg
;
; else if (elec_state == 1) pal_col (11, 0x18);
;
	jmp     L280C
L2807:	lda     _elec_state
	cmp     #$01
	bne     L280C
	lda     #$0B
	jsr     pusha
	lda     #$18
	jsr     _pal_col
;
; if (level == 17 && n_pant == 2) {
;
L280C:	lda     _level
	cmp     #$11
	jne     L283A
	lda     _n_pant
	cmp     #$02
	jne     L283A
;
; somari_do ();
;
	jsr     _somari_do
;
; if (en_mx [0] < 0 && half_life) sfx_play (1, 2);   
;
	lda     _en_mx
	asl     a
	bcc     L2816
	lda     _half_life
	beq     L2816
	lda     #$01
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; if (prx > 216) {
;
L2816:	lda     _prx
	cmp     #$D9
	bcc     L2827
;
; prx = 216; px = prx << FIXBITS; pvx = 0;
;
	lda     #$D8
	sta     _prx
	ldx     #$00
	lda     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; if (pspin) {
;
	lda     _pspin
	beq     L2827
;
; pvx = -512;   
;
	ldx     #$FE
	lda     #$00
	sta     _pvx
	stx     _pvx+1
;
; pflickering = 30;
;
	lda     #$1E
	sta     _pflickering
;
; if (somari_life) {
;
	lda     _somari_life
	beq     L282D
;
; somari_life --;
;
	lda     _somari_life
	sec
	sbc     #$01
	sta     _somari_life
;
; somari_state = 1; 
;
	lda     #$01
;
; } else {
;
	jmp     L2A07
;
; somari_state = 2;
;
L282D:	lda     #$02
L2A07:	sta     _somari_state
;
; somari_ct = 120;
;
	lda     #$78
	sta     _somari_ct
;
; sfx_play (SFX_BREAKB, 1);
;
	lda     #$11
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; if (pflickering == 0 &&
;
L2827:	lda     _pflickering
	bne     L283A
;
; en_mx [0] < 0 &&
;
	lda     _en_mx
	asl     a
	bcc     L283A
;
; prx + 3 >= en_x [0] &&
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$03
	bcc     L283F
	inx
L283F:	cmp     _en_x
	txa
	sbc     #$00
	bcc     L283A
;
; prx <= en_x [0] + 7
;
	lda     _prx
	jsr     pusha0
	lda     _en_x
;
; ) {
;
	clc
	adc     #$07
	bcc     L2842
	ldx     #$01
L2842:	jsr     tosicmp
	bcc     L283B
	bne     L283A
;
; pkill = 1;
;
L283B:	lda     #$01
	sta     _pkill
;
; if ((pad0 & (PAD_B|PAD_SELECT|PAD_UP)) == (PAD_B|PAD_SELECT|PAD_UP)) break;
;
L283A:	lda     _pad0
	and     #$16
	cmp     #$16
	beq     L2657
;
; if (pad_this_frame & PAD_START) {
;
	lda     _pad_this_frame
	and     #$08
	jeq     L2656
;
; paused ^= 1;
;
	lda     _paused
	eor     #$01
	sta     _paused
;
; pal_bright (4 - paused);
;
	lda     #$04
	sec
	sbc     _paused
	jsr     _pal_bright
;
; music_pause (paused);
;
	lda     _paused
	jsr     _music_pause
;
; }
;
	jmp     L2656
;
; fade_delay = 4;
;
L2657:	lda     #$04
	sta     _fade_delay
;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; set_vram_update (0, 0);
;
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
;
; ppu_off ();
;
	jsr     _ppu_off
;
; oam_clear ();
;
	jmp     _oam_clear

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; bank_spr (1);
;
	lda     #$01
	jsr     _bank_spr
;
; bank_bg (0);
;
	lda     #$00
	jsr     _bank_bg
;
; ppu_off ();
;
	jsr     _ppu_off
;
; first_game = 1;
;
	lda     #$01
	sta     _first_game
;
; ntsc = ppu_system ();
;
	jsr     _ppu_system
	sta     _ntsc
;
; title (); // level* vars are set there.
;
L2867:	jsr     _title
;
; plife = PLAYER_LIFE;
;
	lda     #$05
	sta     _plife
;
; if (level == 0) {
;
	lda     _level
	bne     L286D
;
; music_play (MUSIC_CUTS);
;
	lda     #$06
	jsr     _music_play
;
; rdm = 0; cutscene ();
;
	lda     #$00
	sta     _rdm
	jsr     _cutscene
;
; rdm = 1; cutscene ();
;
	lda     #$01
	sta     _rdm
	jsr     _cutscene
;
; music_stop ();
;
	jsr     _music_stop
;
; scroll (0, SCROLL_Y);
;
L286D:	jsr     push0
	lda     #$0C
	jsr     _scroll
;
; level_world = base_world [level];
;
	ldy     _level
	lda     _base_world,y
	sta     _level_world
;
; level_act = base_act [level];
;
	ldy     _level
	lda     _base_act,y
	sta     _level_act
;
; pres (paltstitle, scr_level);
;
	jsr     decsp4
	lda     #<(_paltstitle)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_paltstitle)
	sta     (sp),y
	lda     #<(_scr_level)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_scr_level)
	sta     (sp),y
	jsr     _pres
;
; game_init (); 
;
	jsr     _game_init
;
; game_loop ();
;
	jsr     _game_loop
;
; if (game_over) {
;
	lda     _game_over
	beq     L288B
;
; pres (palts0, scr_game_over);
;
	jsr     decsp4
	lda     #<(_palts0)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_palts0)
	sta     (sp),y
	lda     #<(_scr_game_over)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_scr_game_over)
	sta     (sp),y
	jsr     _pres
;
; break;
;
	jmp     L2879
;
; else if (level_reset) {
;
L288B:	lda     _level_reset
;
; else {
;
	bne     L286D
;
; if (warp_to_level) continue;
;
	lda     _warp_to_level
	bne     L286D
;
; level ++;
;
	lda     _level
	clc
	adc     #$01
	sta     _level
;
; if (level == MAX_LEVELS) 
;
	cmp     #$12
	bne     L286D
;
; music_play (MUSIC_CUTS);
;
	lda     #$06
	jsr     _music_play
;
; rdm = 2; cutscene ();
;
	lda     #$02
	sta     _rdm
	jsr     _cutscene
;
; rdm = (pemmeralds == 0x3f) ? 4 : 3; cutscene ();
;
	lda     _pemmeralds
	cmp     #$3F
	bne     L28A1
	lda     #$04
	jmp     L28A3
L28A1:	lda     #$03
L28A3:	sta     _rdm
	jsr     _cutscene
;
; music_stop ();
;
	jsr     _music_stop
;
; if (pemmeralds == 0x3f) pres (palts0, scr_the_end);
;
	lda     _pemmeralds
	cmp     #$3F
	bne     L28A7
	jsr     decsp4
	lda     #<(_palts0)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_palts0)
	sta     (sp),y
	lda     #<(_scr_the_end)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_scr_the_end)
	sta     (sp),y
	jsr     _pres
;
; first_game = 1;
;
L28A7:	lda     #$01
	sta     _first_game
;
; first_game = 0;
;
L2879:	lda     #$00
	sta     _first_game
;
; }
;
	jmp     L2867

.endproc

