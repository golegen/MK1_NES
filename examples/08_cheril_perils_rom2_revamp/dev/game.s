;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_ppu_waitnmi
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_write
	.import		_unrle_vram
	.import		_memfill
	.import		_delay
	.export		_palts0
	.export		_palss0
	.export		_palts1
	.export		_palss1
	.export		_paltsgrey
	.export		_palssgrey
	.export		_behs0
	.export		_behs1
	.export		_scr_0_00
	.export		_scr_0_01
	.export		_scr_0_02
	.export		_scr_0_04
	.export		_scr_0_06
	.export		_scr_0_07
	.export		_scr_0_08
	.export		_scr_0_09
	.export		_scr_0_0a
	.export		_scr_0_0c
	.export		_scr_0_0d
	.export		_scr_0_0e
	.export		_scr_0_0f
	.export		_scr_0_12
	.export		_scr_0_13
	.export		_scr_0_14
	.export		_scr_0_15
	.export		_scr_0_16
	.export		_scr_0_17
	.export		_map_0
	.export		_map_0_locks
	.export		_enems_0
	.export		_hotspots_0
	.export		_scr_1_00
	.export		_scr_1_01
	.export		_scr_1_02
	.export		_scr_1_03
	.export		_scr_1_04
	.export		_scr_1_05
	.export		_scr_1_06
	.export		_scr_1_07
	.export		_scr_1_08
	.export		_scr_1_09
	.export		_scr_1_0a
	.export		_scr_1_0b
	.export		_scr_1_0c
	.export		_scr_1_0d
	.export		_scr_1_0e
	.export		_scr_1_0f
	.export		_scr_1_10
	.export		_scr_1_11
	.export		_scr_1_12
	.export		_scr_1_13
	.export		_scr_1_14
	.export		_scr_1_15
	.export		_scr_1_16
	.export		_scr_1_17
	.export		_map_1
	.export		_enems_1
	.export		_hotspots_1
	.export		_sspl_00_a
	.export		_sspl_00_b
	.export		_sspl_01_a
	.export		_sspl_01_b
	.export		_sspl_02_a
	.export		_sspl_02_b
	.export		_sspl_03_a
	.export		_sspl_03_b
	.export		_sspl_04_a
	.export		_sspl_04_b
	.export		_sspl_05_a
	.export		_sspl_05_b
	.export		_sspl_06_a
	.export		_sspl_06_b
	.export		_sspl_07_a
	.export		_sspl_07_b
	.export		_sspl_08_a
	.export		_sspl_08_b
	.export		_sspl_09_a
	.export		_sspl_09_b
	.export		_sspl_0A_a
	.export		_sspl_0A_b
	.export		_sspl_0B_a
	.export		_sspl_0B_b
	.export		_sspl_0C_a
	.export		_sspl_0C_b
	.export		_ssen_00_a
	.export		_ssen_00_b
	.export		_ssen_01_a
	.export		_ssen_01_b
	.export		_ssen_02_a
	.export		_ssen_02_b
	.export		_ssen_03_a
	.export		_ssen_03_b
	.export		_ssen_04_a
	.export		_ssen_04_b
	.export		_ssen_05_a
	.export		_ssen_05_b
	.export		_ssen_06_a
	.export		_ssen_06_b
	.export		_ssen_07_a
	.export		_ssen_07_b
	.export		_ssplat_00
	.export		_ssplat_01
	.export		_ssfanty_00_a
	.export		_ssfanty_00_b
	.export		_ssfanty_01_a
	.export		_ssfanty_01_b
	.export		_sssaw_00
	.export		_sssaw_01
	.export		_ssocl_00
	.export		_ssit_00
	.export		_ssit_01
	.export		_ssit_02
	.export		_ssit_03
	.export		_ssit_04
	.export		_ssit_05
	.export		_ssit_06
	.export		_sssit_00
	.export		_sssit_01
	.export		_sssit_02
	.export		_sssit_03
	.export		_sssit_04
	.export		_sssit_05
	.export		_sssit_06
	.export		_sssit_07
	.export		_sssit_08
	.export		_ts0_pals
	.export		_ts0_tmaps
	.export		_ts1_pals
	.export		_ts1_tmaps
	.export		_spr_player
	.export		_spr_enems0
	.export		_spr_enems1
	.export		_spr_hs
	.export		_l_scr_ini
	.export		_l_ini_x
	.export		_l_ini_y
	.export		_l_map_w
	.export		_l_player_max_objects
	.export		_l_player_max_enems
	.export		_l_pal_bg
	.export		_l_pal_fg
	.export		_l_ts_tmaps
	.export		_l_ts_pals
	.export		_l_behs
	.export		_l_spr_enems
	.export		_l_map
	.export		_l_locks
	.export		_l_n_bolts
	.export		_l_enems
	.export		_l_hotspots
	.export		_text_propellers
	.export		_text_open_gate
	.export		_hud_rle
	.import		_m_ingame
	.export		__x
	.export		__y
	.export		__n
	.export		__t
	.export		_i
	.export		_pad_this_frame
	.export		_gpit
	.export		_gpjt
	.export		_gpitu
	.export		_gpaux
	.export		_rds16
	.export		_gp_gen
	.export		_gp_tmap
	.export		_gp_tma2
	.export		_gp_ram
	.export		_gp_ram_aux
	.export		_gp_addr
	.export		_rdx
	.export		_rdy
	.export		_rdt
	.export		_rdit
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdd
	.export		_rdm
	.export		_rds
	.export		_rdct
	.export		_at1
	.export		_at2
	.export		_cx1
	.export		_cx2
	.export		_cy1
	.export		_cy2
	.export		_caux
	.export		_oam_index
	.export		_en_initial
	.export		_en_offs
	.export		_en_fr
	.export		_en_collx
	.export		_en_colly
	.export		_en_spr
	.export		_touched
	.export		_en_cttouched
	.export		_pregotten
	.export		__en_t
	.export		__en_s
	.export		__en_x
	.export		__en_y
	.export		__en_x1
	.export		__en_y1
	.export		__en_x2
	.export		__en_y2
	.export		__en_mx
	.export		__en_my
	.export		__en_ct
	.export		__en_facing
	.export		__enf_x
	.export		__enf_y
	.export		__enf_vx
	.export		__enf_vy
	.export		_en_life
	.export		_en_alive
	.export		_en_status
	.export		_en_rawv
	.export		_en_ct
	.export		_px
	.export		_py
	.export		_pvx
	.export		_pvy
	.export		_prx
	.export		_pry
	.export		_pfacing
	.export		_pfr
	.export		_pctfr
	.export		_psprid
	.export		_a_button
	.export		_b_button
	.export		_pj
	.export		_pctj
	.export		_pjb
	.export		_pgotten
	.export		_ppossee
	.export		_psprint
	.export		_pushed_any
	.export		_pstate
	.export		_pctstate
	.export		_phit
	.export		_pgtmx
	.export		_pgtmy
	.export		_pinv
	.export		_opinv
	.export		_wall
	.export		_hitv
	.export		_hith
	.export		_pfloating
	.export		_pkilled
	.export		_prx_old
	.export		_pry_old
	.export		_pobjs
	.export		_plife
	.export		_pcontinues
	.export		_pkill
	.export		_pice
	.export		_pnotsafe
	.export		_pkeys
	.export		_pammo
	.export		_pfiring
	.export		_n_pant_safe
	.export		_px_safe
	.export		_py_safe
	.export		_hrx
	.export		_hry
	.export		_hrt
	.export		_do_process_breakable
	.export		_ft
	.export		_c_map_w
	.export		_c_ts_pals
	.export		_c_ts_tmaps
	.export		_c_behs
	.export		_spr_enems
	.export		_c_pal_bg
	.export		_c_pal_fg
	.export		_c_map
	.export		_c_locks
	.export		_c_enems
	.export		_c_hotspots
	.export		_c_max_bolts
	.export		_half_life
	.export		_frame_counter
	.export		_n_pant
	.export		_on_pant
	.export		_olife
	.export		_okeys
	.export		_oobjs
	.export		_oammo
	.export		_okilled
	.export		_use_ct
	.export		_use_sub_ct
	.export		_no_ct
	.export		_level
	.export		_game_over
	.export		_win_level
	.export		_c_max_enems
	.export		_update_index
	.export		_update_list
	.export		_map_attr
	.export		_map_buff
	.export		_fader
	.export		_fade_delay
	.export		_hyx
	.export		_ht
	.export		_hact
	.export		_lkact
	.export		_en_x
	.export		_en_y
	.export		_en_x1
	.export		_en_y1
	.export		_en_x2
	.export		_en_y2
	.export		_en_mx
	.export		_en_my
	.export		_en_t
	.export		_en_s
	.export		_en_facing
	.export		_enf_x
	.export		_enf_vx
	.export		_enf_y
	.export		_enf_vy
	.export		_en_spr_id
	.export		_ep_x
	.export		_ep_y
	.export		_ep_mx
	.export		_ep_my
	.export		_ep_flags
	.export		_prp_idx
	.export		_prp_yx
	.export		_propellers_on
	.export		_max_shines
	.export		_shine_active_x
	.export		_shine_active_y
	.export		_shines
	.export		_shine_active_ct
	.export		_res_on
	.export		_res_ct
	.export		_res_subct
	.export		_cfx
	.export		_pal_cycle
	.export		_propellers_add
	.export		_shines_add
	.export		_cm_two_points
	.export		_collide_in
	.export		_collide
	.export		_add_sign
	.export		_saturate
	.export		_pad_read
	.export		_fade_out
	.export		_fade_in
	.export		_clear_update_list
	.export		_cls
	.export		_ul_putc
	.export		_p_t
	.export		_bitmasks
	.export		_attr_table
	.export		_upd_attr_table
	.export		_draw_tile
	.export		_update_list_tile
	.export		_map_set
	.export		_get_byte
	.export		_add_tile
	.export		_draw_scr
	.export		_pr_str
	.export		_box_buff
	.export		_textbox_frame
	.export		_textbox_draw_text
	.export		_textbox_do
	.export		_bolts_load
	.export		_clear_cerrojo
	.export		_hotspots_load
	.export		_hotspots_paint
	.export		_hotspots_create
	.export		_propellers_do
	.export		_shines_do
	.export		_player_register_safe_spot
	.export		_player_init
	.export		_player_render
	.export		_player_kill
	.export		_player_process_tile
	.export		_player_move
	.export		_enems_persistent_load
	.export		_enems_persistent_update
	.export		_enems_persistent_deaths_load
	.export		_enems_load
	.export		_enems_kill
	.export		_enems_hit
	.export		_enems_move
	.export		_draw_game_frame
	.export		_hud_update
	.export		_game_init
	.export		_prepare_scr
	.export		_game_loop
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_palts0:
	.byte	$0F
	.byte	$0C
	.byte	$12
	.byte	$22
	.byte	$0F
	.byte	$1A
	.byte	$29
	.byte	$39
	.byte	$0F
	.byte	$07
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$04
	.byte	$14
	.byte	$24
_palss0:
	.byte	$0F
	.byte	$04
	.byte	$16
	.byte	$37
	.byte	$0F
	.byte	$02
	.byte	$11
	.byte	$27
	.byte	$0F
	.byte	$1D
	.byte	$1C
	.byte	$2C
	.byte	$0F
	.byte	$07
	.byte	$18
	.byte	$3D
_palts1:
	.byte	$0F
	.byte	$0C
	.byte	$00
	.byte	$35
	.byte	$0F
	.byte	$0B
	.byte	$19
	.byte	$28
	.byte	$0F
	.byte	$07
	.byte	$18
	.byte	$38
	.byte	$0F
	.byte	$18
	.byte	$17
	.byte	$27
_palss1:
	.byte	$0F
	.byte	$04
	.byte	$16
	.byte	$37
	.byte	$0F
	.byte	$0B
	.byte	$29
	.byte	$34
	.byte	$0F
	.byte	$1D
	.byte	$1C
	.byte	$2C
	.byte	$0F
	.byte	$07
	.byte	$28
	.byte	$37
_paltsgrey:
	.byte	$0F
	.byte	$2D
	.byte	$00
	.byte	$10
	.byte	$0F
	.byte	$10
	.byte	$20
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$20
_palssgrey:
	.byte	$0F
	.byte	$1D
	.byte	$00
	.byte	$30
	.byte	$0F
	.byte	$2D
	.byte	$10
	.byte	$20
	.byte	$0F
	.byte	$1D
	.byte	$00
	.byte	$10
	.byte	$0F
	.byte	$1D
	.byte	$10
	.byte	$30
_behs0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$28
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_behs1:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$00
_scr_0_00:
	.byte	$04
	.byte	$40
	.byte	$1F
	.byte	$E0
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$1E
	.byte	$60
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$40
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$3F
	.byte	$00
	.byte	$1D
	.byte	$3F
	.byte	$20
	.byte	$1E
	.byte	$00
	.byte	$1F
	.byte	$60
	.byte	$04
	.byte	$20
	.byte	$1F
	.byte	$60
	.byte	$1F
	.byte	$40
	.byte	$1F
	.byte	$1E
	.byte	$20
	.byte	$04
	.byte	$1D
	.byte	$20
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$1D
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$20
	.byte	$04
	.byte	$1E
	.byte	$40
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$1F
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$EA
	.byte	$CA
	.byte	$04
	.byte	$29
	.byte	$28
	.byte	$09
	.byte	$08
	.byte	$29
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$29
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E7
	.byte	$C7
	.byte	$04
	.byte	$60
	.byte	$0D
	.byte	$60
	.byte	$0D
	.byte	$80
_scr_0_01:
	.byte	$60
	.byte	$1F
	.byte	$E0
	.byte	$00
	.byte	$1F
	.byte	$04
	.byte	$00
	.byte	$1E
	.byte	$60
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$40
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$04
	.byte	$00
	.byte	$1F
	.byte	$20
	.byte	$1D
	.byte	$3F
	.byte	$20
	.byte	$1E
	.byte	$00
	.byte	$1F
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$60
	.byte	$1F
	.byte	$40
	.byte	$1F
	.byte	$1E
	.byte	$00
	.byte	$04
	.byte	$1F
	.byte	$1D
	.byte	$20
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$1D
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$1E
	.byte	$40
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$1F
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$04
	.byte	$EA
	.byte	$CA
	.byte	$04
	.byte	$49
	.byte	$28
	.byte	$09
	.byte	$08
	.byte	$29
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$29
	.byte	$08
	.byte	$04
	.byte	$20
	.byte	$05
	.byte	$E0
	.byte	$60
	.byte	$04
	.byte	$20
	.byte	$04
	.byte	$E0
	.byte	$05
	.byte	$40
	.byte	$04
	.byte	$27
	.byte	$04
	.byte	$C0
	.byte	$05
	.byte	$04
	.byte	$05
	.byte	$20
	.byte	$04
	.byte	$20
	.byte	$04
	.byte	$05
	.byte	$20
	.byte	$65
	.byte	$44
	.byte	$25
	.byte	$04
_scr_0_02:
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E4
	.byte	$E4
_scr_0_04:
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$04
	.byte	$E0
	.byte	$C0
_scr_0_06:
	.byte	$04
	.byte	$60
	.byte	$0D
	.byte	$60
	.byte	$0D
	.byte	$80
	.byte	$04
	.byte	$1F
	.byte	$40
	.byte	$0D
	.byte	$20
	.byte	$1E
	.byte	$00
	.byte	$0D
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$20
	.byte	$04
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$1E
	.byte	$17
	.byte	$00
	.byte	$1F
	.byte	$20
	.byte	$17
	.byte	$40
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$1D
	.byte	$1F
	.byte	$20
	.byte	$1F
	.byte	$20
	.byte	$1D
	.byte	$20
	.byte	$1E
	.byte	$40
	.byte	$04
	.byte	$3F
	.byte	$00
	.byte	$1D
	.byte	$20
	.byte	$1D
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$20
	.byte	$1F
	.byte	$1D
	.byte	$00
	.byte	$04
	.byte	$47
	.byte	$1F
	.byte	$00
	.byte	$E7
	.byte	$20
	.byte	$04
	.byte	$00
	.byte	$1D
	.byte	$1F
	.byte	$00
	.byte	$1D
	.byte	$20
	.byte	$1F
	.byte	$1E
	.byte	$00
	.byte	$0D
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$1E
	.byte	$20
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$1E
	.byte	$20
	.byte	$1F
	.byte	$0D
	.byte	$40
	.byte	$1D
	.byte	$04
	.byte	$EA
	.byte	$2A
	.byte	$17
	.byte	$2A
	.byte	$39
	.byte	$04
	.byte	$29
	.byte	$28
	.byte	$09
	.byte	$08
	.byte	$29
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$29
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$C0
	.byte	$E7
_scr_0_07:
	.byte	$20
	.byte	$24
	.byte	$12
	.byte	$01
	.byte	$E4
	.byte	$24
	.byte	$1F
	.byte	$1D
	.byte	$04
	.byte	$15
	.byte	$12
	.byte	$19
	.byte	$15
	.byte	$03
	.byte	$0D
	.byte	$15
	.byte	$03
	.byte	$0D
	.byte	$13
	.byte	$43
	.byte	$00
	.byte	$1F
	.byte	$04
	.byte	$02
	.byte	$12
	.byte	$03
	.byte	$16
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$0D
	.byte	$12
	.byte	$41
	.byte	$1E
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$12
	.byte	$41
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$0D
	.byte	$12
	.byte	$41
	.byte	$00
	.byte	$1F
	.byte	$04
	.byte	$1A
	.byte	$12
	.byte	$41
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$0D
	.byte	$12
	.byte	$41
	.byte	$00
	.byte	$1D
	.byte	$04
	.byte	$15
	.byte	$12
	.byte	$41
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$0D
	.byte	$12
	.byte	$41
	.byte	$00
	.byte	$1E
	.byte	$04
	.byte	$02
	.byte	$12
	.byte	$41
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$0D
	.byte	$12
	.byte	$41
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$12
	.byte	$05
	.byte	$02
	.byte	$01
	.byte	$17
	.byte	$02
	.byte	$01
	.byte	$17
	.byte	$12
	.byte	$41
	.byte	$39
	.byte	$04
	.byte	$02
	.byte	$12
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$13
	.byte	$16
	.byte	$01
	.byte	$03
	.byte	$12
	.byte	$41
	.byte	$09
	.byte	$08
	.byte	$04
	.byte	$02
	.byte	$12
	.byte	$17
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$20
	.byte	$04
	.byte	$F9
	.byte	$99
	.byte	$27
	.byte	$E4
	.byte	$A5
_scr_0_08:
	.byte	$E4
	.byte	$E4
	.byte	$13
	.byte	$43
	.byte	$0D
	.byte	$15
	.byte	$23
	.byte	$13
	.byte	$03
	.byte	$0D
	.byte	$15
	.byte	$13
	.byte	$43
	.byte	$12
	.byte	$41
	.byte	$0D
	.byte	$02
	.byte	$21
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$0D
	.byte	$02
	.byte	$21
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$0D
	.byte	$02
	.byte	$21
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$0D
	.byte	$02
	.byte	$21
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$0D
	.byte	$02
	.byte	$21
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$17
	.byte	$02
	.byte	$01
	.byte	$05
	.byte	$12
	.byte	$01
	.byte	$17
	.byte	$02
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$13
	.byte	$16
	.byte	$01
	.byte	$0D
	.byte	$12
	.byte	$01
	.byte	$03
	.byte	$16
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$21
	.byte	$17
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$F9
	.byte	$B9
	.byte	$21
	.byte	$E5
	.byte	$E5
_scr_0_09:
	.byte	$E4
	.byte	$E4
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$03
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$03
	.byte	$13
	.byte	$04
	.byte	$15
	.byte	$11
	.byte	$14
	.byte	$23
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$03
	.byte	$16
	.byte	$61
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$A1
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$05
	.byte	$02
	.byte	$61
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$04
	.byte	$85
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$43
	.byte	$13
	.byte	$23
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$21
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$21
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$21
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$21
	.byte	$04
	.byte	$E5
	.byte	$05
	.byte	$02
	.byte	$21
	.byte	$12
	.byte	$21
	.byte	$04
_scr_0_0a:
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
_scr_0_0c:
	.byte	$04
	.byte	$40
	.byte	$1E
	.byte	$40
	.byte	$E7
	.byte	$04
	.byte	$1D
	.byte	$1F
	.byte	$40
	.byte	$1F
	.byte	$1D
	.byte	$80
	.byte	$1D
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$20
	.byte	$1D
	.byte	$20
	.byte	$1E
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$1D
	.byte	$1F
	.byte	$00
	.byte	$1E
	.byte	$20
	.byte	$04
	.byte	$20
	.byte	$1F
	.byte	$E0
	.byte	$60
	.byte	$04
	.byte	$1D
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$07
	.byte	$18
	.byte	$67
	.byte	$1F
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$20
	.byte	$1F
	.byte	$E0
	.byte	$1E
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$1D
	.byte	$1F
	.byte	$00
	.byte	$1D
	.byte	$20
	.byte	$1F
	.byte	$1E
	.byte	$20
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$EA
	.byte	$CA
	.byte	$04
	.byte	$29
	.byte	$28
	.byte	$09
	.byte	$08
	.byte	$29
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$29
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$07
	.byte	$18
	.byte	$47
	.byte	$A0
	.byte	$67
	.byte	$05
	.byte	$60
	.byte	$0D
	.byte	$E0
	.byte	$20
_scr_0_0d:
	.byte	$27
	.byte	$E4
	.byte	$A4
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$15
	.byte	$14
	.byte	$03
	.byte	$CD
	.byte	$15
	.byte	$11
	.byte	$03
	.byte	$00
	.byte	$1D
	.byte	$04
	.byte	$02
	.byte	$21
	.byte	$CD
	.byte	$02
	.byte	$21
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$21
	.byte	$2D
	.byte	$17
	.byte	$6D
	.byte	$02
	.byte	$21
	.byte	$00
	.byte	$1F
	.byte	$04
	.byte	$02
	.byte	$21
	.byte	$0D
	.byte	$17
	.byte	$15
	.byte	$0D
	.byte	$17
	.byte	$2D
	.byte	$02
	.byte	$21
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$21
	.byte	$0D
	.byte	$15
	.byte	$01
	.byte	$0D
	.byte	$15
	.byte	$17
	.byte	$0D
	.byte	$02
	.byte	$21
	.byte	$00
	.byte	$1E
	.byte	$04
	.byte	$02
	.byte	$21
	.byte	$17
	.byte	$02
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$03
	.byte	$17
	.byte	$02
	.byte	$21
	.byte	$4A
	.byte	$16
	.byte	$21
	.byte	$03
	.byte	$16
	.byte	$01
	.byte	$17
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$16
	.byte	$21
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$A1
	.byte	$03
	.byte	$16
	.byte	$61
	.byte	$06
	.byte	$20
	.byte	$05
	.byte	$02
	.byte	$E1
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$A1
	.byte	$06
	.byte	$01
	.byte	$46
	.byte	$20
	.byte	$24
	.byte	$25
	.byte	$18
	.byte	$25
	.byte	$18
	.byte	$25
	.byte	$18
	.byte	$45
_scr_0_0e:
	.byte	$E4
	.byte	$E4
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$11
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$03
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$11
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$03
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$01
	.byte	$1F
	.byte	$1D
	.byte	$12
	.byte	$01
	.byte	$1E
	.byte	$1F
	.byte	$12
	.byte	$01
	.byte	$1D
	.byte	$1E
	.byte	$12
	.byte	$01
	.byte	$1F
	.byte	$1E
	.byte	$12
	.byte	$01
	.byte	$2A
	.byte	$12
	.byte	$01
	.byte	$2A
	.byte	$12
	.byte	$01
	.byte	$2A
	.byte	$12
	.byte	$01
	.byte	$2A
	.byte	$12
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$12
	.byte	$01
	.byte	$08
	.byte	$09
	.byte	$12
	.byte	$01
	.byte	$28
	.byte	$12
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$06
	.byte	$E7
	.byte	$67
	.byte	$02
	.byte	$01
	.byte	$26
	.byte	$23
	.byte	$13
	.byte	$43
	.byte	$13
	.byte	$43
	.byte	$13
	.byte	$03
	.byte	$16
	.byte	$01
	.byte	$26
	.byte	$21
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$12
	.byte	$41
	.byte	$46
	.byte	$01
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$E5
	.byte	$E5
_scr_0_0f:
	.byte	$E4
	.byte	$04
	.byte	$02
	.byte	$21
	.byte	$12
	.byte	$21
	.byte	$04
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$03
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$03
	.byte	$04
	.byte	$27
	.byte	$02
	.byte	$12
	.byte	$21
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$13
	.byte	$23
	.byte	$16
	.byte	$12
	.byte	$21
	.byte	$04
	.byte	$12
	.byte	$01
	.byte	$1F
	.byte	$1D
	.byte	$12
	.byte	$01
	.byte	$1E
	.byte	$1F
	.byte	$12
	.byte	$01
	.byte	$1D
	.byte	$1E
	.byte	$12
	.byte	$21
	.byte	$04
	.byte	$12
	.byte	$01
	.byte	$2A
	.byte	$12
	.byte	$01
	.byte	$2A
	.byte	$12
	.byte	$01
	.byte	$2A
	.byte	$12
	.byte	$27
	.byte	$04
	.byte	$12
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$12
	.byte	$01
	.byte	$08
	.byte	$09
	.byte	$12
	.byte	$01
	.byte	$28
	.byte	$12
	.byte	$23
	.byte	$04
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$21
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$27
	.byte	$02
	.byte	$12
	.byte	$21
	.byte	$04
	.byte	$12
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$23
	.byte	$16
	.byte	$12
	.byte	$01
	.byte	$06
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$01
	.byte	$06
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$26
	.byte	$04
	.byte	$E5
	.byte	$C5
	.byte	$04
_scr_0_12:
	.byte	$04
	.byte	$1F
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$0D
	.byte	$80
	.byte	$1F
	.byte	$20
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$1F
	.byte	$0D
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$20
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$04
	.byte	$1F
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$1E
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$60
	.byte	$04
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$0D
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$40
	.byte	$1D
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$4A
	.byte	$0D
	.byte	$6A
	.byte	$06
	.byte	$AA
	.byte	$04
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$0D
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$87
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$04
	.byte	$20
	.byte	$47
	.byte	$40
	.byte	$0D
	.byte	$00
	.byte	$0D
	.byte	$60
	.byte	$04
	.byte	$1B
	.byte	$2B
	.byte	$0D
	.byte	$1B
	.byte	$4B
	.byte	$0D
	.byte	$1B
	.byte	$0D
	.byte	$1B
	.byte	$4B
	.byte	$04
	.byte	$1C
	.byte	$2C
	.byte	$17
	.byte	$1C
	.byte	$4C
	.byte	$0D
	.byte	$1C
	.byte	$17
	.byte	$1C
	.byte	$07
	.byte	$1C
	.byte	$0C
	.byte	$04
	.byte	$06
	.byte	$1C
	.byte	$6C
	.byte	$06
	.byte	$1C
	.byte	$0D
	.byte	$1C
	.byte	$8C
	.byte	$04
	.byte	$26
	.byte	$1C
	.byte	$2C
	.byte	$46
	.byte	$17
	.byte	$1C
	.byte	$4C
	.byte	$06
	.byte	$1C
	.byte	$04
	.byte	$E5
	.byte	$65
	.byte	$18
	.byte	$25
_scr_0_13:
	.byte	$00
	.byte	$1F
	.byte	$E4
	.byte	$A4
	.byte	$20
	.byte	$04
	.byte	$15
	.byte	$13
	.byte	$11
	.byte	$0D
	.byte	$14
	.byte	$0D
	.byte	$15
	.byte	$11
	.byte	$13
	.byte	$03
	.byte	$0D
	.byte	$15
	.byte	$11
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$1D
	.byte	$1F
	.byte	$04
	.byte	$02
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$4A
	.byte	$16
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$10
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$01
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$17
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$01
	.byte	$17
	.byte	$02
	.byte	$01
	.byte	$40
	.byte	$01
	.byte	$12
	.byte	$01
	.byte	$17
	.byte	$02
	.byte	$03
	.byte	$16
	.byte	$19
	.byte	$1A
	.byte	$02
	.byte	$03
	.byte	$16
	.byte	$01
	.byte	$4B
	.byte	$01
	.byte	$12
	.byte	$01
	.byte	$03
	.byte	$16
	.byte	$21
	.byte	$2E
	.byte	$02
	.byte	$41
	.byte	$4C
	.byte	$01
	.byte	$12
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$27
	.byte	$2E
	.byte	$27
	.byte	$02
	.byte	$01
	.byte	$4C
	.byte	$26
	.byte	$02
	.byte	$21
	.byte	$03
	.byte	$11
	.byte	$2E
	.byte	$15
	.byte	$03
	.byte	$16
	.byte	$01
	.byte	$2C
	.byte	$06
	.byte	$45
	.byte	$02
	.byte	$41
	.byte	$2E
	.byte	$06
	.byte	$02
	.byte	$21
	.byte	$45
	.byte	$44
	.byte	$E5
	.byte	$25
_scr_0_14:
	.byte	$E4
	.byte	$E4
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$11
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$03
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$11
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$03
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$01
	.byte	$1F
	.byte	$1D
	.byte	$12
	.byte	$01
	.byte	$1E
	.byte	$1F
	.byte	$12
	.byte	$01
	.byte	$1D
	.byte	$1E
	.byte	$12
	.byte	$01
	.byte	$1F
	.byte	$1E
	.byte	$12
	.byte	$01
	.byte	$2A
	.byte	$12
	.byte	$01
	.byte	$2A
	.byte	$12
	.byte	$01
	.byte	$2A
	.byte	$12
	.byte	$01
	.byte	$2A
	.byte	$12
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$12
	.byte	$01
	.byte	$08
	.byte	$09
	.byte	$12
	.byte	$01
	.byte	$28
	.byte	$12
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$01
	.byte	$E7
	.byte	$67
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$01
	.byte	$03
	.byte	$11
	.byte	$13
	.byte	$11
	.byte	$23
	.byte	$13
	.byte	$03
	.byte	$11
	.byte	$03
	.byte	$13
	.byte	$11
	.byte	$16
	.byte	$01
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$E5
	.byte	$E5
_scr_0_15:
	.byte	$E4
	.byte	$E4
	.byte	$13
	.byte	$03
	.byte	$0D
	.byte	$03
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$03
	.byte	$13
	.byte	$03
	.byte	$14
	.byte	$03
	.byte	$0D
	.byte	$14
	.byte	$03
	.byte	$04
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$41
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$00
	.byte	$12
	.byte	$01
	.byte	$1F
	.byte	$00
	.byte	$12
	.byte	$01
	.byte	$00
	.byte	$1F
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$12
	.byte	$01
	.byte	$0D
	.byte	$0A
	.byte	$12
	.byte	$01
	.byte	$2A
	.byte	$12
	.byte	$01
	.byte	$2A
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$12
	.byte	$01
	.byte	$17
	.byte	$08
	.byte	$12
	.byte	$01
	.byte	$08
	.byte	$09
	.byte	$12
	.byte	$01
	.byte	$09
	.byte	$08
	.byte	$17
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$12
	.byte	$01
	.byte	$20
	.byte	$13
	.byte	$16
	.byte	$01
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$85
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$21
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$84
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$21
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$84
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$21
	.byte	$04
	.byte	$12
	.byte	$41
	.byte	$12
	.byte	$84
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$21
	.byte	$0F
	.byte	$25
	.byte	$18
	.byte	$25
	.byte	$84
	.byte	$25
	.byte	$18
	.byte	$45
_scr_0_16:
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$E5
	.byte	$E5
_scr_0_17:
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E5
	.byte	$E5
_map_0:
	.addr	_scr_0_00
	.addr	_scr_0_01
	.addr	_scr_0_02
	.addr	_scr_0_02
	.addr	_scr_0_04
	.word	$0000
	.addr	_scr_0_06
	.addr	_scr_0_07
	.addr	_scr_0_08
	.addr	_scr_0_09
	.addr	_scr_0_0a
	.word	$0000
	.addr	_scr_0_0c
	.addr	_scr_0_0d
	.addr	_scr_0_0e
	.addr	_scr_0_0f
	.addr	_scr_0_0a
	.word	$0000
	.addr	_scr_0_12
	.addr	_scr_0_13
	.addr	_scr_0_14
	.addr	_scr_0_15
	.addr	_scr_0_16
	.addr	_scr_0_17
_map_0_locks:
	.byte	$15
	.byte	$AF
_enems_0:
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$2B
	.byte	$2A
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$56
	.byte	$5C
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$A6
	.byte	$AD
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$A8
	.byte	$AD
	.byte	$01
	.byte	$01
	.byte	$A6
	.byte	$A3
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$58
	.byte	$B8
	.byte	$02
	.byte	$06
	.byte	$3C
	.byte	$3B
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$A1
	.byte	$A4
	.byte	$01
	.byte	$02
	.byte	$4A
	.byte	$45
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$38
	.byte	$37
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$BC
	.byte	$B3
	.byte	$02
	.byte	$06
	.byte	$79
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$5C
	.byte	$5A
	.byte	$01
	.byte	$02
	.byte	$BA
	.byte	$BD
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$B9
	.byte	$B6
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$C2
	.byte	$CD
	.byte	$00
	.byte	$06
	.byte	$37
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$89
	.byte	$85
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
_hotspots_0:
	.byte	$03
	.byte	$A2
	.byte	$06
	.byte	$9B
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$52
	.byte	$04
	.byte	$75
	.byte	$04
	.byte	$77
	.byte	$0E
	.byte	$5C
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$49
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$B6
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$49
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$B6
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
_scr_1_00:
	.byte	$00
	.byte	$81
	.byte	$02
	.byte	$E1
	.byte	$01
	.byte	$0D
	.byte	$61
	.byte	$02
	.byte	$00
	.byte	$61
	.byte	$02
	.byte	$41
	.byte	$02
	.byte	$03
	.byte	$21
	.byte	$02
	.byte	$01
	.byte	$20
	.byte	$41
	.byte	$02
	.byte	$00
	.byte	$21
	.byte	$02
	.byte	$00
	.byte	$21
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$02
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$02
	.byte	$40
	.byte	$22
	.byte	$20
	.byte	$02
	.byte	$01
	.byte	$20
	.byte	$01
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$20
	.byte	$01
	.byte	$E0
	.byte	$60
	.byte	$02
	.byte	$20
	.byte	$01
	.byte	$E0
	.byte	$A0
	.byte	$0D
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$E0
	.byte	$60
	.byte	$03
	.byte	$01
	.byte	$0F
	.byte	$07
	.byte	$0B
	.byte	$E0
	.byte	$20
	.byte	$03
	.byte	$21
	.byte	$43
	.byte	$04
	.byte	$E0
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$41
	.byte	$E0
	.byte	$20
	.byte	$03
	.byte	$01
_scr_1_01:
	.byte	$01
	.byte	$22
	.byte	$C1
	.byte	$02
	.byte	$81
	.byte	$02
	.byte	$20
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$21
	.byte	$22
	.byte	$00
	.byte	$61
	.byte	$02
	.byte	$60
	.byte	$02
	.byte	$00
	.byte	$21
	.byte	$40
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$C0
	.byte	$02
	.byte	$01
	.byte	$60
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$02
	.byte	$A0
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$00
	.byte	$0F
	.byte	$E0
	.byte	$C0
	.byte	$03
	.byte	$E0
	.byte	$C0
	.byte	$01
	.byte	$60
	.byte	$17
	.byte	$80
	.byte	$17
	.byte	$60
	.byte	$01
	.byte	$04
	.byte	$E0
	.byte	$A0
	.byte	$01
	.byte	$E0
	.byte	$A0
	.byte	$03
_scr_1_02:
	.byte	$81
	.byte	$02
	.byte	$81
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$21
	.byte	$02
	.byte	$61
	.byte	$00
	.byte	$02
	.byte	$41
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$21
	.byte	$02
	.byte	$20
	.byte	$02
	.byte	$21
	.byte	$20
	.byte	$02
	.byte	$20
	.byte	$02
	.byte	$20
	.byte	$22
	.byte	$60
	.byte	$22
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$05
	.byte	$E0
	.byte	$00
	.byte	$0B
	.byte	$80
	.byte	$06
	.byte	$C0
	.byte	$0D
	.byte	$43
	.byte	$60
	.byte	$06
	.byte	$A0
	.byte	$23
_scr_1_03:
	.byte	$41
	.byte	$02
	.byte	$61
	.byte	$22
	.byte	$41
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$21
	.byte	$20
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$40
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$60
	.byte	$02
	.byte	$60
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$2E
	.byte	$0F
	.byte	$60
	.byte	$17
	.byte	$60
	.byte	$17
	.byte	$40
	.byte	$63
	.byte	$E0
	.byte	$40
	.byte	$03
_scr_1_04:
	.byte	$21
	.byte	$02
	.byte	$21
	.byte	$02
	.byte	$61
	.byte	$22
	.byte	$41
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$21
	.byte	$22
	.byte	$20
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$02
	.byte	$20
	.byte	$02
	.byte	$01
	.byte	$80
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$02
	.byte	$E0
	.byte	$C0
	.byte	$17
	.byte	$E0
	.byte	$C0
	.byte	$17
	.byte	$20
	.byte	$17
	.byte	$E0
	.byte	$80
	.byte	$37
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$60
	.byte	$0C
	.byte	$60
	.byte	$0C
	.byte	$03
	.byte	$60
	.byte	$23
	.byte	$0F
	.byte	$17
	.byte	$0D
	.byte	$03
	.byte	$0F
	.byte	$37
	.byte	$0D
	.byte	$03
	.byte	$01
	.byte	$0F
	.byte	$20
	.byte	$03
	.byte	$21
	.byte	$43
	.byte	$01
	.byte	$63
	.byte	$21
	.byte	$43
_scr_1_05:
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$61
	.byte	$02
	.byte	$21
	.byte	$02
	.byte	$41
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$21
	.byte	$02
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$02
	.byte	$21
	.byte	$00
	.byte	$02
	.byte	$60
	.byte	$22
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$E0
	.byte	$A0
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$04
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$20
	.byte	$05
	.byte	$E0
	.byte	$40
	.byte	$05
	.byte	$40
	.byte	$06
	.byte	$E0
	.byte	$40
	.byte	$07
	.byte	$40
	.byte	$07
	.byte	$40
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$40
	.byte	$04
	.byte	$C3
	.byte	$20
	.byte	$01
	.byte	$1A
_scr_1_06:
	.byte	$21
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$42
	.byte	$01
	.byte	$22
	.byte	$28
	.byte	$22
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$02
	.byte	$20
	.byte	$28
	.byte	$A0
	.byte	$02
	.byte	$C0
	.byte	$28
	.byte	$E0
	.byte	$A0
	.byte	$08
	.byte	$02
	.byte	$E0
	.byte	$A0
	.byte	$1D
	.byte	$15
	.byte	$E0
	.byte	$A0
	.byte	$1E
	.byte	$15
	.byte	$24
	.byte	$A0
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$0C
	.byte	$0D
	.byte	$28
	.byte	$05
	.byte	$C0
	.byte	$04
	.byte	$83
	.byte	$28
	.byte	$06
	.byte	$E0
	.byte	$22
	.byte	$41
	.byte	$03
	.byte	$08
	.byte	$06
	.byte	$E0
	.byte	$20
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$07
	.byte	$E0
	.byte	$40
	.byte	$02
	.byte	$00
	.byte	$21
	.byte	$03
	.byte	$FA
	.byte	$9A
	.byte	$02
	.byte	$21
_scr_1_07:
	.byte	$41
	.byte	$02
	.byte	$F5
	.byte	$15
	.byte	$02
	.byte	$61
	.byte	$02
	.byte	$05
	.byte	$F5
	.byte	$35
	.byte	$41
	.byte	$02
	.byte	$15
	.byte	$06
	.byte	$F5
	.byte	$35
	.byte	$01
	.byte	$22
	.byte	$35
	.byte	$06
	.byte	$F5
	.byte	$35
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$06
	.byte	$F5
	.byte	$15
	.byte	$03
	.byte	$21
	.byte	$55
	.byte	$07
	.byte	$F5
	.byte	$15
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$05
	.byte	$F5
	.byte	$75
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$06
	.byte	$F5
	.byte	$75
	.byte	$41
	.byte	$06
	.byte	$55
	.byte	$05
	.byte	$75
	.byte	$05
	.byte	$35
	.byte	$03
	.byte	$02
	.byte	$21
	.byte	$06
	.byte	$55
	.byte	$06
	.byte	$75
	.byte	$06
	.byte	$35
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$08
	.byte	$35
	.byte	$07
	.byte	$75
	.byte	$07
	.byte	$15
	.byte	$03
	.byte	$02
	.byte	$21
	.byte	$A3
	.byte	$2A
	.byte	$43
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$01
_scr_1_08:
	.byte	$00
	.byte	$21
	.byte	$02
	.byte	$E0
	.byte	$20
	.byte	$21
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$C0
	.byte	$23
	.byte	$02
	.byte	$01
	.byte	$0D
	.byte	$01
	.byte	$E0
	.byte	$20
	.byte	$22
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$E0
	.byte	$20
	.byte	$23
	.byte	$61
	.byte	$40
	.byte	$04
	.byte	$A0
	.byte	$02
	.byte	$81
	.byte	$40
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$80
	.byte	$02
	.byte	$41
	.byte	$02
	.byte	$40
	.byte	$43
	.byte	$A0
	.byte	$41
	.byte	$40
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$A0
	.byte	$41
	.byte	$80
	.byte	$02
	.byte	$60
	.byte	$0B
	.byte	$20
	.byte	$02
	.byte	$21
	.byte	$E0
	.byte	$20
	.byte	$09
	.byte	$40
	.byte	$21
	.byte	$04
	.byte	$E0
	.byte	$80
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$01
_scr_1_09:
	.byte	$01
	.byte	$0F
	.byte	$E0
	.byte	$80
	.byte	$21
	.byte	$03
	.byte	$E0
	.byte	$80
	.byte	$02
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$00
	.byte	$09
	.byte	$E0
	.byte	$60
	.byte	$21
	.byte	$E0
	.byte	$0B
	.byte	$80
	.byte	$21
	.byte	$0F
	.byte	$C0
	.byte	$09
	.byte	$80
	.byte	$21
	.byte	$03
	.byte	$40
	.byte	$09
	.byte	$A0
	.byte	$09
	.byte	$20
	.byte	$41
	.byte	$E0
	.byte	$80
	.byte	$21
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$0C
	.byte	$40
	.byte	$21
	.byte	$E0
	.byte	$20
	.byte	$09
	.byte	$40
	.byte	$21
	.byte	$E0
	.byte	$80
	.byte	$03
_scr_1_0a:
	.byte	$41
	.byte	$0B
	.byte	$40
	.byte	$06
	.byte	$A0
	.byte	$01
	.byte	$22
	.byte	$21
	.byte	$03
	.byte	$40
	.byte	$06
	.byte	$80
	.byte	$03
	.byte	$01
	.byte	$20
	.byte	$02
	.byte	$21
	.byte	$03
	.byte	$2A
	.byte	$07
	.byte	$6A
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$2A
	.byte	$03
	.byte	$6A
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$2A
	.byte	$01
	.byte	$6A
	.byte	$01
	.byte	$80
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$02
	.byte	$3A
	.byte	$00
	.byte	$1A
	.byte	$01
	.byte	$C0
	.byte	$01
	.byte	$03
	.byte	$1A
	.byte	$43
	.byte	$1A
	.byte	$03
	.byte	$02
	.byte	$C0
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$42
	.byte	$03
	.byte	$02
	.byte	$E0
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$02
	.byte	$E0
	.byte	$40
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$0B
	.byte	$0D
	.byte	$0F
	.byte	$60
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$60
	.byte	$0D
	.byte	$E3
	.byte	$C3
	.byte	$21
_scr_1_0b:
	.byte	$02
	.byte	$41
	.byte	$0F
	.byte	$E0
	.byte	$20
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$E0
	.byte	$20
	.byte	$05
	.byte	$20
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$20
	.byte	$06
	.byte	$60
	.byte	$01
	.byte	$0E
	.byte	$0F
	.byte	$0C
	.byte	$C0
	.byte	$06
	.byte	$60
	.byte	$01
	.byte	$43
	.byte	$60
	.byte	$03
	.byte	$20
	.byte	$06
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$01
	.byte	$20
	.byte	$06
	.byte	$60
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$6A
	.byte	$01
	.byte	$20
	.byte	$06
	.byte	$60
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$6A
	.byte	$01
	.byte	$20
	.byte	$06
	.byte	$00
	.byte	$0D
	.byte	$0F
	.byte	$40
	.byte	$02
	.byte	$00
	.byte	$6A
	.byte	$01
	.byte	$0F
	.byte	$00
	.byte	$06
	.byte	$0D
	.byte	$23
	.byte	$0F
	.byte	$60
	.byte	$21
	.byte	$02
	.byte	$21
	.byte	$03
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$22
	.byte	$03
	.byte	$0B
	.byte	$40
	.byte	$22
	.byte	$00
	.byte	$02
	.byte	$21
	.byte	$0A
	.byte	$07
	.byte	$01
	.byte	$20
	.byte	$01
	.byte	$03
	.byte	$C0
	.byte	$21
	.byte	$0A
	.byte	$08
_scr_1_0c:
	.byte	$E8
	.byte	$E8
	.byte	$05
	.byte	$F5
	.byte	$B5
	.byte	$05
	.byte	$06
	.byte	$F5
	.byte	$B5
	.byte	$26
	.byte	$F5
	.byte	$B5
	.byte	$26
	.byte	$95
	.byte	$05
	.byte	$55
	.byte	$05
	.byte	$75
	.byte	$26
	.byte	$95
	.byte	$06
	.byte	$55
	.byte	$06
	.byte	$75
	.byte	$26
	.byte	$95
	.byte	$06
	.byte	$03
	.byte	$12
	.byte	$03
	.byte	$06
	.byte	$75
	.byte	$26
	.byte	$95
	.byte	$07
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$07
	.byte	$04
	.byte	$55
	.byte	$26
	.byte	$95
	.byte	$08
	.byte	$01
	.byte	$48
	.byte	$75
	.byte	$26
	.byte	$B5
	.byte	$02
	.byte	$D5
	.byte	$06
	.byte	$07
	.byte	$0D
	.byte	$0E
	.byte	$03
	.byte	$0F
	.byte	$D5
	.byte	$0C
	.byte	$05
	.byte	$0E
	.byte	$07
	.byte	$48
	.byte	$02
	.byte	$23
	.byte	$75
	.byte	$A8
_scr_1_0d:
	.byte	$08
	.byte	$60
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$02
	.byte	$20
	.byte	$21
	.byte	$05
	.byte	$04
	.byte	$60
	.byte	$02
	.byte	$00
	.byte	$21
	.byte	$02
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$C0
	.byte	$22
	.byte	$60
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$E0
	.byte	$C0
	.byte	$06
	.byte	$24
	.byte	$E0
	.byte	$80
	.byte	$06
	.byte	$E0
	.byte	$40
	.byte	$24
	.byte	$20
	.byte	$06
	.byte	$E0
	.byte	$C0
	.byte	$06
	.byte	$40
	.byte	$04
	.byte	$80
	.byte	$04
	.byte	$80
	.byte	$06
	.byte	$E0
	.byte	$40
	.byte	$0C
	.byte	$40
	.byte	$06
	.byte	$60
	.byte	$0D
	.byte	$0F
	.byte	$80
	.byte	$03
	.byte	$0F
	.byte	$20
	.byte	$07
	.byte	$0F
	.byte	$20
	.byte	$0D
	.byte	$23
	.byte	$00
	.byte	$0C
	.byte	$0B
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$03
	.byte	$0F
	.byte	$00
	.byte	$08
	.byte	$63
	.byte	$21
	.byte	$83
	.byte	$21
	.byte	$23
_scr_1_0e:
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$02
	.byte	$41
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$42
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$60
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$02
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$C0
	.byte	$04
	.byte	$E0
	.byte	$E0
	.byte	$04
	.byte	$E0
	.byte	$E0
	.byte	$80
	.byte	$0C
	.byte	$A0
	.byte	$0B
	.byte	$C0
	.byte	$24
	.byte	$20
	.byte	$0D
	.byte	$0E
	.byte	$03
	.byte	$0C
	.byte	$03
	.byte	$0B
	.byte	$E0
	.byte	$20
	.byte	$23
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$E0
	.byte	$20
_scr_1_0f:
	.byte	$01
	.byte	$02
	.byte	$41
	.byte	$2A
	.byte	$41
	.byte	$0A
	.byte	$41
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$02
	.byte	$21
	.byte	$0A
	.byte	$81
	.byte	$40
	.byte	$02
	.byte	$60
	.byte	$22
	.byte	$00
	.byte	$02
	.byte	$61
	.byte	$E0
	.byte	$60
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$E0
	.byte	$80
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$C0
	.byte	$01
	.byte	$E0
	.byte	$C0
	.byte	$01
	.byte	$E0
	.byte	$C0
	.byte	$01
	.byte	$E0
	.byte	$C0
	.byte	$01
	.byte	$40
	.byte	$04
	.byte	$60
	.byte	$24
	.byte	$83
	.byte	$01
	.byte	$E0
	.byte	$20
	.byte	$62
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
_scr_1_10:
	.byte	$01
	.byte	$00
	.byte	$0B
	.byte	$E0
	.byte	$60
	.byte	$21
	.byte	$00
	.byte	$09
	.byte	$E0
	.byte	$60
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$03
	.byte	$20
	.byte	$0C
	.byte	$E0
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$20
	.byte	$09
	.byte	$E0
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$08
	.byte	$01
	.byte	$E0
	.byte	$60
	.byte	$03
	.byte	$01
	.byte	$08
	.byte	$01
	.byte	$40
	.byte	$0B
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$01
	.byte	$0F
	.byte	$20
	.byte	$09
	.byte	$C0
	.byte	$0D
	.byte	$01
	.byte	$28
	.byte	$02
	.byte	$03
	.byte	$0F
	.byte	$C0
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$48
	.byte	$01
	.byte	$03
	.byte	$0F
	.byte	$E0
	.byte	$21
	.byte	$48
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$4A
	.byte	$23
	.byte	$2A
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$48
	.byte	$02
	.byte	$08
	.byte	$01
	.byte	$43
	.byte	$22
	.byte	$23
	.byte	$01
	.byte	$02
	.byte	$28
_scr_1_11:
	.byte	$21
	.byte	$E0
	.byte	$60
	.byte	$0D
	.byte	$02
	.byte	$21
	.byte	$E0
	.byte	$60
	.byte	$28
	.byte	$21
	.byte	$E0
	.byte	$80
	.byte	$05
	.byte	$21
	.byte	$0F
	.byte	$E0
	.byte	$60
	.byte	$06
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$E0
	.byte	$00
	.byte	$09
	.byte	$20
	.byte	$06
	.byte	$08
	.byte	$21
	.byte	$E0
	.byte	$60
	.byte	$06
	.byte	$08
	.byte	$21
	.byte	$60
	.byte	$09
	.byte	$C0
	.byte	$06
	.byte	$08
	.byte	$21
	.byte	$0F
	.byte	$A0
	.byte	$09
	.byte	$60
	.byte	$06
	.byte	$08
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$0F
	.byte	$E0
	.byte	$20
	.byte	$06
	.byte	$28
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$E0
	.byte	$20
	.byte	$06
	.byte	$48
	.byte	$02
	.byte	$01
	.byte	$0D
	.byte	$2E
	.byte	$0F
	.byte	$0C
	.byte	$20
	.byte	$0D
	.byte	$2E
	.byte	$07
	.byte	$68
	.byte	$01
	.byte	$E3
	.byte	$23
	.byte	$08
_scr_1_12:
	.byte	$22
	.byte	$01
	.byte	$22
	.byte	$21
	.byte	$02
	.byte	$61
	.byte	$22
	.byte	$03
	.byte	$02
	.byte	$28
	.byte	$02
	.byte	$15
	.byte	$03
	.byte	$22
	.byte	$15
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$15
	.byte	$01
	.byte	$08
	.byte	$05
	.byte	$55
	.byte	$02
	.byte	$03
	.byte	$35
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$15
	.byte	$01
	.byte	$15
	.byte	$01
	.byte	$08
	.byte	$06
	.byte	$75
	.byte	$02
	.byte	$35
	.byte	$21
	.byte	$02
	.byte	$15
	.byte	$02
	.byte	$15
	.byte	$02
	.byte	$08
	.byte	$06
	.byte	$D5
	.byte	$01
	.byte	$02
	.byte	$95
	.byte	$08
	.byte	$06
	.byte	$D5
	.byte	$02
	.byte	$B5
	.byte	$08
	.byte	$06
	.byte	$F5
	.byte	$B5
	.byte	$08
	.byte	$06
	.byte	$0F
	.byte	$F5
	.byte	$95
	.byte	$08
	.byte	$06
	.byte	$03
	.byte	$F5
	.byte	$B5
	.byte	$06
	.byte	$01
	.byte	$35
	.byte	$05
	.byte	$0B
	.byte	$35
	.byte	$05
	.byte	$D5
	.byte	$07
	.byte	$02
	.byte	$03
	.byte	$15
	.byte	$07
	.byte	$03
	.byte	$13
	.byte	$08
	.byte	$07
	.byte	$35
	.byte	$0C
	.byte	$0B
	.byte	$35
	.byte	$48
	.byte	$02
	.byte	$E8
	.byte	$23
	.byte	$48
_scr_1_13:
	.byte	$02
	.byte	$20
	.byte	$02
	.byte	$01
	.byte	$C0
	.byte	$02
	.byte	$01
	.byte	$0A
	.byte	$28
	.byte	$40
	.byte	$02
	.byte	$03
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$60
	.byte	$01
	.byte	$E0
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$60
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$28
	.byte	$C0
	.byte	$09
	.byte	$C0
	.byte	$08
	.byte	$80
	.byte	$03
	.byte	$E0
	.byte	$00
	.byte	$08
	.byte	$80
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$08
	.byte	$35
	.byte	$E0
	.byte	$09
	.byte	$60
	.byte	$95
	.byte	$E0
	.byte	$20
	.byte	$0D
	.byte	$55
	.byte	$09
	.byte	$35
	.byte	$E0
	.byte	$00
	.byte	$28
	.byte	$B5
	.byte	$C0
	.byte	$0D
	.byte	$E8
	.byte	$E8
	.byte	$08
_scr_1_14:
	.byte	$68
	.byte	$02
	.byte	$01
	.byte	$75
	.byte	$A8
	.byte	$05
	.byte	$60
	.byte	$02
	.byte	$55
	.byte	$09
	.byte	$80
	.byte	$05
	.byte	$07
	.byte	$E0
	.byte	$80
	.byte	$03
	.byte	$07
	.byte	$08
	.byte	$80
	.byte	$0B
	.byte	$40
	.byte	$0C
	.byte	$0B
	.byte	$0D
	.byte	$03
	.byte	$02
	.byte	$08
	.byte	$A0
	.byte	$08
	.byte	$40
	.byte	$43
	.byte	$02
	.byte	$A0
	.byte	$0D
	.byte	$68
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$A0
	.byte	$08
	.byte	$60
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$08
	.byte	$C0
	.byte	$08
	.byte	$E0
	.byte	$40
	.byte	$0E
	.byte	$0F
	.byte	$00
	.byte	$09
	.byte	$E0
	.byte	$60
	.byte	$08
	.byte	$09
	.byte	$80
	.byte	$0C
	.byte	$2B
	.byte	$80
	.byte	$28
	.byte	$0E
	.byte	$0F
	.byte	$0C
	.byte	$0B
	.byte	$00
	.byte	$0D
	.byte	$48
	.byte	$0F
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$E8
	.byte	$E8
	.byte	$28
_scr_1_15:
	.byte	$08
	.byte	$02
	.byte	$41
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$61
	.byte	$02
	.byte	$41
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$22
	.byte	$21
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$15
	.byte	$02
	.byte	$08
	.byte	$E0
	.byte	$00
	.byte	$02
	.byte	$40
	.byte	$35
	.byte	$E0
	.byte	$A0
	.byte	$35
	.byte	$E0
	.byte	$A0
	.byte	$35
	.byte	$E0
	.byte	$A0
	.byte	$35
	.byte	$E0
	.byte	$A0
	.byte	$35
	.byte	$E0
	.byte	$A0
	.byte	$35
	.byte	$08
	.byte	$E0
	.byte	$00
	.byte	$0C
	.byte	$0D
	.byte	$0F
	.byte	$00
	.byte	$35
	.byte	$08
	.byte	$40
	.byte	$0D
	.byte	$2E
	.byte	$0F
	.byte	$00
	.byte	$0D
	.byte	$43
	.byte	$0F
	.byte	$0C
	.byte	$15
	.byte	$88
	.byte	$3A
	.byte	$28
	.byte	$03
	.byte	$41
	.byte	$03
	.byte	$28
_scr_1_16:
	.byte	$21
	.byte	$02
	.byte	$21
	.byte	$03
	.byte	$0B
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$15
	.byte	$22
	.byte	$01
	.byte	$23
	.byte	$0F
	.byte	$C0
	.byte	$02
	.byte	$75
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$23
	.byte	$0F
	.byte	$0C
	.byte	$60
	.byte	$B5
	.byte	$02
	.byte	$15
	.byte	$22
	.byte	$23
	.byte	$0F
	.byte	$40
	.byte	$F5
	.byte	$35
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$40
	.byte	$F5
	.byte	$35
	.byte	$01
	.byte	$15
	.byte	$01
	.byte	$0E
	.byte	$0F
	.byte	$00
	.byte	$F5
	.byte	$35
	.byte	$02
	.byte	$15
	.byte	$01
	.byte	$23
	.byte	$00
	.byte	$F5
	.byte	$75
	.byte	$02
	.byte	$21
	.byte	$0E
	.byte	$B5
	.byte	$05
	.byte	$B5
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$35
	.byte	$05
	.byte	$0C
	.byte	$35
	.byte	$06
	.byte	$D5
	.byte	$22
	.byte	$15
	.byte	$0D
	.byte	$07
	.byte	$08
	.byte	$14
	.byte	$03
	.byte	$07
	.byte	$0B
	.byte	$15
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$15
	.byte	$0D
	.byte	$2E
	.byte	$68
	.byte	$03
	.byte	$01
	.byte	$23
	.byte	$88
	.byte	$43
_scr_1_17:
	.byte	$E0
	.byte	$A0
	.byte	$02
	.byte	$01
	.byte	$20
	.byte	$04
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$80
	.byte	$04
	.byte	$E0
	.byte	$00
	.byte	$01
	.byte	$E0
	.byte	$C0
	.byte	$01
	.byte	$E0
	.byte	$20
	.byte	$04
	.byte	$60
	.byte	$01
	.byte	$E0
	.byte	$20
	.byte	$04
	.byte	$60
	.byte	$01
	.byte	$E0
	.byte	$C0
	.byte	$01
	.byte	$0F
	.byte	$E0
	.byte	$A0
	.byte	$01
	.byte	$03
	.byte	$E0
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$03
	.byte	$E0
	.byte	$00
	.byte	$0D
	.byte	$0E
	.byte	$01
	.byte	$2E
	.byte	$03
	.byte	$01
	.byte	$EA
	.byte	$43
	.byte	$01
	.byte	$23
	.byte	$01
	.byte	$02
	.byte	$FA
	.byte	$22
	.byte	$21
_map_1:
	.addr	_scr_1_00
	.addr	_scr_1_01
	.addr	_scr_1_02
	.addr	_scr_1_03
	.addr	_scr_1_04
	.addr	_scr_1_05
	.addr	_scr_1_06
	.addr	_scr_1_07
	.addr	_scr_1_08
	.addr	_scr_1_09
	.addr	_scr_1_0a
	.addr	_scr_1_0b
	.addr	_scr_1_0c
	.addr	_scr_1_0d
	.addr	_scr_1_0e
	.addr	_scr_1_0f
	.addr	_scr_1_10
	.addr	_scr_1_11
	.addr	_scr_1_12
	.addr	_scr_1_13
	.addr	_scr_1_14
	.addr	_scr_1_15
	.addr	_scr_1_16
	.addr	_scr_1_17
_enems_1:
	.byte	$04
	.byte	$93
	.byte	$9E
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$B1
	.byte	$BE
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$47
	.byte	$97
	.byte	$02
	.byte	$04
	.byte	$CD
	.byte	$C8
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$C4
	.byte	$CE
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$A6
	.byte	$46
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$B7
	.byte	$B9
	.byte	$02
	.byte	$06
	.byte	$8A
	.byte	$89
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$7C
	.byte	$78
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$89
	.byte	$79
	.byte	$00
	.byte	$06
	.byte	$84
	.byte	$74
	.byte	$00
	.byte	$06
	.byte	$4D
	.byte	$3D
	.byte	$00
	.byte	$02
	.byte	$67
	.byte	$65
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$36
	.byte	$76
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$BD
	.byte	$B7
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$6B
	.byte	$68
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$4A
	.byte	$3A
	.byte	$00
	.byte	$06
	.byte	$46
	.byte	$36
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$41
	.byte	$42
	.byte	$01
	.byte	$02
	.byte	$5D
	.byte	$5C
	.byte	$01
	.byte	$02
	.byte	$B7
	.byte	$BB
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$9E
	.byte	$9A
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$A4
	.byte	$AC
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$BE
	.byte	$B5
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$42
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$BE
	.byte	$B1
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$59
	.byte	$57
	.byte	$01
	.byte	$02
	.byte	$A9
	.byte	$A7
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$B9
	.byte	$B1
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$86
	.byte	$85
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$AE
	.byte	$AC
	.byte	$02
	.byte	$01
	.byte	$AC
	.byte	$AE
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
_hotspots_1:
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$B3
	.byte	$04
	.byte	$9C
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$77
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$9B
	.byte	$04
	.byte	$7D
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$9D
	.byte	$09
	.byte	$68
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$04
	.byte	$8B
	.byte	$00
	.byte	$10
	.byte	$0A
	.byte	$A6
	.byte	$04
	.byte	$93
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$A4
	.byte	$00
	.byte	$10
_sspl_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$0C
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$80
_sspl_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0C
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$0F
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$0E
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$40
	.byte	$80
_sspl_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$12
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$13
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$15
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$17
	.byte	$00
	.byte	$80
_sspl_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$13
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$12
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$15
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$14
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$17
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$16
	.byte	$40
	.byte	$80
_sspl_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$18
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$19
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$1A
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$1B
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1D
	.byte	$00
	.byte	$80
_sspl_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$19
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$18
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$1B
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$1A
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1D
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$1C
	.byte	$40
	.byte	$80
_sspl_03_a:
	.byte	$FC
	.byte	$F8
	.byte	$1E
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$1F
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$22
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$23
	.byte	$00
	.byte	$80
_sspl_03_b:
	.byte	$FC
	.byte	$F8
	.byte	$1F
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$1E
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$21
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$20
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$23
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$22
	.byte	$40
	.byte	$80
_sspl_04_a:
	.byte	$FC
	.byte	$F8
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$25
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$26
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$28
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$29
	.byte	$00
	.byte	$80
_sspl_04_b:
	.byte	$FC
	.byte	$F8
	.byte	$25
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$24
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$27
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$26
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$29
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$28
	.byte	$40
	.byte	$80
_sspl_05_a:
	.byte	$FC
	.byte	$F8
	.byte	$2A
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$2B
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$2C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$2D
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$2E
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$2F
	.byte	$00
	.byte	$80
_sspl_05_b:
	.byte	$FC
	.byte	$F8
	.byte	$2B
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$2A
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$2D
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$2C
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$2F
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$2E
	.byte	$40
	.byte	$80
_sspl_06_a:
	.byte	$FC
	.byte	$F8
	.byte	$30
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$2B
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$31
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$32
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$33
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$34
	.byte	$00
	.byte	$80
_sspl_06_b:
	.byte	$FC
	.byte	$F8
	.byte	$2B
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$30
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$32
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$31
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$34
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$33
	.byte	$40
	.byte	$80
_sspl_07_a:
	.byte	$FC
	.byte	$F8
	.byte	$35
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$36
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$39
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$3A
	.byte	$00
	.byte	$80
_sspl_07_b:
	.byte	$FC
	.byte	$F8
	.byte	$36
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$35
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$38
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$37
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$3A
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$39
	.byte	$40
	.byte	$80
_sspl_08_a:
	.byte	$FC
	.byte	$F8
	.byte	$3B
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$3C
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$3D
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$3E
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$3F
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$40
	.byte	$00
	.byte	$80
_sspl_08_b:
	.byte	$FC
	.byte	$F8
	.byte	$3C
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$3B
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$3E
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$3D
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$40
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$3F
	.byte	$40
	.byte	$80
_sspl_09_a:
	.byte	$FC
	.byte	$F8
	.byte	$41
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$42
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$45
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$80
_sspl_09_b:
	.byte	$FC
	.byte	$F8
	.byte	$42
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$41
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$44
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$43
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$46
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$45
	.byte	$40
	.byte	$80
_sspl_0A_a:
	.byte	$FC
	.byte	$F8
	.byte	$47
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$48
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$49
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$4A
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$4B
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$4C
	.byte	$00
	.byte	$80
_sspl_0A_b:
	.byte	$FC
	.byte	$F8
	.byte	$48
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$47
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$4A
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$49
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$4C
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$4B
	.byte	$40
	.byte	$80
_sspl_0B_a:
	.byte	$FC
	.byte	$00
	.byte	$4D
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$4E
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$4F
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$50
	.byte	$00
	.byte	$80
_sspl_0B_b:
	.byte	$FC
	.byte	$00
	.byte	$4E
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$4D
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$50
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$4F
	.byte	$40
	.byte	$80
_sspl_0C_a:
	.byte	$FC
	.byte	$F8
	.byte	$51
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$52
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$54
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$55
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$56
	.byte	$00
	.byte	$80
_sspl_0C_b:
	.byte	$FC
	.byte	$F8
	.byte	$52
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$51
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$54
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$53
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$56
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$55
	.byte	$40
	.byte	$80
_ssen_00_a:
	.byte	$00
	.byte	$F8
	.byte	$57
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$58
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$59
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$5A
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$5B
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$5C
	.byte	$01
	.byte	$80
_ssen_00_b:
	.byte	$00
	.byte	$F8
	.byte	$58
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$57
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$5A
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$59
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$5C
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$5B
	.byte	$41
	.byte	$80
_ssen_01_a:
	.byte	$00
	.byte	$F8
	.byte	$5D
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$5E
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$60
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$61
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$62
	.byte	$01
	.byte	$80
_ssen_01_b:
	.byte	$00
	.byte	$F8
	.byte	$5E
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$5D
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$5F
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$62
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$61
	.byte	$41
	.byte	$80
_ssen_02_a:
	.byte	$00
	.byte	$F8
	.byte	$63
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$17
	.byte	$00
	.byte	$80
_ssen_02_b:
	.byte	$00
	.byte	$F8
	.byte	$64
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$63
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$65
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$17
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$16
	.byte	$40
	.byte	$80
_ssen_03_a:
	.byte	$00
	.byte	$F8
	.byte	$67
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$68
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$6A
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$6B
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$6C
	.byte	$00
	.byte	$80
_ssen_03_b:
	.byte	$00
	.byte	$F8
	.byte	$68
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$67
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$69
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$6C
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$6B
	.byte	$40
	.byte	$80
_ssen_04_a:
	.byte	$00
	.byte	$F8
	.byte	$6D
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$6E
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$6F
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$70
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$71
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$72
	.byte	$01
	.byte	$80
_ssen_04_b:
	.byte	$00
	.byte	$F8
	.byte	$6E
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$6D
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$6F
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$72
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$71
	.byte	$41
	.byte	$80
_ssen_05_a:
	.byte	$00
	.byte	$F8
	.byte	$6D
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$6E
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$6F
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$73
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$74
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$75
	.byte	$01
	.byte	$80
_ssen_05_b:
	.byte	$00
	.byte	$F8
	.byte	$6E
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$6D
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$6F
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$75
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$74
	.byte	$41
	.byte	$80
_ssen_06_a:
	.byte	$00
	.byte	$F8
	.byte	$76
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$77
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$79
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$7A
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$7B
	.byte	$03
	.byte	$80
_ssen_06_b:
	.byte	$00
	.byte	$F8
	.byte	$77
	.byte	$43
	.byte	$08
	.byte	$F8
	.byte	$76
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$79
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$7B
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$7A
	.byte	$43
	.byte	$80
_ssen_07_a:
	.byte	$00
	.byte	$F8
	.byte	$7C
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$7D
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$7F
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$80
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$81
	.byte	$03
	.byte	$80
_ssen_07_b:
	.byte	$00
	.byte	$F8
	.byte	$7D
	.byte	$43
	.byte	$08
	.byte	$F8
	.byte	$7C
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$7F
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$7E
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$81
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$80
	.byte	$43
	.byte	$80
_ssplat_00:
	.byte	$00
	.byte	$00
	.byte	$82
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$82
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$83
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$83
	.byte	$43
	.byte	$80
_ssplat_01:
	.byte	$00
	.byte	$00
	.byte	$82
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$82
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$84
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$84
	.byte	$43
	.byte	$80
_ssfanty_00_a:
	.byte	$00
	.byte	$00
	.byte	$85
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$86
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$87
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$88
	.byte	$03
	.byte	$80
_ssfanty_00_b:
	.byte	$00
	.byte	$00
	.byte	$86
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$85
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$88
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$87
	.byte	$43
	.byte	$80
_ssfanty_01_a:
	.byte	$00
	.byte	$00
	.byte	$89
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$8A
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$8B
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$88
	.byte	$03
	.byte	$80
_ssfanty_01_b:
	.byte	$00
	.byte	$00
	.byte	$8A
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$89
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$88
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$8B
	.byte	$43
	.byte	$80
_sssaw_00:
	.byte	$00
	.byte	$00
	.byte	$8C
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$8D
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$8E
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$8F
	.byte	$03
	.byte	$80
_sssaw_01:
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$91
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$92
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$93
	.byte	$03
	.byte	$80
_ssocl_00:
	.byte	$00
	.byte	$00
	.byte	$94
	.byte	$22
	.byte	$08
	.byte	$00
	.byte	$94
	.byte	$62
	.byte	$00
	.byte	$08
	.byte	$94
	.byte	$A2
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$E2
	.byte	$80
_ssit_00:
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$95
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$95
	.byte	$80
	.byte	$08
	.byte	$08
	.byte	$95
	.byte	$C0
	.byte	$80
_ssit_01:
	.byte	$00
	.byte	$00
	.byte	$96
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$97
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$98
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$99
	.byte	$03
	.byte	$80
_ssit_02:
	.byte	$00
	.byte	$00
	.byte	$9A
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$9B
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$9C
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$9D
	.byte	$03
	.byte	$80
_ssit_03:
	.byte	$00
	.byte	$00
	.byte	$9E
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$9F
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$A0
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$A1
	.byte	$01
	.byte	$80
_ssit_04:
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$A3
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$A4
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$A5
	.byte	$01
	.byte	$80
_ssit_05:
	.byte	$00
	.byte	$00
	.byte	$A6
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$A7
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$A8
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$A9
	.byte	$03
	.byte	$80
_ssit_06:
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$AB
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$AC
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$AD
	.byte	$03
	.byte	$80
_sssit_00:
	.byte	$00
	.byte	$00
	.byte	$AE
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$AF
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$B0
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$B1
	.byte	$02
	.byte	$80
_sssit_01:
	.byte	$00
	.byte	$00
	.byte	$B2
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$B3
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$B4
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$B5
	.byte	$02
	.byte	$80
_sssit_02:
	.byte	$00
	.byte	$00
	.byte	$B2
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$B3
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$B6
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$B7
	.byte	$02
	.byte	$80
_sssit_03:
	.byte	$00
	.byte	$00
	.byte	$AE
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$AF
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$B0
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$B1
	.byte	$02
	.byte	$80
_sssit_04:
	.byte	$00
	.byte	$00
	.byte	$B2
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$B3
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$B4
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$B5
	.byte	$02
	.byte	$80
_sssit_05:
	.byte	$00
	.byte	$00
	.byte	$B2
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$B3
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$B6
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$B7
	.byte	$02
	.byte	$80
_sssit_06:
	.byte	$00
	.byte	$00
	.byte	$B8
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$B9
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$BA
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$BB
	.byte	$02
	.byte	$80
_sssit_07:
	.byte	$00
	.byte	$00
	.byte	$BC
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$BD
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$BE
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$BE
	.byte	$43
	.byte	$80
_sssit_08:
	.byte	$00
	.byte	$00
	.byte	$BF
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$C0
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$C1
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$C2
	.byte	$02
	.byte	$80
_ts0_pals:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts0_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$4A
	.byte	$4A
	.byte	$4A
	.byte	$4B
	.byte	$4A
	.byte	$4B
	.byte	$4A
	.byte	$4C
	.byte	$4C
	.byte	$4A
	.byte	$4A
	.byte	$4D
	.byte	$4E
	.byte	$4E
	.byte	$4D
	.byte	$4F
	.byte	$50
	.byte	$4E
	.byte	$4D
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$61
	.byte	$62
	.byte	$62
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$78
	.byte	$79
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$80
	.byte	$4C
	.byte	$4B
	.byte	$4A
	.byte	$81
	.byte	$4A
	.byte	$4A
	.byte	$4A
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$40
	.byte	$41
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8A
	.byte	$8B
	.byte	$8E
	.byte	$8F
	.byte	$90
	.byte	$63
	.byte	$90
	.byte	$63
	.byte	$90
	.byte	$63
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$94
	.byte	$45
	.byte	$95
	.byte	$00
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$96
	.byte	$00
	.byte	$95
	.byte	$95
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$95
	.byte	$95
	.byte	$00
	.byte	$97
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$95
	.byte	$45
	.byte	$98
_ts1_pals:
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts1_tmaps:
	.byte	$99
	.byte	$9A
	.byte	$9A
	.byte	$99
	.byte	$9B
	.byte	$9C
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$A9
	.byte	$AA
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$B9
	.byte	$BA
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$9A
	.byte	$CF
	.byte	$D0
	.byte	$99
	.byte	$9C
	.byte	$D1
	.byte	$D2
	.byte	$9C
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$00
	.byte	$00
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$E6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E7
	.byte	$E8
	.byte	$E9
	.byte	$EA
	.byte	$EB
	.byte	$EB
	.byte	$EC
	.byte	$EC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$45
	.byte	$47
	.byte	$00
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$46
	.byte	$00
	.byte	$47
	.byte	$47
	.byte	$00
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$47
	.byte	$00
	.byte	$47
	.byte	$47
	.byte	$00
	.byte	$48
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$47
	.byte	$45
	.byte	$49
_spr_player:
	.addr	_sspl_00_a
	.addr	_sspl_01_a
	.addr	_sspl_02_a
	.addr	_sspl_03_a
	.addr	_sspl_04_a
	.addr	_sspl_05_a
	.addr	_sspl_00_b
	.addr	_sspl_01_b
	.addr	_sspl_02_b
	.addr	_sspl_03_b
	.addr	_sspl_04_b
	.addr	_sspl_05_b
	.addr	_sspl_06_a
	.addr	_sspl_07_a
	.addr	_sspl_08_a
	.addr	_sspl_09_a
	.addr	_sspl_0A_a
	.addr	_sspl_0B_a
	.addr	_sspl_0B_a
	.addr	_sspl_0A_a
	.addr	_sspl_09_a
	.addr	_sspl_08_a
	.addr	_sspl_07_a
	.addr	_sspl_06_a
	.addr	_sspl_0C_a
_spr_enems0:
	.addr	_ssen_00_a
	.addr	_ssen_01_a
	.word	$0000
	.word	$0000
	.addr	_ssen_00_b
	.addr	_ssen_01_b
	.word	$0000
	.word	$0000
	.addr	_ssen_02_a
	.addr	_ssen_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen_02_b
	.addr	_ssen_03_b
	.word	$0000
	.word	$0000
	.addr	_ssen_02_a
	.addr	_ssen_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen_02_b
	.addr	_ssen_03_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_a
	.addr	_ssfanty_01_a
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_b
	.addr	_ssfanty_01_b
	.word	$0000
	.word	$0000
	.addr	_sssaw_00
	.addr	_sssaw_01
	.addr	_ssocl_00
	.addr	_ssit_05
_spr_enems1:
	.addr	_ssen_04_a
	.addr	_ssen_05_a
	.word	$0000
	.word	$0000
	.addr	_ssen_04_b
	.addr	_ssen_05_b
	.word	$0000
	.word	$0000
	.addr	_ssen_06_a
	.addr	_ssen_07_a
	.word	$0000
	.word	$0000
	.addr	_ssen_06_b
	.addr	_ssen_07_b
	.word	$0000
	.word	$0000
	.addr	_ssen_06_a
	.addr	_ssen_07_a
	.word	$0000
	.word	$0000
	.addr	_ssen_06_b
	.addr	_ssen_07_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_a
	.addr	_ssfanty_01_a
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_b
	.addr	_ssfanty_01_b
	.word	$0000
	.word	$0000
	.addr	_sssaw_00
	.addr	_sssaw_01
	.addr	_ssocl_00
	.addr	_ssit_05
_spr_hs:
	.word	$0000
	.addr	_ssit_00
	.addr	_ssit_01
	.addr	_ssit_02
	.addr	_ssit_03
	.addr	_ssit_04
	.addr	_sssit_00
	.addr	_sssit_03
	.addr	_sssit_06
	.addr	_sssit_07
	.addr	_sssit_08
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_sssit_01
	.addr	_sssit_04
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_sssit_02
	.addr	_sssit_05
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
_l_scr_ini:
	.byte	$10
	.byte	$12
_l_ini_x:
	.byte	$03
	.byte	$03
_l_ini_y:
	.byte	$03
	.byte	$03
_l_map_w:
	.byte	$08
	.byte	$06
_l_player_max_objects:
	.byte	$FF
	.byte	$FF
_l_player_max_enems:
	.byte	$1C
	.byte	$0F
_l_pal_bg:
	.addr	_palts1
	.addr	_palts0
_l_pal_fg:
	.addr	_palss1
	.addr	_palss0
_l_ts_tmaps:
	.addr	_ts1_tmaps
	.addr	_ts0_tmaps
_l_ts_pals:
	.addr	_ts1_pals
	.addr	_ts0_pals
_l_behs:
	.addr	_behs1
	.addr	_behs0
_l_spr_enems:
	.addr	_spr_enems1
	.addr	_spr_enems0
_l_map:
	.addr	_map_1
	.addr	_map_0
_l_locks:
	.word	$0000
	.addr	_map_0_locks
_l_n_bolts:
	.byte	$01
	.byte	$01
_l_enems:
	.addr	_enems_1
	.addr	_enems_0
_l_hotspots:
	.addr	_hotspots_1
	.addr	_hotspots_0
_text_propellers:
	.byte	$4E,$4F,$57,$20,$54,$48,$45,$20,$46,$41,$43,$54,$4F,$52,$59,$25
	.byte	$43,$4F,$4D,$45,$53,$20,$41,$4C,$49,$56,$45,$21,$20,$59,$4F,$55
	.byte	$25,$43,$41,$4E,$20,$48,$45,$41,$52,$20,$41,$20,$43,$4F,$4E,$53
	.byte	$54,$41,$4E,$54,$25,$48,$55,$4D,$2E,$20,$50,$52,$4F,$50,$45,$4C
	.byte	$4C,$45,$52,$53,$20,$53,$45,$45,$4D,$25,$54,$4F,$20,$42,$45,$20
	.byte	$49,$4E,$20,$57,$4F,$52,$4B,$49,$4E,$47,$25,$4F,$52,$44,$45,$52
	.byte	$20,$41,$47,$41,$49,$4E,$21,$25,$00
_text_open_gate:
	.byte	$41,$48,$4F,$59,$21,$20,$4F,$42,$4A,$45,$43,$54,$53,$20,$41,$52
	.byte	$45,$25,$49,$4E,$20,$50,$4C,$41,$43,$45,$2E,$2E,$2E,$20,$4E,$4F
	.byte	$57,$25,$59,$4F,$55,$20,$43,$41,$4E,$20,$48,$45,$41,$52,$20,$41
	.byte	$25,$52,$55,$53,$54,$59,$20,$46,$45,$4E,$43,$45,$20,$4F,$50,$45
	.byte	$4E,$49,$4E,$47,$25,$45,$4C,$53,$45,$57,$48,$45,$52,$45,$2E,$2E
	.byte	$2E,$25,$00
_hud_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$5F
	.byte	$44
	.byte	$45
	.byte	$01
	.byte	$1D
	.byte	$46
	.byte	$47
	.byte	$00
	.byte	$03
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$0B
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$04
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$47
	.byte	$48
	.byte	$45
	.byte	$01
	.byte	$1D
	.byte	$49
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$42
	.byte	$01
	.byte	$00
_bitmasks:
	.byte	$FC
	.byte	$F3
	.byte	$CF
	.byte	$3F
_box_buff:
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$FF
	.byte	$FF

.segment	"BSS"

.segment	"ZEROPAGE"
__x:
	.res	1,$00
__y:
	.res	1,$00
__n:
	.res	1,$00
__t:
	.res	1,$00
_i:
	.res	1,$00
_pad_this_frame:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_gpitu:
	.res	1,$00
_gpaux:
	.res	1,$00
_rds16:
	.res	2,$00
_gp_gen:
	.res	2,$00
_gp_tmap:
	.res	2,$00
_gp_tma2:
	.res	2,$00
_gp_ram:
	.res	2,$00
_gp_ram_aux:
	.res	2,$00
_gp_addr:
	.res	2,$00
_rdx:
	.res	1,$00
_rdy:
	.res	1,$00
_rdt:
	.res	1,$00
_rdit:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdd:
	.res	1,$00
_rdm:
	.res	1,$00
_rds:
	.res	1,$00
_rdct:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
_cx1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy1:
	.res	1,$00
_cy2:
	.res	1,$00
_caux:
	.res	1,$00
_oam_index:
	.res	1,$00
_en_initial:
	.res	1,$00
_en_offs:
	.res	1,$00
_en_fr:
	.res	1,$00
_en_collx:
	.res	1,$00
_en_colly:
	.res	1,$00
_en_spr:
	.res	1,$00
_touched:
	.res	1,$00
_en_cttouched:
	.res	3,$00
_pregotten:
	.res	1,$00
__en_t:
	.res	1,$00
__en_s:
	.res	1,$00
__en_x:
	.res	1,$00
__en_y:
	.res	1,$00
__en_x1:
	.res	1,$00
__en_y1:
	.res	1,$00
__en_x2:
	.res	1,$00
__en_y2:
	.res	1,$00
__en_mx:
	.res	1,$00
__en_my:
	.res	1,$00
__en_ct:
	.res	1,$00
__en_facing:
	.res	1,$00
__enf_x:
	.res	2,$00
__enf_y:
	.res	2,$00
__enf_vx:
	.res	2,$00
__enf_vy:
	.res	2,$00
_en_life:
	.res	3,$00
_en_alive:
	.res	3,$00
_en_status:
	.res	3,$00
_en_rawv:
	.res	3,$00
_en_ct:
	.res	3,$00
_px:
	.res	2,$00
_py:
	.res	2,$00
_pvx:
	.res	2,$00
_pvy:
	.res	2,$00
_prx:
	.res	1,$00
_pry:
	.res	1,$00
_pfacing:
	.res	1,$00
_pfr:
	.res	1,$00
_pctfr:
	.res	1,$00
_psprid:
	.res	1,$00
_a_button:
	.res	1,$00
_b_button:
	.res	1,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_pjb:
	.res	1,$00
_pgotten:
	.res	1,$00
_ppossee:
	.res	1,$00
_psprint:
	.res	1,$00
_pushed_any:
	.res	1,$00
_pstate:
	.res	1,$00
_pctstate:
	.res	1,$00
_phit:
	.res	1,$00
_pgtmx:
	.res	2,$00
_pgtmy:
	.res	2,$00
_pinv:
	.res	1,$00
_opinv:
	.res	1,$00
_wall:
	.res	1,$00
_hitv:
	.res	1,$00
_hith:
	.res	1,$00
_pfloating:
	.res	1,$00
_pkilled:
	.res	1,$00
_prx_old:
	.res	1,$00
_pry_old:
	.res	1,$00
_pobjs:
	.res	1,$00
_plife:
	.res	1,$00
_pcontinues:
	.res	1,$00
_pkill:
	.res	1,$00
_pice:
	.res	1,$00
_pnotsafe:
	.res	1,$00
_pkeys:
	.res	1,$00
_pammo:
	.res	1,$00
_pfiring:
	.res	1,$00
_n_pant_safe:
	.res	1,$00
_px_safe:
	.res	2,$00
_py_safe:
	.res	2,$00
_hrx:
	.res	1,$00
_hry:
	.res	1,$00
_hrt:
	.res	1,$00
_do_process_breakable:
	.res	1,$00
_ft:
	.res	1,$00
_c_map_w:
	.res	1,$00
_c_ts_pals:
	.res	2,$00
_c_ts_tmaps:
	.res	2,$00
_c_behs:
	.res	2,$00
_spr_enems:
	.res	2,$00
_c_pal_bg:
	.res	2,$00
_c_pal_fg:
	.res	2,$00
_c_map:
	.res	2,$00
_c_locks:
	.res	2,$00
_c_enems:
	.res	2,$00
_c_hotspots:
	.res	2,$00
_c_max_bolts:
	.res	1,$00
.segment	"BSS"
_half_life:
	.res	1,$00
_frame_counter:
	.res	1,$00
_n_pant:
	.res	1,$00
_on_pant:
	.res	1,$00
_olife:
	.res	1,$00
_okeys:
	.res	1,$00
_oobjs:
	.res	1,$00
_oammo:
	.res	1,$00
_okilled:
	.res	1,$00
_use_ct:
	.res	1,$00
_use_sub_ct:
	.res	1,$00
_no_ct:
	.res	1,$00
_level:
	.res	1,$00
_game_over:
	.res	1,$00
_win_level:
	.res	1,$00
_c_max_enems:
	.res	1,$00
_update_index:
	.res	1,$00
_update_list:
	.res	96,$00
_map_attr:
	.res	192,$00
_map_buff:
	.res	192,$00
_fader:
	.res	1,$00
_fade_delay:
	.res	1,$00
_hyx:
	.res	24,$00
_ht:
	.res	24,$00
_hact:
	.res	24,$00
_lkact:
	.res	16,$00
_en_x:
	.res	3,$00
_en_y:
	.res	3,$00
_en_x1:
	.res	3,$00
_en_y1:
	.res	3,$00
_en_x2:
	.res	3,$00
_en_y2:
	.res	3,$00
_en_mx:
	.res	3,$00
_en_my:
	.res	3,$00
_en_t:
	.res	3,$00
_en_s:
	.res	3,$00
_en_facing:
	.res	3,$00
_enf_x:
	.res	6,$00
_enf_vx:
	.res	6,$00
_enf_y:
	.res	6,$00
_enf_vy:
	.res	6,$00
_en_spr_id:
	.res	3,$00
_ep_x:
	.res	72,$00
_ep_y:
	.res	72,$00
_ep_mx:
	.res	72,$00
_ep_my:
	.res	72,$00
_ep_flags:
	.res	72,$00
_prp_idx:
	.res	1,$00
_prp_yx:
	.res	4,$00
_propellers_on:
	.res	1,$00
_max_shines:
	.res	1,$00
_shine_active_x:
	.res	1,$00
_shine_active_y:
	.res	1,$00
_shines:
	.res	8,$00
_shine_active_ct:
	.res	1,$00
_res_on:
	.res	1,$00
_res_ct:
	.res	1,$00
_res_subct:
	.res	1,$00
_cfx:
	.res	1,$00
_pal_cycle:
	.res	3,$00
_attr_table:
	.res	64,$00

; ---------------------------------------------------------------
; void __near__ propellers_add (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_propellers_add: near

.segment	"CODE"

;
; prp_yx [prp_idx ++] = rdm;
;
	lda     _prp_idx
	pha
	clc
	adc     #$01
	sta     _prp_idx
	pla
	clc
	adc     #<(_prp_yx)
	sta     ptr1
	lda     #$00
	adc     #>(_prp_yx)
	sta     ptr1+1
	lda     _rdm
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ shines_add (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_shines_add: near

.segment	"CODE"

;
; if (max_shines == SHINES_MAX) return;
;
	lda     _max_shines
	cmp     #$08
	beq     L1CA8
;
; shines [max_shines ++] = rdm;
;
	lda     _max_shines
	pha
	clc
	adc     #$01
	sta     _max_shines
	pla
	clc
	adc     #<(_shines)
	sta     ptr1
	lda     #$00
	adc     #>(_shines)
	sta     ptr1+1
	lda     _rdm
	ldy     #$00
	sta     (ptr1),y
;
; }
;
L1CA8:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; if (cy1 > 12 || cy2 > 12) { at1 = at2 = 0; return; }
;
	lda     _cy1
	cmp     #$0D
	bcs     L199E
	lda     _cy2
	cmp     #$0D
	bcc     L199D
L199E:	lda     #$00
	sta     _at2
	sta     _at1
	rts
;
; caux = cy1 ? cy1 - 1 : 0;
;
L199D:	lda     _cy1
	beq     L19A8
	lda     _cy1
	sec
	sbc     #$01
L19A8:	sta     _caux
;
; at1 = map_attr [COORDS (cx1, caux)];
;
	ldx     #$00
	lda     _caux
	jsr     aslax4
	ora     _cx1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at1
;
; caux = cy2 ? cy2 - 1 : 0;
;
	lda     _cy2
	beq     L19B6
	lda     _cy2
	sec
	sbc     #$01
L19B6:	sta     _caux
;
; at2 = map_attr [COORDS (cx2, caux)];
;
	ldx     #$00
	lda     _caux
	jsr     aslax4
	ora     _cx2
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide_in (int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide_in: near

.segment	"CODE"

;
; return (x0 >= x1 && x0 <= x1 + 15 && y0 >= y1 && y0 <= y1 + 15); 
;
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L19C2
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0F
	bcc     L19C3
	inx
L19C3:	jsr     tosicmp
	beq     L2655
	bpl     L19C2
L2655:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L19C2
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0F
	bcc     L19C4
	inx
L19C4:	jsr     tosicmp
	bmi     L19C1
	beq     L19C1
L19C2:	ldx     #$00
	txa
	jmp     incsp8
L19C1:	ldx     #$00
	lda     #$01
;
; }
;
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide: near

.segment	"CODE"

;
; return (x1 + 5 >= x2 && x1 <= x2 + 13 && y1 + 13 >= y2 && y1 <= y2 + 13 + PLAYER_COLLISION_TOP);
;
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$05
	bcc     L19C9
	inx
L19C9:	ldy     #$01
	cmp     (sp),y
	txa
	sbc     #$00
	bcc     L19CA
	ldy     #$03
	lda     (sp),y
	jsr     pusha0
	ldy     #$03
	lda     (sp),y
	clc
	adc     #$0D
	bcc     L19CB
	ldx     #$01
L19CB:	jsr     tosicmp
	beq     L2657
	bcs     L19CA
L2657:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$0D
	bcc     L19CC
	inx
L19CC:	ldy     #$00
	cmp     (sp),y
	txa
	sbc     #$00
	bcc     L19CA
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$0D
	bcc     L2656
	ldx     #$01
	clc
L2656:	adc     #$04
	bcc     L19CE
	inx
L19CE:	jsr     tosicmp
	bcc     L19C8
	beq     L19C8
L19CA:	ldx     #$00
	txa
	jmp     incsp4
L19C8:	ldx     #$00
	lda     #$01
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ add_sign (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_sign: near

.segment	"CODE"

;
; return sign == 0 ? 0 : sign < 0 ? -value : value;
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L19D3
	cmp     #$00
	jeq     incsp4
L19D3:	iny
	lda     (sp),y
	tax
	cpx     #$80
	bcc     L19D7
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L19D7:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ saturate (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_saturate: near

.segment	"CODE"

;
; return v >= 0 ? (v > max ? max : v) : (v < -max ? -max : v);
;
	ldy     #$03
	lda     (sp),y
	bmi     L19DD
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L19E7
	beq     L19E7
	ldy     #$01
	jmp     L265E
L19DD:	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jsr     tosicmp
	bpl     L19E7
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L19E7:	ldy     #$03
L265E:	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ pad_read (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pad_read: near

.segment	"CODE"

;
; pad_this_frame = i;
;
	lda     _i
	sta     _pad_this_frame
;
; i = pad_poll (0);   // Read pads here.
;
	lda     #$00
	jsr     _pad_poll
	sta     _i
;
; pad_this_frame = (pad_this_frame ^ i) & i;
;
	eor     _pad_this_frame
	sta     ptr1
	lda     _i
	and     ptr1
	sta     _pad_this_frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for (fader = 4; fader > -1; fader --) {
;
	lda     #$04
L265F:	sta     _fader
	tax
	bmi     L19F6
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 4; fader > -1; fader --) {
;
	lda     _fader
	sec
	sbc     #$01
	jmp     L265F
;
; }
;
L19F6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     #$00
L2660:	sta     _fader
	sec
	sbc     #$05
	bvc     L1A0C
	eor     #$80
L1A0C:	bpl     L1A05
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     _fader
	clc
	adc     #$01
	jmp     L2660
;
; }
;
L1A05:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clear_update_list (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_update_list: near

.segment	"CODE"

;
; memfill (update_list, 0, UPDATE_LIST_SIZE*3);
;
	jsr     decsp3
	lda     #<(_update_list)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_update_list)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$60
	jsr     _memfill
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; vram_adr(0x2000); vram_fill(0x00,0x400);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ ul_putc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_putc: near

.segment	"CODE"

;
; update_list [update_index++] = MSB (gp_addr);
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	sta     ptr1
	lda     #$00
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _gp_addr+1
	ldy     #$00
	sta     (ptr1),y
;
; update_list [update_index++] = LSB (gp_addr++);
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	tay
	lda     #$00
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	clc
	adc     #$01
	bcc     L1A2D
	inx
L1A2D:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldy     #$00
	jsr     staspidx
;
; update_list [update_index++] = _n;
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	sta     ptr1
	lda     #$00
	adc     #>(_update_list)
	sta     ptr1+1
	lda     __n
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ p_t (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t: near

.segment	"CODE"

;
; rda = _n; gp_addr = (_y << 5) + _x + 0x2000;
;
	lda     __n
	sta     _rda
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L2661
	inx
L2661:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; _n = ((rda/10)+16); ul_putc ();
;
	lda     _rda
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$10
	sta     __n
	jsr     _ul_putc
;
; _n = ((rda%10)+16); ul_putc ();
;
	lda     _rda
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ upd_attr_table (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_upd_attr_table: near

.segment	"CODE"

;
; rdc = (_x >> 2) + ((_y >> 2) << 3);
;
	ldx     #$00
	lda     __x
	jsr     asrax2
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __y
	jsr     asrax2
	jsr     aslax3
	clc
	adc     ptr1
	sta     _rdc
	txa
	adc     ptr1+1
;
; rdb = ((_x >> 1) & 1) + (((_y >> 1) & 1) << 1);
;
	ldx     #$00
	lda     __x
	jsr     asrax1
	and     #$01
	sta     ptr1
	ldx     #$00
	lda     __y
	jsr     asrax1
	and     #$01
	asl     a
	bcc     L2665
	clc
L2665:	adc     ptr1
	sta     _rdb
;
; rda = attr_table [rdc];
;
	ldy     _rdc
	lda     _attr_table,y
	sta     _rda
;
; rda = (rda & bitmasks [rdb]) | (c_ts_pals [_t] << (rdb << 1));
;
	ldy     _rdb
	lda     _bitmasks,y
	and     _rda
	jsr     pusha0
	lda     _c_ts_pals
	ldx     _c_ts_pals+1
	ldy     __t
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	jsr     pusha0
	lda     _rdb
	asl     a
	jsr     tosaslax
	jsr     tosorax
	sta     _rda
;
; attr_table [rdc] = rda;
;
	ldy     _rdc
	lda     _rda
	sta     _attr_table,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + 0x2000);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L2666
	inx
L2666:	pha
	txa
	clc
	adc     #$20
	tax
	pla
	sta     _gp_addr
	stx     _gp_addr+1
;
; vram_adr (gp_addr++);
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1A70
	inx
L1A70:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1A73
	inx
L1A73:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1A76
	inx
L1A76:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; gp_addr += 31;
;
	lda     #$1F
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L1A79
	inc     _gp_addr+1
;
; vram_adr (gp_addr++);
;
L1A79:	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1A7C
	inx
L1A7C:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1A7F
	inx
L1A7F:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; vram_put (*gp_tmap); 
;
	lda     _gp_tmap
	sta     ptr1
	lda     _gp_tmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jmp     _vram_put

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_addr = 0x23c0 + rdc;
;
	lda     _rdc
	clc
	adc     #$C0
	sta     _gp_addr
	lda     #$00
	adc     #$23
	sta     _gp_addr+1
;
; _n = rda; ul_putc ();
;
	lda     _rda
	sta     __n
	jsr     _ul_putc
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + 0x2000);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L2667
	inx
L2667:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; _n = *gp_tmap ++; ul_putc ();
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1A92
	inx
L1A92:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	sta     __n
	jsr     _ul_putc
;
; _n = *gp_tmap ++; ul_putc ();
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1A96
	inx
L1A96:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	sta     __n
	jsr     _ul_putc
;
; gp_addr += 30;
;
	lda     #$1E
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L1A9A
	inc     _gp_addr+1
;
; _n = *gp_tmap ++; ul_putc ();
;
L1A9A:	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1A9D
	inx
L1A9D:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	sta     __n
	jsr     _ul_putc
;
; _n = *gp_tmap   ; ul_putc ();
;
	lda     _gp_tmap
	sta     ptr1
	lda     _gp_tmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ map_set (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_map_set: near

.segment	"CODE"

;
; map_buff [COORDS (_x, _y)] = _t;
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	clc
	adc     #<(_map_buff)
	sta     ptr1
	txa
	adc     #>(_map_buff)
	sta     ptr1+1
	lda     __t
	ldy     #$00
	sta     (ptr1),y
;
; map_attr [COORDS (_x, _y)] = c_behs [_t];
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	clc
	adc     #<(_map_attr)
	tay
	txa
	adc     #>(_map_attr)
	tax
	tya
	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     __t
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; _x = _x << 1; _y = TOP_ADJUST + (_y << 1);
;
	lda     __x
	asl     a
	sta     __x
	lda     __y
	asl     a
	bcc     L266A
	clc
L266A:	adc     #$06
	sta     __y
;
; update_list_tile (); 
;
	jmp     _update_list_tile

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_byte: near

.segment	"CODE"

;
; rdit --; return *gp_gen ++;
;
	lda     _rdit
	sec
	sbc     #$01
	sta     _rdit
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1ABC
	inx
L1ABC:	sta     _gp_gen
	stx     _gp_gen+1
	ldx     #$00
	lda     (regsave,x)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_tile: near

.segment	"CODE"

;
; map_buff [rdm] = rda;
;
	ldy     _rdm
	lda     _rda
	sta     _map_buff,y
;
; rdm ++;
;
	lda     _rdm
	clc
	adc     #$01
	sta     _rdm
;
; rdx = (rdx + 1) & 15; if (!rdx) rdy ++;
;
	lda     _rdx
	clc
	adc     #$01
	and     #$0F
	sta     _rdx
	lda     _rdx
	bne     L1AC7
	lda     _rdy
	clc
	adc     #$01
	sta     _rdy
;
; }
;
L1AC7:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_scr: near

.segment	"CODE"

;
; rdx = rdy = rdm = 0;
;
	lda     #$00
	sta     _rdm
	sta     _rdy
	sta     _rdx
;
; gp_gen = c_map [n_pant];
;
	tax
	lda     _n_pant
	asl     a
	bcc     L2670
	inx
	clc
L2670:	adc     _c_map
	sta     ptr1
	txa
	adc     _c_map+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _gp_gen+1
	dey
	lda     (ptr1),y
	sta     _gp_gen
;
; while (rdm < 192) {
;
L1AD2:	lda     _rdm
	cmp     #$C0
	bcs     L1AD3
;
; rdt = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1AD7
	inx
L1AD7:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
;
; rdct = 1 + (rdt >> 5);
;
	ldx     #$00
	lda     _rdt
	jsr     asrax4
	jsr     asrax1
	clc
	adc     #$01
	sta     _rdct
;
; rda = rdt & 0x1f;
;
	lda     _rdt
	and     #$1F
	sta     _rda
;
; while (rdct --) add_tile (); 
;
L1ADE:	lda     _rdct
	pha
	sec
	sbc     #$01
	sta     _rdct
	pla
	tax
	beq     L1AD2
	jsr     _add_tile
	jmp     L1ADE
;
; if (level == 0) {
;
L1AD3:	lda     _level
	jne     L1B08
;
; gpit = 192; while (gpit --) {
;
	lda     #$C0
	sta     _gpit
L1AE6:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1AE7
;
; rda = map_buff [gpit]; 
;
	ldy     _gpit
	lda     _map_buff,y
	sta     _rda
;
; if (rand8 () & 1) {
;
	jsr     _rand8
	and     #$01
	beq     L1AF1
;
; switch (rda) {
;
	lda     _rda
;
; } 
;
	beq     L1AF3
	cmp     #$01
	beq     L1AF3
	cmp     #$08
	beq     L1AF9
	jmp     L1AF1
;
; rda += 16; break;
;
L1AF3:	lda     #$10
	clc
	adc     _rda
	jmp     L266F
;
; case 8: rda = 25; break;
;
L1AF9:	lda     #$19
L266F:	sta     _rda
;
; if (rda == 21 && map_buff [gpit - 16] != 21) rda = 22;
;
L1AF1:	lda     _rda
	cmp     #$15
	bne     L1AFC
	ldx     #$00
	lda     _gpit
	sec
	sbc     #$10
	bcs     L1B00
	dex
L1B00:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	cmp     #$15
	beq     L1AFC
	lda     #$16
	sta     _rda
;
; map_buff [gpit] = rda;
;
L1AFC:	ldy     _gpit
	lda     _rda
	sta     _map_buff,y
;
; }
;
	jmp     L1AE6
;
; if (n_pant == 6) {
;
L1AE7:	lda     _n_pant
	cmp     #$06
	bne     L1B08
;
; if (ht [0x12] == 9 && ht [0x16] == 10 && ht [0x0c] == 8)
;
	lda     _ht+18
	cmp     #$09
	bne     L1B0A
	lda     _ht+22
	cmp     #$0A
	bne     L1B0A
	lda     _ht+12
	cmp     #$08
	bne     L1B0A
;
; map_buff [14+16*4] = 22;
;
	lda     #$16
	sta     _map_buff+78
;
; map_buff [14+16*5] = 22;
;
L1B0A:	lda     #$16
	sta     _map_buff+94
;
; gp_gen = c_locks; rda = 0;
;
L1B08:	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
	lda     #$00
	sta     _rda
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L1B1D:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1B1E
;
; rdb = *gp_gen ++; rdm = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1B22
	inx
L1B22:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdb
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1B25
	inx
L1B25:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdm
;
; if (n_pant == rdb) {
;
	lda     _rdb
	cmp     _n_pant
	bne     L1B1D
;
; if (!lkact [gpit]) add_tile ();
;
	ldy     _gpit
	lda     _lkact,y
	bne     L1B1D
	jsr     _add_tile
;
; } 
;
	jmp     L1B1D
;
; rdx = 0; rdy = 0; gp_ram = map_buff;
;
L1B1E:	sta     _rdx
	sta     _rdy
	lda     #<(_map_buff)
	sta     _gp_ram
	lda     #>(_map_buff)
	sta     _gp_ram+1
;
; for (rdm = 0; rdm < 192; rdm ++) {
;
	txa
L2672:	sta     _rdm
	cmp     #$C0
	jcs     L1B34
;
; rdt = *gp_ram ++;
;
	lda     _gp_ram
	ldx     _gp_ram+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1B3D
	inx
L1B3D:	sta     _gp_ram
	stx     _gp_ram+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
;
; map_attr [rdm] = c_behs [rdt];
;
	lda     #<(_map_attr)
	ldx     #>(_map_attr)
	clc
	adc     _rdm
	bcc     L1B40
	inx
L1B40:	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     _rdt
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; if (rdt == PROPELLER_TILE && propellers_on) {
;
	lda     _rdt
	cmp     #$18
	bne     L1B4D
	lda     _propellers_on
	beq     L1B4D
;
; propellers_add ();
;
	jsr     _propellers_add
;
; rda = rdm; 
;
	lda     _rdm
	sta     _rda
;
; rdc = PROPELLERS_MAX_LENGTH;
;
	lda     #$06
	sta     _rdc
;
; while (rda >= 16 && rdc --)
;
L1B4C:	lda     _rda
	cmp     #$10
	bcc     L1B4D
	lda     _rdc
	pha
	sec
	sbc     #$01
	sta     _rdc
	pla
	tax
	beq     L1B4D
;
; rda -= 16;
;
	lda     _rda
	sec
	sbc     #$10
	sta     _rda
;
; if (map_attr [rda]) break; else map_attr [rda] = 64;
;
	ldy     _rda
	lda     _map_attr,y
	bne     L1B4D
	ldy     _rda
	lda     #$40
	sta     _map_attr,y
;
; }
;
	jmp     L1B4C
;
; if (rdt == SHINING_TILE) shines_add ();
;
L1B4D:	lda     _rdt
	cmp     #$17
	bne     L1B5C
	jsr     _shines_add
;
; _x = rdx << 1; _y = (rdy << 1) + TOP_ADJUST; _t = rdt;
;
L1B5C:	lda     _rdx
	asl     a
	sta     __x
	lda     _rdy
	asl     a
	bcc     L2671
	clc
L2671:	adc     #$06
	sta     __y
	lda     _rdt
	sta     __t
;
; draw_tile ();
;
	jsr     _draw_tile
;
; rdx = (rdx + 1) & 15; if (!rdx) rdy ++;
;
	lda     _rdx
	clc
	adc     #$01
	and     #$0F
	sta     _rdx
	lda     _rdx
	bne     L1B35
	lda     _rdy
	clc
	adc     #$01
	sta     _rdy
;
; for (rdm = 0; rdm < 192; rdm ++) {
;
L1B35:	lda     _rdm
	clc
	adc     #$01
	jmp     L2672
;
; vram_write (attr_table, 0x23c0, 64);
;
L1B34:	jsr     decsp4
	lda     #<(_attr_table)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_attr_table)
	sta     (sp),y
	lda     #$C0
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$23
	sta     (sp),y
	ldx     #$00
	lda     #$40
	jmp     _vram_write

.endproc

; ---------------------------------------------------------------
; void __near__ pr_str (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pr_str: near

.segment	"CODE"

;
; vram_adr (((_y << 5) | _x) + 0x2000);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     __x
	ora     ptr1
	pha
	lda     tmp1
	clc
	adc     #$20
	tax
	pla
	jsr     _vram_adr
;
; while (gpit = *s++) vram_put (gpit - 32); 
;
L1B78:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1B7C
	inx
L1B7C:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     _gpit
	tax
	jeq     incsp2
	lda     _gpit
	sec
	sbc     #$20
	jsr     _vram_put
	jmp     L1B78

.endproc

; ---------------------------------------------------------------
; void __near__ textbox_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_textbox_frame: near

.segment	"CODE"

;
; rdct = 0; _x = 0; _y = 12;
;
	lda     #$00
	sta     _rdct
	sta     __x
	lda     #$0C
	sta     __y
;
; gp_ram = rdm ? ((unsigned char *) box_buff) : (map_buff + (((_y - TOP_ADJUST) >> 1) << 4));
;
	lda     _rdm
	beq     L1BC9
	lda     #<(_box_buff)
	ldx     #>(_box_buff)
	jmp     L1BCC
L1BC9:	tax
	lda     __y
	sec
	sbc     #$06
	bcs     L1BD2
	dex
L1BD2:	jsr     shrax1
	jsr     shlax4
	clc
	adc     #<(_map_buff)
	tay
	txa
	adc     #>(_map_buff)
	tax
	tya
L1BCC:	sta     _gp_ram
	stx     _gp_ram+1
;
; gpit = 64; while (gpit --) {
;
	lda     #$40
	sta     _gpit
L1BD5:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1BD6
;
; rdt = *gp_ram ++; 
;
	lda     _gp_ram
	ldx     _gp_ram+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1BDA
	inx
L1BDA:	sta     _gp_ram
	stx     _gp_ram+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
;
; if (rdct == 0) clear_update_list ();
;
	lda     _rdct
	bne     L1BDB
	jsr     _clear_update_list
;
; if (rdt != 0xff) { 
;
L1BDB:	lda     _rdt
	cmp     #$FF
	beq     L1BDE
;
; _t = rdt + rdm;
;
	lda     _rdt
	clc
	adc     _rdm
	sta     __t
;
; update_list_tile (); 
;
	jsr     _update_list_tile
;
; _x = (_x + 2) & 0x1f; if (_x == 0) _y += 2;
;
L1BDE:	lda     __x
	clc
	adc     #$02
	and     #$1F
	sta     __x
	lda     __x
	bne     L1BE7
	lda     #$02
	clc
	adc     __y
	sta     __y
;
; rdct ++; if (rdct == 4) { ppu_waitnmi (); rdct = 0; }
;
L1BE7:	lda     _rdct
	clc
	adc     #$01
	sta     _rdct
	cmp     #$04
	bne     L1BD5
	jsr     _ppu_waitnmi
	lda     #$00
	sta     _rdct
;
; }
;
	jmp     L1BD5
;
; }
;
L1BD6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ textbox_draw_text (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_textbox_draw_text: near

.segment	"CODE"

;
; rda = 1; // New line marker!
;
	lda     #$01
	sta     _rda
;
; rdy = 13;
;
	lda     #$0D
L2674:	sta     _rdy
;
; while (rdt = *gp_gen ++) {
;
L1BF6:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1BFA
	inx
L1BFA:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
	tax
	beq     L1BF7
;
; if (rda) { clear_update_list (); rda = 0; gp_addr = 0x2000 + 6 + (rdy << 5); }
;
	lda     _rda
	beq     L1BFB
	jsr     _clear_update_list
	lda     #$00
	sta     _rda
	tax
	lda     _rdy
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #$06
	sta     _gp_addr
	lda     tmp1
	adc     #$20
	sta     _gp_addr+1
;
; if (rdt == '%') rda = 1; else { _n = rdt - 32; ul_putc (); }
;
L1BFB:	lda     _rdt
	cmp     #$25
	bne     L1C03
	lda     #$01
	sta     _rda
	jmp     L1C07
L1C03:	lda     _rdt
	sec
	sbc     #$20
	sta     __n
	jsr     _ul_putc
;
; if (rda) { ppu_waitnmi (); rdy ++; }
;
L1C07:	lda     _rda
	beq     L1BF6
	jsr     _ppu_waitnmi
	lda     _rdy
	clc
	adc     #$01
;
; } 
;
	jmp     L2674
;
; }
;
L1BF7:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ textbox_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_textbox_do: near

.segment	"CODE"

;
; rdm = TEXT_BOX_FRAME_TILE_OFFSET; textbox_frame ();
;
	lda     #$20
	sta     _rdm
	jsr     _textbox_frame
;
; textbox_draw_text ();
;
	jsr     _textbox_draw_text
;
; ppu_waitnmi ();
;
L1C15:	jsr     _ppu_waitnmi
;
; pad_read (); if (pad_this_frame & (PAD_A|PAD_B)) break;
;
	jsr     _pad_read
	lda     _pad_this_frame
	and     #$03
	beq     L1C15
;
; rdm = 0; textbox_frame ();
;
	lda     #$00
	sta     _rdm
	jsr     _textbox_frame
;
; clear_update_list ();
;
	jmp     _clear_update_list

.endproc

; ---------------------------------------------------------------
; void __near__ bolts_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bolts_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_locks);
;
	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L1C27:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1C28
;
; lkact [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _lkact,y
;
; } 
;
	jmp     L1C27
;
; }
;
L1C28:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clear_cerrojo (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_cerrojo: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) c_locks;
;
	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L1C33:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	jeq     incsp1
;
; rda = *gp_gen ++; rdb = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1C38
	inx
L1C38:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1C3B
	inx
L1C3B:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdb
;
; if (n_pant == rda && yx == rdb) {
;
	lda     _rda
	cmp     _n_pant
	bne     L1C33
	lda     (sp),y
	cmp     _rdb
	bne     L1C33
;
; lkact [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _lkact,y
;
; }
;
	jmp     L1C33

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) c_hotspots;
;
	lda     _c_hotspots
	sta     _gp_gen
	lda     _c_hotspots+1
	sta     _gp_gen+1
;
; for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
;
	lda     #$00
L2677:	sta     _gpit
	cmp     #$18
	bcs     L1C48
;
; ht [gpit] = *gp_gen ++;
;
	lda     #<(_ht)
	ldx     #>(_ht)
	clc
	adc     _gpit
	bcc     L1C51
	inx
L1C51:	jsr     pushax
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1C53
	inx
L1C53:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	jsr     staspidx
;
; hyx [gpit] = *gp_gen ++;
;
	lda     #<(_hyx)
	ldx     #>(_hyx)
	clc
	adc     _gpit
	bcc     L1C56
	inx
L1C56:	jsr     pushax
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1C58
	inx
L1C58:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	jsr     staspidx
;
; hact [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _hact,y
;
; for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L2677
;
; }
;
L1C48:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_paint: near

.segment	"CODE"

;
; rda = hrt;
;
	lda     _hrt
	sta     _rda
;
; if (hrt == HOTSPOT_TYPE_RESONATOR && res_on) rda ++;
;
	lda     _hrt
	cmp     #$04
	bne     L1C60
	lda     _res_on
	beq     L1C60
	lda     _rda
	clc
	adc     #$01
	sta     _rda
;
; hrx, hry + SPRITE_ADJUST, 
;
L1C60:	jsr     decsp3
	lda     _hrx
	ldy     #$02
	sta     (sp),y
	lda     _hry
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2679
	sec
L2679:	sbc     #$10
	bcs     L267A
	sec
L267A:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [rda]
;
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L267B
	inx
	clc
L267B:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [rda]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_create: near

.segment	"CODE"

;
; if (ht [n_pant] && hact [n_pant]) {
;
	ldy     _n_pant
	lda     _ht,y
	beq     L1C71
	ldy     _n_pant
	lda     _hact,y
	beq     L1C71
;
; hrt = ht [n_pant];
;
	ldy     _n_pant
	lda     _ht,y
	sta     _hrt
;
; hrx = hyx [n_pant] << 4;
;
	ldy     _n_pant
	lda     _hyx,y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _hrx
;
; hry = hyx [n_pant] & 0xf0;
;
	ldy     _n_pant
	lda     _hyx,y
	and     #$F0
	sta     _hry
;
; } else hrt = 0;
;
	rts
L1C71:	lda     #$00
	sta     _hrt
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ propellers_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_propellers_do: near

.segment	"CODE"

;
; rdb = half_life << 1;
;
	lda     _half_life
	asl     a
	sta     _rdb
;
; gpit = prp_idx; while (gpit --) {
;
	lda     _prp_idx
	sta     _gpit
L1C91:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1C92
;
; rda = prp_yx [gpit];
;
	ldy     _gpit
	lda     _prp_yx,y
	sta     _rda
;
; ((rda & 0xf) << 1) | 
;
	ldx     #$00
	and     #$0F
	asl     a
	bcc     L267C
	inx
;
; ((((rda >> 3) & 0xfe) + TOP_ADJUST) << 5)
;
L267C:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rda
	jsr     asrax3
	ldx     #$00
	and     #$FE
	clc
	adc     #$06
	bcc     L1CA1
	inx
L1CA1:	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
;
; );
;
	ora     ptr1
	pha
;
; ((((rda >> 3) & 0xfe) + TOP_ADJUST) << 5)
;
	lda     tmp1
;
; );
;
	ora     ptr1+1
	tax
	pla
	pha
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
	pla
	sta     _gp_addr
;
; _n = rdb + PROPELLERS_BASE_PATTERN; ul_putc ();
;
	lda     _rdb
	clc
	adc     #$40
	sta     __n
	jsr     _ul_putc
;
; _n ++; ul_putc ();
;
	lda     __n
	clc
	adc     #$01
	sta     __n
	jsr     _ul_putc
;
; }
;
	jmp     L1C91
;
; }
;
L1C92:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ shines_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_shines_do: near

.segment	"CODE"

;
; if (shine_active_ct) {
;
	lda     _shine_active_ct
	beq     L1CAF
;
; shine_active_ct --;
;
	lda     _shine_active_ct
	sec
	sbc     #$01
	sta     _shine_active_ct
;
; if (shine_active_ct >= 48) {
;
	cmp     #$30
	bcs     L267F
;
; }
;
	rts
;
; shine_active_x, 
;
L267F:	jsr     decsp4
	lda     _shine_active_x
	ldy     #$03
	sta     (sp),y
;
; shine_active_y, 
;
	lda     _shine_active_y
	dey
	sta     (sp),y
;
; SHINES_BASE_PATTERN + (rand8() & 1), 
;
	jsr     _rand8
	and     #$01
	clc
	adc     #$0A
	ldy     #$01
	sta     (sp),y
;
; SHINES_PALETTE, 
;
	lda     #$03
	dey
	sta     (sp),y
;
; );
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; } else {
;
	rts
;
; gpit = rand8 () & (SHINES_MAX - 1);
;
L1CAF:	jsr     _rand8
	and     #$07
	sta     _gpit
;
; if (gpit < max_shines) {
;
	lda     _gpit
	cmp     _max_shines
	bcs     L1CC1
;
; shine_active_ct = 64;
;
	lda     #$40
	sta     _shine_active_ct
;
; rda = shines [gpit];
;
	ldy     _gpit
	lda     _shines,y
	sta     _rda
;
; shine_active_y = (rda & 0xf0) + (rand8 () & 7) + SPRITE_ADJUST + 16;
;
	and     #$F0
	jsr     pusha0
	jsr     _rand8
	and     #$07
	jsr     tosadda0
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L267D
	sec
L267D:	sbc     #$10
	bcs     L267E
	sec
L267E:	sbc     #$01
	clc
	adc     #$10
	sta     _shine_active_y
;
; shine_active_x = ((rda & 0x0f) << 4) + (rand8 () & 7);
;
	lda     _rda
	ldx     #$00
	and     #$0F
	jsr     shlax4
	jsr     pushax
	jsr     _rand8
	and     #$07
	jsr     tosadda0
	sta     _shine_active_x
;
; }
;
L1CC1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_register_safe_spot (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_register_safe_spot: near

.segment	"CODE"

;
; px_safe = px;
;
	lda     _px
	sta     _px_safe
	lda     _px+1
	sta     _px_safe+1
;
; py_safe = py;
;
	lda     _py
	sta     _py_safe
	lda     _py+1
	sta     _py_safe+1
;
; n_pant_safe = n_pant;
;
	lda     _n_pant
	sta     _n_pant_safe
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; pvx = pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
	sta     _pvx
	sta     _pvx+1
;
; pfacing = 0;
;
	sta     _pfacing
;
; pfr = pctfr = 0;
;
	sta     _pctfr
	sta     _pfr
;
; pj = pctj = 0;
;
	sta     _pctj
	sta     _pj
;
; psprid = 0;
;
	sta     _psprid
;
; pkeys = 0;
;
	sta     _pkeys
;
; pgotten = 0;
;
	sta     _pgotten
;
; pfiring = 0;
;
	sta     _pfiring
;
; pstate = EST_NORMAL;
;
	sta     _pstate
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; pinv = HS_OBJ_EMPTY; 
;
	lda     #$01
	sta     _pinv
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_render (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_render: near

.segment	"CODE"

;
; if (pstate == EST_NORMAL || half_life) 
;
	lda     _pstate
	beq     L1CF9
	lda     _half_life
	bne     L1CF9
	rts
;
; prx, pry + SPRITE_ADJUST, 
;
L1CF9:	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2681
	sec
L2681:	sbc     #$10
	bcs     L2682
	sec
L2682:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_player [psprid]
;
	ldx     #$00
	lda     _psprid
	asl     a
	bcc     L2683
	inx
	clc
L2683:	adc     #<(_spr_player)
;
; );
;
	sta     ptr1
;
; spr_player [psprid]
;
	txa
	adc     #>(_spr_player)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_kill: near

.segment	"CODE"

;
; pkill = 0;
;
	lda     #$00
	sta     _pkill
;
; sfx_play (4, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (plife) plife --; else game_over = 1;
;
	lda     _plife
	beq     L1D0C
	lda     _plife
	sec
	sbc     #$01
	sta     _plife
	jmp     L1D0F
L1D0C:	lda     #$01
	sta     _game_over
;
; pstate = EST_PARP;
;
L1D0F:	lda     #$02
	sta     _pstate
;
; pctstate = 100; 
;
	lda     #$64
	sta     _pctstate
;
; use_ct = 0;
;
	lda     #$00
	sta     _use_ct
;
; px = px_safe;
;
	lda     _px_safe
	sta     _px
	lda     _px_safe+1
	sta     _px+1
;
; py = py_safe;
;
	lda     _py_safe
	sta     _py
	lda     _py_safe+1
	sta     _py+1
;
; n_pant = n_pant_safe;
;
	lda     _n_pant_safe
	sta     _n_pant
;
; music_pause (1);
;
	lda     #$01
	jsr     _music_pause
;
; delay (60);
;
	lda     #$3C
	jsr     _delay
;
; pvx = pvy = pj = 0;
;
	lda     #$00
	sta     _pj
	sta     _pvy
	sta     _pvy+1
	sta     _pvx
	sta     _pvx+1
;
; music_pause (0);
;
	jmp     _music_pause

.endproc

; ---------------------------------------------------------------
; void __near__ player_process_tile (int, int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_process_tile: near

.segment	"CODE"

;
; if (y0) y0 --;
;
	ldy     #$05
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L1D29
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$01
	bcs     L1D2C
	dex
L1D2C:	jsr     staxysp
;
; y1=x1;//Shutup, compiler!
;
L1D29:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     stax0sp
;
; at == 10 &&
;
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L1D2F
	cmp     #$0A
	bne     L1D2F
;
; ) {
;
	lda     _pkeys
	beq     L1D2F
;
; _x = x0; _y = y0; _t = 0; map_set ();
;
	ldy     #$06
	lda     (sp),y
	sta     __x
	ldy     #$04
	lda     (sp),y
	sta     __y
	stx     __t
	jsr     _map_set
;
; clear_cerrojo (COORDS(x0, y0));
;
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     aslax4
	ldy     #$06
	ora     (sp),y
	pha
	txa
	iny
	ora     (sp),y
	pla
	jsr     pusha
	jsr     _clear_cerrojo
;
; pkeys --;
;
	lda     _pkeys
	sec
	sbc     #$01
	sta     _pkeys
;
; sfx_play (1, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; } else {
;
	jmp     L1D45
;
; no_ct = 100;
;
L1D2F:	lda     #$64
	sta     _no_ct
;
; }
;
L1D45:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; if (use_ct) {
;
	lda     _use_ct
	beq     L1D49
;
; if (use_sub_ct) use_sub_ct --; else {
;
	lda     _use_sub_ct
	beq     L1D4B
	lda     _use_sub_ct
	sec
	sbc     #$01
	sta     _use_sub_ct
	jmp     L1D59
;
; if (use_ct < USE_ANIM_MAX_FRAMES) {
;
L1D4B:	lda     _use_ct
	cmp     #$0D
	bcs     L1D4F
;
; use_ct ++;
;
	lda     _use_ct
	clc
	adc     #$01
	sta     _use_ct
;
; use_sub_ct = (use_ct == USE_ANIM_MAX_FRAMES) ? 50 : USE_ANIM_FRAMES_PER_STEP;
;
	cmp     #$0D
	bne     L1D55
	lda     #$32
	jmp     L1D57
L1D55:	lda     #$04
L1D57:	sta     _use_sub_ct
;
; } else use_ct = 0;
;
	jmp     L1D59
L1D4F:	lda     #$00
	sta     _use_ct
;
; i = 0;
;
L1D59:	lda     #$00
	sta     _i
;
; hitv = hith = 0;
;
L1D49:	sta     _hith
	sta     _hitv
;
; pushed_any = 0;
;
	sta     _pushed_any
;
; pnotsafe = 0;
;
	sta     _pnotsafe
;
; ppossee = 0;
;
	sta     _ppossee
;
; cx1 = prx >> 4; cx2 = (prx + 7) >> 4;
;
	tax
	lda     _prx
	jsr     asrax4
	sta     _cx1
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L1D6C
	inx
L1D6C:	jsr     shrax4
	sta     _cx2
;
; cy1 = cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L1D71
	inx
L1D71:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; pfloating = (at1 == 64 || at2 == 64);
;
	lda     _at1
	cmp     #$40
	beq     L1D75
	lda     _at2
	cmp     #$40
	beq     L1D75
	lda     #$00
	jmp     L1D76
L1D75:	lda     #$01
L1D76:	sta     _pfloating
;
; if (pfloating) {
;
	lda     _pfloating
	beq     L1D77
;
; pvy -= PLAYER_AY_FLOAT; 
;
	lda     _pvy
	sec
	sbc     #$10
	sta     _pvy
	bcs     L1D7B
	dec     _pvy+1
;
; if (pvy < -PLAYER_VY_FLOAT_MAX) pvy = -PLAYER_VY_FLOAT_MAX;
;
L1D7B:	lda     _pvy
	cmp     #$00
	lda     _pvy+1
	sbc     #$FF
	bvc     L1D7E
	eor     #$80
L1D7E:	bpl     L1D87
	ldx     #$FF
;
; } else
;
	jmp     L2690
;
; if (!pj) {
;
L1D77:	lda     _pj
	bne     L1D87
;
; pvy += PLAYER_G;
;
	lda     #$10
	clc
	adc     _pvy
	sta     _pvy
	bcc     L1D86
	inc     _pvy+1
;
; if (pvy > PLAYER_VY_FALLING_MAX) pvy = PLAYER_VY_FALLING_MAX; 
;
L1D86:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$01
	bvs     L1D89
	eor     #$80
L1D89:	bpl     L1D87
	ldx     #$01
L2690:	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; if (pgotten) pvy = 0;   
;
L1D87:	lda     _pgotten
	beq     L1D8C
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; cx1 = prx >> 4;
;
L1D8C:	tax
	lda     _prx
	jsr     asrax4
	sta     _cx1
;
; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L1D95
	inx
L1D95:	jsr     shrax4
	sta     _cx2
;
; py += pvy;
;
	lda     _pvy
	clc
	adc     _py
	sta     _py
	lda     _pvy+1
	adc     _py+1
	sta     _py+1
;
; if (py < 0) py = 0;
;
	ldx     _py+1
	cpx     #$80
	bcc     L1D98
	lda     #$00
	sta     _py
	sta     _py+1
;
; prx = px >> FIXBITS;
;
L1D98:	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
;
; pry = py >> FIXBITS;
;
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; rds16 = pvy + pgtmy;
;
	lda     _pvy
	clc
	adc     _pgtmy
	sta     _rds16
	lda     _pvy+1
	adc     _pgtmy+1
	tax
	stx     _rds16+1
;
; if (rds16 < 0)
;
	cpx     #$80
	jcc     L1DA2
;
; cy1 = cy2 = (pry + PLAYER_COLLISION_TOP) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$04
	bcc     L1DA8
	inx
L1DA8:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L1DAB
	lda     _at2
	and     #$08
	beq     L1DAA
;
; pry = ((cy1 + 1) << 4) - PLAYER_COLLISION_TOP;
;
L1DAB:	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L1DB3
	inx
L1DB3:	jsr     shlax4
	sec
	sbc     #$04
	sta     _pry
;
; pvy = 0; py = pry << FIXBITS;
;
	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L1E20
L1DAA:	lda     _at1
	and     #$01
	bne     L1DBF
	lda     _at2
	and     #$01
	beq     L1DBE
;
; hitv = 1;
;
L1DBF:	lda     #$01
	sta     _hitv
;
; else if ((at1 == 2) || (at2 == 2)) {
;
	jmp     L1E20
L1DBE:	lda     _at1
	cmp     #$02
	beq     L1DC7
	lda     _at2
	cmp     #$02
	jne     L1E20
;
; if (pctj > 2) pj = 0;
;
L1DC7:	lda     _pctj
	cmp     #$03
	jcc     L1E20
	lda     #$00
	sta     _pj
;
; } else if (rds16 > 0)
;
	jmp     L1E20
L1DA2:	lda     _rds16
	cmp     #$01
	lda     _rds16+1
	sbc     #$00
	bvs     L1DD2
	eor     #$80
L1DD2:	jpl     L1E20
;
; cy1 = cy2 = (pry + 16) >> 4; 
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L1DD7
	inx
L1DD7:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points (); 
;
	jsr     _cm_two_points
;
; pry < ((cy1 - 1) << 4) + 4 && 
;
	lda     _pry
	jsr     pusha0
	lda     _cy1
	sec
	sbc     #$01
	bcs     L1DDD
	ldx     #$FF
L1DDD:	jsr     shlax4
	clc
	adc     #$04
	bcc     L1DDE
	inx
L1DDE:	jsr     tosicmp
	jcs     L1DD9
;
; ((at1 & 12) || (at2 & 12))
;
	lda     _at1
	and     #$0C
	bne     L1DDA
	lda     _at2
	and     #$0C
	jeq     L1DD9
;
; pvy = 0; pry = ((cy1 - 1) << 4);py = pry << FIXBITS;
;
L1DDA:	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _cy1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; ppossee = 1;
;
	sta     _ppossee
;
; cfx = 0;
;
	lda     #$00
	sta     _cfx
;
; if (at1 & 32) { if (at1 & 1) cfx = pgtmx = PLAYER_VX_CONVEYORS; else cfx = pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; } 
;
	lda     _at1
	and     #$20
	beq     L1DF6
	lda     _at1
	and     #$01
	beq     L1DF8
	ldx     #$00
	lda     #$40
	jmp     L2691
L1DF8:	ldx     #$FF
	lda     #$C0
L2691:	sta     _pgtmx
	stx     _pgtmx+1
	sta     _cfx
	lda     #$01
	sta     _pgotten
;
; if (at2 & 32) { if (at2 & 1) cfx = pgtmx = PLAYER_VX_CONVEYORS; else cfx = pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; } 
;
L1DF6:	lda     _at2
	and     #$20
	beq     L1E03
	lda     _at2
	and     #$01
	beq     L1E05
	ldx     #$00
	lda     #$40
	jmp     L2692
L1E05:	ldx     #$FF
	lda     #$C0
L2692:	sta     _pgtmx
	stx     _pgtmx+1
	sta     _cfx
	lda     #$01
	sta     _pgotten
;
; if ((at1 & 1) || (at2 & 1)) pnotsafe = 1; 
;
L1E03:	lda     _at1
	and     #$01
	bne     L1E11
	lda     _at2
	and     #$01
	beq     L1E20
L1E11:	lda     #$01
	sta     _pnotsafe
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L1E20
L1DD9:	lda     _at1
	and     #$01
	bne     L1E19
	lda     _at2
	and     #$01
	beq     L1E18
;
; hitv = 1;
;
L1E19:	lda     #$01
	sta     _hitv
;
; else {
;
	jmp     L1E20
;
; if ((at1 == 2) || (at2 == 2)) {
;
L1E18:	lda     _at1
	cmp     #$02
	beq     L1E21
	lda     _at2
	cmp     #$02
	bne     L1E20
;
; pvy = PLAYER_VY_SINKING;
;
L1E21:	ldx     #$00
	sta     _pvy
	stx     _pvy+1
;
; ppossee = 1;
;
	lda     #$01
	sta     _ppossee
;
; && !pj
;
L1E20:	lda     _a_button
	beq     L1E38
;
; && (
;
	lda     _pj
	bne     L1E38
;
; pgotten || ppossee || hitv
;
	lda     _pgotten
	bne     L1E2A
	lda     _ppossee
	bne     L1E2A
;
; )
;
	lda     _hitv
	beq     L1E38
;
; sfx_play (7, 0);
;
L1E2A:	lda     #$07
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pj = 1; pctj = 0; pvy = -PLAYER_VY_JUMP_INITIAL;
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
	ldx     #$FF
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; if (!(pgotten || hitv || pnotsafe)) {
;
	lda     _pgotten
	bne     L1E3A
	lda     _hitv
	bne     L1E3A
	lda     _pnotsafe
	beq     L1E3B
L1E3A:	lda     #$01
L1E3B:	jsr     bnega
	beq     L1E38
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; if (i & PAD_A) {
;
L1E38:	lda     _i
	and     #$01
	beq     L2687
;
; if (pj) {
;
	lda     _pj
	beq     L1E51
;
; if (pctj < PLAYER_AY_JUMP) pvy -= (PLAYER_AY_JUMP - (pctj));
;
	lda     _pctj
	cmp     #$10
	bcs     L1E41
	lda     #$10
	sec
	sbc     _pctj
	eor     #$FF
	sec
	adc     _pvy
	sta     _pvy
	lda     #$FF
	adc     _pvy+1
	sta     _pvy+1
;
; if (pvy < -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
L1E41:	lda     _pvy
	cmp     #$00
	lda     _pvy+1
	sbc     #$FF
	bvc     L1E49
	eor     #$80
L1E49:	bpl     L1E47
	ldx     #$FF
	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; pctj ++; if (pctj == 16) pj = 0; 
;
L1E47:	lda     _pctj
	clc
	adc     #$01
	sta     _pctj
	cmp     #$10
	bne     L1E51
	lda     #$00
;
; pj = 0; 
;
L2687:	sta     _pj
;
; if (!(i & PAD_LEFT || i & PAD_RIGHT)) {
;
L1E51:	lda     _i
	and     #$40
	bne     L1E56
	lda     _i
	and     #$80
	beq     L1E57
L1E56:	lda     #$01
L1E57:	jsr     bnega
	beq     L1E68
;
; if (pvx > 0) {
;
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L1E5A
	eor     #$80
L1E5A:	bpl     L1E58
;
; pvx -= PLAYER_RX;
;
	lda     _pvx
	sec
	sbc     #$08
	sta     _pvx
	bcs     L1E5D
	dec     _pvx+1
;
; if (pvx < 0) pvx = 0;
;
L1E5D:	ldx     _pvx+1
	cpx     #$80
	bcc     L1E68
;
; } else if (pvx < 0) {
;
	jmp     L2693
L1E58:	ldx     _pvx+1
	cpx     #$80
	bcc     L1E68
;
; pvx += PLAYER_RX;
;
	lda     #$08
	clc
	adc     _pvx
	sta     _pvx
	bcc     L1E67
	inc     _pvx+1
;
; if (pvx > 0) pvx = 0;
;
L1E67:	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L1E6A
	eor     #$80
L1E6A:	bpl     L1E68
L2693:	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; if (i & PAD_LEFT) {
;
L1E68:	lda     _i
	and     #$40
	beq     L1E71
;
; pfacing = CELL_FACING_LEFT;  
;
	lda     #$06
	sta     _pfacing
;
; if (pvx > -PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$81
	lda     _pvx+1
	sbc     #$FF
	bvs     L1E73
	eor     #$80
L1E73:	bpl     L1E71
;
; pvx -= PLAYER_AX;
;
	lda     _pvx
	sec
	sbc     #$08
	sta     _pvx
	bcs     L1E71
	dec     _pvx+1
;
; if (i & PAD_RIGHT) {
;
L1E71:	lda     _i
	and     #$80
	beq     L1E7B
;
; pfacing = CELL_FACING_RIGHT;
;
	lda     #$00
	sta     _pfacing
;
; if (pvx < PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$80
	lda     _pvx+1
	sbc     #$00
	bvc     L1E7D
	eor     #$80
L1E7D:	bpl     L1E7B
;
; pvx += PLAYER_AX;
;
	lda     #$08
	clc
	adc     _pvx
	sta     _pvx
	bcc     L1E7B
	inc     _pvx+1
;
; px += pvx;
;
L1E7B:	lda     _pvx
	clc
	adc     _px
	sta     _px
	lda     _pvx+1
	adc     _px+1
	sta     _px+1
;
; if (pgotten) px += pgtmx;
;
	lda     _pgotten
	beq     L1E83
	lda     _pgtmx
	clc
	adc     _px
	sta     _px
	lda     _pgtmx+1
	adc     _px+1
	sta     _px+1
;
; if (px < (4<<FIXBITS)) prx = 4;
;
L1E83:	lda     _px
	cmp     #$00
	lda     _px+1
	sbc     #$01
	bvc     L1E8A
	eor     #$80
L1E8A:	bpl     L1E87
	lda     #$04
;
; else if (px > (244<<FIXBITS)) prx = 244; 
;
	jmp     L2689
L1E87:	lda     _px
	cmp     #$01
	lda     _px+1
	sbc     #$3D
	bvs     L1E91
	eor     #$80
L1E91:	bpl     L1E8E
	lda     #$F4
;
; else prx = px >> FIXBITS;
;
	jmp     L2689
L1E8E:	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
L2689:	sta     _prx
;
; cy1 = (pry + PLAYER_COLLISION_TOP) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$04
	bcc     L1E9A
	inx
L1E9A:	jsr     shrax4
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L1E9E
	inx
L1E9E:	jsr     shrax4
	sta     _cy2
;
; rds16 = pvx + pgtmx;
;
	lda     _pvx
	clc
	adc     _pgtmx
	sta     _rds16
	lda     _pvx+1
	adc     _pgtmx+1
	sta     _rds16+1
;
; if (rds16)  {
;
	lda     _rds16
	ora     _rds16+1
	jeq     L1EDC
;
; if (rds16 < 0) {
;
	ldx     _rds16+1
	cpx     #$80
	bcc     L1EA3
;
; cx1 = cx2 = prx >> 4; 
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx2
	sta     _cx1
;
; rda = (cx1 + 1) << 4;
;
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; rdm = cx1 - 1;
;
	lda     _cx1
	sec
	sbc     #$01
	bcs     L1EBD
;
; } else {
;
	jmp     L1EBD
;
; cx1 = cx2 = (prx + 8) >> 4;
;
L1EA3:	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L1EB4
	inx
L1EB4:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 - 1) << 4) + 8;
;
	ldx     #$00
	lda     _cx1
	sec
	sbc     #$01
	bcs     L1EB9
	dex
L1EB9:	jsr     shlax4
	clc
	adc     #$08
	sta     _rda
;
; rdm = cx1 + 1;
;
	lda     _cx1
	clc
	adc     #$01
L1EBD:	sta     _rdm
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L1EC0
	lda     _at2
	and     #$08
	jeq     L1EBF
;
; pvx = 0; prx = rda; px = prx << FIXBITS; pfiring = 1;
;
L1EC0:	ldx     #$00
	txa
	sta     _pvx
	sta     _pvx+1
	lda     _rda
	sta     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
	lda     #$01
	sta     _pfiring
;
; if (at1 & 2) player_process_tile (at1, cx1, cy1, rdm, cy1);
;
	lda     _at1
	ldx     #$00
	and     #$02
	beq     L1ECC
	ldy     #$0A
	jsr     subysp
	lda     _at1
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _rdm
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _player_process_tile
;
; if (at2 & 2) player_process_tile (at2, cx1, cy2, rdm, cy2);
;
L1ECC:	lda     _at2
	ldx     #$00
	and     #$02
	beq     L1EDC
	ldy     #$0A
	jsr     subysp
	lda     _at2
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy2
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _rdm
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy2
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _player_process_tile
;
; } else {
;
	jmp     L1EDC
;
; hith = ((at1 & 1) || (at2 & 1));
;
L1EBF:	lda     _at1
	and     #$01
	bne     L1EDF
	lda     _at2
	and     #$01
	beq     L1EE2
L1EDF:	lda     #$01
L1EE2:	sta     _hith
;
; phit = 0;
;
L1EDC:	lda     #$00
	sta     _phit
;
; if (hitv) { phit = 1; pvy = ADD_SIGN (-pvy, PLAYER_V_REBOUND); } 
;
	lda     _hitv
	beq     L1EE5
	lda     #$01
	sta     _phit
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L1EED
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L1EF2
	eor     #$80
L1EF2:	bpl     L1EF3
	ldx     #$00
	lda     #$E0
	jmp     L1EFA
L1EF3:	ldx     #$FF
	lda     #$20
	jmp     L1EFA
L1EED:	tax
L1EFA:	sta     _pvy
	stx     _pvy+1
;
; if (hith) { phit = 1; pvx = ADD_SIGN (-pvx, PLAYER_V_REBOUND); }
;
L1EE5:	lda     _hith
	beq     L1EFD
	lda     #$01
	sta     _phit
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L1F05
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L1F0A
	eor     #$80
L1F0A:	bpl     L1F0B
	ldx     #$00
	lda     #$E0
	jmp     L1F12
L1F0B:	ldx     #$FF
	lda     #$20
	jmp     L1F12
L1F05:	tax
L1F12:	sta     _pvx
	stx     _pvx+1
;
; if (pstate != EST_PARP) if (phit) { prx = px >> FIXBITS; pry = py >> FIXBITS; pkill = 1; }
;
L1EFD:	lda     _pstate
	cmp     #$02
	beq     L1F17
	lda     _phit
	beq     L1F17
	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
	lda     #$01
	sta     _pkill
;
; if (use_ct) {
;
L1F17:	lda     _use_ct
	beq     L1F1F
;
; psprid = CELL_USE + use_ct - 1;
;
	lda     _use_ct
	clc
	adc     #$0C
	sec
	sbc     #$01
;
; } else {
;
	jmp     L268A
;
; if (ppossee || pgotten) {
;
L1F1F:	lda     _ppossee
	bne     L1F27
	lda     _pgotten
	beq     L1F26
;
; if (pvx > PLAYER_VX_MIN || pvx < -PLAYER_VX_MIN) {
;
L1F27:	lda     _pvx
	cmp     #$41
	lda     _pvx+1
	sbc     #$00
	bvs     L1F2C
	eor     #$80
L1F2C:	bmi     L1F2A
	lda     _pvx
	cmp     #$C0
	lda     _pvx+1
	sbc     #$FF
	bvc     L1F2E
	eor     #$80
L1F2E:	bpl     L1F29
;
; psprid = CELL_WALK_CYCLE + ((prx >> 3) & 3);
;
L1F2A:	ldx     #$00
	lda     _prx
	jsr     asrax3
	and     #$03
	clc
	adc     #$01
	bcc     L268B
;
; } else {
;
	jmp     L268B
;
; psprid = CELL_IDLE;
;
L1F29:	lda     #$00
;
; } else {
;
	jmp     L268B
;
; psprid = CELL_AIRBORNE;
;
L1F26:	lda     #$05
L268B:	sta     _psprid
;
; psprid += pfacing;
;
	lda     _pfacing
	clc
	adc     _psprid
L268A:	sta     _psprid
;
; prx_old = prx;
;
	lda     _prx
	sta     _prx_old
;
; pry_old = pry;
;
	lda     _pry
	sta     _pry_old
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_persistent_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_persistent_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_enems);
;
	lda     _c_enems
	sta     _gp_gen
	lda     _c_enems+1
	sta     _gp_gen+1
;
; for (gpjt = 0; gpjt < 3 * MAP_SIZE; gpjt ++) {
;
	lda     #$00
L2698:	sta     _gpjt
	cmp     #$48
	bcc     L2699
;
; }
;
	rts
;
; rdt = *gp_gen ++; 
;
L2699:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1F4F
	inx
L1F4F:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1F52
	inx
L1F52:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
;
; ep_y [gpjt] = rda & 0xf0;
;
	lda     #<(_ep_y)
	ldx     #>(_ep_y)
	clc
	adc     _gpjt
	bcc     L1F55
	inx
L1F55:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	and     #$F0
	sta     (ptr1),y
;
; ep_x [gpjt] = rda << 4;
;
	lda     #<(_ep_x)
	ldx     #>(_ep_x)
	clc
	adc     _gpjt
	bcc     L1F59
	inx
L1F59:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1F5D
	inx
L1F5D:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
;
; rdc = rda & 0xf0;
;
	and     #$F0
	sta     _rdc
;
; rdb = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rdb
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1F64
	inx
L1F64:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
;
; if (rda > 1) rda >>= 1; // Store converted!
;
	cmp     #$02
	bcc     L1F65
	lda     _rda
	lsr     a
	sta     _rda
;
; ep_mx [gpjt] = ADD_SIGN2 (rdb, ep_x [gpjt], rda);
;
L1F65:	lda     #<(_ep_mx)
	ldx     #>(_ep_mx)
	clc
	adc     _gpjt
	bcc     L1F6B
	inx
L1F6B:	jsr     pushax
	ldy     _gpjt
	lda     _ep_x,y
	cmp     _rdb
	bne     L1F72
	lda     #$00
	jmp     L1F80
L1F72:	lda     _rdb
	jsr     pusha0
	ldy     _gpjt
	lda     _ep_x,y
	jsr     tosicmp0
	bcc     L1F7D
	beq     L1F7D
	lda     _rda
	jmp     L1F80
L1F7D:	ldx     #$00
	lda     _rda
	jsr     negax
L1F80:	ldy     #$00
	jsr     staspidx
;
; ep_my [gpjt] = ADD_SIGN2 (rdc, ep_y [gpjt], rda);  
;
	lda     #<(_ep_my)
	ldx     #>(_ep_my)
	clc
	adc     _gpjt
	bcc     L1F86
	inx
L1F86:	jsr     pushax
	ldy     _gpjt
	lda     _ep_y,y
	cmp     _rdc
	bne     L1F8D
	lda     #$00
	jmp     L1F9B
L1F8D:	lda     _rdc
	jsr     pusha0
	ldy     _gpjt
	lda     _ep_y,y
	jsr     tosicmp0
	bcc     L1F98
	beq     L1F98
	lda     _rda
	jmp     L1F9B
L1F98:	ldx     #$00
	lda     _rda
	jsr     negax
L1F9B:	ldy     #$00
	jsr     staspidx
;
; for (gpjt = 0; gpjt < 3 * MAP_SIZE; gpjt ++) {
;
	lda     _gpjt
	clc
	adc     #$01
	jmp     L2698

.endproc

; ---------------------------------------------------------------
; void __near__ enems_persistent_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_persistent_update: near

.segment	"CODE"

;
; if (on_pant != 99) {
;
	lda     _on_pant
	cmp     #$63
	beq     L1FA5
;
; gpjt = on_pant + on_pant + on_pant;
;
	lda     _on_pant
	clc
	adc     _on_pant
	bcc     L269C
	clc
L269C:	adc     _on_pant
	sta     _gpjt
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     #$00
L269D:	sta     _gpit
	cmp     #$03
	bcs     L1FA5
;
; __asm__ ("ldx %v", gpit);
;
	ldx     _gpit
;
; __asm__ ("ldy %v", gpjt);
;
	ldy     _gpjt
;
; __asm__ ("lda %v,x", en_x);
;
	lda     _en_x,x
;
; __asm__ ("sta %v,y", ep_x);
;
	sta     _ep_x,y
;
; __asm__ ("lda %v,x", en_y);
;
	lda     _en_y,x
;
; __asm__ ("sta %v,y", ep_y);
;
	sta     _ep_y,y
;
; __asm__ ("lda %v,x", en_mx);
;
	lda     _en_mx,x
;
; __asm__ ("sta %v,y", ep_mx);
;
	sta     _ep_mx,y
;
; __asm__ ("lda %v,x", en_my);
;
	lda     _en_my,x
;
; __asm__ ("sta %v,y", ep_my);
;
	sta     _ep_my,y
;
; gpjt ++;  
;
	lda     _gpjt
	clc
	adc     #$01
	sta     _gpjt
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L269D
;
; }
;
L1FA5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_persistent_deaths_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_persistent_deaths_load: near

.segment	"CODE"

;
; gpit = MAP_SIZE * 3; while (gpit --) {
;
	lda     #$48
	sta     _gpit
L1FBA:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1FBB
;
; ep_flags [gpit] |= 0x01;
;
	lda     #<(_ep_flags)
	ldx     #>(_ep_flags)
	clc
	adc     _gpit
	bcc     L1FBF
	inx
L1FBF:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$01
	sta     (ptr1),y
;
; }
;
	jmp     L1FBA
;
; }
;
L1FBB:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_enems + (n_pant << 2) + (n_pant << 3));
;
	ldx     #$00
	lda     _n_pant
	jsr     aslax2
	clc
	adc     _c_enems
	sta     ptr1
	txa
	adc     _c_enems+1
	sta     ptr1+1
	ldx     #$00
	lda     _n_pant
	jsr     aslax3
	clc
	adc     ptr1
	sta     _gp_gen
	txa
	adc     ptr1+1
	sta     _gp_gen+1
;
; en_offs = rdc = n_pant + n_pant + n_pant;// + 3;
;
	lda     _n_pant
	clc
	adc     _n_pant
	bcc     L26AD
	clc
L26AD:	adc     _n_pant
	sta     _rdc
	sta     _en_offs
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     #$00
L26B3:	sta     _gpit
	cmp     #$03
	bcc     L26B4
;
; }
;
	rts
;
; if (!(ep_flags [rdc] & 1)) {
;
L26B4:	ldy     _rdc
	lda     _ep_flags,y
	and     #$01
	bne     L1FD2
;
; en_t [gpit] = 0;
;
	ldy     _gpit
	sta     _en_t,y
;
; gp_gen += 4;
;
	lda     #$04
	clc
	adc     _gp_gen
	sta     _gp_gen
	jcc     L1FDE
	inc     _gp_gen+1
;
; } else 
;
	jmp     L1FDE
;
; en_t [gpit] = *gp_gen ++;
;
L1FD2:	lda     #<(_en_t)
	ldx     #>(_en_t)
	clc
	adc     _gpit
	bcc     L1FE1
	inx
L1FE1:	jsr     pushax
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1FE3
	inx
L1FE3:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	jsr     staspidx
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1FE6
	inx
L1FE6:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
;
; en_y1 [gpit] = rda & 0xf0;
;
	lda     #<(_en_y1)
	ldx     #>(_en_y1)
	clc
	adc     _gpit
	bcc     L1FE9
	inx
L1FE9:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	and     #$F0
	sta     (ptr1),y
;
; en_x1 [gpit] = rda << 4;
;
	lda     #<(_en_x1)
	ldx     #>(_en_x1)
	clc
	adc     _gpit
	bcc     L1FED
	inx
L1FED:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1FF1
	inx
L1FF1:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
;
; en_y2 [gpit] = rda & 0xf0;
;
	lda     #<(_en_y2)
	ldx     #>(_en_y2)
	clc
	adc     _gpit
	bcc     L1FF4
	inx
L1FF4:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	and     #$F0
	sta     (ptr1),y
;
; en_x2 [gpit] = rda << 4;
;
	lda     #<(_en_x2)
	ldx     #>(_en_x2)
	clc
	adc     _gpit
	bcc     L1FF8
	inx
L1FF8:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; rda = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1FFC
	inx
L1FFC:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
;
; en_x [gpit] = ep_x [rdc];
;
	lda     #<(_en_x)
	ldx     #>(_en_x)
	clc
	adc     _gpit
	bcc     L1FFF
	inx
L1FFF:	sta     ptr1
	stx     ptr1+1
	ldy     _rdc
	lda     _ep_x,y
	ldy     #$00
	sta     (ptr1),y
;
; en_y [gpit] = ep_y [rdc];
;
	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _gpit
	bcc     L2005
	inx
L2005:	sta     ptr1
	stx     ptr1+1
	ldy     _rdc
	lda     _ep_y,y
	ldy     #$00
	sta     (ptr1),y
;
; switch (en_t [gpit]) {
;
	ldy     _gpit
	lda     _en_t,y
;
; }
;
	cmp     #$01
	beq     L2015
	cmp     #$02
	beq     L2015
	cmp     #$03
	beq     L2015
	cmp     #$04
	beq     L2015
	cmp     #$06
	jeq     L2066
	cmp     #$08
	jeq     L207B
	jmp     L200D
;
; en_ct [gpit] = 0;
;
L2015:	ldy     _gpit
	lda     #$00
	sta     _en_ct,y
;
; en_rawv [gpit] = 0;
;
	ldy     _gpit
	sta     _en_rawv,y
;
; en_s [gpit] = (en_t [gpit] - 1) << 3;
;
	lda     #<(_en_s)
	ldx     #>(_en_s)
	clc
	adc     _gpit
	bcc     L2020
	inx
L2020:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_t,y
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	ldy     #$00
	sta     (ptr1),y
;
; en_mx [gpit] = ep_mx [rdc];
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L2028
	inx
L2028:	jsr     pushax
	lda     #<(_ep_mx)
	ldx     #>(_ep_mx)
	clc
	adc     _rdc
	bcc     L202B
	inx
L202B:	ldy     #$00
	jsr     ldaidx
	jsr     staspidx
;
; en_my [gpit] = ep_my [rdc];
;
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L202E
	inx
L202E:	jsr     pushax
	lda     #<(_ep_my)
	ldx     #>(_ep_my)
	clc
	adc     _rdc
	bcc     L2031
	inx
L2031:	ldy     #$00
	jsr     ldaidx
	jsr     staspidx
;
; if (rda == 1) {
;
	lda     _rda
	cmp     #$01
	bne     L2032
;
; en_status [gpit] = 1; 
;
	ldy     _gpit
;
; } else {
;
	jmp     L26A7
;
; en_status [gpit] = 0;
;
L2032:	ldy     _gpit
	lda     #$00
L26A7:	sta     _en_status,y
;
; if (en_x1 [gpit] > en_x2 [gpit]) { rda = en_x1 [gpit]; en_x1 [gpit] = en_x2 [gpit]; en_x2 [gpit] = rda; }
;
	ldy     _gpit
	lda     _en_x1,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_x2,y
	jsr     tosicmp0
	bcc     L203D
	beq     L203D
	ldy     _gpit
	lda     _en_x1,y
	sta     _rda
	lda     #<(_en_x1)
	ldx     #>(_en_x1)
	clc
	adc     _gpit
	bcc     L2049
	inx
L2049:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x2,y
	ldy     #$00
	sta     (ptr1),y
	ldy     _gpit
	lda     _rda
	sta     _en_x2,y
;
; if (en_y1 [gpit] > en_y2 [gpit]) { rda = en_y1 [gpit]; en_y1 [gpit] = en_y2 [gpit]; en_y2 [gpit] = rda; }
;
L203D:	ldy     _gpit
	lda     _en_y1,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_y2,y
	jsr     tosicmp0
	jcc     L200D
	jeq     L200D
	ldy     _gpit
	lda     _en_y1,y
	sta     _rda
	lda     #<(_en_y1)
	ldx     #>(_en_y1)
	clc
	adc     _gpit
	bcc     L205D
	inx
L205D:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_y2,y
	ldy     #$00
	sta     (ptr1),y
	ldy     _gpit
	lda     _rda
	sta     _en_y2,y
;
; break;
;
	jmp     L200D
;
; enf_x [gpit] = en_x [gpit] << 6;
;
L2066:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L26AE
	inx
	clc
L26AE:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldy     _gpit
	ldx     #$00
	lda     _en_x,y
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_y [gpit] = en_y [gpit] << 6;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L26AF
	inx
	clc
L26AF:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	ldy     _gpit
	ldx     #$00
	lda     _en_y,y
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_vx [gpit] = enf_vy [gpit] = 0;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L26B0
	inx
	clc
L26B0:	adc     #<(_enf_vx)
	tay
	txa
	adc     #>(_enf_vx)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L26B1
	inx
	clc
L26B1:	adc     #<(_enf_vy)
	tay
	txa
	adc     #>(_enf_vy)
	tax
	tya
	jsr     pushax
	ldx     #$00
	txa
	tay
	jsr     staxspidx
	jsr     staxspidx
;
; en_s [gpit] = FANTY_BASE_SPRID;
;
	ldy     _gpit
	lda     #$20
	sta     _en_s,y
;
; break;
;
	jmp     L200D
;
; en_x [gpit] = en_x1 [gpit];
;
L207B:	lda     #<(_en_x)
	ldx     #>(_en_x)
	clc
	adc     _gpit
	bcc     L207E
	inx
L207E:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x1,y
	ldy     #$00
	sta     (ptr1),y
;
; en_y [gpit] = en_y1 [gpit];
;
	lda     #<(_en_y)
	ldx     #>(_en_y)
	clc
	adc     _gpit
	bcc     L2084
	inx
L2084:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_y1,y
	ldy     #$00
	sta     (ptr1),y
;
; en_mx [gpit] = ADD_SIGN2 (en_x2 [gpit], en_x1 [gpit], rda);
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L208A
	inx
L208A:	jsr     pushax
	ldy     _gpit
	ldx     #$00
	lda     _en_x2,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x1,y
	cpx     ptr1+1
	bne     L2093
	cmp     ptr1
	bne     L2093
	txa
	jmp     L20A3
L2093:	ldy     _gpit
	lda     _en_x2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_x1,y
	jsr     tosicmp0
	bcc     L20A0
	beq     L20A0
	lda     _rda
	jmp     L20A3
L20A0:	ldx     #$00
	lda     _rda
	jsr     negax
L20A3:	ldy     #$00
	jsr     staspidx
;
; en_my [gpit] = ADD_SIGN2 (en_y2 [gpit], en_y1 [gpit], rda);
;
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L20A9
	inx
L20A9:	jsr     pushax
	ldy     _gpit
	ldx     #$00
	lda     _en_y2,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_y1,y
	cpx     ptr1+1
	bne     L20B2
	cmp     ptr1
	bne     L20B2
	txa
	jmp     L20C2
L20B2:	ldy     _gpit
	lda     _en_y2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_y1,y
	jsr     tosicmp0
	bcc     L20BF
	beq     L20BF
	lda     _rda
	jmp     L20C2
L20BF:	ldx     #$00
	lda     _rda
	jsr     negax
L20C2:	ldy     #$00
	jsr     staspidx
;
; rda = ABS (en_mx [gpit]); if (!rda) rda = ABS (en_my [gpit]);
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L20CB
	inx
L20CB:	ldy     #$00
	jsr     ldaidx
	asl     a
	bcc     L20CC
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L20D0
	inx
L20D0:	jsr     ldaidx
	jsr     negax
L20D6:	cmp     #$80
	bcc     L20D7
	jmp     L20D7
L20CC:	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L20D5
	inx
L20D5:	jsr     ldaidx
	cmp     #$80
	bcc     L20D6
L20D7:	sta     _rda
	lda     _rda
	bne     L20D8
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L20DF
	inx
L20DF:	jsr     ldaidx
	asl     a
	bcc     L20E0
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L20E4
	inx
L20E4:	jsr     ldaidx
	jsr     negax
L20EA:	cmp     #$80
	bcc     L20EB
	jmp     L20EB
L20E0:	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L20E9
	inx
L20E9:	jsr     ldaidx
	cmp     #$80
	bcc     L20EA
L20EB:	sta     _rda
;
; rda --;
;
L20D8:	lda     _rda
	sec
	sbc     #$01
	sta     _rda
;
; rdb = (en_x1 [gpit] != en_x2 [gpit]) ? 
;
	ldy     _gpit
	ldx     #$00
	lda     _en_x1,y
	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_x2,y
	cpx     ptr1+1
	bne     L26B2
	cmp     ptr1
;
; SGNC (en_x2 [gpit], en_x1 [gpit], SAW_V_DISPL) :
;
	beq     L20F4
L26B2:	ldy     _gpit
	lda     _en_x2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_x1,y
	jsr     tosicmp0
	bcs     L26AC
	lda     #$FC
	jmp     L210F
;
; SGNC (en_y2 [gpit], en_y1 [gpit], SAW_V_DISPL);
;
L20F4:	ldy     _gpit
	lda     _en_y2,y
	jsr     pusha0
	ldy     _gpit
	lda     _en_y1,y
	jsr     tosicmp0
	bcs     L26AC
	lda     #$FC
	jmp     L210F
L26AC:	lda     #$04
L210F:	sta     _rdb
;
; en_my [gpit] = rda; // EMERGING SENSE
;
	lda     #<(_en_my)
	ldx     #>(_en_my)
	clc
	adc     _gpit
	bcc     L2114
	inx
L2114:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	ldy     #$00
	sta     (ptr1),y
;
; en_mx [gpit] = rdb; // MOVING SENSE
;
	lda     #<(_en_mx)
	ldx     #>(_en_mx)
	clc
	adc     _gpit
	bcc     L2119
	inx
L2119:	sta     ptr1
	stx     ptr1+1
	lda     _rdb
	sta     (ptr1),y
;
; en_alive [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _en_alive,y
;
; en_ct [gpit] = SAW_EMERGING_STEPS;
;
	ldy     _gpit
	lda     #$0A
	sta     _en_ct,y
;
; en_life [gpit] = ENEMIES_LIFE_GAUGE;
;
L200D:	ldy     _gpit
	lda     #$01
	sta     _en_life,y
;
; en_cttouched [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_cttouched,y
;
; en_spr_id [gpit] = en_s [gpit];
;
	lda     #<(_en_spr_id)
	ldx     #>(_en_spr_id)
	clc
	adc     _gpit
	bcc     L212E
	inx
L212E:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_s,y
	ldy     #$00
	sta     (ptr1),y
;
; rdc ++;
;
L1FDE:	lda     _rdc
	clc
	adc     #$01
	sta     _rdc
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L26B3

.endproc

; ---------------------------------------------------------------
; void __near__ enems_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_kill: near

.segment	"CODE"

;
; _en_t = 0;
;
	lda     #$00
	sta     __en_t
;
; ep_flags [en_offs + gpit] &= 0xFE;
;
	tax
	lda     _en_offs
	clc
	adc     _gpit
	bcc     L26B6
	inx
	clc
L26B6:	adc     #<(_ep_flags)
	sta     ptr1
	txa
	adc     #>(_ep_flags)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$FE
	sta     (ptr1),y
;
; pkilled ++;
;
	lda     _pkilled
	clc
	adc     #$01
	sta     _pkilled
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_hit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_hit: near

.segment	"CODE"

;
; _en_facing = ((_en_x < prx) ? 0 : 4);
;
	lda     __en_x
	cmp     _prx
	bcs     L213F
	lda     #$00
	jmp     L2141
L213F:	lda     #$04
L2141:	sta     __en_facing
;
; en_cttouched [gpit] = ENEMS_TOUCHED_FRAMES;
;
	ldy     _gpit
	lda     #$08
	sta     _en_cttouched,y
;
; en_life [gpit] --; 
;
	lda     #<(_en_life)
	ldx     #>(_en_life)
	clc
	adc     _gpit
	bcc     L2149
	inx
L2149:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if (en_life [gpit] == 0) {
;
	ldy     _gpit
	lda     _en_life,y
;
; enems_kill ();
;
	jeq     _enems_kill
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_move: near

.segment	"CODE"

;
; pgotten = pgtmx = pgtmy = 0;
;
	lda     #$00
	sta     _pgtmy
	sta     _pgtmy+1
	sta     _pgtmx
	sta     _pgtmx+1
	sta     _pgotten
;
; touched = 0;
;
	sta     _touched
;
; en_initial ++; if (en_initial >= 3) en_initial = 0;
;
	lda     _en_initial
	clc
	adc     #$01
	sta     _en_initial
	cmp     #$03
	bcc     L2157
	lda     #$00
	sta     _en_initial
;
; gpit = en_initial;
;
L2157:	lda     _en_initial
	sta     _gpit
;
; gpjt = 3; while (gpjt --) {
;
	lda     #$03
	sta     _gpjt
L215F:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	bne     L26EC
;
; }
;
	rts
;
; gpit += 2; if (gpit > 2) gpit -=3;
;
L26EC:	lda     #$02
	clc
	adc     _gpit
	sta     _gpit
	cmp     #$03
	bcc     L2164
	lda     _gpit
	sec
	sbc     #$03
	sta     _gpit
;
; __asm__ ("ldy %v", gpit);
;
L2164:	ldy     _gpit
;
; __asm__ ("lda %v, y", en_t);
;
	lda     _en_t,y
;
; __asm__ ("sta %v", _en_t);
;
	sta     __en_t
;
; __asm__ ("lda %v, y", en_s);
;
	lda     _en_s,y
;
; __asm__ ("sta %v", _en_s);
;
	sta     __en_s
;
; __asm__ ("lda %v, y", en_x);
;
	lda     _en_x,y
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v, y", en_y);
;
	lda     _en_y,y
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v, y", en_x1);
;
	lda     _en_x1,y
;
; __asm__ ("sta %v", _en_x1);
;
	sta     __en_x1
;
; __asm__ ("lda %v, y", en_x2);
;
	lda     _en_x2,y
;
; __asm__ ("sta %v", _en_x2);
;
	sta     __en_x2
;
; __asm__ ("lda %v, y", en_y1);
;
	lda     _en_y1,y
;
; __asm__ ("sta %v", _en_y1);
;
	sta     __en_y1
;
; __asm__ ("lda %v, y", en_y2);
;
	lda     _en_y2,y
;
; __asm__ ("sta %v", _en_y2);
;
	sta     __en_y2
;
; __asm__ ("lda %v, y", en_mx);
;
	lda     _en_mx,y
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v, y", en_my);
;
	lda     _en_my,y
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; __asm__ ("lda %v, y", en_ct);
;
	lda     _en_ct,y
;
; __asm__ ("sta %v", _en_ct);
;
	sta     __en_ct
;
; __asm__ ("lda %v, y", en_facing);
;
	lda     _en_facing,y
;
; __asm__ ("sta %v", _en_facing);
;
	sta     __en_facing
;
; _enf_x = enf_x [gpit]; _enf_vx = enf_vx [gpit];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L26D8
	inx
	clc
L26D8:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     __enf_x+1
	dey
	lda     (ptr1),y
	sta     __enf_x
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L26D9
	inx
	clc
L26D9:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_vx+1
	dey
	lda     (ptr1),y
	sta     __enf_vx
;
; _enf_y = enf_y [gpit]; _enf_vy = enf_vy [gpit];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L26DA
	inx
	clc
L26DA:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_y+1
	dey
	lda     (ptr1),y
	sta     __enf_y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L26DB
	inx
	clc
L26DB:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_vy+1
	dey
	lda     (ptr1),y
	sta     __enf_vy
;
; en_spr = 0xff;
;
	lda     #$FF
	sta     _en_spr
;
; if (en_cttouched [gpit]) {
;
	ldy     _gpit
	lda     _en_cttouched,y
	beq     L218F
;
; en_cttouched [gpit] --;
;
	lda     #<(_en_cttouched)
	ldx     #>(_en_cttouched)
	clc
	adc     _gpit
	bcc     L2195
	inx
L2195:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; _en_x, _en_y + SPRITE_ADJUST, 
;
	jsr     decsp3
	lda     __en_x
	ldy     #$02
	sta     (sp),y
	lda     __en_y
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L26DC
	sec
L26DC:	sbc     #$10
	bcs     L26DD
	sec
L26DD:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$57
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; if (_en_t && en_cttouched [gpit] == 0) {
;
L218F:	lda     __en_t
	jeq     L23B2
	ldy     _gpit
	lda     _en_cttouched,y
	jne     L23B2
;
; pregotten = (prx + 7 >= _en_x && prx <= _en_x + 15);
;
	tax
	lda     _prx
	clc
	adc     #$07
	bcc     L21AA
	inx
L21AA:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L21AB
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0F
	bcc     L21AC
	ldx     #$01
L21AC:	jsr     tosicmp
	bcc     L21A9
	beq     L21A9
L21AB:	lda     #$00
	jmp     L21AD
L21A9:	lda     #$01
L21AD:	sta     _pregotten
;
; en_fr = ((((_en_mx) ? _en_x : _en_y)+4) >> 3) & 1;
;
	lda     __en_mx
	beq     L21B4
	lda     __en_x
	jmp     L26D1
L21B4:	lda     __en_y
L26D1:	ldx     #$00
	clc
	adc     #$04
	bcc     L21B8
	inx
L21B8:	jsr     shrax3
	and     #$01
	sta     _en_fr
;
; && _en_t != 8 
;
	lda     _res_on
	beq     L21B9
	lda     __en_t
;
; && _en_t != 4
;
	cmp     #$08
	beq     L21B9
	lda     __en_t
;
; ) {
;
	cmp     #$04
	beq     L21B9
;
; en_spr = en_spr_id [gpit];
;
	ldy     _gpit
	lda     _en_spr_id,y
	sta     _en_spr
;
; } else
;
	jmp     L21C1
;
; switch (_en_t) {
;
L21B9:	lda     __en_t
;
; }
;
	cmp     #$01
	beq     L21CC
	cmp     #$02
	beq     L21CC
	cmp     #$03
	beq     L21CC
	cmp     #$04
	beq     L21CC
	cmp     #$06
	jeq     L21F3
	cmp     #$08
	jeq     L22B7
	jmp     L21C4
;
; if (!en_status [gpit] || half_life) {
;
L21CC:	ldy     _gpit
	lda     _en_status,y
	beq     L21CE
	lda     _half_life
	beq     L21DE
;
; _en_x += _en_mx;
;
L21CE:	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; _en_y += _en_my;
;
	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; if (_en_x == _en_x1 || _en_x == _en_x2) _en_mx = -_en_mx;
;
	lda     __en_x1
	cmp     __en_x
	beq     L21D9
	lda     __en_x2
	cmp     __en_x
	bne     L21D8
L21D9:	ldx     #$00
	lda     __en_mx
	bpl     L21DD
	dex
L21DD:	jsr     negax
	sta     __en_mx
;
; if (_en_y == _en_y1 || _en_y == _en_y2) _en_my = -_en_my;      
;
L21D8:	lda     __en_y1
	cmp     __en_y
	beq     L21DF
	lda     __en_y2
	cmp     __en_y
	bne     L21DE
L21DF:	ldx     #$00
	lda     __en_my
	bpl     L21E3
	dex
L21E3:	jsr     negax
	sta     __en_my
;
; _en_facing = (_en_mx > 0 || _en_my > 0) ? 0 : 4;
;
L21DE:	lda     __en_mx
	sec
	sbc     #$01
	bvs     L21E8
	eor     #$80
L21E8:	bmi     L21E6
	lda     __en_my
	sec
	sbc     #$01
	bvs     L21EA
	eor     #$80
L21EA:	bpl     L21EC
L21E6:	lda     #$00
	jmp     L21EE
L21EC:	lda     #$04
L21EE:	sta     __en_facing
;
; en_spr = _en_s + en_fr + _en_facing;
;
	lda     __en_s
	clc
	adc     _en_fr
	bcc     L26DE
	clc
L26DE:	adc     __en_facing
	sta     _en_spr
;
; break;
;
	jmp     L21C4
;
; if (px < _enf_x) {
;
L21F3:	lda     _px
	cmp     __enf_x
	lda     _px+1
	sbc     __enf_x+1
	bvc     L26C7
	eor     #$80
L26C7:	bpl     L21F4
;
; _enf_vx -= FANTY_A; if (_enf_vx < -FANTY_MAXV) _enf_vx = -FANTY_MAXV;
;
	lda     __enf_vx
	sec
	sbc     #$04
	sta     __enf_vx
	bcs     L21F8
	dec     __enf_vx+1
L21F8:	lda     __enf_vx
	cmp     #$D0
	lda     __enf_vx+1
	sbc     #$FF
	bvc     L21FB
	eor     #$80
L21FB:	bpl     L2202
	ldx     #$FF
	lda     #$D0
;
; } else {
;
	jmp     L26E9
;
; _enf_vx += FANTY_A; if (_enf_vx > FANTY_MAXV) _enf_vx = FANTY_MAXV;
;
L21F4:	lda     #$04
	clc
	adc     __enf_vx
	sta     __enf_vx
	bcc     L2201
	inc     __enf_vx+1
L2201:	lda     __enf_vx
	cmp     #$31
	lda     __enf_vx+1
	sbc     #$00
	bvs     L2204
	eor     #$80
L2204:	bpl     L2202
	ldx     #$00
	lda     #$30
L26E9:	sta     __enf_vx
	stx     __enf_vx+1
;
; if (py < _enf_y) {
;
L2202:	lda     _py
	cmp     __enf_y
	lda     _py+1
	sbc     __enf_y+1
	bvc     L26C8
	eor     #$80
L26C8:	bpl     L2207
;
; _enf_vy -= FANTY_A; if (_enf_vy < -FANTY_MAXV) _enf_vy = -FANTY_MAXV;
;
	lda     __enf_vy
	sec
	sbc     #$04
	sta     __enf_vy
	bcs     L220B
	dec     __enf_vy+1
L220B:	lda     __enf_vy
	cmp     #$D0
	lda     __enf_vy+1
	sbc     #$FF
	bvc     L220E
	eor     #$80
L220E:	bpl     L2215
	ldx     #$FF
	lda     #$D0
;
; } else {
;
	jmp     L26EA
;
; _enf_vy += FANTY_A; if (_enf_vy > FANTY_MAXV) _enf_vy = FANTY_MAXV;
;
L2207:	lda     #$04
	clc
	adc     __enf_vy
	sta     __enf_vy
	bcc     L2214
	inc     __enf_vy+1
L2214:	lda     __enf_vy
	cmp     #$31
	lda     __enf_vy+1
	sbc     #$00
	bvs     L2217
	eor     #$80
L2217:	bpl     L2215
	ldx     #$00
	lda     #$30
L26EA:	sta     __enf_vy
	stx     __enf_vy+1
;
; _enf_x += _enf_vx; 
;
L2215:	lda     __enf_vx
	clc
	adc     __enf_x
	sta     __enf_x
	lda     __enf_vx+1
	adc     __enf_x+1
	sta     __enf_x+1
;
; if (_enf_x < 0) _enf_x = 0;
;
	ldx     __enf_x+1
	cpx     #$80
	bcc     L221C
	lda     #$00
	sta     __enf_x
	sta     __enf_x+1
;
; if (_enf_x > 15360) _enf_x = 15360;
;
L221C:	lda     __enf_x
	cmp     #$01
	lda     __enf_x+1
	sbc     #$3C
	bvs     L2222
	eor     #$80
L2222:	bpl     L2220
	ldx     #$3C
	lda     #$00
	sta     __enf_x
	stx     __enf_x+1
;
; _en_x = _enf_x >> 6;
;
L2220:	lda     __enf_x
	ldx     __enf_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; if (_enf_vx) {
;
	lda     __enf_vx
	ora     __enf_vx+1
	jeq     L224C
;
; cy1 = (_en_y + 4) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$04
	bcc     L222C
	inx
L222C:	jsr     shrax4
	sta     _cy1
;
; cy2 = (_en_y + 11) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0B
	bcc     L2230
	inx
L2230:	jsr     shrax4
	sta     _cy2
;
; if (_enf_vx > 0) {
;
	lda     __enf_vx
	cmp     #$01
	lda     __enf_vx+1
	sbc     #$00
	bvs     L2233
	eor     #$80
L2233:	bpl     L2231
;
; cx1 = cx2 = (_en_x + 11) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L2238
	inx
L2238:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cx2
	sec
	sbc     #$01
	bcs     L223D
	dex
L223D:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L26D4
;
; cx1 = cx2 = (_en_x + 4) >> 4;
;
L2231:	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L2244
	inx
L2244:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cx1
	clc
	adc     #$01
	bcc     L2249
	inx
L2249:	jsr     shlax4
	sec
	sbc     #$04
L26D4:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (FANTY_OBSTACLE (at1) || FANTY_OBSTACLE (at2)) {
;
	lda     _at1
	cmp     #$02
	bcs     L224D
	lda     _at2
	cmp     #$02
	bcc     L224C
;
; _enf_vx = -_enf_vx;
;
L224D:	lda     __enf_vx
	ldx     __enf_vx+1
	jsr     negax
	sta     __enf_vx
	stx     __enf_vx+1
;
; _en_x = rda; 
;
	lda     _rda
	sta     __en_x
;
; _enf_x = rda << 6;
;
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y += _enf_vy; 
;
L224C:	lda     __enf_vy
	clc
	adc     __enf_y
	sta     __enf_y
	lda     __enf_vy+1
	adc     __enf_y+1
	sta     __enf_y+1
;
; if (_enf_y < 0) _enf_y = 0;
;
	ldx     __enf_y+1
	cpx     #$80
	bcc     L225B
	lda     #$00
	sta     __enf_y
	sta     __enf_y+1
;
; if (_enf_y > 11264) _enf_y = 11264;
;
L225B:	lda     __enf_y
	cmp     #$01
	lda     __enf_y+1
	sbc     #$2C
	bvs     L2261
	eor     #$80
L2261:	bpl     L225F
	ldx     #$2C
	lda     #$00
	sta     __enf_y
	stx     __enf_y+1
;
; _en_y = _enf_y >> 6;
;
L225F:	lda     __enf_y
	ldx     __enf_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
;
; if (_enf_vy) {
;
	lda     __enf_vy
	ora     __enf_vy+1
	jeq     L228B
;
; cx1 = (_en_x + 4) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L226B
	inx
L226B:	jsr     shrax4
	sta     _cx1
;
; cx2 = (_en_x + 11) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L226F
	inx
L226F:	jsr     shrax4
	sta     _cx2
;
; if (_enf_vy > 0) {
;
	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$00
	bvs     L2272
	eor     #$80
L2272:	bpl     L2270
;
; cy1 = cy2 = (_en_y + 11) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0B
	bcc     L2277
	inx
L2277:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L227C
	dex
L227C:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L26D5
;
; cy1 = cy2 = (_en_y + 4) >> 4;
;
L2270:	ldx     #$00
	lda     __en_y
	clc
	adc     #$04
	bcc     L2283
	inx
L2283:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L2288
	inx
L2288:	jsr     shlax4
	sec
	sbc     #$04
L26D5:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (FANTY_OBSTACLE (at1) || FANTY_OBSTACLE (at2)) {
;
	lda     _at1
	cmp     #$02
	bcs     L228C
	lda     _at2
	cmp     #$02
	bcc     L228B
;
; _enf_vy = -_enf_vy;
;
L228C:	lda     __enf_vy
	ldx     __enf_vy+1
	jsr     negax
	sta     __enf_vy
	stx     __enf_vy+1
;
; _en_y = rda;
;
	lda     _rda
	sta     __en_y
;
; _enf_y = rda << 6;
;
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; cx1 = (_en_x + 8) >> 4;
;
L228B:	ldx     #$00
	lda     __en_x
	clc
	adc     #$08
	bcc     L229B
	inx
L229B:	jsr     shrax4
	sta     _cx1
;
; cy1 = (_en_y + 8) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$08
	bcc     L229F
	inx
L229F:	jsr     shrax4
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (at1 & 1) {
;
	lda     _at1
	and     #$01
	beq     L22A1
;
; en_cttouched [gpit] = 8;
;
	ldy     _gpit
	lda     #$08
	sta     _en_cttouched,y
;
; enems_kill ();
;
	jsr     _enems_kill
;
; en_fr = (_en_x >> 3) & 1;
;
L22A1:	ldx     #$00
	lda     __en_x
	jsr     asrax3
	and     #$01
	sta     _en_fr
;
; _en_facing = ((_en_x < prx) ? 0 : 4);
;
	lda     __en_x
	cmp     _prx
	bcs     L22AF
	lda     #$00
	jmp     L22B1
L22AF:	lda     #$04
L22B1:	sta     __en_facing
;
; en_spr = FANTY_BASE_SPRID + en_fr + _en_facing;
;
	lda     _en_fr
	clc
	adc     #$20
	bcc     L26DF
	clc
L26DF:	adc     __en_facing
	sta     _en_spr
;
; break;
;
	jmp     L21C4
;
; rda = (_en_x1 == _en_x2);
;
L22B7:	lda     __en_x2
	cmp     __en_x1
	jsr     booleq
	sta     _rda
;
; switch (en_alive [gpit]) {
;
	ldy     _gpit
	lda     _en_alive,y
;
; }
;
	beq     L22C1
	cmp     #$01
	beq     L22DC
	cmp     #$02
	jeq     L22F0
	cmp     #$03
	jeq     L230B
	jmp     L22BF
;
; if (rda) {
;
L22C1:	lda     _rda
	beq     L22C2
;
; _en_y -= _en_mx;
;
	lda     __en_mx
	eor     #$FF
	sec
	adc     __en_y
	sta     __en_y
;
; if (_en_y == _en_y1) {
;
	lda     __en_y1
	cmp     __en_y
	jne     L22BF
;
; en_alive [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _en_alive,y
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; } else {
;
	jmp     L22BF
;
; _en_x -= _en_mx;
;
L22C2:	lda     __en_mx
	eor     #$FF
	sec
	adc     __en_x
	sta     __en_x
;
; if (_en_x == _en_x1) {
;
	lda     __en_x1
	cmp     __en_x
	jne     L22BF
;
; en_alive [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _en_alive,y
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; break;
;
	jmp     L22BF
;
; if (half_life) {
;
L22DC:	lda     _half_life
	jeq     L22BF
;
; if (_en_ct --) {
;
	lda     __en_ct
	pha
	sec
	sbc     #$01
	sta     __en_ct
	pla
	tax
	beq     L22DF
;
; if (rda) {
;
	lda     _rda
	beq     L22E1
;
; _en_x += _en_my;
;
	lda     __en_my
	clc
	adc     __en_x
	sta     __en_x
;
; } else {
;
	jmp     L22BF
;
; _en_y += _en_my;
;
L22E1:	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; } else {
;
	jmp     L22BF
;
; en_alive [gpit] = 2;
;
L22DF:	ldy     _gpit
	lda     #$02
;
; break;
;
	jmp     L26EB
;
; if (rda) {
;
L22F0:	lda     _rda
	beq     L22F1
;
; _en_y += _en_mx;
;
	lda     __en_mx
	clc
	adc     __en_y
	sta     __en_y
;
; if (_en_y == _en_y2) {
;
	lda     __en_y2
	cmp     __en_y
	bne     L22BF
;
; en_alive [gpit] = 3;
;
	ldy     _gpit
	lda     #$03
	sta     _en_alive,y
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; } else {
;
	jmp     L22BF
;
; _en_x += _en_mx;
;
L22F1:	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; if (_en_x == _en_x2) {
;
	lda     __en_x2
	cmp     __en_x
	bne     L22BF
;
; en_alive [gpit] = 3;
;
	ldy     _gpit
	lda     #$03
	sta     _en_alive,y
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; break;
;
	jmp     L22BF
;
; if (half_life) {
;
L230B:	lda     _half_life
	beq     L22BF
;
; if (_en_ct --) {
;
	lda     __en_ct
	pha
	sec
	sbc     #$01
	sta     __en_ct
	pla
	tax
	beq     L230E
;
; if (rda) {
;
	lda     _rda
	beq     L2310
;
; _en_x -= _en_my;
;
	lda     __en_my
	eor     #$FF
	sec
	adc     __en_x
	sta     __en_x
;
; } else {
;
	jmp     L22BF
;
; _en_y -= _en_my;
;
L2310:	lda     __en_my
	eor     #$FF
	sec
	adc     __en_y
	sta     __en_y
;
; } else {
;
	jmp     L22BF
;
; en_alive [gpit] = 0;
;
L230E:	ldy     _gpit
L26EB:	sta     _en_alive,y
;
; if (rda) {
;
L22BF:	lda     _rda
	beq     L231E
;
; rdx = _en_x1; rdy = _en_y;
;
	lda     __en_x1
	sta     _rdx
	lda     __en_y
;
; } else {
;
	jmp     L26D6
;
; rdx = _en_x; rdy = _en_y1;
;
L231E:	lda     __en_x
	sta     _rdx
	lda     __en_y1
L26D6:	sta     _rdy
;
; rdx, rdy + SPRITE_ADJUST,
;
	jsr     decsp3
	lda     _rdx
	ldy     #$02
	sta     (sp),y
	lda     _rdy
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L26E0
	sec
L26E0:	sbc     #$10
	bcs     L26E1
	sec
L26E1:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_OCCLUDING_CELL]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_OCCLUDING_CELL]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$55
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; en_spr = SAW_BASE_SPRID + half_life;
;
	lda     _half_life
	clc
	adc     #$28
	sta     _en_spr
;
; _en_facing = 0;
;
	lda     #$00
	sta     __en_facing
;
; en_spr_id [gpit] = en_spr;
;
L21C4:	ldy     _gpit
	lda     _en_spr
	sta     _en_spr_id,y
;
; if (_en_t == 4 && pregotten && !pgotten && !pj) {
;
L21C1:	lda     __en_t
	cmp     #$04
	jne     L2357
	lda     _pregotten
	jeq     L2357
	lda     _pgotten
	jne     L2357
	lda     _pj
	jne     L2357
;
; if (_en_mx) {
;
	lda     __en_mx
	beq     L2343
;
; if (pry + 16 >= _en_y && pry + 12 <= _en_y) {
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L2345
	inx
L2345:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L2343
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L2347
	inx
L2347:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L2344
	bne     L2343
;
; pgotten = 1;
;
L2344:	lda     #$01
	sta     _pgotten
;
; pgtmx = _en_mx << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_mx
	bpl     L234D
	dex
L234D:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmx
	stx     _pgtmx+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L2354
	dex
L2354:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; (_en_my < 0 && pry + 17 >= _en_y && pry + 12 <= _en_y) ||
;
L2343:	lda     __en_my
	asl     a
	bcc     L26CE
	ldx     #$00
	lda     _pry
	clc
	adc     #$11
	bcc     L235C
	inx
L235C:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L26CE
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L235D
	inx
L235D:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L2358
	beq     L2358
;
; (_en_my > 0 && pry + 16 + _en_my >= _en_y && pry + 12 <= _en_y)
;
L26CE:	lda     __en_my
	sec
	sbc     #$01
	bvs     L2361
	eor     #$80
L2361:	jpl     L2357
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L2363
	inx
L2363:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __en_my
	bpl     L2364
	dex
L2364:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	cmp     __en_y
	txa
	sbc     #$00
	bcc     L2357
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L2365
	inx
L2365:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L2358
	bne     L2357
;
; pgotten = 1;
;
L2358:	lda     #$01
	sta     _pgotten
;
; pgtmy = _en_my << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_my
	bpl     L236C
	dex
L236C:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmy
	stx     _pgtmy+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L2373
	dex
L2373:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; _en_t == 0 // General condition.
;
L2357:	lda     __en_t
;
; || _en_t == 4
;
	jeq     L23B2
	lda     __en_t
;
; || (_en_t == 8 && en_alive [gpit] == 0)
;
	cmp     #$04
	jeq     L23B2
	lda     __en_t
	cmp     #$08
	bne     L2378
	ldy     _gpit
	lda     _en_alive,y
	jeq     L23B2
;
; pregotten && pry < _en_y && pry + 15 > _en_y && pvy > 0 &&
;
L2378:	lda     _pregotten
	jeq     L2381
	ldx     #$00
	lda     _pry
	cmp     __en_y
	jcs     L2381
	lda     _pry
	clc
	adc     #$0F
	bcc     L2384
	inx
L2384:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	jcc     L2381
	jeq     L2381
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L2385
	eor     #$80
L2385:	jpl     L2381
;
; pgotten == 0 && ppossee == 0
;
	lda     _pgotten
	bne     L2381
	lda     _ppossee
;
; && _en_t != 8
;
	bne     L2381
	lda     __en_t
;
; ) {
;
	cmp     #$08
	beq     L2381
;
; if (res_on)
;
	lda     _res_on
	beq     L2387
;
; enems_hit ();
;
	jsr     _enems_hit
;
; if (i & PAD_A) {
;
L2387:	lda     _i
	and     #$01
	beq     L238A
;
; pj = 1; pctj = 0; pvy = -PLAYER_VY_JUMP_INITIAL;
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
	ldx     #$FF
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; sfx_play (7, 0);
;
	lda     #$07
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; } else {
;
	jmp     L2395
;
; pvy = -PLAYER_VY_JUMP_INITIAL << 1;
;
L238A:	ldx     #$FF
	lda     #$80
	sta     _pvy
	stx     _pvy+1
;
; if (pry > _en_y - ENEMS_UPPER_COLLISION_BOUND) { pry = _en_y - ENEMS_UPPER_COLLISION_BOUND; py = pry << FIXBITS; }
;
L2395:	lda     _pry
	jsr     pusha0
	lda     __en_y
	sec
	sbc     #$0E
	bcs     L239A
	ldx     #$FF
L239A:	jsr     tosicmp
	bcc     L2398
	beq     L2398
	lda     __en_y
	sec
	sbc     #$0E
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; touched = 1;
;
L2398:	lda     #$01
;
; } else
;
	jmp     L26D7
;
; touched == 0 &&
;
L2381:	lda     _touched
	bne     L23AB
;
; pstate == EST_NORMAL &&
;
	lda     _pstate
	bne     L23AB
;
; collide (prx, pry, _en_x, _en_y)
;
	jsr     decsp4
	lda     _prx
	ldy     #$03
	sta     (sp),y
	lda     _pry
	dey
	sta     (sp),y
	lda     __en_x
	dey
	sta     (sp),y
	lda     __en_y
	dey
	sta     (sp),y
;
; ) {
;
	jsr     _collide
	tax
	beq     L23AB
;
; res_on == 0 
;
	lda     _res_on
;
; || _en_t == 8
;
	beq     L23AC
	lda     __en_t
;
; )
;
	cmp     #$08
	bne     L23AB
;
; pkill = 1;
;
L23AC:	lda     #$01
	sta     _pkill
;
; touched = 1;
;
L26D7:	sta     _touched
;
; || _en_t == 8
;
L23AB:	lda     _touched
	bne     L23B2
	lda     __en_t
;
; ) goto skipdo;
;
	cmp     #$08
;
; if (en_spr != 0xff) {
;
L23B2:	lda     _en_spr
	cmp     #$FF
	beq     L23B5
;
; _en_x, _en_y + SPRITE_ADJUST, 
;
	jsr     decsp3
	lda     __en_x
	ldy     #$02
	sta     (sp),y
	lda     __en_y
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L26E2
	sec
L26E2:	sbc     #$10
	bcs     L26E3
	sec
L26E3:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [en_spr]
;
	ldx     #$00
	lda     _en_spr
	asl     a
	bcc     L26E4
	inx
	clc
L26E4:	adc     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [en_spr]
;
	txa
	adc     _spr_enems+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; __asm__ ("ldy %v", gpit);
;
L23B5:	ldy     _gpit
;
; __asm__ ("lda %v", _en_t);
;
	lda     __en_t
;
; __asm__ ("sta %v, y", en_t);
;
	sta     _en_t,y
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("sta %v, y", en_x);
;
	sta     _en_x,y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("sta %v, y", en_y);
;
	sta     _en_y,y
;
; __asm__ ("lda %v", _en_x1);
;
	lda     __en_x1
;
; __asm__ ("sta %v, y", en_x1);
;
	sta     _en_x1,y
;
; __asm__ ("lda %v", _en_x2);
;
	lda     __en_x2
;
; __asm__ ("sta %v, y", en_x2);
;
	sta     _en_x2,y
;
; __asm__ ("lda %v", _en_y1);
;
	lda     __en_y1
;
; __asm__ ("sta %v, y", en_y1);
;
	sta     _en_y1,y
;
; __asm__ ("lda %v", _en_y2);
;
	lda     __en_y2
;
; __asm__ ("sta %v, y", en_y2);
;
	sta     _en_y2,y
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("sta %v, y", en_mx);
;
	sta     _en_mx,y
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("sta %v, y", en_my);
;
	sta     _en_my,y
;
; __asm__ ("lda %v", _en_ct);
;
	lda     __en_ct
;
; __asm__ ("sta %v, y", en_ct);
;
	sta     _en_ct,y
;
; __asm__ ("lda %v", _en_facing);
;
	lda     __en_facing
;
; __asm__ ("sta %v, y", en_facing);
;
	sta     _en_facing,y
;
; enf_x [gpit] = _enf_x; enf_vx [gpit] = _enf_vx;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L26E5
	inx
	clc
L26E5:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	lda     __enf_x
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     __enf_x+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L26E6
	inx
	clc
L26E6:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	lda     __enf_vx
	dey
	sta     (ptr1),y
	iny
	lda     __enf_vx+1
	sta     (ptr1),y
;
; enf_y [gpit] = _enf_y; enf_vy [gpit] = _enf_vy;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L26E7
	inx
	clc
L26E7:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	lda     __enf_y
	dey
	sta     (ptr1),y
	iny
	lda     __enf_y+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L26E8
	inx
	clc
L26E8:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	lda     __enf_vy
	dey
	sta     (ptr1),y
	iny
	lda     __enf_vy+1
	sta     (ptr1),y
;
; } 
;
	jmp     L215F

.endproc

; ---------------------------------------------------------------
; void __near__ draw_game_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_game_frame: near

.segment	"CODE"

;
; unrle_vram (hud_rle, 0x2000);
;
	lda     #<(_hud_rle)
	ldx     #>(_hud_rle)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jmp     _unrle_vram

.endproc

; ---------------------------------------------------------------
; void __near__ hud_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_update: near

.segment	"CODE"

;
; if (okilled != pkilled) {
;
	lda     _pkilled
	cmp     _okilled
	beq     L23EA
;
; okilled = pkilled;
;
	lda     _pkilled
	sta     _okilled
;
; _x = KILLED_X; _y = KILLED_Y; _n = c_max_enems - pkilled; p_t ();
;
	lda     #$1C
	sta     __x
	lda     #$04
	sta     __y
	lda     _c_max_enems
	sec
	sbc     _pkilled
	sta     __n
	jsr     _p_t
;
; if (okeys != pkeys) {
;
L23EA:	lda     _pkeys
	cmp     _okeys
	beq     L23F5
;
; okeys = pkeys;
;
	lda     _pkeys
	sta     _okeys
;
; _x = KEYS_X; _y = KEYS_Y; _n = pkeys; p_t ();
;
	lda     #$0C
	sta     __x
	lda     #$04
	sta     __y
	lda     _pkeys
	sta     __n
	jsr     _p_t
;
; if (olife != plife) {
;
L23F5:	lda     _plife
	cmp     _olife
	beq     L2400
;
; olife = plife;
;
	lda     _plife
	sta     _olife
;
; _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
;
	lda     #$04
	sta     __x
	sta     __y
	lda     _plife
	sta     __n
	jsr     _p_t
;
; HS_INV_X, HS_INV_Y,
;
L2400:	jsr     decsp3
	lda     #$A0
	ldy     #$02
	sta     (sp),y
	lda     #$0F
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [pinv]
;
	ldx     #$00
	lda     _pinv
	asl     a
	bcc     L26F1
	inx
	clc
L26F1:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [pinv]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_init: near

.segment	"CODE"

;
; win_level = game_over = 0;
;
	lda     #$00
	sta     _game_over
	sta     _win_level
;
; c_pal_bg =   l_pal_bg [level];
;
	tax
	lda     _level
	asl     a
	bcc     L26FC
	inx
	clc
L26FC:	adc     #<(_l_pal_bg)
	sta     ptr1
	txa
	adc     #>(_l_pal_bg)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_pal_bg+1
	dey
	lda     (ptr1),y
	sta     _c_pal_bg
;
; c_pal_fg =   l_pal_fg [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L26FD
	inx
	clc
L26FD:	adc     #<(_l_pal_fg)
	sta     ptr1
	txa
	adc     #>(_l_pal_fg)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_pal_fg+1
	dey
	lda     (ptr1),y
	sta     _c_pal_fg
;
; c_ts_tmaps =  l_ts_tmaps [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L26FE
	inx
	clc
L26FE:	adc     #<(_l_ts_tmaps)
	sta     ptr1
	txa
	adc     #>(_l_ts_tmaps)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_tmaps+1
	dey
	lda     (ptr1),y
	sta     _c_ts_tmaps
;
; c_ts_pals =  l_ts_pals [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L26FF
	inx
	clc
L26FF:	adc     #<(_l_ts_pals)
	sta     ptr1
	txa
	adc     #>(_l_ts_pals)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_pals+1
	dey
	lda     (ptr1),y
	sta     _c_ts_pals
;
; c_behs =   l_behs [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2700
	inx
	clc
L2700:	adc     #<(_l_behs)
	sta     ptr1
	txa
	adc     #>(_l_behs)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_behs+1
	dey
	lda     (ptr1),y
	sta     _c_behs
;
; spr_enems =  l_spr_enems [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2701
	inx
	clc
L2701:	adc     #<(_l_spr_enems)
	sta     ptr1
	txa
	adc     #>(_l_spr_enems)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _spr_enems+1
	dey
	lda     (ptr1),y
	sta     _spr_enems
;
; c_map =   l_map [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2702
	inx
	clc
L2702:	adc     #<(_l_map)
	sta     ptr1
	txa
	adc     #>(_l_map)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_map+1
	dey
	lda     (ptr1),y
	sta     _c_map
;
; c_locks =  l_locks [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2703
	inx
	clc
L2703:	adc     #<(_l_locks)
	sta     ptr1
	txa
	adc     #>(_l_locks)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_locks+1
	dey
	lda     (ptr1),y
	sta     _c_locks
;
; l_n_bolts [level];
;
	ldy     _level
	lda     _l_n_bolts,y
	sta     _c_max_bolts
;
; c_enems =   l_enems [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2704
	inx
	clc
L2704:	adc     #<(_l_enems)
	sta     ptr1
	txa
	adc     #>(_l_enems)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_enems+1
	dey
	lda     (ptr1),y
	sta     _c_enems
;
; c_hotspots =  l_hotspots [level]; 
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2705
	inx
	clc
L2705:	adc     #<(_l_hotspots)
	sta     ptr1
	txa
	adc     #>(_l_hotspots)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_hotspots+1
	dey
	lda     (ptr1),y
	sta     _c_hotspots
;
; c_max_enems =  l_player_max_enems [level];
;
	ldy     _level
	lda     _l_player_max_enems,y
	sta     _c_max_enems
;
; c_map_w =   l_map_w [level];
;
	ldy     _level
	lda     _l_map_w,y
	sta     _c_map_w
;
; pal_bg (c_pal_bg);
;
	lda     _c_pal_bg
	ldx     _c_pal_bg+1
	jsr     _pal_bg
;
; pal_spr (c_pal_fg);
;
	lda     _c_pal_fg
	ldx     _c_pal_fg+1
	jsr     _pal_spr
;
; cls ();
;
	jsr     _cls
;
; draw_game_frame ();
;
	jsr     _draw_game_frame
;
; n_pant = SCR_INI;
;
	ldy     _level
	lda     _l_scr_ini,y
	sta     _n_pant
;
; hotspots_load ();
;
	jsr     _hotspots_load
;
; bolts_load ();
;
	jsr     _bolts_load
;
; px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_x,y
	jsr     aslax4
	clc
	adc     #$04
	bcc     L2454
	inx
L2454:	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; py = (PLAYER_INI_Y << 4) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_y,y
	jsr     aslax4
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; player_init ();
;
	jsr     _player_init
;
; enems_persistent_load ();
;
	jsr     _enems_persistent_load
;
; enems_persistent_deaths_load ();
;
	jsr     _enems_persistent_deaths_load
;
; pkeys = 0;
;
	lda     #$00
	sta     _pkeys
;
; res_on = 0;
;
	sta     _res_on
;
; use_ct = 0;
;
	sta     _use_ct
;
; no_ct = 0;
;
	sta     _no_ct
;
; propellers_on = 0;
;
	sta     _propellers_on
;
; half_life = 0;
;
	sta     _half_life
;
; frame_counter = 0;
;
	sta     _frame_counter
;
; olife = oammo = oobjs = okeys = 0xff;
;
	lda     #$FF
	sta     _okeys
	sta     _oobjs
	sta     _oammo
	sta     _olife
;
; okilled = 0xff;
;
	sta     _okilled
;
; if (level == 0) {
;
	lda     _level
	bne     L2473
;
; pal_cycle [0] = palts1 [13];
;
	lda     _palts1+13
	sta     _pal_cycle
;
; pal_cycle [1] = palts1 [14];
;
	lda     _palts1+14
	sta     _pal_cycle+1
;
; pal_cycle [2] = palts1 [15];
;
	lda     _palts1+15
	sta     _pal_cycle+2
;
; }
;
L2473:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ prepare_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_scr: near

.segment	"CODE"

;
; if (!ft) fade_out (); else ft = 0;
;
	lda     _ft
	bne     L2482
	jsr     _fade_out
	jmp     L2485
L2482:	lda     #$00
	sta     _ft
;
; prp_idx = 0;
;
L2485:	lda     #$00
	sta     _prp_idx
;
; enems_persistent_update ();
;
	jsr     _enems_persistent_update
;
; enems_load ();
;
	jsr     _enems_load
;
; hotspots_create (); 
;
	jsr     _hotspots_create
;
; ppu_off ();
;
	jsr     _ppu_off
;
; shine_active_ct = 0;
;
	lda     #$00
	sta     _shine_active_ct
;
; max_shines = 0;
;
	sta     _max_shines
;
; draw_scr ();
;
	jsr     _draw_scr
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; prx = px >> FIXBITS; pry = py >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_render ();
;
	jsr     _player_render
;
; enems_move ();
;
	jsr     _enems_move
;
; if (hrt) hotspots_paint ();
;
	lda     _hrt
	beq     L249C
	jsr     _hotspots_paint
;
; player_render ();
;
L249C:	jsr     _player_render
;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; hud_update ();
;
	jsr     _hud_update
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; music_play (m_ingame);
;
	lda     #<(_m_ingame)
	ldx     #>(_m_ingame)
	jsr     _music_play
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; set_vram_update (UPDATE_LIST_SIZE, update_list);
;
	lda     #$20
	jsr     pusha
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; on_pant = 99; ft = 1; fade_delay = 1;
;
	lda     #$63
	sta     _on_pant
	lda     #$01
	sta     _ft
	sta     _fade_delay
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; oam_index = 0;
;
	lda     #$00
	sta     _oam_index
;
; half_life = 1 - half_life;
;
L24B8:	lda     #$01
	sec
	sbc     _half_life
	sta     _half_life
;
; frame_counter ++;
;
	lda     _frame_counter
	clc
	adc     #$01
	sta     _frame_counter
;
; if (on_pant != n_pant) {
;
	lda     _n_pant
	cmp     _on_pant
	beq     L24BE
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; hud_update ();
;
L24BE:	jsr     _hud_update
;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; pad_read ();
;
	jsr     _pad_read
;
; a_button = (pad_this_frame & PAD_A);
;
	lda     _pad_this_frame
	and     #$01
	sta     _a_button
;
; b_button = (pad_this_frame & PAD_B);
;
	lda     _pad_this_frame
	and     #$02
	sta     _b_button
;
; if (prx == 4 && 
;
	lda     _prx
	cmp     #$04
	bne     L24CF
;
; (cfx + pvx) < 0
;
	ldx     #$00
	lda     _cfx
	bpl     L24D3
	dex
L24D3:	clc
	adc     _pvx
	txa
	adc     _pvx+1
	tax
;
; ) {
;
	cpx     #$80
	bcc     L24CF
;
; n_pant --;
;
	lda     _n_pant
	sec
	sbc     #$01
	sta     _n_pant
;
; px = 244 << FIXBITS;
;
	ldx     #$3D
	lda     #$00
	sta     _px
	stx     _px+1
;
; } else if (prx == 244 && 
;
	jmp     L24F2
L24CF:	lda     _prx
	cmp     #$F4
	bne     L24D9
;
; (cfx + pvx) > 0
;
	ldx     #$00
	lda     _cfx
	bpl     L24DD
	dex
L24DD:	clc
	adc     _pvx
	pha
	txa
	adc     _pvx+1
	tax
	pla
;
; ) {
;
	cmp     #$01
	txa
	sbc     #$00
	bvs     L24DE
	eor     #$80
L24DE:	bpl     L24D9
;
; n_pant ++;
;
	lda     _n_pant
	clc
	adc     #$01
	sta     _n_pant
;
; px = 4 << FIXBITS;
;
	ldx     #$01
	lda     #$00
	sta     _px
	stx     _px+1
;
; } else if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
;
	jmp     L24F2
L24D9:	lda     _pry
	bne     L24E4
	ldx     _pvy+1
	cpx     #$80
	bcc     L24E4
	lda     _n_pant
	cmp     _c_map_w
	bcc     L24E4
;
; n_pant -= c_map_w;
;
	lda     _c_map_w
	eor     #$FF
	sec
	adc     _n_pant
	sta     _n_pant
;
; py = 192 << FIXBITS;
;
	ldx     #$30
	lda     #$00
	sta     _py
	stx     _py+1
;
; if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$FF
	bvs     L24EE
	eor     #$80
L24EE:	bpl     L24F2
	ldx     #$FF
	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; } else if (pry >= 192 && pvy > 0) {
;
	jmp     L24F2
L24E4:	lda     _pry
	cmp     #$C0
	bcc     L24F2
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L24F5
	eor     #$80
L24F5:	bpl     L24F2
;
; n_pant += c_map_w;
;
	lda     _c_map_w
	clc
	adc     _n_pant
	sta     _n_pant
;
; py = 0;
;
	lda     #$00
	sta     _py
	sta     _py+1
;
; if (pkill) player_kill ();
;
L24F2:	lda     _pkill
	beq     L24FB
	jsr     _player_kill
;
; if (game_over) break;   
;
L24FB:	lda     _game_over
	jne     L24B9
;
; if (on_pant != n_pant) {
;
	lda     _n_pant
	cmp     _on_pant
	beq     L2500
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; win_level = (c_max_enems == pkilled);
;
L2500:	lda     _pkilled
	cmp     _c_max_enems
	jsr     booleq
	sta     _win_level
;
; if (level == 0 && (frame_counter & 7) == 0 ) {
;
	lda     _level
	bne     L2508
	lda     _frame_counter
	and     #$07
	bne     L2508
;
; rda = pal_cycle [2];
;
	lda     _pal_cycle+2
	sta     _rda
;
; pal_cycle [2] = pal_cycle [1]; pal_col (13, pal_cycle [2]);
;
	lda     _pal_cycle+1
	sta     _pal_cycle+2
	lda     #$0D
	jsr     pusha
	lda     _pal_cycle+2
	jsr     _pal_col
;
; pal_cycle [1] = pal_cycle [0]; pal_col (14, pal_cycle [1]);
;
	lda     _pal_cycle
	sta     _pal_cycle+1
	lda     #$0E
	jsr     pusha
	lda     _pal_cycle+1
	jsr     _pal_col
;
; pal_cycle [0] = rda;   pal_col (15, pal_cycle [0]);
;
	lda     _rda
	sta     _pal_cycle
	lda     #$0F
	jsr     pusha
	lda     _pal_cycle
	jsr     _pal_col
;
; if (win_level)
;
L2508:	lda     _win_level
	beq     L2528
;
; music_stop ();
;
	jsr     _music_stop
;
; delay (50);
;
	lda     #$32
	jsr     _delay
;
; break;
;
	jmp     L24B9
;
; oam_index = 4;
;
L2528:	lda     #$04
	sta     _oam_index
;
; if (pstate) {
;
	lda     _pstate
	beq     L2532
;
; pctstate --;
;
	lda     _pctstate
	sec
	sbc     #$01
	sta     _pctstate
;
; if (!pctstate) pstate = EST_NORMAL;
;
	lda     _pctstate
	bne     L2532
	sta     _pstate
;
; if (propellers_on) propellers_do ();
;
L2532:	lda     _propellers_on
	beq     L2536
	jsr     _propellers_do
;
; if (res_on) {
;
L2536:	lda     _res_on
	beq     L2553
;
; if (hrt == HOTSPOT_TYPE_RESONATOR) {
;
	lda     _hrt
	cmp     #$04
	bne     L253B
;
; hrx + RESONATOR_COUNTER_OFFS_X, 
;
	jsr     decsp4
	lda     _hrx
	clc
	adc     #$04
	ldy     #$03
	sta     (sp),y
;
; hry + RESONATOR_COUNTER_OFFS_Y + SPRITE_ADJUST, 
;
	lda     _hry
	clc
	adc     #$07
	bcc     L270C
	clc
L270C:	adc     #$30
	sec
	sbc     #$0C
	bcs     L270D
	sec
L270D:	sbc     #$10
	bcs     L270E
	sec
L270E:	sbc     #$01
	dey
	sta     (sp),y
;
; RESONATOR_BASE_PATTERN + res_ct, 
;
	lda     _res_ct
	dey
	sta     (sp),y
;
; RESONATOR_PALETTE, 
;
	lda     #$03
	dey
	sta     (sp),y
;
; oam_index);
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (res_subct) res_subct --; else {
;
L253B:	lda     _res_subct
	beq     L254A
	lda     _res_subct
	sec
	sbc     #$01
	sta     _res_subct
	jmp     L2553
;
; res_subct = 50;
;
L254A:	lda     #$32
	sta     _res_subct
;
; if (res_ct) res_ct --; else {
;
	lda     _res_ct
	beq     L2550
	lda     _res_ct
	sec
	sbc     #$01
	sta     _res_ct
	jmp     L2553
;
; res_on = 0;
;
L2550:	sta     _res_on
;
; pal_spr (c_pal_fg);
;
	lda     _c_pal_fg
	ldx     _c_pal_fg+1
	jsr     _pal_spr
;
; if (hrt) {
;
L2553:	lda     _hrt
	jeq     L25F7
;
; if (collide_in (prx + 4, pry + 8, hrx, hry)) {
;
	jsr     decsp8
	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L255D
	inx
L255D:	ldy     #$06
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L255F
	inx
L255F:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _hrx
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _hry
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _collide_in
	tax
	jeq     L25F7
;
; if (hrt == HOTSPOT_TYPE_RESONATOR) {
;
	lda     _hrt
	cmp     #$04
	bne     L2562
;
; if (pvy > 0 && pry < hry) {
;
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L2566
	eor     #$80
L2566:	jpl     L25F7
	lda     _pry
	cmp     _hry
	jcs     L25F7
;
; if (res_on == 0) {
;
	lda     _res_on
	jne     L25F7
;
; res_on = 1; res_ct = 9; res_subct = 50;
;
	lda     #$01
	sta     _res_on
	lda     #$09
	sta     _res_ct
	lda     #$32
	sta     _res_subct
;
; pj = 1; pctj = 0; pvy = -PLAYER_VY_JUMP_INITIAL;
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
	ldx     #$FF
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; pal_spr (RESONATOR_CHANGE_SPR_PAL);
;
	lda     #<(_palssgrey)
	ldx     #>(_palssgrey)
	jsr     _pal_spr
;
; } else
;
	jmp     L25F7
;
; use_ct == 0 && b_button 
;
L2562:	lda     _use_ct
	bne     L257A
;
; && ppossee
;
	lda     _b_button
	beq     L257A
;
; ) {
;
	lda     _ppossee
	beq     L257A
;
; use_ct = 1; use_sub_ct = USE_ANIM_FRAMES_PER_STEP;
;
	lda     #$01
	sta     _use_ct
	lda     #$04
	sta     _use_sub_ct
;
; b_button = a_button = 0;
;
	lda     #$00
	sta     _a_button
	sta     _b_button
;
; if (use_ct == USE_ANIM_INTERACT_ON && use_sub_ct == USE_ANIM_FRAMES_PER_STEP)
;
L257A:	lda     _use_ct
	cmp     #$07
	jne     L25F7
	lda     _use_sub_ct
	cmp     #$04
	jne     L25F7
;
; opinv = pinv;
;
	lda     _pinv
	sta     _opinv
;
; if (hrt == HS_OBJ_EMPTY) {
;
	lda     _hrt
	cmp     #$01
	bne     L258B
;
; hrt = ht [n_pant] = pinv;
;
	ldy     _n_pant
	lda     _pinv
	sta     _ht,y
	sta     _hrt
;
; pinv = HS_OBJ_EMPTY;
;
	lda     #$01
	sta     _pinv
;
; b_button = 0;
;
	lda     #$00
	sta     _b_button
;
; sfx_play (1, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; } else if (hrt >= HS_OBJ_MIN && hrt <= HS_OBJ_MAX) {
;
	jmp     L25EA
L258B:	lda     _hrt
	cmp     #$06
	bcc     L259A
	lda     _hrt
	cmp     #$0E
	bcs     L259A
;
; rda = hrt;
;
	lda     _hrt
	sta     _rda
;
; hrt = ht [n_pant] = pinv;
;
	ldy     _n_pant
	lda     _pinv
	sta     _ht,y
	sta     _hrt
;
; pinv = rda;
;
	lda     _rda
	sta     _pinv
;
; b_button = 0;
;
	lda     #$00
	sta     _b_button
;
; sfx_play (2, 1);
;
	lda     #$02
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; } else if (hrt >= HS_OBJ_MIN + HS_USE_OFFS && hrt <= HS_OBJ_MAX + HS_USE_OFFS) {
;
	jmp     L25EA
L259A:	lda     _hrt
	cmp     #$0E
	jcc     L25AD
	lda     _hrt
	cmp     #$16
	bcs     L25AD
;
; if (pinv == hrt - HS_USE_OFFS) {
;
	ldx     #$00
	lda     _hrt
	sec
	sbc     #$08
	bcs     L25B3
	dex
L25B3:	cpx     #$00
	bne     L25B1
	cmp     _pinv
	bne     L25B1
;
; rda = pinv;
;
	lda     _pinv
	sta     _rda
;
; rdb = hrt;
;
	lda     _hrt
	sta     _rdb
;
; hrt = ht [n_pant] = pinv + 2*HS_USE_OFFS;
;
	lda     #<(_ht)
	ldx     #>(_ht)
	clc
	adc     _n_pant
	bcc     L25BB
	inx
L25BB:	sta     ptr1
	stx     ptr1+1
	lda     _pinv
	clc
	adc     #$10
	ldy     #$00
	sta     (ptr1),y
	sta     _hrt
;
; pinv = HS_OBJ_EMPTY;
;
	lda     #$01
	sta     _pinv
;
; if (level == 1 && ht [9] == 6 + 2*HS_USE_OFFS) {
;
	lda     _level
	cmp     #$01
	bne     L25C0
	lda     _ht+9
	cmp     #$16
	bne     L25C0
;
; propellers_on = 1;
;
	lda     #$01
	sta     _propellers_on
;
; gp_gen = text_propellers;
;
	lda     #<(_text_propellers)
	sta     _gp_gen
	lda     #>(_text_propellers)
	sta     _gp_gen+1
;
; textbox_do ();
;
	jsr     _textbox_do
;
; b_button = 0;
;
L25C0:	lda     #$00
	sta     _b_button
;
; sfx_play (1, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; else no_ct = 100;
;
	jmp     L25EA
L25B1:	lda     #$64
	sta     _no_ct
;
; else if (hrt >= HS_OBJ_MIN + 2*HS_USE_OFFS && hrt <= HS_OBJ_MAX + 2*HS_USE_OFFS) {
;
	jmp     L25EA
L25AD:	lda     _hrt
	cmp     #$16
	bcc     L25D3
	lda     _hrt
	cmp     #$1E
	bcs     L25D3
;
; no_ct = 100;
;
	lda     #$64
	sta     _no_ct
;
; else
;
	jmp     L25EA
;
; rda = 0;
;
L25D3:	lda     #$00
	sta     _rda
;
; switch (hrt) {
;
	lda     _hrt
;
; }
;
	cmp     #$02
	beq     L25E0
	cmp     #$03
	beq     L25E5
	jmp     L25DE
;
; pkeys ++;
;
L25E0:	lda     _pkeys
	clc
	adc     #$01
	sta     _pkeys
;
; rda = 2;
;
	lda     #$02
;
; break;
;
	jmp     L270B
;
; plife += PLAYER_REFILL;
;
L25E5:	inc     _plife
;
; rda = 3;
;
L270B:	sta     _rda
;
; if (rda) {
;
L25DE:	lda     _rda
	beq     L25EA
;
; sfx_play (rda, 1);
;
	lda     _rda
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; hrt = 0;
;
	lda     #$00
	sta     _hrt
;
; hact [n_pant] = 0;
;
	ldy     _n_pant
	sta     _hact,y
;
; if (opinv != pinv) {
;
L25EA:	lda     _pinv
	cmp     _opinv
	beq     L25F7
;
; if (level == 0 && ht [0x12] == 9 && ht [0x16] == 10 && ht [0x0c] == 8) {
;
	lda     _level
	bne     L25F7
	lda     _ht+18
	cmp     #$09
	bne     L25F7
	lda     _ht+22
	cmp     #$0A
	bne     L25F7
	lda     _ht+12
	cmp     #$08
	bne     L25F7
;
; gp_gen = text_open_gate;
;
	lda     #<(_text_open_gate)
	sta     _gp_gen
	lda     #>(_text_open_gate)
	sta     _gp_gen+1
;
; textbox_do ();
;
	jsr     _textbox_do
;
; player_move ();
;
L25F7:	jsr     _player_move
;
; player_render ();
;
	jsr     _player_render
;
; enems_move ();
;
	jsr     _enems_move
;
; if (hrt) hotspots_paint ();
;
	lda     _hrt
	beq     L2604
	jsr     _hotspots_paint
;
; shines_do ();
;
L2604:	jsr     _shines_do
;
; if (no_ct) {
;
	lda     _no_ct
	beq     L2608
;
; no_ct --;
;
	lda     _no_ct
	sec
	sbc     #$01
	sta     _no_ct
;
; prx + NO_OFFS_X, pry + NO_OFFS_Y + SPRITE_ADJUST,
;
	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	clc
	adc     #$E8
	pha
	lda     #$00
	adc     #$FF
	pla
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L270F
	sec
L270F:	sbc     #$10
	bcs     L2710
	sec
L2710:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; );
;
	lda     #<(_ssit_06)
	ldx     #>(_ssit_06)
	jsr     _oam_meta_spr
	sta     _oam_index
;
; if (i & PAD_START) {
;
L2608:	lda     _i
	and     #$08
	jeq     L24B8
;
; while (pad_poll (0) & PAD_START);
;
L2617:	lda     #$00
	jsr     _pad_poll
	and     #$08
	bne     L2617
;
; music_pause (1);
;
	lda     #$01
	jsr     _music_pause
;
; sfx_play (0, 1);
;
	lda     #$00
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; pal_bright (3);
;
	lda     #$03
	jsr     _pal_bright
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; while (!(pad_poll (0) & PAD_START));
;
L2623:	lda     #$00
	jsr     _pad_poll
	and     #$08
	beq     L2623
;
; pal_bright (4);
;
	lda     #$04
	jsr     _pal_bright
;
; music_pause (0);
;
	lda     #$00
	jsr     _music_pause
;
; while (pad_poll (0) & PAD_START);
;
L262C:	lda     #$00
	jsr     _pad_poll
	and     #$08
	bne     L262C
;
; sfx_play (0, 1);
;
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; }
;
	jmp     L24B8
;
; music_stop ();
;
L24B9:	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; set_vram_update (0, 0);
;
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
;
; ppu_off ();
;
	jsr     _ppu_off
;
; oam_clear ();
;
	jmp     _oam_clear

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; bank_spr (1);
;
	lda     #$01
	jsr     _bank_spr
;
; bank_bg (0);
;
	lda     #$00
	jsr     _bank_bg
;
; ppu_off ();
;
	jsr     _ppu_off
;
; level = 0;
;
L2640:	lda     #$00
	sta     _level
;
; plife = PLAYER_LIFE;
;
	lda     #$05
	sta     _plife
;
; scroll (0, SCROLL_Y);
;
L2647:	jsr     push0
	lda     #$0C
	jsr     _scroll
;
; game_init (); 
;
	jsr     _game_init
;
; game_loop ();
;
	jsr     _game_loop
;
; if (game_over) {
;
	lda     _game_over
;
; break;
;
	bne     L2640
;
; level ++;
;
	lda     _level
	clc
	adc     #$01
	sta     _level
;
; if (level == MAX_LEVELS) 
;
	cmp     #$02
	bne     L2647
;
; break;
;
	jmp     L2640

.endproc

