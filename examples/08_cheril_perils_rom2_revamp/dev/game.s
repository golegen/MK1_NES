;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_ppu_waitnmi
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_set_rand
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_write
	.import		_unrle_vram
	.import		_memfill
	.import		_delay
	.import		_bankswitch
	.export		_coco_dx
	.export		_coco_dy
	.export		_endx
	.export		_endy
	.export		_palts0
	.export		_palss0
	.export		_palts1
	.export		_palss1
	.export		_palts2
	.export		_palss2
	.export		_palts3
	.export		_palss3
	.export		_palssgrey
	.export		_palcuts0
	.export		_paltitle
	.export		_behs0
	.export		_behs1
	.export		_behs2
	.export		_behs3
	.export		_map_00_scr_offsets
	.export		_map_00_locks
	.export		_map_01_scr_offsets
	.export		_map_02_scr_offsets
	.export		_map_03_scr_offsets
	.export		_map_03_locks
	.export		_map_04_scr_offsets
	.export		_sspl_00_a
	.export		_sspl_00_b
	.export		_sspl_01_a
	.export		_sspl_01_b
	.export		_sspl_02_a
	.export		_sspl_02_b
	.export		_sspl_03_a
	.export		_sspl_03_b
	.export		_sspl_04_a
	.export		_sspl_04_b
	.export		_sspl_05_a
	.export		_sspl_05_b
	.export		_sspl_06
	.export		_sspl_07
	.export		_sspl_08
	.export		_sspl_09
	.export		_sspl_0A
	.export		_sspl_0B
	.export		_sspl_0C
	.export		_sspl_0D
	.export		_sspl_0E
	.export		_sspl_0F
	.export		_ssit_00
	.export		_ssit_01
	.export		_ssit_02
	.export		_ssit_03
	.export		_ssit_04
	.export		_ssit_05
	.export		_ssit_06
	.export		_ssplat_00
	.export		_ssplat_01
	.export		_ssfanty_00_a
	.export		_ssfanty_00_b
	.export		_ssfanty_01_a
	.export		_ssfanty_01_b
	.export		_sssaw_00
	.export		_sssaw_01
	.export		_ssocl_00
	.export		_ssen_00_a
	.export		_ssen_00_b
	.export		_ssen_01_a
	.export		_ssen_01_b
	.export		_ssen_02_a
	.export		_ssen_02_b
	.export		_ssen_03_a
	.export		_ssen_03_b
	.export		_ssen_04_a
	.export		_ssen_04_b
	.export		_ssen_05_a
	.export		_ssen_05_b
	.export		_ssen_06_a
	.export		_ssen_06_b
	.export		_ssen_07_a
	.export		_ssen_07_b
	.export		_ssbigf_00_a
	.export		_ssbigf_00_b
	.export		_ssbigf_01_a
	.export		_ssbigf_01_b
	.export		_sssit_00
	.export		_sssit_01
	.export		_sssit_02
	.export		_sssit_03
	.export		_sssit_04
	.export		_sssit_05
	.export		_sssit_06
	.export		_sssit_07
	.export		_sssit_08
	.export		_sschar1_00
	.export		_sschar1_01
	.export		_sschar1_02
	.export		_sschar1_03
	.export		_ssen2_00_a
	.export		_ssen2_00_b
	.export		_ssen2_01_a
	.export		_ssen2_01_b
	.export		_ssen2_02_a
	.export		_ssen2_02_b
	.export		_ssen2_03_a
	.export		_ssen2_03_b
	.export		_ssen2_04_a
	.export		_ssen2_04_b
	.export		_ssen2_05_a
	.export		_ssen2_05_b
	.export		_ssen3_00_a
	.export		_ssen3_00_b
	.export		_ssen3_01_a
	.export		_ssen3_01_b
	.export		_ssen3_02_a
	.export		_ssen3_02_b
	.export		_ssen3_03_a
	.export		_ssen3_03_b
	.export		_ssen3_04_a
	.export		_ssen3_04_b
	.export		_ssen3_05_a
	.export		_ssen3_05_b
	.export		_ssss_00
	.export		_ssss_01
	.export		_ssss_02
	.export		_ssss_03
	.export		_sscomp_00_a
	.export		_sscomp_00_b
	.export		_sscomp_01_a
	.export		_sscomp_01_b
	.export		_sscomp_02_a
	.export		_sscomp_02_b
	.export		_sscomp_03_a
	.export		_sscomp_03_b
	.export		_sschar2_00
	.export		_sschar2_01
	.export		_sschar2_02
	.export		_sschar2_03
	.export		_ts0_pals
	.export		_ts0_tmaps
	.export		_ts1_pals
	.export		_ts1_tmaps
	.export		_ts2_pals
	.export		_ts2_tmaps
	.export		_ts3_pals
	.export		_ts3_tmaps
	.export		_spr_player
	.export		_spr_enems0
	.export		_spr_enems1
	.export		_spr_enems2
	.export		_spr_enems3
	.export		_spr_hs
	.export		_text_propellers
	.export		_text_open_gate
	.export		_dialogue_0_0
	.export		_dialogue_0_1
	.export		_dialogue_0_2
	.export		_dialogue_0_3
	.export		_dialogue_0_4
	.export		_dialogue_1_0
	.export		_dialogue_1_1
	.export		_dialogue_1_2
	.export		_dialogue_2_0
	.export		_dialogue_2_1
	.export		_dialogue_2_2
	.export		_dialogue_2_4
	.export		_dialogue_2_3
	.export		_dialogue_3_0
	.export		_dialogue_3_1
	.export		_dialogue_4_0
	.export		_dialogue_4_1
	.export		_dialogue_4_2
	.export		_dialogue_4_3
	.export		_cutscene_0
	.export		_cutscene_1
	.export		_cutscene_2
	.export		_cutscene_3
	.export		_cutscene_4
	.export		_dialogue_portraits
	.export		_dialogue_texts
	.export		_cutscenes
	.export		_beh0
	.export		_beh1
	.export		_en_behptrs
	.export		_interactives0
	.export		_interactives1
	.export		_interactives2
	.export		_interactives3
	.export		_interactives4
	.export		_l_scr_ini
	.export		_l_ini_x
	.export		_l_ini_y
	.export		_l_map_w
	.export		_l_player_max_objects
	.export		_l_player_max_enems
	.export		_l_pal_bg
	.export		_l_pal_fg
	.export		_l_ts_tmaps
	.export		_l_ts_pals
	.export		_l_behs
	.export		_l_spr_enems
	.export		_l_map_chr_rom_bank
	.export		_l_map
	.export		_l_locks
	.export		_l_n_bolts
	.export		_l_enems_chr_rombank
	.export		_l_enems
	.export		_l_hotspots
	.export		_l_chr_rom_bank
	.export		_l_interactives
	.export		_title_sp_rle
	.export		_hud_rle
	.export		_cuts0_rle
	.export		_cuts1_rle
	.export		_cuts2_rle
	.export		_map_bg0
	.export		_map_bg3
	.export		_bgs
	.export		__x
	.export		__y
	.export		__n
	.export		__t
	.export		_i
	.export		_pad_this_frame
	.export		_gpit
	.export		_gpjt
	.export		_gpitu
	.export		_gpaux
	.export		_rds16
	.export		_gp_gen
	.export		_gp_tmap
	.export		_gp_tma2
	.export		_gp_ram
	.export		_gp_ram_aux
	.export		_gp_addr
	.export		_rdx
	.export		_rdy
	.export		_rdt
	.export		_rdit
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdd
	.export		_rdm
	.export		_rds
	.export		_rdct
	.export		_ticker
	.export		_at1
	.export		_at2
	.export		_cx1
	.export		_cx2
	.export		_cy1
	.export		_cy2
	.export		_caux
	.export		_oam_index
	.export		_oam_index_aux
	.export		_en_initial
	.export		_en_offs
	.export		_en_fr
	.export		_en_collx
	.export		_en_colly
	.export		_en_spr
	.export		_touched
	.export		_en_cttouched
	.export		_en_flags
	.export		_en_is_alive
	.export		_pregotten
	.export		__en_t
	.export		__en_s
	.export		__en_x
	.export		__en_y
	.export		__en_x1
	.export		__en_y1
	.export		__en_x2
	.export		__en_y2
	.export		__en_mx
	.export		__en_my
	.export		__en_ct
	.export		__en_facing
	.export		__enf_x
	.export		__enf_y
	.export		__enf_vx
	.export		__enf_vy
	.export		_en_life
	.export		_en_alive
	.export		_en_status
	.export		_en_rawv
	.export		_en_ct
	.export		_en_behptr
	.export		_px
	.export		_py
	.export		_pvx
	.export		_pvy
	.export		_prx
	.export		_pry
	.export		_pfacing
	.export		_pfr
	.export		_pctfr
	.export		_psprid
	.export		_a_button
	.export		_b_button
	.export		_pj
	.export		_pctj
	.export		_pjb
	.export		_pgotten
	.export		_ppossee
	.export		_psprint
	.export		_pushed_any
	.export		_pstate
	.export		_pctstate
	.export		_pskip
	.export		_phit
	.export		_pgtmx
	.export		_pgtmy
	.export		_pinv
	.export		_opinv
	.export		_ponladder
	.export		_phalfladder
	.export		_ponladderctr
	.export		_wall
	.export		_hitv
	.export		_hith
	.export		_pfloating
	.export		_pkilled
	.export		_prx_old
	.export		_pry_old
	.export		_pobjs
	.export		_plife
	.export		_pcontinues
	.export		_pkill
	.export		_pice
	.export		_pnotsafe
	.export		_pkeys
	.export		_pammo
	.export		_pfiring
	.export		_n_pant_safe
	.export		_px_safe
	.export		_py_safe
	.export		_coco_it
	.export		_hrx
	.export		_hry
	.export		_hrt
	.export		_do_process_breakable
	.export		_ft
	.export		_c_map_w
	.export		_c_ts_pals
	.export		_c_ts_tmaps
	.export		_c_behs
	.export		_spr_enems
	.export		_c_pal_bg
	.export		_c_pal_fg
	.export		_c_map
	.export		_c_map_chr_rom_bank
	.export		_c_locks
	.export		_c_enems
	.export		_c_hotspots
	.export		_c_max_bolts
	.export		_first_game
	.export		_half_life
	.export		_frame_counter
	.export		_n_pant
	.export		_on_pant
	.export		_olife
	.export		_okeys
	.export		_oobjs
	.export		_oammo
	.export		_okilled
	.export		_use_ct
	.export		_use_sub_ct
	.export		_use_type
	.export		_no_ct
	.export		_level
	.export		_game_over
	.export		_win_level
	.export		_c_max_enems
	.export		_update_index
	.export		_update_list
	.export		_map_attr
	.export		_map_buff
	.export		_coco_x
	.export		_coco_y
	.export		_coco_vx
	.export		_coco_vy
	.export		_coco_on
	.export		_coco_slots
	.export		_coco_slots_i
	.export		_fader
	.export		_fade_delay
	.export		_hyx
	.export		_ht
	.export		_hact
	.export		_lkact
	.export		_flags
	.export		_interactives_index
	.export		_interactives_interact_with
	.export		_interactives_f
	.export		_interactives_yx
	.export		_c_interactives
	.export		_en_x
	.export		_en_y
	.export		_en_x1
	.export		_en_y1
	.export		_en_x2
	.export		_en_y2
	.export		_en_mx
	.export		_en_my
	.export		_en_t
	.export		_en_s
	.export		_en_facing
	.export		_enf_x
	.export		_enf_vx
	.export		_enf_y
	.export		_enf_vy
	.export		_en_spr_id
	.export		_ep_x
	.export		_ep_y
	.export		_ep_mx
	.export		_ep_my
	.export		_ep_dead
	.export		_prp_idx
	.export		_prp_yx
	.export		_propellers_on
	.export		_max_shines
	.export		_shine_active_x
	.export		_shine_active_y
	.export		_shines
	.export		_shine_active_ct
	.export		_res_on
	.export		_res_ct
	.export		_res_subct
	.export		_cfx
	.export		_pal_cycle
	.export		_level0_gate
	.export		_level1_gate
	.export		_springs_on
	.export		_propellers_add
	.export		_shines_add
	.export		_cm_two_points
	.export		_collide_in
	.export		_collide
	.export		_add_sign
	.export		_saturate
	.export		_pad_read
	.export		_distance
	.export		_fade_out
	.export		_fade_in
	.export		_clear_update_list
	.export		_cls
	.export		_ul_putc
	.export		_p_t
	.export		_bitmasks
	.export		_attr_table
	.export		_upd_attr_table
	.export		_draw_tile
	.export		_update_list_tile
	.export		_map_set
	.export		_get_byte
	.export		_add_tile
	.export		_draw_scr
	.export		_pr_str
	.export		_box_buff
	.export		_textbox_frame
	.export		_textbox_draw_text
	.export		_textbox_do
	.export		_textbox_dialogue_do
	.export		_hotspots_load
	.export		_hotspots_paint
	.export		_hotspots_create
	.export		_propellers_do
	.export		_shines_do
	.export		_interactives_paint
	.export		_interactives_create
	.export		_cocos_init
	.export		_cocos_shoot_aimed
	.export		_cocos_shoot_linear
	.export		_cocos_destroy
	.export		_cocos_do
	.export		_player_register_safe_spot
	.export		_player_stop
	.export		_player_init
	.export		_player_render
	.export		_player_kill
	.export		_player_process_tile
	.export		_player_move
	.export		_enems_persistent_load
	.export		_enems_persistent_update
	.export		_enems_persistent_deaths_load
	.export		_enems_update_unsigned_char_arrays
	.export		_enems_load
	.export		_enems_kill
	.export		_enems_hit
	.export		_enems_move
	.export		_draw_game_frame
	.export		_hud_update
	.export		_bat_in
	.export		_bat_out
	.export		_pres
	.export		_scr_title
	.export		_scr_game_over
	.export		_scr_cuts
	.export		_game_init
	.export		_prepare_scr
	.export		_game_loop
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_coco_dx:
	.word	$FF80
	.word	$0000
	.word	$0080
	.word	$0000
_coco_dy:
	.word	$0000
	.word	$FF80
	.word	$0000
	.word	$0080
_endx:
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$FF
_endy:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$FF
_palts0:
	.byte	$0F
	.byte	$0C
	.byte	$12
	.byte	$22
	.byte	$0F
	.byte	$1A
	.byte	$29
	.byte	$39
	.byte	$0F
	.byte	$07
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$04
	.byte	$14
	.byte	$24
_palss0:
	.byte	$0F
	.byte	$04
	.byte	$16
	.byte	$37
	.byte	$0F
	.byte	$02
	.byte	$11
	.byte	$27
	.byte	$0F
	.byte	$1D
	.byte	$1C
	.byte	$2C
	.byte	$0F
	.byte	$07
	.byte	$18
	.byte	$3D
_palts1:
	.byte	$0F
	.byte	$0C
	.byte	$00
	.byte	$35
	.byte	$0F
	.byte	$0B
	.byte	$19
	.byte	$28
	.byte	$0F
	.byte	$07
	.byte	$18
	.byte	$38
	.byte	$0F
	.byte	$18
	.byte	$17
	.byte	$27
_palss1:
	.byte	$0F
	.byte	$04
	.byte	$17
	.byte	$37
	.byte	$0F
	.byte	$0B
	.byte	$29
	.byte	$34
	.byte	$0F
	.byte	$1D
	.byte	$1C
	.byte	$2C
	.byte	$0F
	.byte	$07
	.byte	$28
	.byte	$37
_palts2:
	.byte	$0F
	.byte	$0C
	.byte	$00
	.byte	$32
	.byte	$0F
	.byte	$08
	.byte	$18
	.byte	$38
	.byte	$0F
	.byte	$07
	.byte	$18
	.byte	$38
	.byte	$0F
	.byte	$02
	.byte	$22
	.byte	$32
_palss2:
	.byte	$0F
	.byte	$04
	.byte	$16
	.byte	$37
	.byte	$0F
	.byte	$08
	.byte	$00
	.byte	$27
	.byte	$0F
	.byte	$11
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$18
	.byte	$3D
_palts3:
	.byte	$0F
	.byte	$07
	.byte	$00
	.byte	$10
	.byte	$0F
	.byte	$0C
	.byte	$00
	.byte	$38
	.byte	$0F
	.byte	$07
	.byte	$18
	.byte	$36
	.byte	$0F
	.byte	$06
	.byte	$26
	.byte	$35
_palss3:
	.byte	$0F
	.byte	$08
	.byte	$16
	.byte	$37
	.byte	$0F
	.byte	$08
	.byte	$18
	.byte	$31
	.byte	$0F
	.byte	$1D
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$08
	.byte	$00
	.byte	$3D
_palssgrey:
	.byte	$0F
	.byte	$1D
	.byte	$00
	.byte	$30
	.byte	$0F
	.byte	$2D
	.byte	$10
	.byte	$20
	.byte	$0F
	.byte	$1D
	.byte	$00
	.byte	$10
	.byte	$0F
	.byte	$1D
	.byte	$10
	.byte	$30
_palcuts0:
	.byte	$0F
	.byte	$0C
	.byte	$00
	.byte	$30
	.byte	$0F
	.byte	$15
	.byte	$26
	.byte	$37
	.byte	$0F
	.byte	$07
	.byte	$18
	.byte	$38
	.byte	$0F
	.byte	$0B
	.byte	$19
	.byte	$28
_paltitle:
	.byte	$0F
	.byte	$01
	.byte	$15
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_behs0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$28
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_behs1:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
_behs2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$20
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$04
_behs3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
_map_00_scr_offsets:
	.word	$0000
	.word	$0027
	.word	$0058
	.word	$00CD
	.word	$0147
	.word	$01C7
	.word	$01F7
	.word	$022D
	.word	$02AA
	.word	$031E
	.word	$0387
	.word	$0405
	.word	$047D
	.word	$04A9
	.word	$0515
	.word	$0583
	.word	$05FF
	.word	$065B
	.word	$06CE
	.word	$0726
	.word	$07B2
	.word	$0823
	.word	$08A7
	.word	$0903
_map_00_locks:
	.byte	$15
	.byte	$AF
	.byte	$16
	.byte	$AF
_map_01_scr_offsets:
	.word	$0965
	.word	$09B9
	.word	$09F5
	.word	$0A2F
	.word	$0A6B
	.word	$0AB4
	.word	$0AFD
	.word	$0B53
	.word	$0BAB
	.word	$0BF6
	.word	$0C2D
	.word	$0C89
	.word	$0CF0
	.word	$0D33
	.word	$0D81
	.word	$0DC0
	.word	$0E01
	.word	$0E56
	.word	$0EA0
	.word	$0EF9
	.word	$0F37
	.word	$0F85
	.word	$0FD7
	.word	$1032
_map_02_scr_offsets:
	.word	$1064
	.word	$109B
	.word	$10C8
	.word	$110B
	.word	$1143
	.word	$118B
	.word	$11E5
	.word	$121D
	.word	$1285
	.word	$12DE
	.word	$134E
	.word	$13B0
	.word	$13FF
	.word	$145B
	.word	$14B3
	.word	$1522
	.word	$158A
	.word	$15DF
	.word	$163D
	.word	$167A
	.word	$16EC
	.word	$1747
	.word	$1785
	.word	$17EF
_map_03_scr_offsets:
	.word	$1856
	.word	$188C
	.word	$18CA
	.word	$18ED
	.word	$1919
	.word	$194C
	.word	$1995
	.word	$19BC
	.word	$19F1
	.word	$1A37
	.word	$1A72
	.word	$1AA9
	.word	$1AE6
	.word	$1B17
	.word	$1B4B
	.word	$1B86
	.word	$1BBC
	.word	$1BF9
	.word	$1C1F
	.word	$1C5C
	.word	$1C95
	.word	$1CD1
	.word	$1D00
	.word	$1D39
_map_03_locks:
	.byte	$00
	.byte	$8B
	.byte	$12
	.byte	$83
_map_04_scr_offsets:
	.word	$1D78
	.word	$1DAC
	.word	$1DE0
	.word	$1E0C
	.word	$1E2F
	.word	$1E57
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$1E91
_sspl_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$80
_sspl_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$0F
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$12
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$80
_sspl_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$13
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$14
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$15
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$17
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$80
_sspl_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$14
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$13
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$16
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$15
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$18
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$17
	.byte	$40
	.byte	$80
_sspl_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$19
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$1A
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$1B
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$1D
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1E
	.byte	$00
	.byte	$80
_sspl_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$1A
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$19
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$1C
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$1B
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1E
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$1D
	.byte	$40
	.byte	$80
_sspl_03_a:
	.byte	$FC
	.byte	$F8
	.byte	$1F
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$20
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$23
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$24
	.byte	$00
	.byte	$80
_sspl_03_b:
	.byte	$FC
	.byte	$F8
	.byte	$20
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$1F
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$22
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$21
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$24
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$23
	.byte	$40
	.byte	$80
_sspl_04_a:
	.byte	$FC
	.byte	$F8
	.byte	$25
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$26
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$29
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$2A
	.byte	$00
	.byte	$80
_sspl_04_b:
	.byte	$FC
	.byte	$F8
	.byte	$26
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$25
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$28
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$27
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$2A
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$29
	.byte	$40
	.byte	$80
_sspl_05_a:
	.byte	$FC
	.byte	$F8
	.byte	$25
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$26
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$2B
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$2C
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$2D
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$2E
	.byte	$00
	.byte	$80
_sspl_05_b:
	.byte	$FC
	.byte	$F8
	.byte	$26
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$25
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$2C
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$2B
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$2E
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$2D
	.byte	$40
	.byte	$80
_sspl_06:
	.byte	$FC
	.byte	$F8
	.byte	$2F
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$30
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$31
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$32
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$33
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$34
	.byte	$00
	.byte	$80
_sspl_07:
	.byte	$FC
	.byte	$F8
	.byte	$35
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$36
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$39
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$3A
	.byte	$00
	.byte	$80
_sspl_08:
	.byte	$FC
	.byte	$F8
	.byte	$3B
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$3C
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$3D
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$3E
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$3F
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$40
	.byte	$00
	.byte	$80
_sspl_09:
	.byte	$FC
	.byte	$F8
	.byte	$41
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$42
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$45
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$80
_sspl_0A:
	.byte	$FC
	.byte	$F8
	.byte	$47
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$48
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$49
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$4A
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$4B
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$4C
	.byte	$00
	.byte	$80
_sspl_0B:
	.byte	$FC
	.byte	$00
	.byte	$4D
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$4E
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$4F
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$50
	.byte	$00
	.byte	$80
_sspl_0C:
	.byte	$FC
	.byte	$F8
	.byte	$51
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$52
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$53
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$54
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$55
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$56
	.byte	$00
	.byte	$80
_sspl_0D:
	.byte	$FC
	.byte	$F8
	.byte	$57
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$58
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$59
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$5A
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$5B
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$5C
	.byte	$00
	.byte	$80
_sspl_0E:
	.byte	$FC
	.byte	$F8
	.byte	$3B
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$3C
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$5D
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$5E
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$5F
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$60
	.byte	$00
	.byte	$80
_sspl_0F:
	.byte	$FC
	.byte	$F8
	.byte	$61
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$62
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$64
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$65
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$66
	.byte	$00
	.byte	$80
_ssit_00:
	.byte	$00
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$67
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$67
	.byte	$80
	.byte	$08
	.byte	$08
	.byte	$67
	.byte	$C0
	.byte	$80
_ssit_01:
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$69
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$6A
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$6B
	.byte	$03
	.byte	$80
_ssit_02:
	.byte	$00
	.byte	$00
	.byte	$6C
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$6D
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$6E
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$6E
	.byte	$43
	.byte	$80
_ssit_03:
	.byte	$00
	.byte	$00
	.byte	$6F
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$6F
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$70
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$71
	.byte	$01
	.byte	$80
_ssit_04:
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$72
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$73
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$74
	.byte	$01
	.byte	$80
_ssit_05:
	.byte	$00
	.byte	$00
	.byte	$75
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$76
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$77
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$03
	.byte	$80
_ssit_06:
	.byte	$00
	.byte	$00
	.byte	$79
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$7A
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$7B
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$7C
	.byte	$03
	.byte	$80
_ssplat_00:
	.byte	$00
	.byte	$00
	.byte	$7D
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$7D
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$7E
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$7E
	.byte	$43
	.byte	$80
_ssplat_01:
	.byte	$00
	.byte	$00
	.byte	$7D
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$7D
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$7F
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$7F
	.byte	$43
	.byte	$80
_ssfanty_00_a:
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$81
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$82
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$83
	.byte	$03
	.byte	$80
_ssfanty_00_b:
	.byte	$00
	.byte	$00
	.byte	$81
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$80
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$83
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$82
	.byte	$43
	.byte	$80
_ssfanty_01_a:
	.byte	$00
	.byte	$00
	.byte	$84
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$85
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$86
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$83
	.byte	$03
	.byte	$80
_ssfanty_01_b:
	.byte	$00
	.byte	$00
	.byte	$85
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$84
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$83
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$86
	.byte	$43
	.byte	$80
_sssaw_00:
	.byte	$00
	.byte	$00
	.byte	$87
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$88
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$89
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$8A
	.byte	$03
	.byte	$80
_sssaw_01:
	.byte	$00
	.byte	$00
	.byte	$8B
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$8C
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$8D
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$8E
	.byte	$03
	.byte	$80
_ssocl_00:
	.byte	$00
	.byte	$00
	.byte	$8F
	.byte	$22
	.byte	$08
	.byte	$00
	.byte	$8F
	.byte	$62
	.byte	$00
	.byte	$08
	.byte	$8F
	.byte	$A2
	.byte	$08
	.byte	$08
	.byte	$8F
	.byte	$E2
	.byte	$80
_ssen_00_a:
	.byte	$00
	.byte	$F8
	.byte	$90
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$91
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$94
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$95
	.byte	$01
	.byte	$80
_ssen_00_b:
	.byte	$00
	.byte	$F8
	.byte	$91
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$90
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$93
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$92
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$95
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$41
	.byte	$80
_ssen_01_a:
	.byte	$00
	.byte	$F8
	.byte	$96
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$97
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$98
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$99
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$9A
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$9B
	.byte	$01
	.byte	$80
_ssen_01_b:
	.byte	$00
	.byte	$F8
	.byte	$97
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$96
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$99
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$98
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$9B
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$9A
	.byte	$41
	.byte	$80
_ssen_02_a:
	.byte	$00
	.byte	$F8
	.byte	$9C
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$9D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9E
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$9F
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$17
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$18
	.byte	$00
	.byte	$80
_ssen_02_b:
	.byte	$00
	.byte	$F8
	.byte	$9D
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$9C
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$9F
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$9E
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$17
	.byte	$40
	.byte	$80
_ssen_03_a:
	.byte	$00
	.byte	$F8
	.byte	$A0
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$A1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$A3
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$A4
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$A5
	.byte	$00
	.byte	$80
_ssen_03_b:
	.byte	$00
	.byte	$F8
	.byte	$A1
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$A0
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$A3
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$A2
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$A5
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$A4
	.byte	$40
	.byte	$80
_ssen_04_a:
	.byte	$00
	.byte	$F8
	.byte	$A6
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$A7
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$A8
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$A9
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AA
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$AB
	.byte	$01
	.byte	$80
_ssen_04_b:
	.byte	$00
	.byte	$F8
	.byte	$A7
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$A6
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$A9
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$A8
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$AB
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$AA
	.byte	$41
	.byte	$80
_ssen_05_a:
	.byte	$00
	.byte	$F8
	.byte	$A6
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$A7
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$A8
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$AC
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AD
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$80
_ssen_05_b:
	.byte	$00
	.byte	$F8
	.byte	$A7
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$A6
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$A8
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$AD
	.byte	$41
	.byte	$80
_ssen_06_a:
	.byte	$00
	.byte	$F8
	.byte	$AF
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$B0
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$B2
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$B3
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$B4
	.byte	$03
	.byte	$80
_ssen_06_b:
	.byte	$00
	.byte	$F8
	.byte	$B0
	.byte	$43
	.byte	$08
	.byte	$F8
	.byte	$AF
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$B2
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$B1
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$B4
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$B3
	.byte	$43
	.byte	$80
_ssen_07_a:
	.byte	$00
	.byte	$F8
	.byte	$B5
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$B6
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$B7
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$B8
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$B9
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$BA
	.byte	$03
	.byte	$80
_ssen_07_b:
	.byte	$00
	.byte	$F8
	.byte	$B6
	.byte	$43
	.byte	$08
	.byte	$F8
	.byte	$B5
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$B8
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$B7
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$BA
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$B9
	.byte	$43
	.byte	$80
_ssbigf_00_a:
	.byte	$00
	.byte	$F8
	.byte	$BB
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$BC
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$BD
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$BE
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$82
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$83
	.byte	$03
	.byte	$80
_ssbigf_00_b:
	.byte	$00
	.byte	$F8
	.byte	$BC
	.byte	$43
	.byte	$08
	.byte	$F8
	.byte	$BB
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$BE
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$BD
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$83
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$82
	.byte	$43
	.byte	$80
_ssbigf_01_a:
	.byte	$00
	.byte	$F8
	.byte	$BF
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$C0
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$BD
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$C1
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$86
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$83
	.byte	$03
	.byte	$80
_ssbigf_01_b:
	.byte	$00
	.byte	$F8
	.byte	$C0
	.byte	$43
	.byte	$08
	.byte	$F8
	.byte	$BF
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$BD
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$83
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$86
	.byte	$43
	.byte	$80
_sssit_00:
	.byte	$00
	.byte	$00
	.byte	$C2
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$C3
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$C4
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$C5
	.byte	$02
	.byte	$80
_sssit_01:
	.byte	$00
	.byte	$00
	.byte	$C6
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$C7
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$C8
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$C9
	.byte	$02
	.byte	$80
_sssit_02:
	.byte	$00
	.byte	$00
	.byte	$C6
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$C7
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$CA
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$CB
	.byte	$02
	.byte	$80
_sssit_03:
	.byte	$00
	.byte	$00
	.byte	$C2
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$C3
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$C4
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$C5
	.byte	$02
	.byte	$80
_sssit_04:
	.byte	$00
	.byte	$00
	.byte	$C6
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$C7
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$C8
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$C9
	.byte	$02
	.byte	$80
_sssit_05:
	.byte	$00
	.byte	$00
	.byte	$C6
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$C7
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$CA
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$CB
	.byte	$02
	.byte	$80
_sssit_06:
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$CD
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$CE
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$CF
	.byte	$02
	.byte	$80
_sssit_07:
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$D1
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$D2
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$D2
	.byte	$43
	.byte	$80
_sssit_08:
	.byte	$00
	.byte	$00
	.byte	$D3
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$D4
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$D5
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$D6
	.byte	$02
	.byte	$80
_sschar1_00:
	.byte	$00
	.byte	$F8
	.byte	$D7
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$D8
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D9
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$DA
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$DB
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$DC
	.byte	$00
	.byte	$80
_sschar1_01:
	.byte	$00
	.byte	$F8
	.byte	$DD
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$DE
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DF
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$E1
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$E2
	.byte	$00
	.byte	$80
_sschar1_02:
	.byte	$00
	.byte	$F8
	.byte	$E3
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$E4
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E5
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$E6
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$E7
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$E8
	.byte	$00
	.byte	$80
_sschar1_03:
	.byte	$00
	.byte	$F8
	.byte	$E9
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$EA
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E6
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$E5
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$E8
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$E7
	.byte	$40
	.byte	$80
_ssen2_00_a:
	.byte	$00
	.byte	$F8
	.byte	$90
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$91
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$93
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$94
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$95
	.byte	$01
	.byte	$80
_ssen2_00_b:
	.byte	$00
	.byte	$F8
	.byte	$91
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$90
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$93
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$92
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$95
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$94
	.byte	$41
	.byte	$80
_ssen2_01_a:
	.byte	$00
	.byte	$F8
	.byte	$90
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$91
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$96
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$97
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$98
	.byte	$01
	.byte	$80
_ssen2_01_b:
	.byte	$00
	.byte	$F8
	.byte	$91
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$90
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$96
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$92
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$98
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$97
	.byte	$41
	.byte	$80
_ssen2_02_a:
	.byte	$00
	.byte	$F8
	.byte	$99
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$9A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9B
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$9C
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$9D
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$9E
	.byte	$00
	.byte	$80
_ssen2_02_b:
	.byte	$00
	.byte	$F8
	.byte	$9A
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$99
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$9C
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$9B
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$9E
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$9D
	.byte	$40
	.byte	$80
_ssen2_03_a:
	.byte	$00
	.byte	$F8
	.byte	$9F
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A1
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$A2
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$A3
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$A4
	.byte	$00
	.byte	$80
_ssen2_03_b:
	.byte	$00
	.byte	$F8
	.byte	$A0
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$9F
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$A2
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$A1
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$A4
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$A3
	.byte	$40
	.byte	$80
_ssen2_04_a:
	.byte	$00
	.byte	$F8
	.byte	$A5
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$A6
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$A7
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$A8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$A9
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$AA
	.byte	$01
	.byte	$80
_ssen2_04_b:
	.byte	$00
	.byte	$F8
	.byte	$A6
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$A5
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$A8
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$A7
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$AA
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$A9
	.byte	$41
	.byte	$80
_ssen2_05_a:
	.byte	$00
	.byte	$F8
	.byte	$AB
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$AC
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$B0
	.byte	$01
	.byte	$80
_ssen2_05_b:
	.byte	$00
	.byte	$F8
	.byte	$AC
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$AB
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$AE
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$AD
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$B0
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$41
	.byte	$80
_ssen3_00_a:
	.byte	$00
	.byte	$F8
	.byte	$B1
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$B2
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$B3
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$B4
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$B5
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$B6
	.byte	$03
	.byte	$80
_ssen3_00_b:
	.byte	$00
	.byte	$F8
	.byte	$B2
	.byte	$43
	.byte	$08
	.byte	$F8
	.byte	$B1
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$B4
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$B3
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$B6
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$B5
	.byte	$43
	.byte	$80
_ssen3_01_a:
	.byte	$00
	.byte	$F8
	.byte	$B7
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$B8
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$B9
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$BA
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$BB
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$BC
	.byte	$03
	.byte	$80
_ssen3_01_b:
	.byte	$00
	.byte	$F8
	.byte	$B8
	.byte	$43
	.byte	$08
	.byte	$F8
	.byte	$B7
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$BA
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$B9
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$BC
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$BB
	.byte	$43
	.byte	$80
_ssen3_02_a:
	.byte	$00
	.byte	$F8
	.byte	$BD
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$BE
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$A7
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$A8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$A9
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$AA
	.byte	$01
	.byte	$80
_ssen3_02_b:
	.byte	$00
	.byte	$F8
	.byte	$BE
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$BD
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$A8
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$A7
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$AA
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$A9
	.byte	$41
	.byte	$80
_ssen3_03_a:
	.byte	$00
	.byte	$F8
	.byte	$BF
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$C0
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$B0
	.byte	$01
	.byte	$80
_ssen3_03_b:
	.byte	$00
	.byte	$F8
	.byte	$C0
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$BF
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$AE
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$C1
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$B0
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$41
	.byte	$80
_ssen3_04_a:
	.byte	$00
	.byte	$00
	.byte	$C2
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$C2
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$C3
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$C3
	.byte	$41
	.byte	$80
_ssen3_04_b:
	.byte	$00
	.byte	$00
	.byte	$C2
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$C2
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$C3
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$C3
	.byte	$41
	.byte	$80
_ssen3_05_a:
	.byte	$00
	.byte	$00
	.byte	$C4
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$C4
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$C5
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$C5
	.byte	$41
	.byte	$80
_ssen3_05_b:
	.byte	$00
	.byte	$00
	.byte	$C4
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$C4
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$C5
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$C5
	.byte	$41
	.byte	$80
_ssss_00:
	.byte	$00
	.byte	$00
	.byte	$C6
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$C7
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$C6
	.byte	$83
	.byte	$08
	.byte	$08
	.byte	$C8
	.byte	$03
	.byte	$80
_ssss_01:
	.byte	$00
	.byte	$00
	.byte	$C9
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$C9
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$CA
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$CB
	.byte	$03
	.byte	$80
_ssss_02:
	.byte	$00
	.byte	$00
	.byte	$C7
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$C6
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$C8
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$C6
	.byte	$C3
	.byte	$80
_ssss_03:
	.byte	$00
	.byte	$00
	.byte	$CA
	.byte	$83
	.byte	$08
	.byte	$00
	.byte	$CB
	.byte	$83
	.byte	$00
	.byte	$08
	.byte	$C9
	.byte	$83
	.byte	$08
	.byte	$08
	.byte	$C9
	.byte	$C3
	.byte	$80
_sscomp_00_a:
	.byte	$00
	.byte	$F8
	.byte	$CC
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$CD
	.byte	$02
	.byte	$10
	.byte	$F8
	.byte	$CE
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$CF
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$D1
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$D2
	.byte	$02
	.byte	$F8
	.byte	$08
	.byte	$D3
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$D4
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$D5
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$D6
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$D7
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$D8
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$D9
	.byte	$02
	.byte	$80
_sscomp_00_b:
	.byte	$F8
	.byte	$F8
	.byte	$CE
	.byte	$42
	.byte	$00
	.byte	$F8
	.byte	$CD
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$CC
	.byte	$42
	.byte	$F8
	.byte	$00
	.byte	$D2
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$D1
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$D0
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$CF
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$D5
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$D4
	.byte	$42
	.byte	$10
	.byte	$08
	.byte	$D3
	.byte	$42
	.byte	$00
	.byte	$10
	.byte	$D7
	.byte	$42
	.byte	$08
	.byte	$10
	.byte	$D6
	.byte	$42
	.byte	$00
	.byte	$18
	.byte	$D9
	.byte	$42
	.byte	$08
	.byte	$18
	.byte	$D8
	.byte	$42
	.byte	$80
_sscomp_01_a:
	.byte	$00
	.byte	$F8
	.byte	$CC
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$CD
	.byte	$02
	.byte	$10
	.byte	$F8
	.byte	$CE
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$CF
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$D1
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$DA
	.byte	$02
	.byte	$F8
	.byte	$08
	.byte	$DB
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$D4
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$D5
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$D6
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$D7
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$DC
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$DD
	.byte	$02
	.byte	$80
_sscomp_01_b:
	.byte	$F8
	.byte	$F8
	.byte	$CE
	.byte	$42
	.byte	$00
	.byte	$F8
	.byte	$CD
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$CC
	.byte	$42
	.byte	$F8
	.byte	$00
	.byte	$DA
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$D1
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$D0
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$CF
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$D5
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$D4
	.byte	$42
	.byte	$10
	.byte	$08
	.byte	$DB
	.byte	$42
	.byte	$00
	.byte	$10
	.byte	$D7
	.byte	$42
	.byte	$08
	.byte	$10
	.byte	$D6
	.byte	$42
	.byte	$00
	.byte	$18
	.byte	$DD
	.byte	$42
	.byte	$08
	.byte	$18
	.byte	$DC
	.byte	$42
	.byte	$80
_sscomp_02_a:
	.byte	$00
	.byte	$F8
	.byte	$CC
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$DE
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$CF
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$DF
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$E0
	.byte	$02
	.byte	$F8
	.byte	$08
	.byte	$DB
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$D4
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$D5
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$E1
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$D6
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$D7
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$DC
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$DD
	.byte	$02
	.byte	$80
_sscomp_02_b:
	.byte	$00
	.byte	$F8
	.byte	$DE
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$CC
	.byte	$42
	.byte	$F8
	.byte	$00
	.byte	$E0
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$DF
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$D0
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$CF
	.byte	$42
	.byte	$F8
	.byte	$08
	.byte	$E1
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$D5
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$D4
	.byte	$42
	.byte	$10
	.byte	$08
	.byte	$DB
	.byte	$42
	.byte	$00
	.byte	$10
	.byte	$D7
	.byte	$42
	.byte	$08
	.byte	$10
	.byte	$D6
	.byte	$42
	.byte	$00
	.byte	$18
	.byte	$DD
	.byte	$42
	.byte	$08
	.byte	$18
	.byte	$DC
	.byte	$42
	.byte	$80
_sscomp_03_a:
	.byte	$00
	.byte	$F8
	.byte	$CC
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$DE
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$E2
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$E3
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$E4
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$E5
	.byte	$02
	.byte	$F8
	.byte	$08
	.byte	$E6
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$E7
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$E8
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$E9
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$D6
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$D7
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$DC
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$DD
	.byte	$02
	.byte	$80
_sscomp_03_b:
	.byte	$00
	.byte	$F8
	.byte	$DE
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$CC
	.byte	$42
	.byte	$F8
	.byte	$00
	.byte	$E5
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$E4
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$E3
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$E2
	.byte	$42
	.byte	$F8
	.byte	$08
	.byte	$E9
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$E8
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$E7
	.byte	$42
	.byte	$10
	.byte	$08
	.byte	$E6
	.byte	$42
	.byte	$00
	.byte	$10
	.byte	$D7
	.byte	$42
	.byte	$08
	.byte	$10
	.byte	$D6
	.byte	$42
	.byte	$00
	.byte	$18
	.byte	$DD
	.byte	$42
	.byte	$08
	.byte	$18
	.byte	$DC
	.byte	$42
	.byte	$80
_sschar2_00:
	.byte	$00
	.byte	$F8
	.byte	$EA
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$EB
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$EC
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$ED
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$EE
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$EF
	.byte	$00
	.byte	$80
_sschar2_01:
	.byte	$00
	.byte	$F8
	.byte	$F0
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$F1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F2
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$F3
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$F4
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$F5
	.byte	$00
	.byte	$80
_sschar2_02:
	.byte	$00
	.byte	$F8
	.byte	$F6
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$F7
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$F8
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$F9
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$F9
	.byte	$41
	.byte	$80
_sschar2_03:
	.byte	$00
	.byte	$F8
	.byte	$FA
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$FB
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$FD
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$FE
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$FF
	.byte	$01
	.byte	$80
_ts0_pals:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts0_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$4A
	.byte	$4A
	.byte	$4A
	.byte	$4B
	.byte	$4A
	.byte	$4B
	.byte	$4A
	.byte	$4C
	.byte	$4C
	.byte	$4A
	.byte	$4A
	.byte	$4D
	.byte	$4E
	.byte	$4E
	.byte	$4D
	.byte	$4F
	.byte	$50
	.byte	$4E
	.byte	$4D
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$61
	.byte	$62
	.byte	$62
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$78
	.byte	$79
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$80
	.byte	$4C
	.byte	$4B
	.byte	$4A
	.byte	$81
	.byte	$4A
	.byte	$4A
	.byte	$4A
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$40
	.byte	$41
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8A
	.byte	$8B
	.byte	$8E
	.byte	$8F
	.byte	$90
	.byte	$63
	.byte	$90
	.byte	$63
	.byte	$90
	.byte	$63
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$00
	.byte	$93
	.byte	$00
	.byte	$00
	.byte	$94
	.byte	$45
	.byte	$95
	.byte	$00
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$96
	.byte	$00
	.byte	$95
	.byte	$95
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$95
	.byte	$95
	.byte	$00
	.byte	$97
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$95
	.byte	$45
	.byte	$98
_ts1_pals:
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_ts1_tmaps:
	.byte	$99
	.byte	$9A
	.byte	$9A
	.byte	$99
	.byte	$9B
	.byte	$9C
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$A9
	.byte	$AA
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$B9
	.byte	$BA
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$9A
	.byte	$99
	.byte	$99
	.byte	$9A
	.byte	$9C
	.byte	$CF
	.byte	$D0
	.byte	$9C
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$E0
	.byte	$00
	.byte	$00
	.byte	$DF
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$A0
	.byte	$A1
	.byte	$00
	.byte	$00
	.byte	$E5
	.byte	$E6
	.byte	$E7
	.byte	$E8
	.byte	$E9
	.byte	$E9
	.byte	$EA
	.byte	$EA
	.byte	$EB
	.byte	$EC
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A2
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$F5
	.byte	$F6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$45
	.byte	$47
	.byte	$00
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$46
	.byte	$00
	.byte	$47
	.byte	$47
	.byte	$00
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$47
	.byte	$00
	.byte	$47
	.byte	$47
	.byte	$00
	.byte	$48
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$47
	.byte	$45
	.byte	$49
	.byte	$F7
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$F9
	.byte	$F9
	.byte	$FA
	.byte	$FA
	.byte	$00
	.byte	$FB
	.byte	$00
	.byte	$FC
	.byte	$FA
	.byte	$FA
	.byte	$FA
	.byte	$FA
_ts2_pals:
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts2_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$4B
	.byte	$00
	.byte	$4A
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4B
	.byte	$4F
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$51
	.byte	$00
	.byte	$4A
	.byte	$52
	.byte	$53
	.byte	$51
	.byte	$54
	.byte	$54
	.byte	$53
	.byte	$52
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$53
	.byte	$55
	.byte	$55
	.byte	$56
	.byte	$55
	.byte	$55
	.byte	$57
	.byte	$58
	.byte	$55
	.byte	$56
	.byte	$59
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$59
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$4B
	.byte	$4B
	.byte	$4B
	.byte	$4B
	.byte	$6F
	.byte	$00
	.byte	$4B
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$4B
	.byte	$72
	.byte	$73
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$55
	.byte	$56
	.byte	$55
	.byte	$54
	.byte	$78
	.byte	$79
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$4B
	.byte	$4B
	.byte	$56
	.byte	$00
	.byte	$00
	.byte	$56
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$59
	.byte	$59
	.byte	$80
	.byte	$5B
	.byte	$59
	.byte	$81
	.byte	$5A
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$61
	.byte	$62
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$6A
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8C
	.byte	$44
	.byte	$45
	.byte	$47
	.byte	$00
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$46
	.byte	$00
	.byte	$47
	.byte	$47
	.byte	$00
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$47
	.byte	$00
	.byte	$47
	.byte	$47
	.byte	$00
	.byte	$48
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$47
	.byte	$45
	.byte	$49
_ts3_pals:
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts3_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$8D
	.byte	$8E
	.byte	$8D
	.byte	$8E
	.byte	$8F
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9B
	.byte	$9C
	.byte	$9C
	.byte	$00
	.byte	$00
	.byte	$9D
	.byte	$9E
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$9F
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A4
	.byte	$A3
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$8F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AE
	.byte	$AD
	.byte	$AF
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$92
	.byte	$91
	.byte	$90
	.byte	$8F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B7
	.byte	$B8
	.byte	$97
	.byte	$98
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$6A
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$00
	.byte	$00
	.byte	$91
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$D0
	.byte	$AD
	.byte	$AE
	.byte	$AE
	.byte	$D1
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$45
	.byte	$47
	.byte	$00
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$46
	.byte	$00
	.byte	$47
	.byte	$47
	.byte	$00
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$47
	.byte	$00
	.byte	$47
	.byte	$47
	.byte	$00
	.byte	$48
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$45
	.byte	$00
	.byte	$47
	.byte	$45
	.byte	$49
_spr_player:
	.addr	_sspl_00_a
	.addr	_sspl_01_a
	.addr	_sspl_02_a
	.addr	_sspl_03_a
	.addr	_sspl_04_a
	.addr	_sspl_05_a
	.addr	_sspl_00_b
	.addr	_sspl_01_b
	.addr	_sspl_02_b
	.addr	_sspl_03_b
	.addr	_sspl_04_b
	.addr	_sspl_05_b
	.addr	_sspl_06
	.addr	_sspl_07
	.addr	_sspl_08
	.addr	_sspl_09
	.addr	_sspl_0A
	.addr	_sspl_0B
	.addr	_sspl_0B
	.addr	_sspl_0A
	.addr	_sspl_09
	.addr	_sspl_08
	.addr	_sspl_07
	.addr	_sspl_06
	.addr	_sspl_0C
	.addr	_sspl_0D
	.addr	_sspl_0E
	.addr	_sspl_0F
	.addr	_sspl_0E
	.addr	_sspl_0A
_spr_enems0:
	.addr	_ssen_00_a
	.addr	_ssen_01_a
	.word	$0000
	.word	$0000
	.addr	_ssen_00_b
	.addr	_ssen_01_b
	.word	$0000
	.word	$0000
	.addr	_ssen_02_a
	.addr	_ssen_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen_02_b
	.addr	_ssen_03_b
	.word	$0000
	.word	$0000
	.addr	_ssen_02_a
	.addr	_ssen_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen_02_b
	.addr	_ssen_03_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_a
	.addr	_ssfanty_01_a
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_b
	.addr	_ssfanty_01_b
	.word	$0000
	.word	$0000
	.addr	_sssaw_00
	.addr	_sssaw_01
	.addr	_ssocl_00
	.addr	_ssit_05
_spr_enems1:
	.addr	_ssen_04_a
	.addr	_ssen_05_a
	.word	$0000
	.word	$0000
	.addr	_ssen_04_b
	.addr	_ssen_05_b
	.word	$0000
	.word	$0000
	.addr	_ssen_06_a
	.addr	_ssen_07_a
	.word	$0000
	.word	$0000
	.addr	_ssen_06_b
	.addr	_ssen_07_b
	.word	$0000
	.word	$0000
	.addr	_ssen_06_a
	.addr	_ssen_07_a
	.word	$0000
	.word	$0000
	.addr	_ssen_06_b
	.addr	_ssen_07_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_a
	.addr	_ssfanty_01_a
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_b
	.addr	_ssfanty_01_b
	.word	$0000
	.word	$0000
	.addr	_sssaw_00
	.addr	_sssaw_01
	.addr	_ssocl_00
	.addr	_ssit_05
	.addr	_ssbigf_00_b
	.addr	_ssbigf_01_b
	.word	$0000
	.word	$0000
	.addr	_ssbigf_00_b
	.addr	_ssbigf_01_b
	.word	$0000
	.word	$0000
_spr_enems2:
	.addr	_ssen2_00_a
	.addr	_ssen2_01_a
	.word	$0000
	.word	$0000
	.addr	_ssen2_00_b
	.addr	_ssen2_01_b
	.word	$0000
	.word	$0000
	.addr	_ssen2_02_a
	.addr	_ssen2_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen2_02_b
	.addr	_ssen2_03_b
	.word	$0000
	.word	$0000
	.addr	_ssen2_04_a
	.addr	_ssen2_05_a
	.word	$0000
	.word	$0000
	.addr	_ssen2_04_b
	.addr	_ssen2_05_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_a
	.addr	_ssfanty_01_a
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_b
	.addr	_ssfanty_01_b
	.word	$0000
	.word	$0000
	.addr	_sssaw_00
	.addr	_sssaw_01
	.addr	_ssocl_00
	.addr	_ssit_05
	.addr	_ssss_00
	.addr	_ssss_01
	.addr	_ssss_02
	.addr	_ssss_03
	.addr	_sscomp_00_a
	.addr	_sscomp_01_a
	.addr	_sscomp_02_a
	.addr	_sscomp_03_a
	.addr	_sscomp_00_b
	.addr	_sscomp_01_b
	.addr	_sscomp_02_b
	.addr	_sscomp_03_b
_spr_enems3:
	.addr	_ssen3_00_a
	.addr	_ssen3_01_a
	.word	$0000
	.word	$0000
	.addr	_ssen3_00_b
	.addr	_ssen3_01_b
	.word	$0000
	.word	$0000
	.addr	_ssen3_02_a
	.addr	_ssen3_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen3_02_b
	.addr	_ssen3_03_b
	.word	$0000
	.word	$0000
	.addr	_ssen3_04_a
	.addr	_ssen3_05_a
	.word	$0000
	.word	$0000
	.addr	_ssen3_04_b
	.addr	_ssen3_05_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_a
	.addr	_ssfanty_01_a
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_b
	.addr	_ssfanty_01_b
	.word	$0000
	.word	$0000
	.addr	_sssaw_00
	.addr	_sssaw_01
	.addr	_ssocl_00
	.addr	_ssit_05
_spr_hs:
	.word	$0000
	.addr	_ssit_00
	.addr	_ssit_01
	.addr	_ssit_02
	.addr	_ssit_03
	.addr	_ssit_04
	.addr	_sssit_00
	.addr	_sssit_03
	.addr	_sssit_06
	.addr	_sssit_07
	.addr	_sssit_08
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_sssit_01
	.addr	_sssit_04
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_sssit_02
	.addr	_sssit_05
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_sschar1_00
	.addr	_sschar1_01
	.addr	_sschar2_00
	.addr	_sschar2_01
	.addr	_sschar1_02
	.addr	_sspl_00_a
	.addr	_sschar1_03
	.addr	_sschar2_02
	.addr	_sschar2_03
_text_propellers:
	.byte	$4C,$41,$20,$46,$41,$42,$52,$49,$43,$41,$20,$56,$55,$45,$4C,$56
	.byte	$45,$20,$41,$25,$4C,$41,$20,$56,$49,$44,$41,$2E,$20,$50,$55,$45
	.byte	$44,$45,$53,$20,$4F,$49,$52,$25,$55,$4E,$20,$5A,$55,$4D,$42,$49
	.byte	$44,$4F,$20,$43,$4F,$4E,$53,$54,$41,$4E,$54,$45,$2E,$25,$4C,$4F
	.byte	$53,$20,$56,$45,$4E,$54,$49,$4C,$41,$44,$4F,$52,$45,$53,$20,$59
	.byte	$41,$25,$46,$55,$4E,$43,$49,$4F,$4E,$41,$4E,$2E,$25,$00
_text_open_gate:
	.byte	$50,$45,$52,$46,$45,$43,$54,$4F,$2E,$20,$50,$41,$52,$45,$43,$45
	.byte	$20,$51,$55,$45,$25,$59,$41,$20,$45,$53,$54,$41,$20,$54,$4F,$44
	.byte	$4F,$20,$45,$4E,$20,$53,$55,$25,$53,$49,$54,$49,$4F,$2E,$20,$53
	.byte	$45,$20,$4F,$59,$45,$20,$55,$4E,$41,$25,$43,$41,$4E,$43,$45,$4C
	.byte	$41,$20,$4F,$58,$49,$44,$41,$44,$41,$20,$51,$55,$45,$25,$53,$45
	.byte	$20,$41,$42,$52,$45,$20,$4E,$4F,$20,$4D,$55,$59,$20,$4C,$45,$4A
	.byte	$4F,$53,$2E,$25,$00
_dialogue_0_0:
	.byte	$48,$4F,$4C,$41,$2C,$20,$43,$48,$45,$52,$49,$4C,$2C,$20,$51,$55
	.byte	$45,$25,$54,$41,$4C,$20,$54,$45,$20,$56,$41,$20,$54,$4F,$44,$4F
	.byte	$3F,$25,$4E,$4F,$20,$48,$41,$59,$20,$43,$41,$53,$49,$20,$4E,$41
	.byte	$44,$49,$45,$2E,$25,$4E,$4F,$20,$45,$53,$20,$45,$4C,$20,$50,$45
	.byte	$50,$49,$4E,$4F,$4E,$49,$25,$41,$4C,$20,$51,$55,$45,$20,$45,$53
	.byte	$54,$41,$4D,$4F,$53,$25,$41,$43,$4F,$53,$54,$55,$4D,$42,$52,$41
	.byte	$44,$4F,$53,$00
_dialogue_0_1:
	.byte	$41,$4C,$20,$50,$52,$49,$4E,$43,$49,$50,$49,$4F,$20,$50,$45,$4E
	.byte	$53,$45,$25,$51,$55,$45,$20,$4E,$4F,$20,$48,$41,$42,$49,$41,$20
	.byte	$4E,$41,$44,$49,$45,$25,$50,$4F,$52,$20,$4C,$41,$20,$4C,$4C,$55
	.byte	$56,$49,$41,$2C,$20,$50,$45,$52,$4F,$25,$41,$20,$4C,$4F,$20,$4D
	.byte	$45,$4A,$4F,$52,$20,$45,$53,$20,$50,$4F,$52,$25,$4C,$4F,$53,$20
	.byte	$5A,$4F,$4D,$42,$49,$45,$53,$2C,$20,$4E,$4F,$3F,$25,$53,$49,$2C
	.byte	$20,$45,$53,$20,$50,$4F,$53,$49,$42,$4C,$45,$2E,$25,$00
_dialogue_0_2:
	.byte	$50,$55,$45,$44,$45,$4E,$20,$4D,$41,$54,$41,$52,$53,$45,$2C,$20
	.byte	$59,$41,$25,$53,$41,$42,$45,$53,$2E,$20,$50,$41,$52,$41,$4C,$49
	.byte	$5A,$41,$4C,$4F,$53,$25,$43,$4F,$4E,$20,$4C,$41,$53,$20,$4D,$41
	.byte	$51,$55,$49,$4E,$41,$53,$25,$59,$20,$4C,$55,$45,$47,$4F,$20,$4C
	.byte	$45,$53,$20,$53,$41,$4C,$54,$41,$53,$25,$45,$4E,$20,$4C,$41,$20
	.byte	$43,$41,$4D,$4F,$4C,$4C,$41,$2E,$25,$54,$45,$20,$41,$42,$52,$4F
	.byte	$20,$4C,$41,$20,$43,$41,$4E,$43,$45,$4C,$41,$25,$00
_dialogue_0_3:
	.byte	$48,$4F,$4C,$41,$2C,$20,$47,$55,$41,$50,$49,$2E,$20,$56,$45,$4E
	.byte	$44,$4F,$25,$50,$45,$52,$49,$4F,$44,$49,$43,$4F,$53,$20,$59,$20
	.byte	$52,$45,$56,$49,$53,$2D,$25,$54,$41,$53,$2E,$20,$54,$45,$20,$49
	.byte	$4E,$54,$45,$52,$45,$53,$41,$20,$45,$4C,$25,$4E,$55,$45,$56,$4F
	.byte	$20,$4E,$55,$4D,$45,$52,$4F,$20,$44,$45,$20,$4C,$41,$25,$52,$45
	.byte	$54,$52,$4F,$47,$41,$4D,$45,$52,$3F,$25,$00
_dialogue_0_4:
	.byte	$4E,$4F,$2C,$20,$47,$52,$41,$43,$49,$41,$53,$2C,$20,$45,$53,$54
	.byte	$4F,$59,$25,$4C,$49,$41,$44,$41,$2E,$20,$59,$20,$44,$45,$20,$54
	.byte	$4F,$44,$4F,$53,$25,$4D,$4F,$44,$4F,$53,$20,$4E,$4F,$20,$53,$41
	.byte	$4C,$49,$4D,$4F,$53,$25,$4E,$55,$4E,$43,$41,$2E,$2E,$2E,$25,$00
_dialogue_1_0:
	.byte	$48,$4F,$4C,$41,$2C,$20,$43,$48,$45,$52,$49,$4C,$2E,$20,$54,$45
	.byte	$25,$41,$43,$55,$45,$52,$44,$41,$53,$20,$44,$45,$20,$4D,$49,$3F
	.byte	$20,$53,$4F,$59,$25,$4D,$41,$4E,$44,$45,$45,$20,$4C,$41,$20,$4D
	.byte	$55,$53,$41,$2E,$20,$56,$45,$4F,$25,$51,$55,$45,$20,$53,$49,$47
	.byte	$55,$45,$53,$20,$45,$4E,$20,$45,$53,$4F,$25,$44,$45,$20,$49,$52
	.byte	$20,$50,$4F,$52,$20,$41,$48,$49,$20,$50,$49,$2D,$25,$53,$41,$4E
	.byte	$44,$4F,$20,$5A,$4F,$4D,$42,$49,$45,$53,$2E,$2E,$2E,$25,$00
_dialogue_1_1:
	.byte	$43,$41,$53,$49,$20,$54,$4F,$44,$4F,$53,$20,$4C,$4F,$53,$20,$4D
	.byte	$41,$2D,$25,$4C,$4F,$53,$20,$44,$45,$20,$50,$4F,$52,$20,$41,$51
	.byte	$55,$49,$20,$53,$4F,$4E,$25,$46,$41,$43,$49,$4C,$4D,$45,$4E,$54
	.byte	$45,$20,$41,$43,$43,$45,$53,$49,$2D,$25,$42,$4C,$45,$53,$2C,$20
	.byte	$50,$45,$52,$4F,$20,$4C,$4F,$53,$20,$50,$45,$4F,$2D,$25,$52,$45
	.byte	$53,$20,$53,$45,$20,$45,$53,$43,$4F,$4E,$44,$45,$4E,$25,$54,$52
	.byte	$41,$53,$20,$4C,$41,$20,$43,$41,$4E,$43,$45,$4C,$41,$2E,$25,$00
_dialogue_1_2:
	.byte	$48,$41,$59,$20,$41,$4C,$47,$55,$4E,$4F,$53,$20,$54,$45,$4D,$50
	.byte	$4C,$4F,$53,$25,$43,$45,$52,$43,$41,$2E,$20,$4C,$4F,$53,$20,$4F
	.byte	$42,$4A,$45,$54,$4F,$53,$25,$44,$45,$20,$4C,$4F,$53,$20,$41,$4C
	.byte	$54,$41,$52,$45,$53,$20,$45,$53,$2D,$25,$54,$41,$4E,$20,$4D,$41
	.byte	$4C,$20,$50,$55,$45,$53,$54,$4F,$53,$2C,$20,$4F,$25,$45,$53,$4F
	.byte	$20,$44,$49,$43,$45,$4E,$20,$50,$4F,$52,$20,$41,$48,$49,$2E,$25
	.byte	$53,$55,$45,$52,$54,$45,$2C,$20,$43,$48,$45,$52,$49,$4C,$21,$25
	.byte	$00
_dialogue_2_0:
	.byte	$59,$41,$20,$53,$41,$42,$45,$53,$20,$51,$55,$45,$20,$53,$4F,$4C
	.byte	$4F,$25,$4D,$45,$20,$4D,$4F,$4C,$41,$20,$45,$53,$54,$41,$52,$20
	.byte	$41,$51,$55,$49,$25,$43,$4F,$4E,$54,$49,$47,$4F,$20,$53,$49,$20
	.byte	$54,$45,$20,$56,$49,$53,$2D,$25,$54,$45,$53,$20,$44,$45,$20,$4E
	.byte	$49,$4E,$4A,$41,$2C,$20,$59,$41,$25,$53,$41,$42,$45,$53,$2C,$20
	.byte	$50,$4F,$52,$20,$45,$4C,$20,$52,$4F,$4C,$4C,$4F,$25,$4F,$43,$48
	.byte	$45,$4E,$54,$4F,$53,$4F,$20,$4D,$4F,$4C,$4F,$4E,$2E,$25,$00
_dialogue_2_1:
	.byte	$4C,$4F,$20,$53,$49,$45,$4E,$54,$4F,$2C,$20,$4E,$4F,$20,$50,$55
	.byte	$45,$44,$4F,$25,$52,$45,$43,$4F,$52,$44,$41,$52,$20,$53,$49,$20
	.byte	$54,$52,$41,$49,$41,$53,$25,$54,$55,$20,$43,$55,$41,$44,$45,$52
	.byte	$4E,$4F,$20,$4C,$41,$20,$55,$4C,$2D,$25,$54,$49,$4D,$41,$20,$56
	.byte	$45,$5A,$2E,$2E,$2E,$20,$4E,$4F,$20,$53,$45,$2C,$25,$45,$43,$48
	.byte	$41,$20,$55,$4E,$20,$56,$49,$53,$54,$41,$5A,$4F,$2C,$20,$41,$25
	.byte	$4C,$4F,$20,$4D,$45,$4A,$4F,$52,$20,$4C,$4F,$20,$56,$45,$53,$2E
	.byte	$2E,$2E,$25,$00
_dialogue_2_2:
	.byte	$45,$45,$45,$48,$2C,$20,$4E,$4F,$2E,$20,$4E,$4F,$20,$56,$4F,$59
	.byte	$20,$41,$25,$41,$59,$55,$44,$41,$52,$54,$45,$2E,$20,$45,$53,$54
	.byte	$4F,$20,$45,$53,$54,$41,$25,$50,$45,$54,$41,$44,$4F,$20,$44,$45
	.byte	$20,$5A,$4F,$4D,$42,$49,$45,$53,$2C,$25,$59,$20,$4C,$4F,$53,$20
	.byte	$5A,$4F,$4D,$42,$49,$45,$53,$20,$53,$4F,$4E,$25,$27,$54,$55,$27
	.byte	$20,$52,$4F,$4C,$4C,$4F,$2C,$20,$4E,$4F,$20,$45,$4C,$25,$4D,$49
	.byte	$4F,$2E,$20,$53,$55,$45,$52,$54,$45,$2C,$20,$47,$55,$41,$50,$41
	.byte	$2E,$25,$00
_dialogue_2_4:
	.byte	$4F,$53,$54,$52,$41,$53,$2C,$20,$42,$55,$45,$4E,$41,$20,$49,$44
	.byte	$45,$41,$2C,$25,$4C,$45,$20,$50,$55,$45,$44,$4F,$20,$50,$52,$45
	.byte	$47,$55,$4E,$54,$41,$52,$25,$41,$20,$4C,$4F,$53,$20,$5A,$4F,$4D
	.byte	$42,$49,$45,$53,$2E,$2E,$2E,$25,$59,$20,$4C,$55,$45,$47,$4F,$20
	.byte	$52,$45,$56,$45,$4E,$54,$41,$52,$4C,$45,$53,$25,$45,$4C,$20,$4F
	.byte	$48,$49,$4F,$2C,$20,$43,$4C,$41,$52,$4F,$2E,$25,$00
_dialogue_2_3:
	.byte	$5A,$4F,$4D,$42,$49,$45,$53,$2C,$20,$5A,$4F,$4D,$42,$49,$45,$53
	.byte	$2E,$2E,$2E,$25,$4D,$45,$48,$2C,$20,$51,$55,$45,$20,$53,$4F,$49
	.byte	$53,$20,$54,$4F,$44,$4F,$53,$25,$55,$4E,$4F,$53,$20,$43,$4F,$50
	.byte	$49,$4F,$4E,$45,$53,$21,$25,$53,$45,$47,$55,$49,$44,$20,$54,$4F
	.byte	$43,$41,$4E,$44,$4F,$4D,$45,$20,$4C,$41,$25,$4D,$4F,$52,$41,$4C
	.byte	$20,$51,$55,$45,$20,$4F,$53,$20,$45,$4E,$44,$49,$5C,$4F,$25,$43
	.byte	$4F,$4E,$20,$55,$4E,$20,$54,$4F,$52,$52,$45,$5A,$4E,$4F,$21,$25
	.byte	$00
_dialogue_3_0:
	.byte	$48,$4F,$4C,$41,$21,$20,$43,$4F,$4D,$4F,$20,$54,$4F,$44,$41,$20
	.byte	$4C,$41,$25,$46,$41,$42,$52,$49,$43,$41,$20,$45,$53,$54,$41,$20
	.byte	$4C,$4C,$45,$4E,$41,$25,$44,$45,$20,$5A,$4F,$4D,$42,$49,$45,$53
	.byte	$20,$48,$55,$45,$4C,$45,$25,$46,$41,$54,$41,$4C,$20,$59,$20,$48
	.byte	$45,$20,$41,$50,$41,$47,$41,$44,$4F,$25,$4C,$4F,$53,$20,$56,$45
	.byte	$4E,$54,$49,$4C,$41,$44,$4F,$52,$45,$53,$20,$41,$25,$56,$45,$52
	.byte	$20,$53,$49,$20,$53,$45,$20,$4D,$55,$45,$52,$45,$4E,$2E,$25,$00
_dialogue_3_1:
	.byte	$53,$49,$20,$4C,$4F,$53,$20,$4E,$45,$43,$45,$53,$49,$54,$41,$53
	.byte	$25,$56,$41,$53,$20,$41,$20,$54,$45,$4E,$45,$52,$20,$51,$55,$45
	.byte	$25,$45,$4E,$43,$45,$4E,$44,$45,$52,$4C,$4F,$53,$20,$54,$55,$2C
	.byte	$20,$51,$55,$45,$25,$59,$4F,$20,$4E,$4F,$20,$45,$4E,$54,$52,$4F
	.byte	$20,$41,$48,$49,$20,$4E,$49,$25,$4A,$41,$52,$54,$41,$20,$44,$45
	.byte	$20,$42,$49,$4F,$4D,$41,$4E,$41,$4C,$2C,$25,$47,$55,$41,$50,$41
	.byte	$2E,$25,$00
_dialogue_4_0:
	.byte	$56,$41,$59,$41,$2C,$20,$45,$53,$54,$45,$20,$53,$49,$54,$49,$4F
	.byte	$25,$45,$53,$54,$41,$20,$42,$41,$53,$54,$41,$4E,$54,$45,$20,$43
	.byte	$48,$55,$4C,$4F,$25,$5F,$50,$45,$52,$4F,$20,$4E,$4F,$20,$53,$45
	.byte	$20,$50,$41,$52,$45,$43,$45,$25,$45,$53,$54,$45,$20,$42,$41,$52
	.byte	$43,$4F,$20,$55,$4E,$20,$50,$4F,$43,$4F,$25,$41,$4C,$20,$44,$45
	.byte	$20,$43,$41,$53,$54,$4C,$45,$56,$41,$4E,$49,$41,$3F,$25,$00
_dialogue_4_1:
	.byte	$45,$45,$45,$45,$48,$4D,$4D,$4D,$2E,$2E,$2E,$20,$45,$53,$20,$51
	.byte	$55,$45,$25,$45,$53,$20,$55,$4E,$20,$50,$4C,$41,$43,$45,$48,$4F
	.byte	$4C,$44,$45,$52,$2E,$25,$4E,$4F,$20,$4D,$45,$20,$4D,$49,$52,$45
	.byte	$53,$20,$41,$53,$49,$2C,$25,$5E,$5E,$54,$4F,$44,$4F,$20,$45,$4C
	.byte	$20,$4D,$55,$4E,$44,$4F,$20,$4C,$4F,$25,$48,$41,$43,$45,$21,$21
	.byte	$25,$00
_dialogue_4_2:
	.byte	$41,$52,$21,$20,$53,$49,$20,$51,$55,$45,$20,$48,$45,$20,$56,$49
	.byte	$53,$54,$4F,$25,$55,$4E,$20,$43,$55,$41,$44,$45,$52,$4E,$4F,$20
	.byte	$43,$4F,$4D,$4F,$20,$45,$4C,$25,$51,$55,$45,$20,$44,$45,$53,$43
	.byte	$52,$49,$42,$45,$53,$2E,$20,$44,$45,$25,$48,$45,$43,$48,$4F,$20
	.byte	$4C,$4F,$20,$54,$45,$4E,$47,$4F,$20,$59,$4F,$2E,$25,$54,$49,$45
	.byte	$4E,$45,$53,$20,$55,$4E,$41,$20,$4C,$45,$54,$52,$41,$20,$44,$45
	.byte	$25,$4D,$49,$45,$52,$44,$41,$2C,$20,$54,$49,$41,$2E,$2E,$2E,$25
	.byte	$00
_dialogue_4_3:
	.byte	$53,$45,$20,$51,$55,$45,$20,$4C,$4F,$20,$51,$55,$49,$45,$52,$45
	.byte	$53,$2C,$25,$47,$52,$55,$4D,$45,$54,$41,$2C,$20,$41,$53,$49,$20
	.byte	$51,$55,$45,$25,$48,$41,$47,$41,$4D,$4F,$53,$20,$55,$4E,$20,$54
	.byte	$52,$41,$54,$4F,$3A,$25,$54,$55,$20,$4D,$45,$20,$4C,$49,$4D,$50
	.byte	$49,$41,$53,$20,$45,$4C,$25,$42,$41,$52,$43,$4F,$20,$44,$45,$20
	.byte	$5A,$4F,$4D,$42,$49,$45,$53,$20,$59,$25,$59,$4F,$20,$54,$45,$20
	.byte	$44,$4F,$59,$20,$45,$53,$54,$4F,$2E,$25,$00
_cutscene_0:
	.byte	$43,$48,$45,$52,$49,$4C,$20,$53,$45,$20,$46,$55,$45,$20,$41,$20
	.byte	$50,$45,$50,$49,$4E,$4F,$4E,$49,$20,$41,$25,$42,$55,$53,$43,$41
	.byte	$52,$20,$49,$4E,$53,$50,$49,$52,$41,$43,$49,$4F,$4E,$20,$50,$41
	.byte	$52,$41,$20,$53,$55,$25,$4C,$49,$42,$52,$4F,$20,$53,$4F,$42,$52
	.byte	$45,$20,$4A,$55,$45,$47,$4F,$53,$20,$52,$45,$54,$52,$4F,$2C,$20
	.byte	$59,$41,$25,$51,$55,$45,$20,$41,$48,$4F,$52,$41,$20,$54,$4F,$44
	.byte	$4F,$20,$45,$4C,$20,$4D,$55,$4E,$44,$4F,$20,$50,$41,$2D,$25,$52
	.byte	$45,$43,$49,$41,$20,$45,$53,$54,$41,$52,$20,$53,$41,$43,$41,$4E
	.byte	$44,$4F,$20,$45,$4C,$20,$53,$55,$59,$4F,$2E,$25,$00
_cutscene_1:
	.byte	$5A,$4F,$4D,$42,$49,$45,$53,$20,$45,$4E,$20,$50,$45,$50,$49,$4E
	.byte	$4F,$4E,$49,$3F,$20,$56,$45,$4E,$47,$41,$25,$59,$41,$21,$20,$45
	.byte	$53,$54,$4F,$20,$45,$53,$20,$55,$4E,$20,$54,$52,$41,$42,$41,$4A
	.byte	$4F,$20,$50,$41,$52,$41,$25,$43,$48,$45,$52,$49,$4C,$2C,$20,$51
	.byte	$55,$45,$20,$41,$43,$41,$42,$45,$20,$43,$4F,$4E,$20,$54,$4F,$44
	.byte	$4F,$53,$25,$45,$53,$4F,$53,$20,$43,$48,$55,$4E,$47,$55,$45,$52
	.byte	$4F,$53,$20,$41,$20,$47,$4F,$4C,$50,$45,$20,$44,$45,$25,$42,$55
	.byte	$4C,$4C,$41,$52,$41,$4E,$47,$41,$25,$00
_cutscene_2:
	.byte	$5E,$5A,$4F,$4D,$42,$49,$45,$53,$20,$41,$43,$41,$42,$41,$44,$4F
	.byte	$53,$21,$20,$45,$53,$20,$48,$4F,$52,$41,$25,$44,$45,$20,$50,$4F
	.byte	$4E,$45,$52,$53,$45,$20,$41,$20,$45,$53,$43,$52,$49,$42,$49,$52
	.byte	$2E,$20,$50,$45,$52,$4F,$25,$43,$48,$45,$52,$49,$4C,$20,$48,$41
	.byte	$20,$50,$45,$52,$44,$49,$44,$4F,$20,$4C,$41,$20,$4C,$49,$42,$52
	.byte	$45,$54,$41,$25,$44,$4F,$4E,$44,$45,$20,$41,$50,$55,$4E,$54,$41
	.byte	$42,$41,$20,$43,$48,$41,$53,$43,$41,$52,$52,$49,$4C,$4C,$4F,$53
	.byte	$25,$27,$5F,$55,$4E,$20,$43,$45,$4D,$45,$4E,$54,$45,$52,$49,$4F
	.byte	$3F,$20,$5E,$4D,$45,$20,$53,$55,$45,$4E,$41,$21,$25,$27,$00
_cutscene_3:
	.byte	$27,$56,$49,$20,$51,$55,$45,$20,$53,$45,$20,$4C,$4C,$45,$56,$41
	.byte	$42,$41,$4E,$20,$4C,$41,$20,$4C,$49,$2D,$25,$42,$52,$45,$54,$41
	.byte	$20,$41,$20,$4C,$41,$20,$46,$41,$42,$52,$49,$43,$41,$21,$27,$2C
	.byte	$20,$44,$49,$4A,$4F,$25,$45,$4C,$20,$5A,$4F,$4D,$42,$49,$45,$20
	.byte	$41,$4E,$54,$45,$53,$20,$44,$45,$20,$50,$41,$4C,$4D,$41,$52,$2E
	.byte	$25,$27,$4F,$48,$2C,$20,$4E,$4F,$2E,$2E,$2E,$20,$4D,$41,$53,$20
	.byte	$46,$41,$42,$52,$49,$43,$41,$53,$2E,$25,$4D,$45,$20,$54,$49,$45
	.byte	$4E,$45,$4E,$20,$48,$41,$53,$54,$41,$20,$45,$4C,$20,$54,$4F,$54
	.byte	$4F,$21,$25,$27,$00
_cutscene_4:
	.byte	$53,$49,$47,$55,$49,$45,$4E,$44,$4F,$20,$4C,$41,$20,$50,$49,$53
	.byte	$54,$41,$2C,$20,$43,$48,$45,$52,$49,$4C,$25,$43,$52,$45,$45,$20
	.byte	$51,$55,$45,$20,$4C,$41,$20,$4C,$49,$42,$52,$45,$54,$41,$20,$45
	.byte	$53,$54,$41,$52,$41,$25,$53,$45,$47,$55,$52,$4F,$20,$45,$4E,$20
	.byte	$45,$4C,$20,$42,$41,$52,$43,$4F,$20,$50,$49,$52,$41,$54,$41,$25
	.byte	$41,$50,$41,$52,$43,$41,$44,$4F,$20,$45,$4E,$20,$45,$4C,$20,$50
	.byte	$55,$45,$52,$54,$4F,$2E,$25,$41,$20,$50,$4F,$52,$20,$55,$4E,$20
	.byte	$47,$4F,$52,$52,$4F,$20,$50,$49,$52,$41,$54,$41,$21,$25,$00
_dialogue_portraits:
	.byte	$1E
	.byte	$1E
	.byte	$1E
	.byte	$1F
	.byte	$1F
	.byte	$1F
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$23
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$24
	.byte	$25
	.byte	$23
	.byte	$26
	.byte	$26
_dialogue_texts:
	.addr	_dialogue_0_0
	.addr	_dialogue_0_1
	.addr	_dialogue_0_2
	.addr	_dialogue_1_0
	.addr	_dialogue_1_1
	.addr	_dialogue_1_2
	.addr	_dialogue_2_0
	.addr	_dialogue_2_1
	.addr	_dialogue_2_2
	.addr	_dialogue_2_4
	.addr	_dialogue_2_3
	.addr	_dialogue_0_3
	.addr	_dialogue_0_4
	.addr	_dialogue_3_0
	.addr	_dialogue_3_1
	.addr	_dialogue_4_0
	.addr	_dialogue_4_1
	.addr	_dialogue_4_2
	.addr	_dialogue_4_3
_cutscenes:
	.addr	_cutscene_0
	.addr	_cutscene_1
	.addr	_cutscene_2
	.addr	_cutscene_3
	.addr	_cutscene_4
_beh0:
	.byte	$0C
	.byte	$80
	.byte	$42
	.byte	$4A
	.byte	$80
	.byte	$67
	.byte	$80
	.byte	$72
	.byte	$80
	.byte	$4C
	.byte	$41
	.byte	$80
	.byte	$73
	.byte	$63
	.byte	$80
	.byte	$53
	.byte	$80
	.byte	$09
	.byte	$80
	.byte	$7C
	.byte	$41
	.byte	$80
	.byte	$64
	.byte	$80
	.byte	$D8
	.byte	$00
_beh1:
	.byte	$52
	.byte	$69
	.byte	$51
	.byte	$80
	.byte	$69
	.byte	$51
	.byte	$80
	.byte	$69
	.byte	$52
	.byte	$80
	.byte	$69
	.byte	$7A
	.byte	$80
	.byte	$55
	.byte	$7A
	.byte	$41
	.byte	$80
	.byte	$4A
	.byte	$80
	.byte	$72
	.byte	$6B
	.byte	$80
	.byte	$D6
	.byte	$00
_en_behptrs:
	.addr	_beh0
	.addr	_beh1
_interactives0:
	.byte	$04
	.byte	$98
	.byte	$1E
	.byte	$0B
	.byte	$AC
	.byte	$22
	.byte	$FF
_interactives1:
	.byte	$06
	.byte	$94
	.byte	$1F
	.byte	$FF
_interactives2:
	.byte	$13
	.byte	$AC
	.byte	$21
	.byte	$17
	.byte	$8E
	.byte	$20
	.byte	$FF
_interactives3:
	.byte	$0C
	.byte	$93
	.byte	$24
	.byte	$FF
_interactives4:
	.byte	$04
	.byte	$A4
	.byte	$25
	.byte	$0C
	.byte	$12
	.byte	$26
	.byte	$FF
_l_scr_ini:
	.byte	$00
	.byte	$06
	.byte	$17
	.byte	$12
	.byte	$0C
_l_ini_x:
	.byte	$02
	.byte	$07
	.byte	$03
	.byte	$03
	.byte	$08
_l_ini_y:
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
_l_map_w:
	.byte	$06
	.byte	$08
	.byte	$04
	.byte	$06
	.byte	$06
_l_player_max_objects:
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
_l_player_max_enems:
	.byte	$01
	.byte	$1A
	.byte	$24
	.byte	$19
	.byte	$24
_l_pal_bg:
	.addr	_palts1
	.addr	_palts1
	.addr	_palts3
	.addr	_palts0
	.addr	_palts2
_l_pal_fg:
	.addr	_palss1
	.addr	_palss1
	.addr	_palss3
	.addr	_palss0
	.addr	_palss2
_l_ts_tmaps:
	.addr	_ts1_tmaps
	.addr	_ts1_tmaps
	.addr	_ts3_tmaps
	.addr	_ts0_tmaps
	.addr	_ts2_tmaps
_l_ts_pals:
	.addr	_ts1_pals
	.addr	_ts1_pals
	.addr	_ts3_pals
	.addr	_ts0_pals
	.addr	_ts2_pals
_l_behs:
	.addr	_behs1
	.addr	_behs1
	.addr	_behs3
	.addr	_behs0
	.addr	_behs2
_l_spr_enems:
	.addr	_spr_enems1
	.addr	_spr_enems1
	.addr	_spr_enems3
	.addr	_spr_enems0
	.addr	_spr_enems2
_l_map_chr_rom_bank:
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
_l_map:
	.addr	_map_04_scr_offsets
	.addr	_map_01_scr_offsets
	.addr	_map_03_scr_offsets
	.addr	_map_00_scr_offsets
	.addr	_map_02_scr_offsets
_l_locks:
	.word	$0000
	.word	$0000
	.addr	_map_03_locks
	.addr	_map_00_locks
	.word	$0000
_l_n_bolts:
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$01
_l_enems_chr_rombank:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
_l_enems:
	.word	$1F58
	.word	$1B68
	.word	$1E08
	.word	$1A18
	.word	$1CB8
_l_hotspots:
	.word	$1FE8
	.word	$1C88
	.word	$1F28
	.word	$1B38
	.word	$1DD8
_l_chr_rom_bank:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
_l_interactives:
	.addr	_interactives0
	.addr	_interactives1
	.addr	_interactives2
	.addr	_interactives3
	.addr	_interactives4
_title_sp_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$40
	.byte	$41
	.byte	$01
	.byte	$07
	.byte	$45
	.byte	$41
	.byte	$41
	.byte	$48
	.byte	$49
	.byte	$41
	.byte	$41
	.byte	$4C
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$43
	.byte	$46
	.byte	$47
	.byte	$44
	.byte	$43
	.byte	$4A
	.byte	$4B
	.byte	$42
	.byte	$43
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$52
	.byte	$53
	.byte	$59
	.byte	$55
	.byte	$5A
	.byte	$5B
	.byte	$52
	.byte	$53
	.byte	$52
	.byte	$53
	.byte	$52
	.byte	$53
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$41
	.byte	$01
	.byte	$05
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$41
	.byte	$01
	.byte	$06
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$41
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$5F
	.byte	$60
	.byte	$63
	.byte	$64
	.byte	$66
	.byte	$63
	.byte	$5F
	.byte	$60
	.byte	$63
	.byte	$5F
	.byte	$60
	.byte	$69
	.byte	$6C
	.byte	$6D
	.byte	$6F
	.byte	$70
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$61
	.byte	$62
	.byte	$65
	.byte	$61
	.byte	$67
	.byte	$68
	.byte	$61
	.byte	$67
	.byte	$68
	.byte	$61
	.byte	$6A
	.byte	$6B
	.byte	$61
	.byte	$6E
	.byte	$71
	.byte	$72
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$74
	.byte	$77
	.byte	$76
	.byte	$74
	.byte	$78
	.byte	$79
	.byte	$74
	.byte	$7A
	.byte	$41
	.byte	$74
	.byte	$7B
	.byte	$75
	.byte	$76
	.byte	$41
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$73
	.byte	$41
	.byte	$01
	.byte	$15
	.byte	$7C
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$01
	.byte	$00
_hud_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$5F
	.byte	$44
	.byte	$45
	.byte	$01
	.byte	$1D
	.byte	$46
	.byte	$47
	.byte	$00
	.byte	$03
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$0B
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$04
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$47
	.byte	$48
	.byte	$45
	.byte	$01
	.byte	$1D
	.byte	$49
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$42
	.byte	$01
	.byte	$00
_cuts0_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$CB
	.byte	$44
	.byte	$45
	.byte	$48
	.byte	$49
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$41
	.byte	$43
	.byte	$00
	.byte	$46
	.byte	$47
	.byte	$4A
	.byte	$4B
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$4C
	.byte	$4E
	.byte	$4F
	.byte	$52
	.byte	$53
	.byte	$56
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$4D
	.byte	$50
	.byte	$51
	.byte	$54
	.byte	$55
	.byte	$58
	.byte	$59
	.byte	$00
	.byte	$01
	.byte	$19
	.byte	$5A
	.byte	$5B
	.byte	$5E
	.byte	$5F
	.byte	$62
	.byte	$63
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$66
	.byte	$67
	.byte	$6A
	.byte	$6B
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$5C
	.byte	$5D
	.byte	$60
	.byte	$61
	.byte	$64
	.byte	$65
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$68
	.byte	$69
	.byte	$6C
	.byte	$6D
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$6E
	.byte	$70
	.byte	$71
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$78
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$6F
	.byte	$72
	.byte	$73
	.byte	$76
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7A
	.byte	$7B
	.byte	$7A
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$50
	.byte	$01
	.byte	$07
	.byte	$55
	.byte	$55
	.byte	$F0
	.byte	$01
	.byte	$03
	.byte	$0F
	.byte	$0F
	.byte	$05
	.byte	$05
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$01
	.byte	$00
_cuts1_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C9
	.byte	$7C
	.byte	$7D
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$7E
	.byte	$7F
	.byte	$80
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$81
	.byte	$83
	.byte	$84
	.byte	$87
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$8B
	.byte	$8E
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$82
	.byte	$85
	.byte	$86
	.byte	$88
	.byte	$89
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$8A
	.byte	$00
	.byte	$8C
	.byte	$8D
	.byte	$8F
	.byte	$90
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$96
	.byte	$97
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$9B
	.byte	$9C
	.byte	$9E
	.byte	$9F
	.byte	$A2
	.byte	$A3
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$94
	.byte	$95
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$9D
	.byte	$00
	.byte	$A0
	.byte	$A1
	.byte	$A4
	.byte	$A0
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$A5
	.byte	$A6
	.byte	$A9
	.byte	$AA
	.byte	$AD
	.byte	$AE
	.byte	$B0
	.byte	$B1
	.byte	$9D
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B8
	.byte	$B9
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$A7
	.byte	$A8
	.byte	$AB
	.byte	$AC
	.byte	$00
	.byte	$AF
	.byte	$B2
	.byte	$B3
	.byte	$9D
	.byte	$00
	.byte	$B7
	.byte	$9F
	.byte	$A2
	.byte	$B7
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$50
	.byte	$01
	.byte	$07
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$23
	.byte	$01
	.byte	$00
_cuts2_rle:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C9
	.byte	$7C
	.byte	$7D
	.byte	$00
	.byte	$01
	.byte	$1D
	.byte	$7E
	.byte	$7F
	.byte	$80
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$81
	.byte	$83
	.byte	$84
	.byte	$87
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$82
	.byte	$85
	.byte	$86
	.byte	$88
	.byte	$89
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$96
	.byte	$97
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$BD
	.byte	$BE
	.byte	$C1
	.byte	$C2
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$94
	.byte	$95
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$BF
	.byte	$C0
	.byte	$C3
	.byte	$00
	.byte	$C4
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$A5
	.byte	$A6
	.byte	$A9
	.byte	$AA
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$00
	.byte	$C5
	.byte	$C6
	.byte	$C9
	.byte	$CA
	.byte	$CD
	.byte	$CE
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$A7
	.byte	$A8
	.byte	$AB
	.byte	$AC
	.byte	$00
	.byte	$AF
	.byte	$00
	.byte	$00
	.byte	$C7
	.byte	$C8
	.byte	$CB
	.byte	$CC
	.byte	$CF
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$14
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$55
	.byte	$55
	.byte	$AA
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$21
	.byte	$01
	.byte	$00
_map_bg0:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_map_bg3:
	.byte	$1C
	.byte	$02
	.byte	$02
	.byte	$12
	.byte	$12
	.byte	$02
	.byte	$1B
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$12
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$1B
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$12
	.byte	$0C
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$0C
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$0C
	.byte	$02
	.byte	$02
	.byte	$12
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$0C
	.byte	$03
	.byte	$1F
	.byte	$00
	.byte	$02
	.byte	$1F
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$0C
	.byte	$00
	.byte	$1C
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$02
	.byte	$1F
	.byte	$03
	.byte	$1F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$03
	.byte	$0C
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$1C
	.byte	$02
	.byte	$12
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$1C
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$1C
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$1C
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$03
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$0C
	.byte	$1C
	.byte	$02
	.byte	$00
	.byte	$1C
	.byte	$1F
	.byte	$00
	.byte	$1F
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$1B
	.byte	$00
	.byte	$1C
	.byte	$02
	.byte	$12
	.byte	$1B
	.byte	$10
	.byte	$00
	.byte	$1F
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$1F
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$1C
	.byte	$00
	.byte	$1B
	.byte	$1F
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$02
	.byte	$12
	.byte	$12
	.byte	$1B
	.byte	$02
	.byte	$1B
	.byte	$1F
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$1B
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$1C
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$1C
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$1B
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$0C
	.byte	$03
	.byte	$0C
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$0C
	.byte	$1F
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$1F
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$12
	.byte	$12
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$03
	.byte	$1F
	.byte	$00
	.byte	$0C
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$1F
	.byte	$02
	.byte	$02
	.byte	$1F
	.byte	$03
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$1F
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$1B
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$02
_bgs:
	.word	$0000
	.word	$0000
	.addr	_map_bg3
	.addr	_map_bg0
	.word	$0000
_bitmasks:
	.byte	$FC
	.byte	$F3
	.byte	$CF
	.byte	$3F
_box_buff:
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$FF
	.byte	$FF
L0001:
	.byte	$50,$55,$4C,$53,$41,$20,$53,$54,$41,$52,$54,$21,$00,$40,$20,$32
	.byte	$30,$31,$38,$20,$54,$48,$45,$20,$4D,$4F,$4A,$4F,$4E,$20,$54,$57
	.byte	$49,$4E,$53,$00,$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$21,$00,$46
	.byte	$49,$4E,$41,$4C,$4C,$59,$2C,$20,$43,$48,$45,$52,$49,$4C,$20,$4D
	.byte	$41,$4E,$41,$47,$45,$44,$20,$54,$4F,$00,$20,$45,$53,$43,$41,$50
	.byte	$45,$20,$46,$52,$4F,$4D,$20,$43,$41,$53,$54,$4C,$45,$20,$4D,$4F
	.byte	$4A,$4F,$4E,$00,$57,$48,$41,$54,$20,$4E,$45,$57,$20,$41,$44,$56
	.byte	$45,$4E,$54,$55,$52,$45,$53,$20,$41,$57,$41,$49,$54,$3F,$00,$20
	.byte	$20,$20,$54,$48,$41,$4E,$4B,$53,$20,$46,$4F,$52,$20,$50,$4C,$41
	.byte	$59,$49,$4E,$47,$21,$21,$00

.segment	"BSS"

.segment	"ZEROPAGE"
__x:
	.res	1,$00
__y:
	.res	1,$00
__n:
	.res	1,$00
__t:
	.res	1,$00
_i:
	.res	1,$00
_pad_this_frame:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_gpitu:
	.res	1,$00
_gpaux:
	.res	1,$00
_rds16:
	.res	2,$00
_gp_gen:
	.res	2,$00
_gp_tmap:
	.res	2,$00
_gp_tma2:
	.res	2,$00
_gp_ram:
	.res	2,$00
_gp_ram_aux:
	.res	2,$00
_gp_addr:
	.res	2,$00
_rdx:
	.res	1,$00
_rdy:
	.res	1,$00
_rdt:
	.res	1,$00
_rdit:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdd:
	.res	1,$00
_rdm:
	.res	1,$00
_rds:
	.res	1,$00
_rdct:
	.res	1,$00
_ticker:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
_cx1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy1:
	.res	1,$00
_cy2:
	.res	1,$00
_caux:
	.res	1,$00
_oam_index:
	.res	1,$00
_oam_index_aux:
	.res	1,$00
_en_initial:
	.res	1,$00
_en_offs:
	.res	1,$00
_en_fr:
	.res	1,$00
_en_collx:
	.res	1,$00
_en_colly:
	.res	1,$00
_en_spr:
	.res	1,$00
_touched:
	.res	1,$00
_en_cttouched:
	.res	3,$00
_en_flags:
	.res	3,$00
_en_is_alive:
	.res	1,$00
_pregotten:
	.res	1,$00
__en_t:
	.res	1,$00
__en_s:
	.res	1,$00
__en_x:
	.res	1,$00
__en_y:
	.res	1,$00
__en_x1:
	.res	1,$00
__en_y1:
	.res	1,$00
__en_x2:
	.res	1,$00
__en_y2:
	.res	1,$00
__en_mx:
	.res	1,$00
__en_my:
	.res	1,$00
__en_ct:
	.res	1,$00
__en_facing:
	.res	1,$00
__enf_x:
	.res	2,$00
__enf_y:
	.res	2,$00
__enf_vx:
	.res	2,$00
__enf_vy:
	.res	2,$00
_en_life:
	.res	3,$00
_en_alive:
	.res	3,$00
_en_status:
	.res	3,$00
_en_rawv:
	.res	3,$00
_en_ct:
	.res	3,$00
_en_behptr:
	.res	6,$00
_px:
	.res	2,$00
_py:
	.res	2,$00
_pvx:
	.res	2,$00
_pvy:
	.res	2,$00
_prx:
	.res	1,$00
_pry:
	.res	1,$00
_pfacing:
	.res	1,$00
_pfr:
	.res	1,$00
_pctfr:
	.res	1,$00
_psprid:
	.res	1,$00
_a_button:
	.res	1,$00
_b_button:
	.res	1,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_pjb:
	.res	1,$00
_pgotten:
	.res	1,$00
_ppossee:
	.res	1,$00
_psprint:
	.res	1,$00
_pushed_any:
	.res	1,$00
_pstate:
	.res	1,$00
_pctstate:
	.res	1,$00
_pskip:
	.res	1,$00
_phit:
	.res	1,$00
_pgtmx:
	.res	2,$00
_pgtmy:
	.res	2,$00
_pinv:
	.res	1,$00
_opinv:
	.res	1,$00
_ponladder:
	.res	1,$00
_phalfladder:
	.res	1,$00
_ponladderctr:
	.res	1,$00
_wall:
	.res	1,$00
_hitv:
	.res	1,$00
_hith:
	.res	1,$00
_pfloating:
	.res	1,$00
_pkilled:
	.res	1,$00
_prx_old:
	.res	1,$00
_pry_old:
	.res	1,$00
_pobjs:
	.res	1,$00
_plife:
	.res	1,$00
_pcontinues:
	.res	1,$00
_pkill:
	.res	1,$00
_pice:
	.res	1,$00
_pnotsafe:
	.res	1,$00
_pkeys:
	.res	1,$00
_pammo:
	.res	1,$00
_pfiring:
	.res	1,$00
_n_pant_safe:
	.res	1,$00
_px_safe:
	.res	2,$00
_py_safe:
	.res	2,$00
_coco_it:
	.res	1,$00
_hrx:
	.res	1,$00
_hry:
	.res	1,$00
_hrt:
	.res	1,$00
_do_process_breakable:
	.res	1,$00
_ft:
	.res	1,$00
_c_map_w:
	.res	1,$00
_c_ts_pals:
	.res	2,$00
_c_ts_tmaps:
	.res	2,$00
_c_behs:
	.res	2,$00
_spr_enems:
	.res	2,$00
_c_pal_bg:
	.res	2,$00
_c_pal_fg:
	.res	2,$00
_c_map:
	.res	2,$00
_c_map_chr_rom_bank:
	.res	1,$00
_c_locks:
	.res	2,$00
_c_enems:
	.res	2,$00
_c_hotspots:
	.res	2,$00
_c_max_bolts:
	.res	1,$00
.segment	"BSS"
_first_game:
	.res	1,$00
_half_life:
	.res	1,$00
_frame_counter:
	.res	1,$00
_n_pant:
	.res	1,$00
_on_pant:
	.res	1,$00
_olife:
	.res	1,$00
_okeys:
	.res	1,$00
_oobjs:
	.res	1,$00
_oammo:
	.res	1,$00
_okilled:
	.res	1,$00
_use_ct:
	.res	1,$00
_use_sub_ct:
	.res	1,$00
_use_type:
	.res	1,$00
_no_ct:
	.res	1,$00
_level:
	.res	1,$00
_game_over:
	.res	1,$00
_win_level:
	.res	1,$00
_c_max_enems:
	.res	1,$00
_update_index:
	.res	1,$00
_update_list:
	.res	96,$00
_map_attr:
	.res	192,$00
_map_buff:
	.res	192,$00
_coco_x:
	.res	8,$00
_coco_y:
	.res	8,$00
_coco_vx:
	.res	8,$00
_coco_vy:
	.res	8,$00
_coco_on:
	.res	4,$00
_coco_slots:
	.res	4,$00
_coco_slots_i:
	.res	1,$00
_fader:
	.res	1,$00
_fade_delay:
	.res	1,$00
_hyx:
	.res	24,$00
_ht:
	.res	24,$00
_hact:
	.res	24,$00
_lkact:
	.res	16,$00
_flags:
	.res	2,$00
_interactives_index:
	.res	1,$00
_interactives_interact_with:
	.res	1,$00
_interactives_f:
	.res	4,$00
_interactives_yx:
	.res	4,$00
_c_interactives:
	.res	2,$00
_en_x:
	.res	3,$00
_en_y:
	.res	3,$00
_en_x1:
	.res	3,$00
_en_y1:
	.res	3,$00
_en_x2:
	.res	3,$00
_en_y2:
	.res	3,$00
_en_mx:
	.res	3,$00
_en_my:
	.res	3,$00
_en_t:
	.res	3,$00
_en_s:
	.res	3,$00
_en_facing:
	.res	3,$00
_enf_x:
	.res	6,$00
_enf_vx:
	.res	6,$00
_enf_y:
	.res	6,$00
_enf_vy:
	.res	6,$00
_en_spr_id:
	.res	3,$00
_ep_x:
	.res	72,$00
_ep_y:
	.res	72,$00
_ep_mx:
	.res	72,$00
_ep_my:
	.res	72,$00
_ep_dead:
	.res	72,$00
_prp_idx:
	.res	1,$00
_prp_yx:
	.res	6,$00
_propellers_on:
	.res	1,$00
_max_shines:
	.res	1,$00
_shine_active_x:
	.res	1,$00
_shine_active_y:
	.res	1,$00
_shines:
	.res	8,$00
_shine_active_ct:
	.res	1,$00
_res_on:
	.res	1,$00
_res_ct:
	.res	1,$00
_res_subct:
	.res	1,$00
_cfx:
	.res	1,$00
_pal_cycle:
	.res	3,$00
_level0_gate:
	.res	1,$00
_level1_gate:
	.res	1,$00
_springs_on:
	.res	1,$00
_attr_table:
	.res	64,$00

; ---------------------------------------------------------------
; void __near__ propellers_add (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_propellers_add: near

.segment	"CODE"

;
; prp_yx [prp_idx ++] = rdm;
;
	lda     _prp_idx
	pha
	clc
	adc     #$01
	sta     _prp_idx
	pla
	clc
	adc     #<(_prp_yx)
	sta     ptr1
	lda     #$00
	adc     #>(_prp_yx)
	sta     ptr1+1
	lda     _rdm
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ shines_add (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_shines_add: near

.segment	"CODE"

;
; if (max_shines == SHINES_MAX) return;
;
	lda     _max_shines
	cmp     #$08
	beq     L1A49
;
; shines [max_shines ++] = rdm;
;
	lda     _max_shines
	pha
	clc
	adc     #$01
	sta     _max_shines
	pla
	clc
	adc     #<(_shines)
	sta     ptr1
	lda     #$00
	adc     #>(_shines)
	sta     ptr1+1
	lda     _rdm
	ldy     #$00
	sta     (ptr1),y
;
; }
;
L1A49:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; if (cy1 > 12 || cy2 > 12) { at1 = at2 = 0; return; }
;
	lda     _cy1
	cmp     #$0D
	bcs     L16A5
	lda     _cy2
	cmp     #$0D
	bcc     L16A4
L16A5:	lda     #$00
	sta     _at2
	sta     _at1
	rts
;
; at1 = map_attr [COORDS (cx1, cy1 ? cy1 - 1 : 0)];
;
L16A4:	lda     _cy1
	beq     L16B1
	ldx     #$00
	lda     _cy1
	sec
	sbc     #$01
	bcs     L16B4
	dex
	jmp     L16B4
L16B1:	tax
L16B4:	jsr     shlax4
	ora     _cx1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at1
;
; at2 = map_attr [COORDS (cx2, cy2 ? cy2 - 1 : 0)];
;
	lda     _cy2
	beq     L16BD
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L16C0
	dex
	jmp     L16C0
L16BD:	tax
L16C0:	jsr     shlax4
	ora     _cx2
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide_in (int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide_in: near

.segment	"CODE"

;
; return (x0 >= x1 && x0 <= x1 + 15 && y0 >= y1 && y0 <= y1 + 15); 
;
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L16C5
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0F
	bcc     L16C6
	inx
L16C6:	jsr     tosicmp
	beq     L274D
	bpl     L16C5
L274D:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L16C5
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$0F
	bcc     L16C7
	inx
L16C7:	jsr     tosicmp
	bmi     L16C4
	beq     L16C4
L16C5:	ldx     #$00
	txa
	jmp     incsp8
L16C4:	ldx     #$00
	lda     #$01
;
; }
;
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide: near

.segment	"CODE"

;
; prx + 3 >= _en_x && 
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$03
	bcc     L16CC
	inx
L16CC:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L16CD
;
; prx <= _en_x + 11 && 
;
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0B
	bcc     L16CE
	ldx     #$01
L16CE:	jsr     tosicmp
	beq     L274F
	bcs     L16CD
;
; pry + 13 + ENEMS_COLLISION_VSTRETCH_FG >= _en_y &&
;
L274F:	ldx     #$00
	lda     _pry
	clc
	adc     #$0D
	bcc     L16CF
	inx
L16CF:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L16CD
;
; pry <= _en_y + 13 + PLAYER_COLLISION_VSTRETCH_FG
;
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$0D
	bcc     L274E
	ldx     #$01
;
; );
;
	clc
L274E:	adc     #$04
	bcc     L16D1
	inx
L16D1:	jsr     tosicmp
	bcc     L16CB
	beq     L16CB
L16CD:	ldx     #$00
	txa
	rts
L16CB:	ldx     #$00
	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ add_sign (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_sign: near

.segment	"CODE"

;
; return sign == 0 ? 0 : sign < 0 ? -value : value;
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L16D6
	cmp     #$00
	jeq     incsp4
L16D6:	iny
	lda     (sp),y
	tax
	cpx     #$80
	bcc     L16DA
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L16DA:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ saturate (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_saturate: near

.segment	"CODE"

;
; return v >= 0 ? (v > max ? max : v) : (v < -max ? -max : v);
;
	ldy     #$03
	lda     (sp),y
	bmi     L16E0
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L16EA
	beq     L16EA
	ldy     #$01
	jmp     L2756
L16E0:	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jsr     tosicmp
	bpl     L16EA
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L16EA:	ldy     #$03
L2756:	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ pad_read (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pad_read: near

.segment	"CODE"

;
; pad_this_frame = i;
;
	lda     _i
	sta     _pad_this_frame
;
; i = pad_poll (0);   // Read pads here.
;
	lda     #$00
	jsr     _pad_poll
	sta     _i
;
; pad_this_frame = (pad_this_frame ^ i) & i;
;
	eor     _pad_this_frame
	sta     ptr1
	lda     _i
	and     ptr1
	sta     _pad_this_frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ distance (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_distance: near

.segment	"CODE"

;
; rda = DELTA (prx, rdx); // dx
;
	ldx     #$00
	lda     _prx
	cmp     _rdx
	bcs     L16FD
	lda     _rdx
	sec
	sbc     _prx
	jmp     L275D
L16FD:	lda     _prx
	sec
	sbc     _rdx
L275D:	sta     _rda
;
; rdb = DELTA (pry, rdy); // dy
;
	lda     _pry
	cmp     _rdy
	bcs     L170A
	lda     _rdy
	sec
	sbc     _pry
	jmp     L275E
L170A:	lda     _pry
	sec
	sbc     _rdy
L275E:	sta     _rdb
;
; rdc = MIN (rda, rdb);
;
	lda     _rda
	cmp     _rdb
	bcs     L1717
	lda     _rda
	jmp     L275A
L1717:	lda     _rdb
L275A:	sta     _rdc
;
; return (rda + rdb - (rdc >> 1) - (rdc >> 2) + (rdc >> 4));
;
	lda     _rda
	clc
	adc     _rdb
	bcc     L2757
	inx
L2757:	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax1
	jsr     tossubax
	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax2
	jsr     tossubax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rdc
	jsr     asrax4
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for (fader = 4; fader > -1; fader --) {
;
	lda     #$04
L275F:	sta     _fader
	tax
	bmi     L1724
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 4; fader > -1; fader --) {
;
	lda     _fader
	sec
	sbc     #$01
	jmp     L275F
;
; }
;
L1724:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     #$00
L2760:	sta     _fader
	sec
	sbc     #$05
	bvc     L173A
	eor     #$80
L173A:	bpl     L1733
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     _fader
	clc
	adc     #$01
	jmp     L2760
;
; }
;
L1733:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clear_update_list (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_update_list: near

.segment	"CODE"

;
; memfill (update_list, 0, UPDATE_LIST_SIZE*3);
;
	jsr     decsp3
	lda     #<(_update_list)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_update_list)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$60
	jsr     _memfill
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; vram_adr(0x2000); vram_fill(0x00,0x400);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ ul_putc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_putc: near

.segment	"CODE"

;
; update_list [update_index++] = MSB (gp_addr);
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	sta     ptr1
	lda     #$00
	adc     #>(_update_list)
	sta     ptr1+1
	lda     _gp_addr+1
	ldy     #$00
	sta     (ptr1),y
;
; update_list [update_index++] = LSB (gp_addr++);
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	tay
	lda     #$00
	adc     #>(_update_list)
	tax
	tya
	jsr     pushax
	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	clc
	adc     #$01
	bcc     L175B
	inx
L175B:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldy     #$00
	jsr     staspidx
;
; update_list [update_index++] = _n;
;
	lda     _update_index
	pha
	clc
	adc     #$01
	sta     _update_index
	pla
	clc
	adc     #<(_update_list)
	sta     ptr1
	lda     #$00
	adc     #>(_update_list)
	sta     ptr1+1
	lda     __n
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ p_t (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t: near

.segment	"CODE"

;
; rda = _n; gp_addr = (_y << 5) + _x + 0x2000;
;
	lda     __n
	sta     _rda
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L2761
	inx
L2761:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; _n = ((rda/10)+16); ul_putc ();
;
	lda     _rda
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$10
	sta     __n
	jsr     _ul_putc
;
; _n = ((rda%10)+16); ul_putc ();
;
	lda     _rda
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$10
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ upd_attr_table (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_upd_attr_table: near

.segment	"CODE"

;
; rdc = (_x >> 2) + ((_y >> 2) << 3);
;
	ldx     #$00
	lda     __x
	jsr     asrax2
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __y
	jsr     asrax2
	jsr     aslax3
	clc
	adc     ptr1
	sta     _rdc
	txa
	adc     ptr1+1
;
; rdb = ((_x >> 1) & 1) + (((_y >> 1) & 1) << 1);
;
	ldx     #$00
	lda     __x
	jsr     asrax1
	and     #$01
	sta     ptr1
	ldx     #$00
	lda     __y
	jsr     asrax1
	and     #$01
	asl     a
	bcc     L2765
	clc
L2765:	adc     ptr1
	sta     _rdb
;
; rda = attr_table [rdc];
;
	ldy     _rdc
	lda     _attr_table,y
	sta     _rda
;
; rda = (rda & bitmasks [rdb]) | (c_ts_pals [_t] << (rdb << 1));
;
	ldy     _rdb
	lda     _bitmasks,y
	and     _rda
	jsr     pusha0
	lda     _c_ts_pals
	ldx     _c_ts_pals+1
	ldy     __t
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	jsr     pusha0
	lda     _rdb
	asl     a
	jsr     tosaslax
	jsr     tosorax
	sta     _rda
;
; attr_table [rdc] = rda;
;
	ldy     _rdc
	lda     _rda
	sta     _attr_table,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + 0x2000);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L2766
	inx
L2766:	pha
	txa
	clc
	adc     #$20
	tax
	pla
	sta     _gp_addr
	stx     _gp_addr+1
;
; vram_adr (gp_addr++);
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L179E
	inx
L179E:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L17A1
	inx
L17A1:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L17A4
	inx
L17A4:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; gp_addr += 31;
;
	lda     #$1F
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L17A7
	inc     _gp_addr+1
;
; vram_adr (gp_addr++);
;
L17A7:	lda     _gp_addr
	ldx     _gp_addr+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L17AA
	inx
L17AA:	sta     _gp_addr
	stx     _gp_addr+1
	lda     regsave
	ldx     regsave+1
	jsr     _vram_adr
;
; vram_put (*gp_tmap++);
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L17AD
	inx
L17AD:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	jsr     _vram_put
;
; vram_put (*gp_tmap); 
;
	lda     _gp_tmap
	sta     ptr1
	lda     _gp_tmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jmp     _vram_put

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_addr = 0x23c0 + rdc;
;
	lda     _rdc
	clc
	adc     #$C0
	sta     _gp_addr
	lda     #$00
	adc     #$23
	sta     _gp_addr+1
;
; _n = rda; ul_putc ();
;
	lda     _rda
	sta     __n
	jsr     _ul_putc
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + 0x2000);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L2767
	inx
L2767:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; _n = *gp_tmap ++; ul_putc ();
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L17C0
	inx
L17C0:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	sta     __n
	jsr     _ul_putc
;
; _n = *gp_tmap ++; ul_putc ();
;
	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L17C4
	inx
L17C4:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	sta     __n
	jsr     _ul_putc
;
; gp_addr += 30;
;
	lda     #$1E
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L17C8
	inc     _gp_addr+1
;
; _n = *gp_tmap ++; ul_putc ();
;
L17C8:	lda     _gp_tmap
	ldx     _gp_tmap+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L17CB
	inx
L17CB:	sta     _gp_tmap
	stx     _gp_tmap+1
	ldy     #$00
	lda     (regsave),y
	sta     __n
	jsr     _ul_putc
;
; _n = *gp_tmap   ; ul_putc ();
;
	lda     _gp_tmap
	sta     ptr1
	lda     _gp_tmap+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ map_set (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_map_set: near

.segment	"CODE"

;
; map_buff [COORDS (_x, _y)] = _t;
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	clc
	adc     #<(_map_buff)
	sta     ptr1
	txa
	adc     #>(_map_buff)
	sta     ptr1+1
	lda     __t
	ldy     #$00
	sta     (ptr1),y
;
; map_attr [COORDS (_x, _y)] = c_behs [_t];
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	ora     __x
	clc
	adc     #<(_map_attr)
	tay
	txa
	adc     #>(_map_attr)
	tax
	tya
	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     __t
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; _x = _x << 1; _y = TOP_ADJUST + (_y << 1);
;
	lda     __x
	asl     a
	sta     __x
	lda     __y
	asl     a
	bcc     L276A
	clc
L276A:	adc     #$06
	sta     __y
;
; update_list_tile (); 
;
	jmp     _update_list_tile

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_byte: near

.segment	"CODE"

;
; rdit --; return *gp_gen ++;
;
	lda     _rdit
	sec
	sbc     #$01
	sta     _rdit
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L17EA
	inx
L17EA:	sta     _gp_gen
	stx     _gp_gen+1
	ldx     #$00
	lda     (regsave,x)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_tile: near

.segment	"CODE"

;
; map_buff [rdm] = rda;
;
	ldy     _rdm
	lda     _rda
	sta     _map_buff,y
;
; rdm ++;
;
	lda     _rdm
	clc
	adc     #$01
	sta     _rdm
;
; rdx = (rdx + 1) & 15; if (!rdx) rdy ++;
;
	lda     _rdx
	clc
	adc     #$01
	and     #$0F
	sta     _rdx
	lda     _rdx
	bne     L17F5
	lda     _rdy
	clc
	adc     #$01
	sta     _rdy
;
; }
;
L17F5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_scr: near

.segment	"CODE"

;
; rdx = rdy = rdm = 0;
;
	lda     #$00
	sta     _rdm
	sta     _rdy
	sta     _rdx
;
; bankswitch (c_map_chr_rom_bank);
;
	lda     _c_map_chr_rom_bank
	jsr     _bankswitch
;
; vram_adr (c_map [n_pant]);
;
	ldx     #$00
	lda     _n_pant
	asl     a
	bcc     L2778
	inx
	clc
L2778:	adc     _c_map
	sta     ptr1
	txa
	adc     _c_map+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _vram_adr
;
; rda = VRAM_READ;  // Dummy read.
;
	lda     $2007
	sta     _rda
;
; while (rdm < 192) {
;
L1807:	lda     _rdm
	cmp     #$C0
	bcs     L1808
;
; rdt = VRAM_READ;
;
	lda     $2007
	sta     _rdt
;
; rdct = 1 + (rdt >> 5);
;
	ldx     #$00
	lda     _rdt
	jsr     asrax4
	jsr     asrax1
	clc
	adc     #$01
	sta     _rdct
;
; rda = rdt & 0x1f;
;
	lda     _rdt
	and     #$1F
	sta     _rda
;
; while (rdct --) add_tile (); 
;
L1815:	lda     _rdct
	pha
	sec
	sbc     #$01
	sta     _rdct
	pla
	tax
	beq     L1807
	jsr     _add_tile
	jmp     L1815
;
; set_rand (1 + n_pant);
;
L1808:	ldx     #$00
	lda     _n_pant
	clc
	adc     #$01
	bcc     L181B
	inx
L181B:	jsr     _set_rand
;
; if (level == 2) {
;
	lda     _level
	cmp     #$02
	bne     L181C
;
; rda = n_pant & 1;
;
	lda     _n_pant
	and     #$01
	sta     _rda
;
; gp_gen = bgs [level] + (rda << 7) + (rda << 6);
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2779
	inx
	clc
L2779:	adc     #<(_bgs)
	sta     ptr1
	txa
	adc     #>(_bgs)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax3
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	clc
	adc     ptr1
	sta     _gp_gen
	txa
	adc     ptr1+1
	tax
;
; } else if (level == 3) {
;
	jmp     L2776
L181C:	lda     _level
	cmp     #$03
	bne     L1826
;
; gp_gen = bgs [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L277A
	inx
	clc
L277A:	adc     #<(_bgs)
	sta     ptr1
	txa
	adc     #>(_bgs)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _gp_gen
L2776:	stx     _gp_gen+1
;
; gpit = 192; while (gpit --) {
;
L1826:	lda     #$C0
	sta     _gpit
L182D:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	jeq     L182E
;
; rda = map_buff [gpit];
;
	ldy     _gpit
	lda     _map_buff,y
	sta     _rda
;
; if (rand8 () & 1) {
;
	jsr     _rand8
	and     #$01
	beq     L184B
;
; (level < 2 && rda == 0)
;
	lda     _level
	cmp     #$02
	bcs     L2772
	lda     _rda
	beq     L1837
;
; || (level < 3 && rda == 1)
;
L2772:	lda     _level
	cmp     #$03
	bcs     L2773
	lda     _rda
	cmp     #$01
	beq     L1837
;
; || (level == 2 && (rda == 4 || rda == 6 || rda == 9 || rda == 10 || rda == 14))
;
L2773:	lda     _level
	cmp     #$02
	bne     L2774
	lda     _rda
	cmp     #$04
	beq     L1837
	lda     _rda
	cmp     #$06
	beq     L1837
	lda     _rda
	cmp     #$09
	beq     L1837
	lda     _rda
	cmp     #$0A
	beq     L1837
	lda     _rda
	cmp     #$0E
;
; || (level == 4 && (rda == 3 || rda == 10 || rda == 12))
;
	beq     L1837
L2774:	lda     _level
	cmp     #$04
	bne     L1836
	lda     _rda
	cmp     #$03
	beq     L1837
	lda     _rda
	cmp     #$0A
	beq     L1837
	lda     _rda
	cmp     #$0C
	bne     L1836
;
; ) rda += 16;
;
L1837:	lda     #$10
	clc
	adc     _rda
	sta     _rda
;
; if (level < 2 && rda == 8) rda = 25;
;
L1836:	lda     _level
	cmp     #$02
	bcs     L184B
	lda     _rda
	cmp     #$08
	bne     L184B
	lda     #$19
	sta     _rda
;
; switch (level) {
;
L184B:	lda     _level
;
; }
;
	beq     L1855
	cmp     #$01
	beq     L1855
	cmp     #$02
	beq     L1861
	cmp     #$03
	beq     L1862
	cmp     #$04
	beq     L1872
	jmp     L1853
;
; if (rda == 21 && map_buff [gpit - 16] != 21) rda = 22;
;
L1855:	lda     _rda
	cmp     #$15
	jne     L1853
	ldx     #$00
	lda     _gpit
	sec
	sbc     #$10
	bcs     L185C
	dex
L185C:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	cmp     #$15
	jeq     L1853
	lda     #$16
;
; break;
;
	jmp     L2777
;
; if (rda == 8 && map_buff [gpit - 16] != 8) rda = 24;
;
L1861:	lda     _rda
	cmp     #$08
	bne     L1862
	ldx     #$00
	lda     _gpit
	sec
	sbc     #$10
	bcs     L1866
	dex
L1866:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	cmp     #$08
	beq     L1862
	lda     #$18
	sta     _rda
;
; if (rda == 0) rda = gp_gen [gpit];
;
L1862:	lda     _rda
	bne     L1853
	lda     _gp_gen
	ldx     _gp_gen+1
	ldy     _gpit
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
;
; break;
;
	jmp     L2777
;
; if (rda == 15 && map_buff [gpit - 1] == 15) rda = 31;
;
L1872:	lda     _rda
	cmp     #$0F
	bne     L1873
	ldx     #$00
	lda     _gpit
	sec
	sbc     #$01
	bcs     L1877
	dex
L1877:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	cmp     #$0F
	bne     L1873
	lda     #$1F
	sta     _rda
;
; if (rda == 14 && map_buff [gpit - 16] != 14) rda = 30;
;
L1873:	lda     _rda
	cmp     #$0E
	bne     L1853
	ldx     #$00
	lda     _gpit
	sec
	sbc     #$10
	bcs     L187F
	dex
L187F:	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	cmp     #$0E
	beq     L1853
	lda     #$1E
L2777:	sta     _rda
;
; map_buff [gpit] = rda;
;
L1853:	ldy     _gpit
	lda     _rda
	sta     _map_buff,y
;
; }
;
	jmp     L182D
;
; if (level == 0) {
;
L182E:	lda     _level
	bne     L1894
;
; if (n_pant == 5 && level0_gate) {
;
	lda     _n_pant
	cmp     #$05
	bne     L1889
	lda     _level0_gate
	beq     L1889
;
; map_buff [0x94] = 0;
;
	txa
	sta     _map_buff+148
;
; map_buff [0xA4] = 0;
;
	sta     _map_buff+164
;
; } else if (n_pant == 11) {
;
	jmp     L1894
L1889:	lda     _n_pant
	cmp     #$0B
	bne     L1894
;
; map_buff [0x9D] = 41;
;
	lda     #$29
	sta     _map_buff+157
;
; map_buff [0x9E] = 42;
;
	lda     #$2A
	sta     _map_buff+158
;
; map_buff [0xAD] = 43;
;
	lda     #$2B
	sta     _map_buff+173
;
; map_buff [0xAE] = 44;
;
	lda     #$2C
	sta     _map_buff+174
;
; if (level == 1 && n_pant == 6 && level1_gate) {
;
L1894:	lda     _level
	cmp     #$01
	bne     L18A2
	lda     _n_pant
	cmp     #$06
	bne     L18A2
	lda     _level1_gate
	beq     L18A2
;
; map_buff [0x4E] = 22; 
;
	lda     #$16
	sta     _map_buff+78
;
; map_buff [0x5E] = 21;
;
	lda     #$15
	sta     _map_buff+94
;
; gp_gen = c_locks; rda = 0;
;
L18A2:	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
	stx     _rda
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L18B2:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L18B3
;
; rdb = *gp_gen ++; rdm = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L18B7
	inx
L18B7:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdb
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L18BA
	inx
L18BA:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdm
;
; if (n_pant == rdb) {
;
	lda     _rdb
	cmp     _n_pant
	bne     L18B2
;
; if (!lkact [gpit]) add_tile ();
;
	ldy     _gpit
	lda     _lkact,y
	bne     L18B2
	jsr     _add_tile
;
; } 
;
	jmp     L18B2
;
; rdx = 0; rdy = 0; gp_ram = map_buff;
;
L18B3:	sta     _rdx
	sta     _rdy
	lda     #<(_map_buff)
	sta     _gp_ram
	lda     #>(_map_buff)
	sta     _gp_ram+1
;
; for (rdm = 0; rdm < 192; rdm ++) {
;
	txa
L277C:	sta     _rdm
	cmp     #$C0
	jcs     L18C9
;
; rdt = *gp_ram ++;
;
	lda     _gp_ram
	ldx     _gp_ram+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L18D2
	inx
L18D2:	sta     _gp_ram
	stx     _gp_ram+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
;
; map_attr [rdm] = c_behs [rdt];
;
	lda     #<(_map_attr)
	ldx     #>(_map_attr)
	clc
	adc     _rdm
	bcc     L18D5
	inx
L18D5:	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     _rdt
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; if (rdt == PROPELLER_TILE && propellers_on) {
;
	lda     _rdt
	cmp     #$18
	bne     L18E2
	lda     _propellers_on
	beq     L18E2
;
; propellers_add ();
;
	jsr     _propellers_add
;
; rda = rdm; 
;
	lda     _rdm
	sta     _rda
;
; rdc = PROPELLERS_MAX_LENGTH;
;
	lda     #$05
	sta     _rdc
;
; while (rda >= 16 && rdc --)
;
L18E1:	lda     _rda
	cmp     #$10
	bcc     L18E2
	lda     _rdc
	pha
	sec
	sbc     #$01
	sta     _rdc
	pla
	tax
	beq     L18E2
;
; rda -= 16;
;
	lda     _rda
	sec
	sbc     #$10
	sta     _rda
;
; if (map_attr [rda]) break; else map_attr [rda] = 64;
;
	ldy     _rda
	lda     _map_attr,y
	bne     L18E2
	ldy     _rda
	lda     #$40
	sta     _map_attr,y
;
; }
;
	jmp     L18E1
;
; if (rdt == SHINING_TILE) shines_add ();
;
L18E2:	lda     _rdt
	cmp     #$17
	bne     L18F1
	jsr     _shines_add
;
; _x = rdx << 1; _y = (rdy << 1) + TOP_ADJUST; _t = rdt;
;
L18F1:	lda     _rdx
	asl     a
	sta     __x
	lda     _rdy
	asl     a
	bcc     L277B
	clc
L277B:	adc     #$06
	sta     __y
	lda     _rdt
	sta     __t
;
; draw_tile ();
;
	jsr     _draw_tile
;
; rdx = (rdx + 1) & 15; if (!rdx) rdy ++;
;
	lda     _rdx
	clc
	adc     #$01
	and     #$0F
	sta     _rdx
	lda     _rdx
	bne     L18CA
	lda     _rdy
	clc
	adc     #$01
	sta     _rdy
;
; for (rdm = 0; rdm < 192; rdm ++) {
;
L18CA:	lda     _rdm
	clc
	adc     #$01
	jmp     L277C
;
; vram_write (attr_table, 0x23c0, 64);
;
L18C9:	jsr     decsp4
	lda     #<(_attr_table)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_attr_table)
	sta     (sp),y
	lda     #$C0
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$23
	sta     (sp),y
	ldx     #$00
	lda     #$40
	jmp     _vram_write

.endproc

; ---------------------------------------------------------------
; void __near__ pr_str (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pr_str: near

.segment	"CODE"

;
; vram_adr (((_y << 5) | _x) + 0x2000);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     __x
	ora     ptr1
	pha
	lda     tmp1
	clc
	adc     #$20
	tax
	pla
	jsr     _vram_adr
;
; while (gpit = *s++) vram_put (gpit - 32); 
;
L190D:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1911
	inx
L1911:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     _gpit
	tax
	jeq     incsp2
	lda     _gpit
	sec
	sbc     #$20
	jsr     _vram_put
	jmp     L190D

.endproc

; ---------------------------------------------------------------
; void __near__ textbox_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_textbox_frame: near

.segment	"CODE"

;
; rdct = 0; _x = 0; _y = 12;
;
	lda     #$00
	sta     _rdct
	sta     __x
	lda     #$0C
	sta     __y
;
; gp_ram = rdm ? ((unsigned char *) box_buff) : (map_buff + (((_y - TOP_ADJUST) >> 1) << 4));
;
	lda     _rdm
	beq     L195E
	lda     #<(_box_buff)
	ldx     #>(_box_buff)
	jmp     L1961
L195E:	tax
	lda     __y
	sec
	sbc     #$06
	bcs     L1967
	dex
L1967:	jsr     shrax1
	jsr     shlax4
	clc
	adc     #<(_map_buff)
	tay
	txa
	adc     #>(_map_buff)
	tax
	tya
L1961:	sta     _gp_ram
	stx     _gp_ram+1
;
; gpit = 64; while (gpit --) {
;
	lda     #$40
	sta     _gpit
L196A:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L196B
;
; rdt = *gp_ram ++; 
;
	lda     _gp_ram
	ldx     _gp_ram+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L196F
	inx
L196F:	sta     _gp_ram
	stx     _gp_ram+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
;
; if (rdct == 0) clear_update_list ();
;
	lda     _rdct
	bne     L1970
	jsr     _clear_update_list
;
; if (rdt != 0xff) { 
;
L1970:	lda     _rdt
	cmp     #$FF
	beq     L1973
;
; _t = rdt + rdm;
;
	lda     _rdt
	clc
	adc     _rdm
	sta     __t
;
; update_list_tile (); 
;
	jsr     _update_list_tile
;
; _x = (_x + 2) & 0x1f; if (_x == 0) _y += 2;
;
L1973:	lda     __x
	clc
	adc     #$02
	and     #$1F
	sta     __x
	lda     __x
	bne     L197C
	lda     #$02
	clc
	adc     __y
	sta     __y
;
; rdct ++; if (rdct == 4) { ppu_waitnmi (); rdct = 0; }
;
L197C:	lda     _rdct
	clc
	adc     #$01
	sta     _rdct
	cmp     #$04
	bne     L196A
	jsr     _ppu_waitnmi
	lda     #$00
	sta     _rdct
;
; }
;
	jmp     L196A
;
; }
;
L196B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ textbox_draw_text (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_textbox_draw_text: near

.segment	"CODE"

;
; rda = 1; // New line marker!
;
	lda     #$01
	sta     _rda
;
; rdy = 13;
;
	lda     #$0D
L277E:	sta     _rdy
;
; while (rdt = *gp_gen ++) {
;
L198B:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L198F
	inx
L198F:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
	tax
	beq     L198C
;
; if (rda) { clear_update_list (); rda = 0; gp_addr = 0x2000 + rdm + (rdy << 5); }
;
	lda     _rda
	beq     L1990
	jsr     _clear_update_list
	lda     #$00
	sta     _rda
	lda     _rdm
	sta     ptr1
	lda     #$00
	clc
	adc     #$20
	sta     ptr1+1
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     ptr1
	sta     _gp_addr
	lda     tmp1
	adc     ptr1+1
	sta     _gp_addr+1
;
; if (rdt == '%') rda = 1; else { _n = rdt - 32; ul_putc (); }
;
L1990:	lda     _rdt
	cmp     #$25
	bne     L1998
	lda     #$01
	sta     _rda
	jmp     L199C
L1998:	lda     _rdt
	sec
	sbc     #$20
	sta     __n
	jsr     _ul_putc
;
; if (rda) { ppu_waitnmi (); rdy ++; }
;
L199C:	lda     _rda
	beq     L198B
	jsr     _ppu_waitnmi
	lda     _rdy
	clc
	adc     #$01
;
; } 
;
	jmp     L277E
;
; }
;
L198C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ textbox_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_textbox_do: near

.segment	"CODE"

;
; rdm = TEXT_BOX_FRAME_TILE_OFFSET; textbox_frame ();
;
	lda     #$20
	sta     _rdm
	jsr     _textbox_frame
;
; if (rdd) {
;
	lda     _rdd
	beq     L19A9
;
; 44, 103,
;
	jsr     decsp3
	lda     #$2C
	ldy     #$02
	sta     (sp),y
	lda     #$67
	dey
	sta     (sp),y
;
; 256-32,
;
	lda     #$E0
	dey
	sta     (sp),y
;
; spr_hs [rdd]);
;
	ldx     #$00
	lda     _rdd
	asl     a
	bcc     L2781
	inx
	clc
L2781:	adc     #<(_spr_hs)
	sta     ptr1
	txa
	adc     #>(_spr_hs)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; rdm = 8;
;
	lda     #$08
;
; } else rdm = 6;
;
	jmp     L2780
L19A9:	lda     #$06
L2780:	sta     _rdm
;
; textbox_draw_text ();
;
	jsr     _textbox_draw_text
;
; ppu_waitnmi ();
;
L19B7:	jsr     _ppu_waitnmi
;
; pad_read (); if (pad_this_frame & (PAD_A|PAD_B)) break;
;
	jsr     _pad_read
	lda     _pad_this_frame
	and     #$03
	beq     L19B7
;
; if (rdd) oam_hide_rest (256-32);
;
	lda     _rdd
	beq     L19BF
	lda     #$E0
	jsr     _oam_hide_rest
;
; rdm = 0; textbox_frame ();
;
L19BF:	lda     #$00
	sta     _rdm
	jsr     _textbox_frame
;
; clear_update_list ();
;
	jmp     _clear_update_list

.endproc

; ---------------------------------------------------------------
; void __near__ textbox_dialogue_do (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_textbox_dialogue_do: near

.segment	"CODE"

;
; for (gpjt = dfrom; gpjt <= dto; gpjt ++) {
;
	ldy     #$01
	lda     (sp),y
L2784:	sta     _gpjt
	ldx     #$00
	lda     _gpjt
	sec
	ldy     #$00
	sbc     (sp),y
	bcc     L19CB
	jne     incsp2
;
; rdd = dialogue_portraits [gpjt];
;
L19CB:	ldy     _gpjt
	lda     _dialogue_portraits,y
	sta     _rdd
;
; gp_gen = dialogue_texts [gpjt];
;
	lda     _gpjt
	asl     a
	bcc     L2783
	inx
	clc
L2783:	adc     #<(_dialogue_texts)
	sta     ptr1
	txa
	adc     #>(_dialogue_texts)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _gp_gen+1
	dey
	lda     (ptr1),y
	sta     _gp_gen
;
; textbox_do ();
;
	jsr     _textbox_do
;
; for (gpjt = dfrom; gpjt <= dto; gpjt ++) {
;
	lda     _gpjt
	clc
	adc     #$01
	jmp     L2784

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_load: near

.segment	"CODE"

;
; bankswitch (l_enems_chr_rombank [level]);
;
	ldy     _level
	lda     _l_enems_chr_rombank,y
	jsr     _bankswitch
;
; vram_adr (c_hotspots);
;
	lda     _c_hotspots
	ldx     _c_hotspots+1
	jsr     _vram_adr
;
; rda = VRAM_READ;  // Dummy read.
;
	lda     $2007
	sta     _rda
;
; for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
;
	lda     #$00
L2785:	sta     _gpit
	cmp     #$18
	bcs     L19E5
;
; ht [gpit] = VRAM_READ;
;
	ldy     _gpit
	lda     $2007
	sta     _ht,y
;
; hyx [gpit] = VRAM_READ;
;
	ldy     _gpit
	lda     $2007
	sta     _hyx,y
;
; hact [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _hact,y
;
; for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L2785
;
; }
;
L19E5:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_paint: near

.segment	"CODE"

;
; rda = hrt;
;
	lda     _hrt
	sta     _rda
;
; if (hrt == HOTSPOT_TYPE_RESONATOR && res_on) rda ++;
;
	lda     _hrt
	cmp     #$04
	bne     L1A01
	lda     _res_on
	beq     L1A01
	lda     _rda
	clc
	adc     #$01
	sta     _rda
;
; hrx, hry + SPRITE_ADJUST, 
;
L1A01:	jsr     decsp3
	lda     _hrx
	ldy     #$02
	sta     (sp),y
	lda     _hry
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2787
	sec
L2787:	sbc     #$10
	bcs     L2788
	sec
L2788:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [rda]
;
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L2789
	inx
	clc
L2789:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [rda]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_create: near

.segment	"CODE"

;
; if (ht [n_pant] && hact [n_pant]) {
;
	ldy     _n_pant
	lda     _ht,y
	beq     L1A12
	ldy     _n_pant
	lda     _hact,y
	beq     L1A12
;
; hrt = ht [n_pant];
;
	ldy     _n_pant
	lda     _ht,y
	sta     _hrt
;
; hrx = hyx [n_pant] << 4;
;
	ldy     _n_pant
	lda     _hyx,y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _hrx
;
; hry = hyx [n_pant] & 0xf0;
;
	ldy     _n_pant
	lda     _hyx,y
	and     #$F0
	sta     _hry
;
; } else hrt = 0;
;
	rts
L1A12:	lda     #$00
	sta     _hrt
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ propellers_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_propellers_do: near

.segment	"CODE"

;
; rdb = half_life << 1;
;
	lda     _half_life
	asl     a
	sta     _rdb
;
; gpit = prp_idx; while (gpit --) {
;
	lda     _prp_idx
	sta     _gpit
L1A32:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1A33
;
; rda = prp_yx [gpit];
;
	ldy     _gpit
	lda     _prp_yx,y
	sta     _rda
;
; ((rda & 0xf) << 1) | 
;
	ldx     #$00
	and     #$0F
	asl     a
	bcc     L278A
	inx
;
; ((((rda >> 3) & 0xfe) + TOP_ADJUST) << 5)
;
L278A:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rda
	jsr     asrax3
	ldx     #$00
	and     #$FE
	clc
	adc     #$06
	bcc     L1A42
	inx
L1A42:	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
;
; );
;
	ora     ptr1
	pha
;
; ((((rda >> 3) & 0xfe) + TOP_ADJUST) << 5)
;
	lda     tmp1
;
; );
;
	ora     ptr1+1
	tax
	pla
	pha
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
	pla
	sta     _gp_addr
;
; _n = rdb + PROPELLERS_BASE_PATTERN; ul_putc ();
;
	lda     _rdb
	clc
	adc     #$40
	sta     __n
	jsr     _ul_putc
;
; _n ++; ul_putc ();
;
	lda     __n
	clc
	adc     #$01
	sta     __n
	jsr     _ul_putc
;
; }
;
	jmp     L1A32
;
; }
;
L1A33:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ shines_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_shines_do: near

.segment	"CODE"

;
; if (shine_active_ct) {
;
	lda     _shine_active_ct
	beq     L1A50
;
; shine_active_ct --;
;
	lda     _shine_active_ct
	sec
	sbc     #$01
	sta     _shine_active_ct
;
; if (shine_active_ct >= 48) {
;
	cmp     #$30
	bcs     L278D
;
; }
;
	rts
;
; shine_active_x, 
;
L278D:	jsr     decsp4
	lda     _shine_active_x
	ldy     #$03
	sta     (sp),y
;
; shine_active_y, 
;
	lda     _shine_active_y
	dey
	sta     (sp),y
;
; SHINES_BASE_PATTERN + (rand8() & 1), 
;
	jsr     _rand8
	and     #$01
	clc
	adc     #$0A
	ldy     #$01
	sta     (sp),y
;
; SHINES_PALETTE, 
;
	lda     #$03
	dey
	sta     (sp),y
;
; );
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; } else {
;
	rts
;
; gpit = rand8 () & (SHINES_MAX - 1);
;
L1A50:	jsr     _rand8
	and     #$07
	sta     _gpit
;
; if (gpit < max_shines) {
;
	lda     _gpit
	cmp     _max_shines
	bcs     L1A62
;
; shine_active_ct = 64;
;
	lda     #$40
	sta     _shine_active_ct
;
; rda = shines [gpit];
;
	ldy     _gpit
	lda     _shines,y
	sta     _rda
;
; shine_active_y = (rda & 0xf0) + (rand8 () & 7) + SPRITE_ADJUST + 16;
;
	and     #$F0
	jsr     pusha0
	jsr     _rand8
	and     #$07
	jsr     tosadda0
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L278B
	sec
L278B:	sbc     #$10
	bcs     L278C
	sec
L278C:	sbc     #$01
	clc
	adc     #$10
	sta     _shine_active_y
;
; shine_active_x = ((rda & 0x0f) << 4) + (rand8 () & 7);
;
	lda     _rda
	ldx     #$00
	and     #$0F
	jsr     shlax4
	jsr     pushax
	jsr     _rand8
	and     #$07
	jsr     tosadda0
	sta     _shine_active_x
;
; }
;
L1A62:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ interactives_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_interactives_paint: near

.segment	"CODE"

;
; gpit = interactives_index; while (gpit --) {
;
	lda     _interactives_index
	sta     _gpit
L1A7B:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1A7C
;
; rda = interactives_f [gpit];
;
	ldy     _gpit
	lda     _interactives_f,y
	sta     _rda
;
; interactives_yx [gpit] << 4, (interactives_yx [gpit] & 0xf0) + SPRITE_ADJUST,
;
	jsr     decsp3
	ldy     _gpit
	lda     _interactives_yx,y
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	ldy     _gpit
	lda     _interactives_yx,y
	and     #$F0
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2790
	sec
L2790:	sbc     #$10
	bcs     L2791
	sec
L2791:	sbc     #$01
	ldy     #$01
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [rda & 0x80 ? flags [rda & 0x7f] : rda]
;
	lda     _rda
	and     #$80
	beq     L1A92
	lda     _rda
	and     #$7F
	sta     ptr1
	tya
	clc
	adc     #>(_flags)
	sta     ptr1+1
	ldy     #<(_flags)
	lda     (ptr1),y
	jmp     L278F
L1A92:	lda     _rda
L278F:	ldx     #$00
	asl     a
	bcc     L2792
	inx
	clc
L2792:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [rda & 0x80 ? flags [rda & 0x7f] : rda]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	jmp     L1A7B
;
; }
;
L1A7C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ interactives_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_interactives_create: near

.segment	"CODE"

;
; gp_gen = c_interactives; if (!gp_gen) return;
;
	lda     _c_interactives
	sta     _gp_gen
	lda     _c_interactives+1
	sta     _gp_gen+1
	lda     _gp_gen
	ora     _gp_gen+1
	bne     L2794
;
; }
;
	rts
;
; interactives_index = 0;
;
L2794:	lda     #$00
	sta     _interactives_index
;
; while ((rda = *gp_gen ++) != 0xff) {
;
L1A9E:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1AA3
	inx
L1AA3:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
	cmp     #$FF
	bne     L2795
;
; }
;
	rts
;
; if (rda == n_pant) {
;
L2795:	lda     _n_pant
	cmp     _rda
	bne     L1AA4
;
; interactives_yx [interactives_index] = 16 + *gp_gen ++;
;
	lda     #<(_interactives_yx)
	ldx     #>(_interactives_yx)
	clc
	adc     _interactives_index
	bcc     L1AA8
	inx
L1AA8:	jsr     pushax
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1AAA
	inx
L1AAA:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	clc
	adc     #$10
	jsr     staspidx
;
; interactives_f [interactives_index ++] = *gp_gen ++;
;
	lda     _interactives_index
	pha
	clc
	adc     #$01
	sta     _interactives_index
	pla
	clc
	adc     #<(_interactives_f)
	tay
	lda     #$00
	adc     #>(_interactives_f)
	tax
	tya
	jsr     pushax
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1AAF
	inx
L1AAF:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	jsr     staspidx
;
; } else gp_gen += 2;
;
	jmp     L1A9E
L1AA4:	lda     #$02
	clc
	adc     _gp_gen
	sta     _gp_gen
	jcc     L1A9E
	inc     _gp_gen+1
;
; }
;
	jmp     L1A9E

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_init: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it --) {
;
	lda     #$04
	sta     _coco_it
L1AB7:	lda     _coco_it
	pha
	sec
	sbc     #$01
	sta     _coco_it
	pla
	tax
	beq     L1AB8
;
; coco_slots [coco_it] = coco_it;
;
	ldy     _coco_it
	lda     _coco_it
	sta     _coco_slots,y
;
; coco_on [coco_it] = 0;
;
	ldy     _coco_it
	lda     #$00
	sta     _coco_on,y
;
; }
;
	jmp     L1AB7
;
; coco_slots_i = COCOS_MAX;
;
L1AB8:	lda     #$04
	sta     _coco_slots_i
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_shoot_aimed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_shoot_aimed: near

.segment	"CODE"

;
; rdct = distance ();
;
	jsr     _distance
	sta     _rdct
;
; if (rdct > COCO_FAIR_D && coco_slots_i) {
;
	cmp     #$21
	bcc     L1AC9
	lda     _coco_slots_i
	bne     L1AC8
L1AC9:	rts
;
; coco_slots_i --; coco_it = coco_slots [coco_slots_i];
;
L1AC8:	lda     _coco_slots_i
	sec
	sbc     #$01
	sta     _coco_slots_i
	ldy     _coco_slots_i
	lda     _coco_slots,y
	sta     _coco_it
;
; coco_x [coco_it] = rdx << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L279E
	inx
	clc
L279E:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldx     #$00
	lda     _rdx
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_y [coco_it] = rdy << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L279F
	inx
	clc
L279F:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	jsr     aslax2
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; rds16 = COCO_V * rda / rdct; coco_vx [coco_it] = ADD_SIGN2 (px, coco_x [coco_it], rds16);
;
	lda     #$80
	jsr     pusha0
	lda     _rda
	jsr     tosumula0
	jsr     pushax
	lda     _rdct
	jsr     tosudiva0
	sta     _rds16
	stx     _rds16+1
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27A0
	inx
	clc
L27A0:	adc     #<(_coco_vx)
	tay
	txa
	adc     #>(_coco_vx)
	tax
	tya
	jsr     pushax
	lda     _px
	ldx     _px+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27A1
	inx
	clc
L27A1:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bne     L1ADF
	ldx     #$00
	txa
	jmp     L1AEC
L1ADF:	lda     _px
	ldx     _px+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27A2
	inx
	clc
L27A2:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bmi     L1AE9
	beq     L1AE9
	lda     _rds16
	ldx     _rds16+1
	jmp     L1AEC
L1AE9:	lda     _rds16
	ldx     _rds16+1
	jsr     negax
L1AEC:	ldy     #$00
	jsr     staxspidx
;
; rds16 = COCO_V * rdb / rdct; coco_vy [coco_it] = ADD_SIGN2 (py, coco_y [coco_it], rds16);
;
	lda     #$80
	jsr     pusha0
	lda     _rdb
	jsr     tosumula0
	jsr     pushax
	lda     _rdct
	jsr     tosudiva0
	sta     _rds16
	stx     _rds16+1
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27A3
	inx
	clc
L27A3:	adc     #<(_coco_vy)
	tay
	txa
	adc     #>(_coco_vy)
	tax
	tya
	jsr     pushax
	lda     _py
	ldx     _py+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27A4
	inx
	clc
L27A4:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bne     L1AF9
	ldx     #$00
	txa
	jmp     L1B06
L1AF9:	lda     _py
	ldx     _py+1
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27A5
	inx
	clc
L27A5:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosicmp
	bmi     L1B03
	beq     L1B03
	lda     _rds16
	ldx     _rds16+1
	jmp     L1B06
L1B03:	lda     _rds16
	ldx     _rds16+1
	jsr     negax
L1B06:	ldy     #$00
	jsr     staxspidx
;
; coco_on [coco_it] = 1;
;
	ldy     _coco_it
	lda     #$01
	sta     _coco_on,y
;
; sfx_play (SFX_COCO, 2);
;
	lda     #$0A
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_shoot_linear (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_shoot_linear: near

.segment	"CODE"

;
; if (coco_slots_i == 0) return;
;
	lda     _coco_slots_i
	bne     L27B2
;
; }
;
	rts
;
; coco_slots_i --; coco_it = coco_slots [coco_slots_i];
;
L27B2:	lda     _coco_slots_i
	sec
	sbc     #$01
	sta     _coco_slots_i
	ldy     _coco_slots_i
	lda     _coco_slots,y
	sta     _coco_it
;
; coco_x [coco_it] = rdx << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27AC
	inx
	clc
L27AC:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldx     #$00
	lda     _rdx
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_y [coco_it] = rdy << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27AD
	inx
	clc
L27AD:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	jsr     aslax2
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_vx [coco_it] = coco_dx [rda];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27AE
	inx
	clc
L27AE:	adc     #<(_coco_vx)
	tay
	txa
	adc     #>(_coco_vx)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L27AF
	inx
	clc
L27AF:	adc     #<(_coco_dx)
	sta     ptr1
	txa
	adc     #>(_coco_dx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; coco_vy [coco_it] = coco_dy [rda];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27B0
	inx
	clc
L27B0:	adc     #<(_coco_vy)
	tay
	txa
	adc     #>(_coco_vy)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L27B1
	inx
	clc
L27B1:	adc     #<(_coco_dy)
	sta     ptr1
	txa
	adc     #>(_coco_dy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; coco_on [coco_it] = 1;
;
	ldy     _coco_it
	lda     #$01
	sta     _coco_on,y
;
; sfx_play (SFX_COCO, 2);
;
	lda     #$0A
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_destroy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_destroy: near

.segment	"CODE"

;
; coco_on [coco_it] = 0;
;
	ldy     _coco_it
	lda     #$00
	sta     _coco_on,y
;
; coco_slots [coco_slots_i] = coco_it; coco_slots_i ++;
;
	ldy     _coco_slots_i
	lda     _coco_it
	sta     _coco_slots,y
	lda     _coco_slots_i
	clc
	adc     #$01
	sta     _coco_slots_i
;
; sfx_play (SFX_DUMMY1, 2);
;
	lda     #$05
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_do: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it --) if (coco_on [coco_it]) {
;
	lda     #$04
	sta     _coco_it
L1B3E:	lda     _coco_it
	pha
	sec
	sbc     #$01
	sta     _coco_it
	pla
	tax
	bne     L27CB
;
; }
;
	rts
;
; coco_it = COCOS_MAX; while (coco_it --) if (coco_on [coco_it]) {
;
L27CB:	ldy     _coco_it
	lda     _coco_on,y
	beq     L1B3E
;
; coco_x [coco_it] += coco_vx [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27BD
	inx
	clc
L27BD:	adc     #<(_coco_x)
	tay
	txa
	adc     #>(_coco_x)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27BE
	inx
	clc
L27BE:	adc     #<(_coco_vx)
	sta     ptr1
	txa
	adc     #>(_coco_vx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; coco_y [coco_it] += coco_vy [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27BF
	inx
	clc
L27BF:	adc     #<(_coco_y)
	tay
	txa
	adc     #>(_coco_y)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27C0
	inx
	clc
L27C0:	adc     #<(_coco_vy)
	sta     ptr1
	txa
	adc     #>(_coco_vy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; if (coco_x [coco_it] < 0 || coco_x [coco_it] > 248<<FIXBITS || coco_y [coco_it] < 16<<FIXBITS || coco_y [coco_it] > 200<<FIXBITS) {
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27C1
	inx
	clc
L27C1:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	cpx     #$80
	bcs     L1B4E
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27C2
	inx
	clc
L27C2:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$3E
	bvs     L1B51
	eor     #$80
L1B51:	bmi     L1B4E
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27C3
	inx
	clc
L27C3:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$00
	txa
	sbc     #$04
	bvc     L1B53
	eor     #$80
L1B53:	bmi     L1B4E
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27C4
	inx
	clc
L27C4:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$32
	bvs     L1B55
	eor     #$80
L1B55:	bpl     L1B4D
;
; cocos_destroy ();
;
L1B4E:	jsr     _cocos_destroy
;
; continue;
;
	jmp     L1B3E
;
; rdx = coco_x [coco_it] >> 6;
;
L1B4D:	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27C5
	inx
	clc
L27C5:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     _rdx
;
; rdy = coco_y [coco_it] >> 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L27C6
	inx
	clc
L27C6:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     _rdy
;
; oam_index = oam_spr (rdx, rdy + SPRITE_ADJUST, COCO_PATTERN, COCO_PALETTE, oam_index);
;
	jsr     decsp4
	lda     _rdx
	ldy     #$03
	sta     (sp),y
	lda     _rdy
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L27C7
	sec
L27C7:	sbc     #$10
	bcs     L27C8
	sec
L27C8:	sbc     #$01
	dey
	sta     (sp),y
	lda     #$0C
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; rdm = map_attr [((rdx + 4) >> 4) | ((rdy + 4 - 16) & 0xf0)];
;
	ldx     #$00
	lda     _rdx
	clc
	adc     #$04
	bcc     L1B6E
	inx
L1B6E:	jsr     shrax4
	sta     ptr1
	stx     ptr1+1
	lda     _rdy
	clc
	adc     #$04
	sec
	sbc     #$10
	and     #$F0
	ora     ptr1
	sta     ptr1
	lda     ptr1+1
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _rdm
;
; if (rdm & 8) {
;
	and     #$08
	beq     L1B73
;
; cocos_destroy (); continue;
;
	jsr     _cocos_destroy
	jmp     L1B3E
;
; if (pstate == EST_NORMAL && 
;
L1B73:	lda     _pstate
	jne     L1B3E
;
; rdx + 7 >= prx && 
;
	tax
	lda     _rdx
	clc
	adc     #$07
	bcc     L1B79
	inx
L1B79:	cmp     _prx
	txa
	sbc     #$00
	jcc     L1B3E
;
; rdx <= prx + 7 && 
;
	lda     _rdx
	jsr     pusha0
	lda     _prx
	clc
	adc     #$07
	bcc     L1B7A
	ldx     #$01
L1B7A:	jsr     tosicmp
	beq     L27CA
	jcs     L1B3E
;
; rdy + 7 + PLAYER_COLLISION_VSTRETCH_FG >= pry && 
;
L27CA:	ldx     #$00
	lda     _rdy
	clc
	adc     #$07
	bcc     L27C9
	inx
	clc
L27C9:	adc     #$04
	bcc     L1B7C
	inx
L1B7C:	cmp     _pry
	txa
	sbc     #$00
	jcc     L1B3E
;
; rdy <= pry + 12
;
	lda     _rdy
	jsr     pusha0
	lda     _pry
;
; ) {
;
	clc
	adc     #$0C
	bcc     L1B7D
	ldx     #$01
L1B7D:	jsr     tosicmp
	bcc     L1B77
	jne     L1B3E
;
; pkill = 1;
;
L1B77:	lda     #$01
	sta     _pkill
;
; cocos_destroy ();
;
	jsr     _cocos_destroy
;
; }
;
	jmp     L1B3E

.endproc

; ---------------------------------------------------------------
; void __near__ player_register_safe_spot (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_register_safe_spot: near

.segment	"CODE"

;
; px_safe = px;
;
	lda     _px
	sta     _px_safe
	lda     _px+1
	sta     _px_safe+1
;
; py_safe = py;
;
	lda     _py
	sta     _py_safe
	lda     _py+1
	sta     _py_safe+1
;
; n_pant_safe = n_pant;
;
	lda     _n_pant
	sta     _n_pant_safe
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_stop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_stop: near

.segment	"CODE"

;
; pvx = pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
	sta     _pvx
	sta     _pvx+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; player_stop ();
;
	jsr     _player_stop
;
; pfacing = 0;
;
	lda     #$00
	sta     _pfacing
;
; pfr = pctfr = 0;
;
	sta     _pctfr
	sta     _pfr
;
; pj = pctj = 0;
;
	sta     _pctj
	sta     _pj
;
; psprid = 0;
;
	sta     _psprid
;
; pkeys = 0;
;
	sta     _pkeys
;
; pgotten = 0;
;
	sta     _pgotten
;
; pfiring = 0;
;
	sta     _pfiring
;
; pkilled = 0;
;
	sta     _pkilled
;
; pstate = EST_NORMAL;
;
	sta     _pstate
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; pinv = HS_OBJ_EMPTY; 
;
	lda     #$01
	sta     _pinv
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_render (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_render: near

.segment	"CODE"

;
; if (pstate == EST_NORMAL || half_life) 
;
	lda     _pstate
	beq     L1BA8
	lda     _half_life
	bne     L1BA8
	rts
;
; prx, pry + SPRITE_ADJUST, 
;
L1BA8:	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L27CD
	sec
L27CD:	sbc     #$10
	bcs     L27CE
	sec
L27CE:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_player [psprid]
;
	ldx     #$00
	lda     _psprid
	asl     a
	bcc     L27CF
	inx
	clc
L27CF:	adc     #<(_spr_player)
;
; );
;
	sta     ptr1
;
; spr_player [psprid]
;
	txa
	adc     #>(_spr_player)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_kill: near

.segment	"CODE"

;
; pkill = phit = 0;
;
	lda     #$00
	sta     _phit
	sta     _pkill
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (plife) plife --; else game_over = 1;
;
	lda     _plife
	beq     L1BBC
	lda     _plife
	sec
	sbc     #$01
	sta     _plife
	jmp     L1BBF
L1BBC:	lda     #$01
	sta     _game_over
;
; pstate = EST_PARP;
;
L1BBF:	lda     #$02
	sta     _pstate
;
; pctstate = 100; 
;
	lda     #$64
	sta     _pctstate
;
; use_ct = 0;
;
	lda     #$00
	sta     _use_ct
;
; px = px_safe; prx = px >> FIXBITS;
;
	lda     _px_safe
	ldx     _px_safe+1
	sta     _px
	stx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
;
; py = py_safe; pry = py >> FIXBITS;
;
	lda     _py_safe
	ldx     _py_safe+1
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; n_pant = n_pant_safe;
;
	lda     _n_pant_safe
	sta     _n_pant
;
; music_pause (1);
;
	lda     #$01
	jsr     _music_pause
;
; delay (60);
;
	lda     #$3C
	jsr     _delay
;
; player_stop ();
;
	jsr     _player_stop
;
; music_pause (0);
;
	lda     #$00
	jmp     _music_pause

.endproc

; ---------------------------------------------------------------
; void __near__ player_process_tile (int, int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_process_tile: near

.segment	"CODE"

;
; if (y0) y0 --;
;
	ldy     #$05
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L1BDA
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$01
	bcs     L1BDD
	dex
L1BDD:	jsr     staxysp
;
; y1=x1;//Shutup, compiler!
;
L1BDA:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     stax0sp
;
; at == 10 &&
;
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	jne     L1BE0
	cmp     #$0A
	jne     L1BE0
;
; ) {
;
	lda     _pkeys
	jeq     L1BE0
;
; _x = x0; _y = y0; _t = 0; map_set ();
;
	ldy     #$06
	lda     (sp),y
	sta     __x
	ldy     #$04
	lda     (sp),y
	sta     __y
	stx     __t
	jsr     _map_set
;
; gp_gen = (unsigned char *) c_locks;
;
	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L1BF0:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1BF1
;
; rda = *gp_gen ++; rdb = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1BF5
	inx
L1BF5:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L1BF8
	inx
L1BF8:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdb
;
; if (n_pant == rda && COORDS (x0, y0) == rdb) {
;
	lda     _rda
	cmp     _n_pant
	bne     L1BF0
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     aslax4
	ldy     #$06
	ora     (sp),y
	pha
	txa
	iny
	ora     (sp),y
	tax
	pla
	cpx     #$00
	bne     L1BF0
	cmp     _rdb
	bne     L1BF0
;
; lkact [gpit] = 0;
;
	ldy     _gpit
	txa
	sta     _lkact,y
;
; }
;
	jmp     L1BF0
;
; pkeys --;
;
L1BF1:	lda     _pkeys
	sec
	sbc     #$01
	sta     _pkeys
;
; sfx_play (SFX_TILE, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; } else {
;
	jmp     L1C09
;
; no_ct = 100;
;
L1BE0:	lda     #$64
	sta     _no_ct
;
; }
;
L1C09:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; if (pskip) { pskip = 0; goto player_justframe; }
;
	lda     _pskip
	beq     L1C0D
	lda     #$00
	sta     _pskip
	jmp     L1E5E
;
; if (use_ct) {
;
L1C0D:	lda     _use_ct
	beq     L1C12
;
; if (use_sub_ct) use_sub_ct --; else {
;
	lda     _use_sub_ct
	beq     L1C14
	lda     _use_sub_ct
	sec
	sbc     #$01
	sta     _use_sub_ct
	jmp     L1C22
;
; if (use_ct < USE_ANIM_MAX_FRAMES) {
;
L1C14:	lda     _use_ct
	cmp     #$0D
	bcs     L1C18
;
; use_ct ++;
;
	lda     _use_ct
	clc
	adc     #$01
	sta     _use_ct
;
; use_sub_ct = (use_ct == USE_ANIM_MAX_FRAMES) ? 50 : USE_ANIM_FRAMES_PER_STEP;
;
	cmp     #$0D
	bne     L1C1E
	lda     #$32
	jmp     L1C20
L1C1E:	lda     #$04
L1C20:	sta     _use_sub_ct
;
; } else use_ct = 0;
;
	jmp     L1C22
L1C18:	lda     #$00
	sta     _use_ct
;
; a_button = b_button = i = 0;
;
L1C22:	lda     #$00
	sta     _i
	sta     _b_button
	sta     _a_button
;
; hitv = hith = 0;
;
L1C12:	sta     _hith
	sta     _hitv
;
; pushed_any = 0;
;
	sta     _pushed_any
;
; pnotsafe = 0;
;
	sta     _pnotsafe
;
; ppossee = 0;
;
	sta     _ppossee
;
; cx1 = prx >> 4; cx2 = (prx + 7) >> 4;
;
	tax
	lda     _prx
	jsr     asrax4
	sta     _cx1
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L1C37
	inx
L1C37:	jsr     shrax4
	sta     _cx2
;
; cy1 = cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L1C3C
	inx
L1C3C:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; rdb = ponladder;
;
	lda     _ponladder
	sta     _rdb
;
; ponladder = (!pj && at1 == 32 && at2 == 32);
;
	lda     _pj
	bne     L1C43
	lda     _at1
	cmp     #$20
	bne     L1C43
	lda     _at2
	cmp     #$20
	beq     L1C42
L1C43:	lda     #$00
	jmp     L1C44
L1C42:	lda     #$01
L1C44:	sta     _ponladder
;
; rda = pfloating;
;
	lda     _pfloating
	sta     _rda
;
; pfloating = (at1 == 64 || at2 == 64);
;
	lda     _at1
	cmp     #$40
	beq     L1C49
	lda     _at2
	cmp     #$40
	beq     L1C49
	lda     #$00
	jmp     L1C4A
L1C49:	lda     #$01
L1C4A:	sta     _pfloating
;
; if (rda != pfloating) sfx_play (SFX_FLOAT, 0);
;
	cmp     _rda
	beq     L1C4B
	lda     #$10
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (springs_on && cy1 < 12) {
;
L1C4B:	lda     _springs_on
	beq     L1C50
	lda     _cy1
	cmp     #$0C
	bcs     L1C50
;
; _t = SPRING_SPIKE_TILE; 
;
	lda     #$0B
	sta     __t
;
; if (QTILE (cx1, cy1 + 1) == SPRING_TILE) { _x = cx1; _y = cy1; map_set (); }
;
	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L1C60
	inx
L1C60:	jsr     shlax4
	ora     _cx1
	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	cmp     #$0A
	bne     L1C56
	lda     _cx1
	sta     __x
	lda     _cy1
	sta     __y
	jsr     _map_set
;
; if (QTILE (cx2, cy1 + 1) == SPRING_TILE) { _x = cx2; _y = cy1; map_set (); }
;
L1C56:	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L1C70
	inx
L1C70:	jsr     shlax4
	ora     _cx2
	sta     ptr1
	txa
	clc
	adc     #>(_map_buff)
	sta     ptr1+1
	ldy     #<(_map_buff)
	lda     (ptr1),y
	cmp     #$0A
	bne     L1C66
	lda     _cx2
	sta     __x
	lda     _cy1
	sta     __y
	jsr     _map_set
;
; sfx_play (SFX_SPRING, 1);
;
L1C66:	lda     #$0B
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; if (ponladder == 0) {
;
L1C50:	lda     _ponladder
	bne     L1C88
;
; if (i & PAD_DOWN) {
;
	lda     _i
	and     #$20
	beq     L1C7B
;
; cy1 = cy2 = (pry + 16) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L1C81
	inx
L1C81:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; ponladder = (!pj && at1 == 32 && at2 == 32);
;
	lda     _pj
	bne     L1C86
	lda     _at1
	cmp     #$20
	bne     L1C86
	lda     _at2
	cmp     #$20
	beq     L1C85
L1C86:	lda     #$00
	jmp     L1C87
L1C85:	lda     #$01
L1C87:	sta     _ponladder
;
; if ((i & PAD_UP) && rdb) pvy = 0;
;
L1C7B:	lda     _i
	and     #$10
	beq     L1C88
	lda     _rdb
	beq     L1C88
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; if (ponladder) {
;
L1C88:	lda     _ponladder
	beq     L1C8F
;
; if (i & PAD_UP) {
;
	lda     _i
	and     #$10
	beq     L1C91
;
; pvy = -PLAYER_VY_LADDERS;
;
	ldx     #$FF
	lda     #$A0
;
; } else if (i & PAD_DOWN) {
;
	jmp     L27DF
L1C91:	lda     _i
	and     #$20
	beq     L1C96
;
; pvy = PLAYER_VY_LADDERS;
;
	ldx     #$00
	lda     #$60
;
; } else pvy = 0;
;
	jmp     L27DF
L1C96:	tax
L27DF:	sta     _pvy
	stx     _pvy+1
;
; cy1 = cy2 = (pry + 4) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$04
	bcc     L1CA1
	inx
L1CA1:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; phalfladder = (at1 != 32) && (at2 != 32);
;
	lda     _at1
	cmp     #$20
	beq     L1CA6
	lda     _at2
	cmp     #$20
	bne     L1CA4
L1CA6:	lda     #$00
	jmp     L1CA8
L1CA4:	lda     #$01
L1CA8:	sta     _phalfladder
;
; } else
;
	jmp     L1CBA
;
; if (pfloating) {
;
L1C8F:	lda     _pfloating
	beq     L1CAA
;
; pvy -= PLAYER_AY_FLOAT; 
;
	lda     _pvy
	sec
	sbc     #$10
	sta     _pvy
	bcs     L1CAE
	dec     _pvy+1
;
; if (pvy < -PLAYER_VY_FLOAT_MAX) pvy = -PLAYER_VY_FLOAT_MAX;
;
L1CAE:	lda     _pvy
	cmp     #$00
	lda     _pvy+1
	sbc     #$FF
	bvc     L1CB1
	eor     #$80
L1CB1:	bpl     L1CBA
	ldx     #$FF
;
; } else
;
	jmp     L27E4
;
; if (!pj) {
;
L1CAA:	lda     _pj
	bne     L1CBA
;
; pvy += PLAYER_G;
;
	lda     #$10
	clc
	adc     _pvy
	sta     _pvy
	bcc     L1CB9
	inc     _pvy+1
;
; if (pvy > PLAYER_VY_FALLING_MAX) pvy = PLAYER_VY_FALLING_MAX; 
;
L1CB9:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$01
	bvs     L1CBC
	eor     #$80
L1CBC:	bpl     L1CBA
	ldx     #$01
L27E4:	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; if (pgotten) pvy = 0;   
;
L1CBA:	lda     _pgotten
	beq     L1CBF
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; cx1 = prx >> 4;
;
L1CBF:	tax
	lda     _prx
	jsr     asrax4
	sta     _cx1
;
; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L1CC8
	inx
L1CC8:	jsr     shrax4
	sta     _cx2
;
; py += pvy;
;
	lda     _pvy
	clc
	adc     _py
	sta     _py
	lda     _pvy+1
	adc     _py+1
	sta     _py+1
;
; if (py < 0) py = 0;
;
	ldx     _py+1
	cpx     #$80
	bcc     L1CCB
	lda     #$00
	sta     _py
	sta     _py+1
;
; prx = px >> FIXBITS;
;
L1CCB:	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
;
; pry = py >> FIXBITS;
;
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; rds16 = pvy + pgtmy;
;
	lda     _pvy
	clc
	adc     _pgtmy
	sta     _rds16
	lda     _pvy+1
	adc     _pgtmy+1
	tax
	stx     _rds16+1
;
; if (rds16 < 0)
;
	cpx     #$80
	jcc     L1CD5
;
; cy1 = cy2 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;   
;
	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L1CDD
	lda     _at2
	and     #$08
	beq     L1CDC
;
; pry = ((cy1 + 1) << 4) + PLAYER_COLLISION_VSTRETCH_BG;
;
L1CDD:	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L1CE5
	inx
L1CE5:	jsr     shlax4
	clc
	adc     #$FC
	sta     _pry
	txa
	adc     #$FF
;
; pvy = 0; py = pry << FIXBITS;
;
	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L1D5E
L1CDC:	lda     _at1
	and     #$01
	bne     L1CF0
	lda     _at2
	and     #$01
	beq     L1CEF
;
; hitv = 1;
;
L1CF0:	lda     #$01
	sta     _hitv
;
; else if ((at1 == 2) || (at2 == 2)) {
;
	jmp     L1D5E
L1CEF:	lda     _at1
	cmp     #$02
	beq     L1CF8
	lda     _at2
	cmp     #$02
	jne     L1D5E
;
; if (pctj > 2) pj = 0;
;
L1CF8:	lda     _pctj
	cmp     #$03
	jcc     L1D5E
	lda     #$00
	sta     _pj
;
; } else if (rds16 > 0)
;
	jmp     L1D5E
L1CD5:	lda     _rds16
	cmp     #$01
	lda     _rds16+1
	sbc     #$00
	bvs     L1D03
	eor     #$80
L1D03:	jpl     L1D5E
;
; cy1 = cy2 = (pry + 16) >> 4; 
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L1D08
	inx
L1D08:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points (); 
;
	jsr     _cm_two_points
;
; pry < ((cy1 - 1) << 4) + 4 && 
;
	lda     _pry
	jsr     pusha0
	lda     _cy1
	sec
	sbc     #$01
	bcs     L1D0E
	ldx     #$FF
L1D0E:	jsr     shlax4
	clc
	adc     #$04
	bcc     L1D0F
	inx
L1D0F:	jsr     tosicmp
	jcs     L1D0A
;
; (at1 & 12) || (at2 & 12)
;
	lda     _at1
	and     #$0C
	bne     L1D0B
	lda     _at2
	and     #$0C
;
; || (!ponladder && ((at1 & 32) && at2 & 32))
;
	bne     L1D0B
	lda     _ponladder
	jne     L1D0A
	lda     _at1
	and     #$20
	jeq     L1D0A
	lda     _at2
	and     #$20
	jeq     L1D0A
;
; pvy = 0; pry = ((cy1 - 1) << 4);py = pry << FIXBITS;
;
L1D0B:	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _cy1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; ppossee = 1;
;
	sta     _ppossee
;
; cfx = 0;
;
	lda     #$00
	sta     _cfx
;
; if ((at1 & 40) == 40) { if (at1 & 1) cfx = pgtmx = PLAYER_VX_CONVEYORS; else cfx = pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; } 
;
	lda     _at1
	and     #$28
	cmp     #$28
	bne     L1D2E
	lda     _at1
	and     #$01
	beq     L1D32
	ldx     #$00
	lda     #$40
	jmp     L27E5
L1D32:	ldx     #$FF
	lda     #$C0
L27E5:	sta     _pgtmx
	stx     _pgtmx+1
	sta     _cfx
	lda     #$01
	sta     _pgotten
;
; if (cx1 != cx2) if ((at2 & 40) == 40) { if (at2 & 1) cfx = pgtmx = PLAYER_VX_CONVEYORS; else cfx = pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; } 
;
L1D2E:	lda     _cx2
	cmp     _cx1
	beq     L1D3F
	lda     _at2
	and     #$28
	cmp     #$28
	bne     L1D3F
	lda     _at2
	and     #$01
	beq     L1D43
	ldx     #$00
	lda     #$40
	jmp     L27E6
L1D43:	ldx     #$FF
	lda     #$C0
L27E6:	sta     _pgtmx
	stx     _pgtmx+1
	sta     _cfx
	lda     #$01
	sta     _pgotten
;
; if ((at1 & 1) || (at2 & 1)) pnotsafe = 1; 
;
L1D3F:	lda     _at1
	and     #$01
	bne     L1D4F
	lda     _at2
	and     #$01
	beq     L1D5E
L1D4F:	lda     #$01
	sta     _pnotsafe
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L1D5E
L1D0A:	lda     _at1
	and     #$01
	bne     L1D57
	lda     _at2
	and     #$01
	beq     L1D56
;
; hitv = 1;
;
L1D57:	lda     #$01
	sta     _hitv
;
; else {
;
	jmp     L1D5E
;
; if ((at1 == 2) || (at2 == 2)) {
;
L1D56:	lda     _at1
	cmp     #$02
	beq     L1D5F
	lda     _at2
	cmp     #$02
	bne     L1D5E
;
; pvy = PLAYER_VY_SINKING;
;
L1D5F:	ldx     #$00
	sta     _pvy
	stx     _pvy+1
;
; ppossee = 1;
;
	lda     #$01
	sta     _ppossee
;
; && !pj
;
L1D5E:	lda     _a_button
	beq     L1D76
;
; && (
;
	lda     _pj
	bne     L1D76
;
; pgotten || ppossee || hitv
;
	lda     _pgotten
	bne     L1D68
	lda     _ppossee
	bne     L1D68
;
; || ponladder
;
	lda     _hitv
	bne     L1D68
;
; )
;
	lda     _ponladder
	beq     L1D76
;
; sfx_play (SFX_JUMP, 0);
;
L1D68:	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pj = 1; pctj = 0; pvy = -PLAYER_VY_JUMP_INITIAL;
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
	ldx     #$FF
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; if (!(pgotten || hitv || pnotsafe)) {
;
	lda     _pgotten
	bne     L1D78
	lda     _hitv
	bne     L1D78
	lda     _pnotsafe
	beq     L1D79
L1D78:	lda     #$01
L1D79:	jsr     bnega
	beq     L1D76
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; if (i & PAD_A) {
;
L1D76:	lda     _i
	and     #$01
	beq     L27DA
;
; if (pj) {
;
	lda     _pj
	beq     L1D8F
;
; if (pctj < PLAYER_AY_JUMP) pvy -= (PLAYER_AY_JUMP - (pctj));
;
	lda     _pctj
	cmp     #$10
	bcs     L1D7F
	lda     #$10
	sec
	sbc     _pctj
	eor     #$FF
	sec
	adc     _pvy
	sta     _pvy
	lda     #$FF
	adc     _pvy+1
	sta     _pvy+1
;
; if (pvy < -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
L1D7F:	lda     _pvy
	cmp     #$00
	lda     _pvy+1
	sbc     #$FF
	bvc     L1D87
	eor     #$80
L1D87:	bpl     L1D85
	ldx     #$FF
	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; pctj ++; if (pctj == 16) pj = 0; 
;
L1D85:	lda     _pctj
	clc
	adc     #$01
	sta     _pctj
	cmp     #$10
	bne     L1D8F
	lda     #$00
;
; pj = 0; 
;
L27DA:	sta     _pj
;
; if (!(i & PAD_LEFT || i & PAD_RIGHT)) {
;
L1D8F:	lda     _i
	and     #$40
	bne     L1D94
	lda     _i
	and     #$80
	beq     L1D95
L1D94:	lda     #$01
L1D95:	jsr     bnega
	beq     L1DA6
;
; if (pvx > 0) {
;
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L1D98
	eor     #$80
L1D98:	bpl     L1D96
;
; pvx -= PLAYER_RX;
;
	lda     _pvx
	sec
	sbc     #$08
	sta     _pvx
	bcs     L1D9B
	dec     _pvx+1
;
; if (pvx < 0) pvx = 0;
;
L1D9B:	ldx     _pvx+1
	cpx     #$80
	bcc     L1DA6
;
; } else if (pvx < 0) {
;
	jmp     L27E7
L1D96:	ldx     _pvx+1
	cpx     #$80
	bcc     L1DA6
;
; pvx += PLAYER_RX;
;
	lda     #$08
	clc
	adc     _pvx
	sta     _pvx
	bcc     L1DA5
	inc     _pvx+1
;
; if (pvx > 0) pvx = 0;
;
L1DA5:	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L1DA8
	eor     #$80
L1DA8:	bpl     L1DA6
L27E7:	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; if (i & PAD_LEFT) {
;
L1DA6:	lda     _i
	and     #$40
	beq     L1DAF
;
; pfacing = CELL_FACING_LEFT;  
;
	lda     #$06
	sta     _pfacing
;
; if (pvx > -PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$81
	lda     _pvx+1
	sbc     #$FF
	bvs     L1DB1
	eor     #$80
L1DB1:	bpl     L1DAF
;
; pvx -= PLAYER_AX;
;
	lda     _pvx
	sec
	sbc     #$08
	sta     _pvx
	bcs     L1DAF
	dec     _pvx+1
;
; if (i & PAD_RIGHT) {
;
L1DAF:	lda     _i
	and     #$80
	beq     L1DB9
;
; pfacing = CELL_FACING_RIGHT;
;
	lda     #$00
	sta     _pfacing
;
; if (pvx < PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$80
	lda     _pvx+1
	sbc     #$00
	bvc     L1DBB
	eor     #$80
L1DBB:	bpl     L1DB9
;
; pvx += PLAYER_AX;
;
	lda     #$08
	clc
	adc     _pvx
	sta     _pvx
	bcc     L1DB9
	inc     _pvx+1
;
; px += pvx;
;
L1DB9:	lda     _pvx
	clc
	adc     _px
	sta     _px
	lda     _pvx+1
	adc     _px+1
	sta     _px+1
;
; if (pgotten) px += pgtmx;
;
	lda     _pgotten
	beq     L1DC1
	lda     _pgtmx
	clc
	adc     _px
	sta     _px
	lda     _pgtmx+1
	adc     _px+1
	sta     _px+1
;
; if (px < (4<<FIXBITS)) prx = 4;
;
L1DC1:	lda     _px
	cmp     #$00
	lda     _px+1
	sbc     #$01
	bvc     L1DC8
	eor     #$80
L1DC8:	bpl     L1DC5
	lda     #$04
;
; else if (px > (244<<FIXBITS)) prx = 244; 
;
	jmp     L27DC
L1DC5:	lda     _px
	cmp     #$01
	lda     _px+1
	sbc     #$3D
	bvs     L1DCF
	eor     #$80
L1DCF:	bpl     L1DCC
	lda     #$F4
;
; else prx = px >> FIXBITS;
;
	jmp     L27DC
L1DCC:	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
L27DC:	sta     _prx
;
; cy1 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;
;
	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L1DDB
	inx
L1DDB:	jsr     shrax4
	sta     _cy2
;
; rds16 = pvx + pgtmx;
;
	lda     _pvx
	clc
	adc     _pgtmx
	sta     _rds16
	lda     _pvx+1
	adc     _pgtmx+1
	sta     _rds16+1
;
; if (rds16)  {
;
	lda     _rds16
	ora     _rds16+1
	jeq     L1E1B
;
; if (rds16 < 0) {
;
	ldx     _rds16+1
	cpx     #$80
	bcc     L1DE0
;
; cx1 = cx2 = prx >> 4; 
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx2
	sta     _cx1
;
; rda = (cx1 + 1) << 4;
;
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; rdm = cx1 - 1;
;
	lda     _cx1
	sec
	sbc     #$01
	bcs     L1DFA
;
; } else {
;
	jmp     L1DFA
;
; cx1 = cx2 = (prx + 8) >> 4;
;
L1DE0:	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L1DF1
	inx
L1DF1:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 - 1) << 4) + 8;
;
	ldx     #$00
	lda     _cx1
	sec
	sbc     #$01
	bcs     L1DF6
	dex
L1DF6:	jsr     shlax4
	clc
	adc     #$08
	sta     _rda
;
; rdm = cx1 + 1;
;
	lda     _cx1
	clc
	adc     #$01
L1DFA:	sta     _rdm
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L1DFD
	lda     _at2
	and     #$08
	jeq     L1DFC
;
; pvx = 0; prx = rda; px = prx << FIXBITS; pfiring = 1;
;
L1DFD:	ldx     #$00
	txa
	sta     _pvx
	sta     _pvx+1
	lda     _rda
	sta     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
	lda     #$01
	sta     _pfiring
;
; if (at1 & 2) player_process_tile (at1, cx1, cy1, rdm, cy1);
;
	lda     _at1
	ldx     #$00
	and     #$02
	beq     L1E09
	ldy     #$0A
	jsr     subysp
	lda     _at1
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _rdm
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _player_process_tile
;
; if (cy1 != cy2) if (at2 & 2) player_process_tile (at2, cx1, cy2, rdm, cy2);
;
L1E09:	lda     _cy1
	jsr     pusha0
	lda     _cy2
	jsr     tosicmp0
	beq     L1E1B
	lda     _at2
	ldx     #$00
	and     #$02
	beq     L1E1B
	ldy     #$0A
	jsr     subysp
	lda     _at2
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy2
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _rdm
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy2
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _player_process_tile
;
; } else {
;
	jmp     L1E1B
;
; hith = ((at1 & 1) || (at2 & 1));
;
L1DFC:	lda     _at1
	and     #$01
	bne     L1E1E
	lda     _at2
	and     #$01
	beq     L1E21
L1E1E:	lda     #$01
L1E21:	sta     _hith
;
; phit = 0;
;
L1E1B:	lda     #$00
	sta     _phit
;
; if (hitv) { phit = 1; pvy = ADD_SIGN (-pvy, PLAYER_V_REBOUND); } 
;
	lda     _hitv
	beq     L1E24
	lda     #$01
	sta     _phit
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L1E2C
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L1E31
	eor     #$80
L1E31:	bpl     L1E32
	ldx     #$00
	lda     #$E0
	jmp     L1E39
L1E32:	ldx     #$FF
	lda     #$20
	jmp     L1E39
L1E2C:	tax
L1E39:	sta     _pvy
	stx     _pvy+1
;
; if (hith) { phit = 1; pvx = ADD_SIGN (-pvx, PLAYER_V_REBOUND); }
;
L1E24:	lda     _hith
	beq     L1E3C
	lda     #$01
	sta     _phit
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L1E44
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L1E49
	eor     #$80
L1E49:	bpl     L1E4A
	ldx     #$00
	lda     #$E0
	jmp     L1E51
L1E4A:	ldx     #$FF
	lda     #$20
	jmp     L1E51
L1E44:	tax
L1E51:	sta     _pvx
	stx     _pvx+1
;
; if (pstate != EST_PARP) if (phit) { prx = px >> FIXBITS; pry = py >> FIXBITS; pkill = 1; }
;
L1E3C:	lda     _pstate
	cmp     #$02
	beq     L1E5E
	lda     _phit
	beq     L1E5E
	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
	lda     #$01
	sta     _pkill
;
; rdx = (prx + 4) >> 4;
;
L1E5E:	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L1E65
	inx
L1E65:	jsr     shrax4
	sta     _rdx
;
; rda = (ATTR(rdx, pry >> 4) & 12) && pry < 192;
;
	ldx     #$00
	lda     _pry
	jsr     asrax4
	jsr     aslax4
	ora     _rdx
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	and     #$0C
	beq     L1E71
	lda     _pry
	cmp     #$C0
	bcc     L1E67
L1E71:	lda     #$00
	jmp     L1E72
L1E67:	lda     #$01
L1E72:	sta     _rda
;
; if (use_ct) {
;
	lda     _use_ct
	beq     L1E73
;
; psprid = CELL_USE + use_ct - 1;
;
	lda     _use_ct
	clc
	adc     #$0C
	sec
	sbc     #$01
;
; } else if (ponladder && !rda) {
;
	jmp     L27DD
L1E73:	lda     _ponladder
	beq     L1E7A
	lda     _rda
	bne     L1E7A
;
; if (phalfladder) psprid = CELL_CLIMB_HALF;
;
	lda     _phalfladder
	beq     L1E7E
	lda     #$1D
;
; else {
;
	jmp     L27DD
;
; if (pvy) ponladderctr ++;
;
L1E7E:	lda     _pvy
	ora     _pvy+1
	beq     L1E83
	lda     _ponladderctr
	clc
	adc     #$01
	sta     _ponladderctr
;
; psprid = CELL_CLIMB_CYCLE + ((ponladderctr >> 3) & 3);
;
L1E83:	ldx     #$00
	lda     _ponladderctr
	jsr     asrax3
	and     #$03
	clc
	adc     #$19
	bcc     L27DD
;
; } else {
;
	jmp     L27DD
;
; if (ppossee || pgotten || ponladder) {
;
L1E7A:	lda     _ppossee
	bne     L1E8D
	lda     _pgotten
	bne     L1E8D
	lda     _ponladder
	beq     L1E8C
;
; if (pvx > PLAYER_VX_MIN || pvx < -PLAYER_VX_MIN) {
;
L1E8D:	lda     _pvx
	cmp     #$21
	lda     _pvx+1
	sbc     #$00
	bvs     L1E92
	eor     #$80
L1E92:	bmi     L1E90
	lda     _pvx
	cmp     #$E0
	lda     _pvx+1
	sbc     #$FF
	bvc     L1E94
	eor     #$80
L1E94:	bpl     L1E8F
;
; psprid = CELL_WALK_CYCLE + ((prx >> 3) & 3);
;
L1E90:	ldx     #$00
	lda     _prx
	jsr     asrax3
	and     #$03
	clc
	adc     #$01
	bcc     L27DE
;
; } else {
;
	jmp     L27DE
;
; psprid = CELL_IDLE;
;
L1E8F:	lda     #$00
;
; } else {
;
	jmp     L27DE
;
; psprid = CELL_AIRBORNE;
;
L1E8C:	lda     #$05
L27DE:	sta     _psprid
;
; psprid += pfacing;
;
	lda     _pfacing
	clc
	adc     _psprid
L27DD:	sta     _psprid
;
; prx_old = prx;
;
	lda     _prx
	sta     _prx_old
;
; pry_old = pry;
;
	lda     _pry
	sta     _pry_old
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_persistent_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_persistent_load: near

.segment	"CODE"

;
; bankswitch (l_enems_chr_rombank [level]);
;
	ldy     _level
	lda     _l_enems_chr_rombank,y
	jsr     _bankswitch
;
; vram_adr (c_enems);
;
	lda     _c_enems
	ldx     _c_enems+1
	jsr     _vram_adr
;
; rda = VRAM_READ;  // Dummy read.   
;
	lda     $2007
	sta     _rda
;
; for (gpjt = 0; gpjt < 3 * MAP_SIZE; gpjt ++) {
;
	lda     #$00
L27EC:	sta     _gpjt
	cmp     #$48
	bcc     L27ED
;
; }
;
	rts
;
; rdt = VRAM_READ;
;
L27ED:	lda     $2007
	sta     _rdt
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; ep_y [gpjt] = rda & 0xf0;
;
	lda     #<(_ep_y)
	ldx     #>(_ep_y)
	clc
	adc     _gpjt
	bcc     L1EC7
	inx
L1EC7:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	and     #$F0
	ldy     #$00
	sta     (ptr1),y
;
; ep_x [gpjt] = rda << 4;
;
	lda     #<(_ep_x)
	ldx     #>(_ep_x)
	clc
	adc     _gpjt
	bcc     L1ECB
	inx
L1ECB:	sta     ptr1
	stx     ptr1+1
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (ptr1),y
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; rdc = rda & 0xf0;
;
	and     #$F0
	sta     _rdc
;
; rdb = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rdb
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; rda &= 0x0f;
;
	and     #$0F
	sta     _rda
;
; if (rda > 1) rda >>= 1; // Store converted!
;
	cmp     #$02
	bcc     L1EDD
	lda     _rda
	lsr     a
	sta     _rda
;
; ep_mx [gpjt] = ADD_SIGN2 (rdb, ep_x [gpjt], rda);
;
L1EDD:	lda     #<(_ep_mx)
	ldx     #>(_ep_mx)
	clc
	adc     _gpjt
	bcc     L1EE3
	inx
L1EE3:	jsr     pushax
	ldy     _gpjt
	lda     _ep_x,y
	cmp     _rdb
	bne     L1EEA
	lda     #$00
	jmp     L1EF8
L1EEA:	lda     _rdb
	jsr     pusha0
	ldy     _gpjt
	lda     _ep_x,y
	jsr     tosicmp0
	bcc     L1EF5
	beq     L1EF5
	lda     _rda
	jmp     L1EF8
L1EF5:	ldx     #$00
	lda     _rda
	jsr     negax
L1EF8:	ldy     #$00
	jsr     staspidx
;
; ep_my [gpjt] = ADD_SIGN2 (rdc, ep_y [gpjt], rda);
;
	lda     #<(_ep_my)
	ldx     #>(_ep_my)
	clc
	adc     _gpjt
	bcc     L1EFE
	inx
L1EFE:	jsr     pushax
	ldy     _gpjt
	lda     _ep_y,y
	cmp     _rdc
	bne     L1F05
	lda     #$00
	jmp     L1F13
L1F05:	lda     _rdc
	jsr     pusha0
	ldy     _gpjt
	lda     _ep_y,y
	jsr     tosicmp0
	bcc     L1F10
	beq     L1F10
	lda     _rda
	jmp     L1F13
L1F10:	ldx     #$00
	lda     _rda
	jsr     negax
L1F13:	ldy     #$00
	jsr     staspidx
;
; for (gpjt = 0; gpjt < 3 * MAP_SIZE; gpjt ++) {
;
	lda     _gpjt
	clc
	adc     #$01
	jmp     L27EC

.endproc

; ---------------------------------------------------------------
; void __near__ enems_persistent_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_persistent_update: near

.segment	"CODE"

;
; if (on_pant != 99) {
;
	lda     _on_pant
	cmp     #$63
	beq     L1F1D
;
; gpjt = on_pant + on_pant + on_pant;
;
	lda     _on_pant
	clc
	adc     _on_pant
	bcc     L27F0
	clc
L27F0:	adc     _on_pant
	sta     _gpjt
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     #$00
L27F1:	sta     _gpit
	cmp     #$03
	bcs     L1F1D
;
; __asm__ ("ldx %v", gpit);
;
	ldx     _gpit
;
; __asm__ ("ldy %v", gpjt);
;
	ldy     _gpjt
;
; __asm__ ("lda %v,x", en_x);
;
	lda     _en_x,x
;
; __asm__ ("sta %v,y", ep_x);
;
	sta     _ep_x,y
;
; __asm__ ("lda %v,x", en_y);
;
	lda     _en_y,x
;
; __asm__ ("sta %v,y", ep_y);
;
	sta     _ep_y,y
;
; __asm__ ("lda %v,x", en_mx);
;
	lda     _en_mx,x
;
; __asm__ ("sta %v,y", ep_mx);
;
	sta     _ep_mx,y
;
; __asm__ ("lda %v,x", en_my);
;
	lda     _en_my,x
;
; __asm__ ("sta %v,y", ep_my);
;
	sta     _ep_my,y
;
; gpjt ++;  
;
	lda     _gpjt
	clc
	adc     #$01
	sta     _gpjt
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L27F1
;
; }
;
L1F1D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_persistent_deaths_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_persistent_deaths_load: near

.segment	"CODE"

;
; memfill (ep_dead, 0, MAP_SIZE * 3);
;
	jsr     decsp3
	lda     #<(_ep_dead)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_ep_dead)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$48
	jmp     _memfill

.endproc

; ---------------------------------------------------------------
; void __near__ enems_update_unsigned_char_arrays (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_update_unsigned_char_arrays: near

.segment	"CODE"

;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v", _en_t);
;
	lda     __en_t
;
; __asm__ ("sta %v, y", en_t);
;
	sta     _en_t,y
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("sta %v, y", en_s);
;
	sta     _en_s,y
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("sta %v, y", en_x);
;
	sta     _en_x,y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("sta %v, y", en_y);
;
	sta     _en_y,y
;
; __asm__ ("lda %v", _en_x1);
;
	lda     __en_x1
;
; __asm__ ("sta %v, y", en_x1);
;
	sta     _en_x1,y
;
; __asm__ ("lda %v", _en_x2);
;
	lda     __en_x2
;
; __asm__ ("sta %v, y", en_x2);
;
	sta     _en_x2,y
;
; __asm__ ("lda %v", _en_y1);
;
	lda     __en_y1
;
; __asm__ ("sta %v, y", en_y1);
;
	sta     _en_y1,y
;
; __asm__ ("lda %v", _en_y2);
;
	lda     __en_y2
;
; __asm__ ("sta %v, y", en_y2);
;
	sta     _en_y2,y
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("sta %v, y", en_mx);
;
	sta     _en_mx,y
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("sta %v, y", en_my);
;
	sta     _en_my,y
;
; __asm__ ("lda %v", _en_ct);
;
	lda     __en_ct
;
; __asm__ ("sta %v, y", en_ct);
;
	sta     _en_ct,y
;
; __asm__ ("lda %v", _en_facing);
;
	lda     __en_facing
;
; __asm__ ("sta %v, y", en_facing);
;
	sta     _en_facing,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_load: near

.segment	"CODE"

;
; bankswitch (l_enems_chr_rombank [level]);
;
	ldy     _level
	lda     _l_enems_chr_rombank,y
	jsr     _bankswitch
;
; vram_adr (c_enems + (n_pant << 2) + (n_pant << 3)); 
;
	ldx     #$00
	lda     _n_pant
	jsr     aslax2
	clc
	adc     _c_enems
	sta     ptr1
	txa
	adc     _c_enems+1
	sta     ptr1+1
	ldx     #$00
	lda     _n_pant
	jsr     aslax3
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     _vram_adr
;
; rda = VRAM_READ;  // Dummy read.
;
	lda     $2007
	sta     _rda
;
; en_offs = rdc = (n_pant << 1) + n_pant;
;
	lda     _n_pant
	asl     a
	bcc     L2804
	clc
L2804:	adc     _n_pant
	sta     _rdc
	sta     _en_offs
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     #$00
L280B:	sta     _gpit
	cmp     #$03
	bcc     L280C
;
; }
;
	rts
;
; if (ep_dead [rdc]) {
;
L280C:	ldy     _rdc
	lda     _ep_dead,y
	beq     L1F68
;
; _en_t = 0;
;
	lda     #$00
	sta     __en_t
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; } else 
;
	jmp     L1F82
;
; _en_t = VRAM_READ;
;
L1F68:	lda     $2007
	sta     __en_t
;
; en_alive [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_alive,y
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; _en_y1 = rda & 0xf0;
;
	and     #$F0
	sta     __en_y1
;
; _en_x1 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x1
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; _en_y2 = rda & 0xf0;
;
	and     #$F0
	sta     __en_y2
;
; _en_x2 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x2
;
; rda = VRAM_READ;
;
	lda     $2007
	sta     _rda
;
; rdd = rda & 0xf0;  // Used for respawn speed!
;
	and     #$F0
	sta     _rdd
;
; rdm = rda & 0x0f;  // Actual speed.
;
	lda     _rda
	and     #$0F
	sta     _rdm
;
; _en_x = ep_x [rdc];
;
	ldy     _rdc
	lda     _ep_x,y
	sta     __en_x
;
; _en_y = ep_y [rdc];
;
	ldy     _rdc
	lda     _ep_y,y
	sta     __en_y
;
; switch (_en_t & 0x3f) {
;
	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L1FB3
	cmp     #$02
	beq     L1FB3
	cmp     #$03
	beq     L1FB3
	cmp     #$04
	beq     L1FB3
	cmp     #$05
	jeq     L1FE4
	cmp     #$06
	jeq     L1FFF
	cmp     #$08
	jeq     L200E
	cmp     #$14
	jeq     L2084
	jmp     L1FB1
;
; _en_ct = 0;   
;
L1FB3:	lda     #$00
	sta     __en_ct
;
; _en_s = (_en_t - 1) << 3;
;
	lda     __en_t
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	sta     __en_s
;
; _en_mx = ep_mx [rdc];
;
	lda     #<(_ep_mx)
	ldx     #>(_ep_mx)
	clc
	adc     _rdc
	bcc     L1FC3
	inx
L1FC3:	ldy     #$00
	jsr     ldaidx
	sta     __en_mx
;
; _en_my = ep_my [rdc];
;
	lda     #<(_ep_my)
	ldx     #>(_ep_my)
	clc
	adc     _rdc
	bcc     L1FC7
	inx
L1FC7:	jsr     ldaidx
	sta     __en_my
;
; if (rdm == 1) {
;
	lda     _rdm
	cmp     #$01
	bne     L1FC8
;
; en_status [gpit] = 1; 
;
	ldy     _gpit
;
; } else {
;
	jmp     L27FD
;
; en_status [gpit] = 0;
;
L1FC8:	ldy     _gpit
	lda     #$00
L27FD:	sta     _en_status,y
;
; if (_en_x1 > _en_x2) { rda = _en_x1; _en_x1 = _en_x2; _en_x2 = rda; }
;
	lda     __en_x1
	sec
	sbc     __en_x2
	bcc     L1FD3
	beq     L1FD3
	lda     __en_x1
	sta     _rda
	lda     __en_x2
	sta     __en_x1
	lda     _rda
	sta     __en_x2
;
; if (_en_y1 > _en_y2) { rda = _en_y1; _en_y1 = _en_y2; _en_y2 = rda; }
;
L1FD3:	lda     __en_y1
	sec
	sbc     __en_y2
	jcc     L1FB1
	jeq     L1FB1
	lda     __en_y1
	sta     _rda
	lda     __en_y2
	sta     __en_y1
	lda     _rda
	sta     __en_y2
;
; break;
;
	jmp     L1FB1
;
; if (_en_x2 > _en_x1) _en_my = 2;
;
L1FE4:	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L1FE5
	beq     L1FE5
	lda     #$02
;
; else if (_en_x2 < _en_x1) _en_my = 0;
;
	jmp     L27FE
L1FE5:	lda     __en_x2
	cmp     __en_x1
	bcs     L1FEA
	lda     #$00
;
; else if (_en_y2 > _en_y1) _en_my = 3;
;
	jmp     L27FE
L1FEA:	lda     __en_y2
	sec
	sbc     __en_y1
	bcc     L1FEF
	beq     L1FEF
	lda     #$03
;
; else _en_my = 1;
;
	jmp     L27FE
L1FEF:	lda     #$01
L27FE:	sta     __en_my
;
; _en_s = STEADY_SHOOTERS_BASE_SPRID + _en_my;
;
	clc
	adc     #$2C
	sta     __en_s
;
; _en_ct = _en_mx = rda;
;
	lda     _rda
	sta     __en_mx
	sta     __en_ct
;
; break;
;
	jmp     L1FB1
;
; enf_x [gpit] = _en_x << 6;
;
L1FFF:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2805
	inx
	clc
L2805:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_y [gpit] = _en_y << 6;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2806
	inx
	clc
L2806:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; enf_vx [gpit] = enf_vy [gpit] = 0;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2807
	inx
	clc
L2807:	adc     #<(_enf_vx)
	tay
	txa
	adc     #>(_enf_vx)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2808
	inx
	clc
L2808:	adc     #<(_enf_vy)
	tay
	txa
	adc     #>(_enf_vy)
	tax
	tya
	jsr     pushax
	ldx     #$00
	txa
	tay
	jsr     staxspidx
	jsr     staxspidx
;
; _en_s = FANTY_BASE_SPRID;
;
	lda     #$20
	sta     __en_s
;
; break;
;
	jmp     L1FB1
;
; _en_x = _en_x1;
;
L200E:	lda     __en_x1
	sta     __en_x
;
; _en_y = _en_y1;       
;
	lda     __en_y1
	sta     __en_y
;
; _en_mx = ADD_SIGN2 (_en_x2, _en_x1, rdm);
;
	lda     __en_x1
	cmp     __en_x2
	bne     L2018
	lda     #$00
	jmp     L2024
L2018:	ldx     #$00
	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L2021
	beq     L2021
	lda     _rdm
	jmp     L2024
L2021:	lda     _rdm
	jsr     negax
L2024:	sta     __en_mx
;
; _en_my = ADD_SIGN2 (_en_y2, _en_y1, rdm);
;
	lda     __en_y1
	cmp     __en_y2
	bne     L202D
	lda     #$00
	jmp     L2039
L202D:	ldx     #$00
	lda     __en_y2
	sec
	sbc     __en_y1
	bcc     L2036
	beq     L2036
	lda     _rdm
	jmp     L2039
L2036:	lda     _rdm
	jsr     negax
L2039:	sta     __en_my
;
; rda = ABS (_en_mx); if (!rda) rda = ABS (_en_my);
;
	lda     __en_mx
	asl     a
	bcc     L2042
	ldx     #$00
	lda     __en_mx
	bpl     L2045
	dex
L2045:	jsr     negax
L204A:	cmp     #$80
	bcc     L204B
	jmp     L204B
L2042:	lda     __en_mx
	cmp     #$80
	bcc     L204A
L204B:	sta     _rda
	lda     _rda
	bne     L204C
	lda     __en_my
	asl     a
	bcc     L2053
	ldx     #$00
	lda     __en_my
	bpl     L2056
	dex
L2056:	jsr     negax
L205B:	cmp     #$80
	bcc     L205C
	jmp     L205C
L2053:	lda     __en_my
	cmp     #$80
	bcc     L205B
L205C:	sta     _rda
;
; rda --;
;
L204C:	lda     _rda
	sec
	sbc     #$01
	sta     _rda
;
; rdb = (_en_x1 != _en_x2) ? 
;
	lda     __en_x2
	cmp     __en_x1
;
; SGNC (_en_x2, _en_x1, SAW_V_DISPL) :
;
	beq     L2061
	lda     __en_x2
	cmp     __en_x1
	bcs     L2803
	lda     #$FC
	jmp     L2074
;
; SGNC (_en_y2, _en_y1, SAW_V_DISPL);
;
L2061:	lda     __en_y2
	cmp     __en_y1
	bcs     L2803
	lda     #$FC
	jmp     L2074
L2803:	lda     #$04
L2074:	sta     _rdb
;
; _en_my = rda; // EMERGING SENSE
;
	lda     _rda
	sta     __en_my
;
; _en_mx = rdb; // MOVING SENSE
;
	lda     _rdb
	sta     __en_mx
;
; en_alive [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _en_alive,y
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; break;
;
	jmp     L1FB1
;
; _en_x = _en_x1;
;
L2084:	lda     __en_x1
	sta     __en_x
;
; _en_y = _en_y1;       
;
	lda     __en_y1
	sta     __en_y
;
; _en_ct = 0;
;
	lda     #$00
	sta     __en_ct
;
; _en_s = COMPILED_ENEMS_BASE_SPRID;
;
	lda     #$30
	sta     __en_s
;
; en_behptr [gpit] = en_behptrs [rda];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2809
	inx
	clc
L2809:	adc     #<(_en_behptr)
	tay
	txa
	adc     #>(_en_behptr)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L280A
	inx
	clc
L280A:	adc     #<(_en_behptrs)
	sta     ptr1
	txa
	adc     #>(_en_behptrs)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; en_life [gpit] = ENEMS_LIFE_GAUGE;
;
L1FB1:	ldy     _gpit
	lda     #$01
	sta     _en_life,y
;
; en_cttouched [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_cttouched,y
;
; en_flags [gpit] = 0;
;
	ldy     _gpit
	sta     _en_flags,y
;
; rdc ++;
;
L1F82:	lda     _rdc
	clc
	adc     #$01
	sta     _rdc
;
; enems_update_unsigned_char_arrays ();
;
	jsr     _enems_update_unsigned_char_arrays
;
; for (gpit = 0; gpit < 3; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L280B

.endproc

; ---------------------------------------------------------------
; void __near__ enems_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_kill: near

.segment	"CODE"

;
; en_flags [gpit] |= EN_STATE_DEAD;
;
	lda     #<(_en_flags)
	ldx     #>(_en_flags)
	clc
	adc     _gpit
	bcc     L20A2
	inx
L20A2:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$01
	sta     (ptr1),y
;
; ep_dead [en_offs + gpit] = 1;
;
	ldx     #$00
	lda     _en_offs
	clc
	adc     _gpit
	bcc     L280E
	inx
	clc
L280E:	adc     #<(_ep_dead)
	sta     ptr1
	txa
	adc     #>(_ep_dead)
	sta     ptr1+1
	lda     #$01
	sta     (ptr1),y
;
; if (_en_t != 5)
;
	lda     __en_t
	cmp     #$05
	beq     L20A7
;
; pkilled ++;
;
	lda     _pkilled
	clc
	adc     #$01
	sta     _pkilled
;
; }
;
L20A7:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_hit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_hit: near

.segment	"CODE"

;
; _en_facing = ((_en_x < prx) ? 0 : 4);
;
	lda     __en_x
	cmp     _prx
	bcs     L20AF
	lda     #$00
	jmp     L20B1
L20AF:	lda     #$04
L20B1:	sta     __en_facing
;
; en_cttouched [gpit] = ENEMS_TOUCHED_FRAMES;
;
	ldy     _gpit
	lda     #$08
	sta     _en_cttouched,y
;
; en_life [gpit] --; 
;
	lda     #<(_en_life)
	ldx     #>(_en_life)
	clc
	adc     _gpit
	bcc     L20B9
	inx
L20B9:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; if (en_life [gpit] == 0) {
;
	ldy     _gpit
	lda     _en_life,y
;
; enems_kill ();
;
	jeq     _enems_kill
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_move: near

.segment	"CODE"

;
; pgotten = pgtmx = pgtmy = 0;
;
	lda     #$00
	sta     _pgtmy
	sta     _pgtmy+1
	sta     _pgtmx
	sta     _pgtmx+1
	sta     _pgotten
;
; touched = 0;
;
	sta     _touched
;
; en_initial ++; if (en_initial >= 3) en_initial = 0;
;
	lda     _en_initial
	clc
	adc     #$01
	sta     _en_initial
	cmp     #$03
	bcc     L20C7
	lda     #$00
	sta     _en_initial
;
; gpit = en_initial;
;
L20C7:	lda     _en_initial
	sta     _gpit
;
; gpjt = 3; while (gpjt --) {
;
	lda     #$03
	sta     _gpjt
L20CF:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	bne     L2855
;
; }
;
	rts
;
; gpit += 2; if (gpit > 2) gpit -=3;
;
L2855:	lda     #$02
	clc
	adc     _gpit
	sta     _gpit
	cmp     #$03
	bcc     L20D4
	lda     _gpit
	sec
	sbc     #$03
	sta     _gpit
;
; __asm__ ("ldy %v", gpit);
;
L20D4:	ldy     _gpit
;
; __asm__ ("lda %v, y", en_t);
;
	lda     _en_t,y
;
; __asm__ ("sta %v", _en_t);
;
	sta     __en_t
;
; __asm__ ("lda %v, y", en_s);
;
	lda     _en_s,y
;
; __asm__ ("sta %v", _en_s);
;
	sta     __en_s
;
; __asm__ ("lda %v, y", en_x);
;
	lda     _en_x,y
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v, y", en_y);
;
	lda     _en_y,y
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v, y", en_x1);
;
	lda     _en_x1,y
;
; __asm__ ("sta %v", _en_x1);
;
	sta     __en_x1
;
; __asm__ ("lda %v, y", en_x2);
;
	lda     _en_x2,y
;
; __asm__ ("sta %v", _en_x2);
;
	sta     __en_x2
;
; __asm__ ("lda %v, y", en_y1);
;
	lda     _en_y1,y
;
; __asm__ ("sta %v", _en_y1);
;
	sta     __en_y1
;
; __asm__ ("lda %v, y", en_y2);
;
	lda     _en_y2,y
;
; __asm__ ("sta %v", _en_y2);
;
	sta     __en_y2
;
; __asm__ ("lda %v, y", en_mx);
;
	lda     _en_mx,y
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v, y", en_my);
;
	lda     _en_my,y
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; __asm__ ("lda %v, y", en_ct);
;
	lda     _en_ct,y
;
; __asm__ ("sta %v", _en_ct);
;
	sta     __en_ct
;
; __asm__ ("lda %v, y", en_facing);
;
	lda     _en_facing,y
;
; __asm__ ("sta %v", _en_facing);
;
	sta     __en_facing
;
; _enf_x = enf_x [gpit]; _enf_vx = enf_vx [gpit];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L283B
	inx
	clc
L283B:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     __enf_x+1
	dey
	lda     (ptr1),y
	sta     __enf_x
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L283C
	inx
	clc
L283C:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_vx+1
	dey
	lda     (ptr1),y
	sta     __enf_vx
;
; _enf_y = enf_y [gpit]; _enf_vy = enf_vy [gpit];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L283D
	inx
	clc
L283D:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_y+1
	dey
	lda     (ptr1),y
	sta     __enf_y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L283E
	inx
	clc
L283E:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_vy+1
	dey
	lda     (ptr1),y
	sta     __enf_vy
;
; if (_en_t == 0) continue;
;
	lda     __en_t
	jeq     L20CF
;
; en_is_alive = !(en_flags [gpit] & EN_STATE_DEAD);
;
	ldy     _gpit
	lda     _en_flags,y
	and     #$01
	jsr     bnega
	sta     _en_is_alive
;
; en_spr = 0xff;
;
	lda     #$FF
	sta     _en_spr
;
; if (en_cttouched [gpit]) {
;
	ldy     _gpit
	lda     _en_cttouched,y
	beq     L2106
;
; en_cttouched [gpit] --;
;
	lda     #<(_en_cttouched)
	ldx     #>(_en_cttouched)
	clc
	adc     _gpit
	bcc     L210C
	inx
L210C:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (sreg),y
;
; _en_x, _en_y + SPRITE_ADJUST, 
;
	jsr     decsp3
	lda     __en_x
	ldy     #$02
	sta     (sp),y
	lda     __en_y
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L283F
	sec
L283F:	sbc     #$10
	bcs     L2840
	sec
L2840:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$57
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; } else
;
	jmp     L23A3
;
; if (en_is_alive) {
;
L2106:	lda     _en_is_alive
	jeq     L23A3
;
; pregotten = (prx + 7 >= _en_x && prx <= _en_x + 15);
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L211E
	inx
L211E:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L211F
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0F
	bcc     L2120
	ldx     #$01
L2120:	jsr     tosicmp
	bcc     L211D
	beq     L211D
L211F:	lda     #$00
	jmp     L2121
L211D:	lda     #$01
L2121:	sta     _pregotten
;
; en_fr = ((((_en_mx) ? _en_x : _en_y)+4) >> 3) & 1;
;
	lda     __en_mx
	beq     L2128
	lda     __en_x
	jmp     L2831
L2128:	lda     __en_y
L2831:	ldx     #$00
	clc
	adc     #$04
	bcc     L212C
	inx
L212C:	jsr     shrax3
	and     #$01
	sta     _en_fr
;
; && _en_t != 4
;
	lda     _res_on
	beq     L212D
	lda     __en_t
;
; && _en_t != 5
;
	cmp     #$04
	beq     L212D
	lda     __en_t
;
; && _en_t != 8 
;
	cmp     #$05
	beq     L212D
	lda     __en_t
;
; ) {
;
	cmp     #$08
	beq     L212D
;
; en_spr = en_spr_id [gpit];
;
	ldy     _gpit
	lda     _en_spr_id,y
	sta     _en_spr
;
; } else
;
	jmp     L2135
;
; switch (_en_t & 63) {
;
L212D:	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L2140
	cmp     #$02
	beq     L2140
	cmp     #$03
	beq     L2140
	cmp     #$04
	beq     L2140
	cmp     #$05
	jeq     L2167
	cmp     #$06
	jeq     L217C
	cmp     #$08
	jeq     L223F
	cmp     #$14
	jeq     L22C2
	jmp     L2138
;
; if (!en_status [gpit] || half_life) {
;
L2140:	ldy     _gpit
	lda     _en_status,y
	beq     L2142
	lda     _half_life
	beq     L2152
;
; _en_x += _en_mx;
;
L2142:	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; _en_y += _en_my;
;
	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; if (_en_x == _en_x1 || _en_x == _en_x2) _en_mx = -_en_mx;
;
	lda     __en_x1
	cmp     __en_x
	beq     L214D
	lda     __en_x2
	cmp     __en_x
	bne     L214C
L214D:	ldx     #$00
	lda     __en_mx
	bpl     L2151
	dex
L2151:	jsr     negax
	sta     __en_mx
;
; if (_en_y == _en_y1 || _en_y == _en_y2) _en_my = -_en_my;      
;
L214C:	lda     __en_y1
	cmp     __en_y
	beq     L2153
	lda     __en_y2
	cmp     __en_y
	bne     L2152
L2153:	ldx     #$00
	lda     __en_my
	bpl     L2157
	dex
L2157:	jsr     negax
	sta     __en_my
;
; _en_facing = (_en_mx > 0 || _en_my > 0) ? 0 : 4;
;
L2152:	lda     __en_mx
	sec
	sbc     #$01
	bvs     L215C
	eor     #$80
L215C:	bmi     L215A
	lda     __en_my
	sec
	sbc     #$01
	bvs     L215E
	eor     #$80
L215E:	bpl     L2160
L215A:	lda     #$00
	jmp     L2162
L2160:	lda     #$04
L2162:	sta     __en_facing
;
; en_spr = _en_s + en_fr + _en_facing;
;
	lda     __en_s
	clc
	adc     _en_fr
	jcc     L2850
;
; break;
;
	jmp     L2854
;
; if (ticker == 0) {
;
L2167:	lda     _ticker
	bne     L216D
;
; if (_en_ct) _en_ct --; else {
;
	lda     __en_ct
	beq     L216A
	lda     __en_ct
	sec
	sbc     #$01
	sta     __en_ct
	jmp     L216D
;
; _en_ct = _en_mx; // reset counter
;
L216A:	lda     __en_mx
	sta     __en_ct
;
; rda = _en_my;   // direction
;
	lda     __en_my
	sta     _rda
;
; rdx = _en_x + 4;
;
	lda     __en_x
	clc
	adc     #$04
	sta     _rdx
;
; rdy = _en_y + 4;
;
	lda     __en_y
	clc
	adc     #$04
	sta     _rdy
;
; cocos_shoot_linear ();
;
	jsr     _cocos_shoot_linear
;
; en_spr = _en_s;
;
L216D:	lda     __en_s
;
; break;
;
	jmp     L2816
;
; if (px < _enf_x) {
;
L217C:	lda     _px
	cmp     __enf_x
	lda     _px+1
	sbc     __enf_x+1
	bvc     L2826
	eor     #$80
L2826:	bpl     L217D
;
; _enf_vx -= FANTY_A; if (_enf_vx < -FANTY_MAXV) _enf_vx = -FANTY_MAXV;
;
	lda     __enf_vx
	sec
	sbc     #$04
	sta     __enf_vx
	bcs     L2181
	dec     __enf_vx+1
L2181:	lda     __enf_vx
	cmp     #$D0
	lda     __enf_vx+1
	sbc     #$FF
	bvc     L2184
	eor     #$80
L2184:	bpl     L218B
	ldx     #$FF
	lda     #$D0
;
; } else {
;
	jmp     L2851
;
; _enf_vx += FANTY_A; if (_enf_vx > FANTY_MAXV) _enf_vx = FANTY_MAXV;
;
L217D:	lda     #$04
	clc
	adc     __enf_vx
	sta     __enf_vx
	bcc     L218A
	inc     __enf_vx+1
L218A:	lda     __enf_vx
	cmp     #$31
	lda     __enf_vx+1
	sbc     #$00
	bvs     L218D
	eor     #$80
L218D:	bpl     L218B
	ldx     #$00
	lda     #$30
L2851:	sta     __enf_vx
	stx     __enf_vx+1
;
; if (py < _enf_y) {
;
L218B:	lda     _py
	cmp     __enf_y
	lda     _py+1
	sbc     __enf_y+1
	bvc     L2827
	eor     #$80
L2827:	bpl     L2190
;
; _enf_vy -= FANTY_A; if (_enf_vy < -FANTY_MAXV) _enf_vy = -FANTY_MAXV;
;
	lda     __enf_vy
	sec
	sbc     #$04
	sta     __enf_vy
	bcs     L2194
	dec     __enf_vy+1
L2194:	lda     __enf_vy
	cmp     #$D0
	lda     __enf_vy+1
	sbc     #$FF
	bvc     L2197
	eor     #$80
L2197:	bpl     L219E
	ldx     #$FF
	lda     #$D0
;
; } else {
;
	jmp     L2852
;
; _enf_vy += FANTY_A; if (_enf_vy > FANTY_MAXV) _enf_vy = FANTY_MAXV;
;
L2190:	lda     #$04
	clc
	adc     __enf_vy
	sta     __enf_vy
	bcc     L219D
	inc     __enf_vy+1
L219D:	lda     __enf_vy
	cmp     #$31
	lda     __enf_vy+1
	sbc     #$00
	bvs     L21A0
	eor     #$80
L21A0:	bpl     L219E
	ldx     #$00
	lda     #$30
L2852:	sta     __enf_vy
	stx     __enf_vy+1
;
; _enf_x += _enf_vx; 
;
L219E:	lda     __enf_vx
	clc
	adc     __enf_x
	sta     __enf_x
	lda     __enf_vx+1
	adc     __enf_x+1
	sta     __enf_x+1
;
; if (_enf_x < 0) _enf_x = 0;
;
	ldx     __enf_x+1
	cpx     #$80
	bcc     L21A5
	lda     #$00
	sta     __enf_x
	sta     __enf_x+1
;
; if (_enf_x > 15360) _enf_x = 15360;
;
L21A5:	lda     __enf_x
	cmp     #$01
	lda     __enf_x+1
	sbc     #$3C
	bvs     L21AB
	eor     #$80
L21AB:	bpl     L21A9
	ldx     #$3C
	lda     #$00
	sta     __enf_x
	stx     __enf_x+1
;
; _en_x = _enf_x >> 6;
;
L21A9:	lda     __enf_x
	ldx     __enf_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; if (_enf_vx) {
;
	lda     __enf_vx
	ora     __enf_vx+1
	jeq     L21D5
;
; cy1 = (_en_y + 4) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$04
	bcc     L21B5
	inx
L21B5:	jsr     shrax4
	sta     _cy1
;
; cy2 = (_en_y + 11) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0B
	bcc     L21B9
	inx
L21B9:	jsr     shrax4
	sta     _cy2
;
; if (_enf_vx > 0) {
;
	lda     __enf_vx
	cmp     #$01
	lda     __enf_vx+1
	sbc     #$00
	bvs     L21BC
	eor     #$80
L21BC:	bpl     L21BA
;
; cx1 = cx2 = (_en_x + 11) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L21C1
	inx
L21C1:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cx2
	sec
	sbc     #$01
	bcs     L21C6
	dex
L21C6:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L2834
;
; cx1 = cx2 = (_en_x + 4) >> 4;
;
L21BA:	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L21CD
	inx
L21CD:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cx1
	clc
	adc     #$01
	bcc     L21D2
	inx
L21D2:	jsr     shlax4
	sec
	sbc     #$04
L2834:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (FANTY_OBSTACLE (at1) || FANTY_OBSTACLE (at2)) {
;
	lda     _at1
	cmp     #$02
	bcs     L21D6
	lda     _at2
	cmp     #$02
	bcc     L21D5
;
; _enf_vx = -_enf_vx;
;
L21D6:	lda     __enf_vx
	ldx     __enf_vx+1
	jsr     negax
	sta     __enf_vx
	stx     __enf_vx+1
;
; _en_x = rda; 
;
	lda     _rda
	sta     __en_x
;
; _enf_x = rda << 6;
;
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y += _enf_vy; 
;
L21D5:	lda     __enf_vy
	clc
	adc     __enf_y
	sta     __enf_y
	lda     __enf_vy+1
	adc     __enf_y+1
	sta     __enf_y+1
;
; if (_enf_y < 0) _enf_y = 0;
;
	ldx     __enf_y+1
	cpx     #$80
	bcc     L21E4
	lda     #$00
	sta     __enf_y
	sta     __enf_y+1
;
; if (_enf_y > 11264) _enf_y = 11264;
;
L21E4:	lda     __enf_y
	cmp     #$01
	lda     __enf_y+1
	sbc     #$2C
	bvs     L21EA
	eor     #$80
L21EA:	bpl     L21E8
	ldx     #$2C
	lda     #$00
	sta     __enf_y
	stx     __enf_y+1
;
; _en_y = _enf_y >> 6;
;
L21E8:	lda     __enf_y
	ldx     __enf_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
;
; if (_enf_vy) {
;
	lda     __enf_vy
	ora     __enf_vy+1
	jeq     L2214
;
; cx1 = (_en_x + 4) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L21F4
	inx
L21F4:	jsr     shrax4
	sta     _cx1
;
; cx2 = (_en_x + 11) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L21F8
	inx
L21F8:	jsr     shrax4
	sta     _cx2
;
; if (_enf_vy > 0) {
;
	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$00
	bvs     L21FB
	eor     #$80
L21FB:	bpl     L21F9
;
; cy1 = cy2 = (_en_y + 11) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0B
	bcc     L2200
	inx
L2200:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L2205
	dex
L2205:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L2835
;
; cy1 = cy2 = (_en_y + 4) >> 4;
;
L21F9:	ldx     #$00
	lda     __en_y
	clc
	adc     #$04
	bcc     L220C
	inx
L220C:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L2211
	inx
L2211:	jsr     shlax4
	sec
	sbc     #$04
L2835:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (FANTY_OBSTACLE (at1) || FANTY_OBSTACLE (at2)) {
;
	lda     _at1
	cmp     #$02
	bcs     L2215
	lda     _at2
	cmp     #$02
	bcc     L2214
;
; _enf_vy = -_enf_vy;
;
L2215:	lda     __enf_vy
	ldx     __enf_vy+1
	jsr     negax
	sta     __enf_vy
	stx     __enf_vy+1
;
; _en_y = rda;
;
	lda     _rda
	sta     __en_y
;
; _enf_y = rda << 6;
;
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; cx1 = (_en_x + 8) >> 4;
;
L2214:	ldx     #$00
	lda     __en_x
	clc
	adc     #$08
	bcc     L2224
	inx
L2224:	jsr     shrax4
	sta     _cx1
;
; cy1 = (_en_y + 8) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$08
	bcc     L2228
	inx
L2228:	jsr     shrax4
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (at1 & 1) {
;
	lda     _at1
	and     #$01
	beq     L222A
;
; en_cttouched [gpit] = 8;
;
	ldy     _gpit
	lda     #$08
	sta     _en_cttouched,y
;
; enems_kill ();
;
	jsr     _enems_kill
;
; en_fr = (_en_x >> 3) & 1;
;
L222A:	ldx     #$00
	lda     __en_x
	jsr     asrax3
	and     #$01
	sta     _en_fr
;
; _en_facing = ((_en_x < prx) ? 0 : 4);
;
	lda     __en_x
	cmp     _prx
	bcs     L2238
	lda     #$00
	jmp     L223A
L2238:	lda     #$04
L223A:	sta     __en_facing
;
; en_spr = _en_s + en_fr + _en_facing;
;
	lda     __en_s
	clc
	adc     _en_fr
	jcc     L2850
;
; break;
;
	jmp     L2854
;
; rda = (_en_x1 == _en_x2);
;
L223F:	lda     __en_x2
	cmp     __en_x1
	jsr     booleq
	sta     _rda
;
; switch (en_alive [gpit]) {
;
	ldy     _gpit
	lda     _en_alive,y
;
; }
;
	beq     L2249
	cmp     #$01
	beq     L2264
	cmp     #$02
	jeq     L2278
	cmp     #$03
	jeq     L2293
	jmp     L2247
;
; if (rda) {
;
L2249:	lda     _rda
	beq     L224A
;
; _en_y -= _en_mx;
;
	lda     __en_mx
	eor     #$FF
	sec
	adc     __en_y
	sta     __en_y
;
; if (_en_y == _en_y1) {
;
	lda     __en_y1
	cmp     __en_y
	jne     L2247
;
; en_alive [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _en_alive,y
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; } else {
;
	jmp     L2247
;
; _en_x -= _en_mx;
;
L224A:	lda     __en_mx
	eor     #$FF
	sec
	adc     __en_x
	sta     __en_x
;
; if (_en_x == _en_x1) {
;
	lda     __en_x1
	cmp     __en_x
	jne     L2247
;
; en_alive [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _en_alive,y
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; break;
;
	jmp     L2247
;
; if (half_life) {
;
L2264:	lda     _half_life
	jeq     L2247
;
; if (_en_ct --) {
;
	lda     __en_ct
	pha
	sec
	sbc     #$01
	sta     __en_ct
	pla
	tax
	beq     L2267
;
; if (rda) {
;
	lda     _rda
	beq     L2269
;
; _en_x += _en_my;
;
	lda     __en_my
	clc
	adc     __en_x
	sta     __en_x
;
; } else {
;
	jmp     L2247
;
; _en_y += _en_my;
;
L2269:	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; } else {
;
	jmp     L2247
;
; en_alive [gpit] = 2;
;
L2267:	ldy     _gpit
	lda     #$02
;
; break;
;
	jmp     L2853
;
; if (rda) {
;
L2278:	lda     _rda
	beq     L2279
;
; _en_y += _en_mx;
;
	lda     __en_mx
	clc
	adc     __en_y
	sta     __en_y
;
; if (_en_y == _en_y2) {
;
	lda     __en_y2
	cmp     __en_y
	bne     L2247
;
; en_alive [gpit] = 3;
;
	ldy     _gpit
	lda     #$03
	sta     _en_alive,y
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; } else {
;
	jmp     L2247
;
; _en_x += _en_mx;
;
L2279:	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; if (_en_x == _en_x2) {
;
	lda     __en_x2
	cmp     __en_x
	bne     L2247
;
; en_alive [gpit] = 3;
;
	ldy     _gpit
	lda     #$03
	sta     _en_alive,y
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; break;
;
	jmp     L2247
;
; if (half_life) {
;
L2293:	lda     _half_life
	beq     L2247
;
; if (_en_ct --) {
;
	lda     __en_ct
	pha
	sec
	sbc     #$01
	sta     __en_ct
	pla
	tax
	beq     L2296
;
; if (rda) {
;
	lda     _rda
	beq     L2298
;
; _en_x -= _en_my;
;
	lda     __en_my
	eor     #$FF
	sec
	adc     __en_x
	sta     __en_x
;
; } else {
;
	jmp     L2247
;
; _en_y -= _en_my;
;
L2298:	lda     __en_my
	eor     #$FF
	sec
	adc     __en_y
	sta     __en_y
;
; } else {
;
	jmp     L2247
;
; en_alive [gpit] = 0;
;
L2296:	ldy     _gpit
L2853:	sta     _en_alive,y
;
; if (rda) {
;
L2247:	lda     _rda
	beq     L22A6
;
; rdx = _en_x1; rdy = _en_y;
;
	lda     __en_x1
	sta     _rdx
	lda     __en_y
;
; } else {
;
	jmp     L2836
;
; rdx = _en_x; rdy = _en_y1;
;
L22A6:	lda     __en_x
	sta     _rdx
	lda     __en_y1
L2836:	sta     _rdy
;
; rdx, rdy + SPRITE_ADJUST,
;
	jsr     decsp3
	lda     _rdx
	ldy     #$02
	sta     (sp),y
	lda     _rdy
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2843
	sec
L2843:	sbc     #$10
	bcs     L2844
	sec
L2844:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_OCCLUDING_CELL]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_OCCLUDING_CELL]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$55
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; en_spr = SAW_BASE_SPRID + half_life;
;
	lda     _half_life
	clc
	adc     #$28
	sta     _en_spr
;
; _en_facing = 0;
;
	lda     #$00
	sta     __en_facing
;
; break;
;
	jmp     L2138
;
; if (_en_ct) {
;
L22C2:	lda     __en_ct
	beq     L22C3
;
; switch (en_alive [gpit]) {
;
	ldy     _gpit
	lda     _en_alive,y
;
; }
;
	beq     L22CB
	cmp     #$01
	beq     L22D2
	jmp     L22C9
;
; en_spr = _en_s + _en_facing + 2 + 
;
L22CB:	lda     __en_s
	clc
	adc     __en_facing
	bcc     L2845
	clc
L2845:	adc     #$02
;
; ((frame_counter >> 3) & 1); 
;
	sta     ptr1
	ldx     #$00
	lda     _frame_counter
	jsr     asrax3
	and     #$01
	clc
	adc     ptr1
	bcc     L2837
;
; break;
;
	jmp     L2837
;
; rdx = _en_x; _en_x += _en_mx;
;
L22D2:	lda     __en_x
	sta     _rdx
	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; rdy = _en_y; _en_y += _en_my;
;
	lda     __en_y
	sta     _rdy
	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; en_spr = _en_s + _en_facing + en_fr;
;
	lda     __en_s
	clc
	adc     __en_facing
	bcc     L2846
	clc
L2846:	adc     _en_fr
L2837:	sta     _en_spr
;
; _en_ct --;
;
L22C9:	lda     __en_ct
	sec
	sbc     #$01
	sta     __en_ct
;
; } else {
;
	jmp     L2138
;
; rda = *en_behptr [gpit] ++;
;
L22C3:	tax
	lda     _gpit
	asl     a
	bcc     L2847
	inx
	clc
L2847:	adc     #<(_en_behptr)
	tay
	txa
	adc     #>(_en_behptr)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L22E4
	inx
L22E4:	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
	dey
	lda     (regsave),y
	sta     _rda
;
; en_alive [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_alive,y
;
; rdc = (rda & 0x38) >> 3;
;
	lda     _rda
	and     #$38
	lsr     a
	lsr     a
	lsr     a
	sta     _rdc
;
; rdt = rda & 0x07;
;
	lda     _rda
	and     #$07
	sta     _rdt
;
; switch (rda & 0xc0) { // Command
;
	lda     _rda
	and     #$C0
;
; }
;
	beq     L22F2
	cmp     #$40
	beq     L22FD
	cmp     #$80
	jeq     L2319
	cmp     #$C0
	jeq     L2322
	jmp     L22F0
;
; rdb = 1; while (rdt --) rdb += 25;
;
L22F2:	lda     #$01
L2838:	sta     _rdb
	lda     _rdt
	pha
	sec
	sbc     #$01
	sta     _rdt
	pla
	tax
	beq     L22F6
	lda     #$19
	clc
	adc     _rdb
	jmp     L2838
;
; _en_ct = rdb;
;
L22F6:	lda     _rdb
	sta     __en_ct
;
; break;
;
	jmp     L22F0
;
; _en_mx = endx [rdc]; _en_my = endy [rdc];
;
L22FD:	lda     #<(_endx)
	ldx     #>(_endx)
	clc
	adc     _rdc
	bcc     L2301
	inx
L2301:	ldy     #$00
	jsr     ldaidx
	sta     __en_mx
	lda     #<(_endy)
	ldx     #>(_endy)
	clc
	adc     _rdc
	bcc     L2305
	inx
L2305:	jsr     ldaidx
	sta     __en_my
;
; if (_en_mx < 0) _en_facing = 4;
;
	lda     __en_mx
	asl     a
	bcc     L2306
	lda     #$04
;
; else if (_en_mx > 0) _en_facing = 0;
;
	jmp     L2839
L2306:	lda     __en_mx
	sec
	sbc     #$01
	bvs     L230F
	eor     #$80
L230F:	bpl     L230C
	tya
L2839:	sta     __en_facing
;
; _en_ct = rdt << 4; en_alive [gpit] = 1;
;
L230C:	lda     _rdt
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_ct
	ldy     _gpit
	lda     #$01
	sta     _en_alive,y
;
; break;
;
	jmp     L22F0
;
; rdx = _en_x + 4; rdy = _en_y + 4; cocos_shoot_aimed ();
;
L2319:	lda     __en_x
	clc
	adc     #$04
	sta     _rdx
	lda     __en_y
	clc
	adc     #$04
	sta     _rdy
	jsr     _cocos_shoot_aimed
;
; break;
;
	jmp     L22F0
;
; en_behptr [gpit] -= ((rda & 0x3f) + 1);
;
L2322:	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L2848
	inx
	clc
L2848:	adc     #<(_en_behptr)
	tay
	txa
	adc     #>(_en_behptr)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	lda     _rda
	ldx     #$00
	and     #$3F
	clc
	adc     #$01
	bcc     L2328
	inx
L2328:	jsr     tossubax
	ldy     #$00
	jsr     staxspidx
;
; en_spr = _en_s + _en_facing;
;
L22F0:	lda     __en_s
L2854:	clc
L2850:	adc     __en_facing
L2816:	sta     _en_spr
;
; en_spr_id [gpit] = en_spr;
;
L2138:	ldy     _gpit
	lda     _en_spr
	sta     _en_spr_id,y
;
; if (_en_t == 4 && pregotten && !pgotten && !pj) {
;
L2135:	lda     __en_t
	cmp     #$04
	jne     L2349
	lda     _pregotten
	jeq     L2349
	lda     _pgotten
	jne     L2349
	lda     _pj
	jne     L2349
;
; if (_en_mx) {
;
	lda     __en_mx
	beq     L2335
;
; if (pry + 16 >= _en_y && pry + 12 <= _en_y) {
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L2337
	inx
L2337:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L2335
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L2339
	inx
L2339:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L2336
	bne     L2335
;
; pgotten = 1;
;
L2336:	lda     #$01
	sta     _pgotten
;
; pgtmx = _en_mx << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_mx
	bpl     L233F
	dex
L233F:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmx
	stx     _pgtmx+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L2346
	dex
L2346:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; (_en_my < 0 && pry + 17 >= _en_y && pry + 12 <= _en_y) ||
;
L2335:	lda     __en_my
	asl     a
	bcc     L282E
	ldx     #$00
	lda     _pry
	clc
	adc     #$11
	bcc     L234E
	inx
L234E:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L282E
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L234F
	inx
L234F:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L234A
	beq     L234A
;
; (_en_my > 0 && pry + 16 + _en_my >= _en_y && pry + 12 <= _en_y)
;
L282E:	lda     __en_my
	sec
	sbc     #$01
	bvs     L2353
	eor     #$80
L2353:	jpl     L2349
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L2355
	inx
L2355:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __en_my
	bpl     L2356
	dex
L2356:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	cmp     __en_y
	txa
	sbc     #$00
	bcc     L2349
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L2357
	inx
L2357:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L234A
	bne     L2349
;
; pgotten = 1;
;
L234A:	lda     #$01
	sta     _pgotten
;
; pgtmy = _en_my << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_my
	bpl     L235E
	dex
L235E:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmy
	stx     _pgtmy+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L2365
	dex
L2365:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; en_is_alive == 0 // General condition.
;
L2349:	lda     _en_is_alive
;
; || _en_t == 4
;
	jeq     L23A3
	lda     __en_t
;
; || (_en_t == 8 && en_alive [gpit] == 0)
;
	cmp     #$04
	jeq     L23A3
	lda     __en_t
	cmp     #$08
	bne     L236A
	ldy     _gpit
	lda     _en_alive,y
	jeq     L23A3
;
; pregotten && 
;
L236A:	lda     _pregotten
	jeq     L2373
;
; pry < _en_y && 
;
	ldx     #$00
	lda     _pry
	cmp     __en_y
	jcs     L2373
;
; pry + 15 + ENEMS_COLLISION_VSTRETCH_FG >= _en_y &&
;
	lda     _pry
	clc
	adc     #$0F
	bcc     L2376
	inx
L2376:	cmp     __en_y
	txa
	sbc     #$00
	jcc     L2373
;
; pgotten == 0 && ppossee == 0
;
	lda     _pgotten
	jne     L2373
	lda     _ppossee
;
; && pvy > 0
;
	jne     L2373
	lda     _pvy
;
; && _en_t != 5
;
	cmp     #$01
;
; && pvy > 0
;
	lda     _pvy+1
;
; && _en_t != 5
;
	sbc     #$00
	bvs     L2377
	eor     #$80
L2377:	jpl     L2373
	lda     __en_t
;
; && _en_t != 8
;
	cmp     #$05
	jeq     L2373
	lda     __en_t
;
; ) {
;
	cmp     #$08
	beq     L2373
;
; if (res_on)
;
	lda     _res_on
	beq     L2379
;
; enems_hit ();
;
	jsr     _enems_hit
;
; if (i & PAD_A) {
;
L2379:	lda     _i
	and     #$01
	beq     L237C
;
; pj = 1; pctj = 0; pvy = -PLAYER_VY_JUMP_INITIAL;
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
	ldx     #$FF
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; sfx_play (SFX_JUMP, 0);
;
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; } else {
;
	jmp     L2387
;
; sfx_play (SFX_STEPON, 1);
;
L237C:	lda     #$0F
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; pvy = -PLAYER_VY_JUMP_INITIAL << 1;
;
	ldx     #$FF
	lda     #$80
	sta     _pvy
	stx     _pvy+1
;
; if (pry > _en_y - ENEMS_UPPER_COLLISION_BOUND) { pry = _en_y - ENEMS_UPPER_COLLISION_BOUND; py = pry << FIXBITS; }
;
L2387:	lda     _pry
	jsr     pusha0
	lda     __en_y
	sec
	sbc     #$0C
	bcs     L238F
	ldx     #$FF
L238F:	jsr     tosicmp
	bcc     L238D
	beq     L238D
	lda     __en_y
	sec
	sbc     #$0C
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; touched = 1;
;
L238D:	lda     #$01
;
; } else
;
	jmp     L283A
;
; _en_t != 5 &&
;
L2373:	lda     __en_t
	cmp     #$05
	beq     L239C
;
; touched == 0 &&
;
	lda     _touched
	bne     L239C
;
; pstate == EST_NORMAL &&
;
	lda     _pstate
	bne     L239C
;
; ) {
;
	jsr     _collide
	tax
	beq     L239C
;
; res_on == 0 
;
	lda     _res_on
;
; || _en_t == 8
;
	beq     L239D
	lda     __en_t
;
; )
;
	cmp     #$08
	bne     L239C
;
; pkill = 1;
;
L239D:	lda     #$01
	sta     _pkill
;
; touched = 1;
;
L283A:	sta     _touched
;
; || _en_t == 5
;
L239C:	lda     _touched
	bne     L23A3
	lda     __en_t
;
; || _en_t == 8
;
	cmp     #$05
	beq     L23A3
	lda     __en_t
;
; ) goto skipdo;
;
	cmp     #$08
;
; if (en_spr != 0xff) {
;
L23A3:	lda     _en_spr
	cmp     #$FF
	beq     L23A6
;
; _en_x, _en_y + SPRITE_ADJUST, 
;
	jsr     decsp3
	lda     __en_x
	ldy     #$02
	sta     (sp),y
	lda     __en_y
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L2849
	sec
L2849:	sbc     #$10
	bcs     L284A
	sec
L284A:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [en_spr]
;
	ldx     #$00
	lda     _en_spr
	asl     a
	bcc     L284B
	inx
	clc
L284B:	adc     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [en_spr]
;
	txa
	adc     _spr_enems+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; enems_update_unsigned_char_arrays ();
;
L23A6:	jsr     _enems_update_unsigned_char_arrays
;
; enf_x [gpit] = _enf_x; enf_vx [gpit] = _enf_vx;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L284C
	inx
	clc
L284C:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	lda     __enf_x
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     __enf_x+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L284D
	inx
	clc
L284D:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	lda     __enf_vx
	dey
	sta     (ptr1),y
	iny
	lda     __enf_vx+1
	sta     (ptr1),y
;
; enf_y [gpit] = _enf_y; enf_vy [gpit] = _enf_vy;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L284E
	inx
	clc
L284E:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	lda     __enf_y
	dey
	sta     (ptr1),y
	iny
	lda     __enf_y+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L284F
	inx
	clc
L284F:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	lda     __enf_vy
	dey
	sta     (ptr1),y
	iny
	lda     __enf_vy+1
	sta     (ptr1),y
;
; } 
;
	jmp     L20CF

.endproc

; ---------------------------------------------------------------
; void __near__ draw_game_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_game_frame: near

.segment	"CODE"

;
; unrle_vram (hud_rle, 0x2000);
;
	lda     #<(_hud_rle)
	ldx     #>(_hud_rle)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jmp     _unrle_vram

.endproc

; ---------------------------------------------------------------
; void __near__ hud_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_update: near

.segment	"CODE"

;
; if (okilled != pkilled) {
;
	lda     _pkilled
	cmp     _okilled
	beq     L23C5
;
; okilled = pkilled;
;
	lda     _pkilled
	sta     _okilled
;
; _x = KILLED_X; _y = KILLED_Y; _n = c_max_enems - pkilled; p_t ();
;
	lda     #$1C
	sta     __x
	lda     #$04
	sta     __y
	lda     _c_max_enems
	sec
	sbc     _pkilled
	sta     __n
	jsr     _p_t
;
; if (okeys != pkeys) {
;
L23C5:	lda     _pkeys
	cmp     _okeys
	beq     L23D0
;
; okeys = pkeys;
;
	lda     _pkeys
	sta     _okeys
;
; _x = KEYS_X; _y = KEYS_Y; _n = pkeys; p_t ();
;
	lda     #$0C
	sta     __x
	lda     #$04
	sta     __y
	lda     _pkeys
	sta     __n
	jsr     _p_t
;
; if (olife != plife) {
;
L23D0:	lda     _plife
	cmp     _olife
	beq     L23DB
;
; olife = plife;
;
	lda     _plife
	sta     _olife
;
; _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
;
	lda     #$04
	sta     __x
	sta     __y
	lda     _plife
	sta     __n
	jsr     _p_t
;
; HS_INV_X, HS_INV_Y,
;
L23DB:	jsr     decsp3
	lda     #$A0
	ldy     #$02
	sta     (sp),y
	lda     #$0F
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [pinv]
;
	ldx     #$00
	lda     _pinv
	asl     a
	bcc     L285A
	inx
	clc
L285A:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [pinv]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bat_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_in: near

.segment	"CODE"

;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; while (pad_poll (0));
;
L23F1:	lda     #$00
	jsr     _pad_poll
	tax
	bne     L23F1
;
; fade_delay = 4;
;
	lda     #$04
	sta     _fade_delay
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ bat_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bat_out: near

.segment	"CODE"

;
; fade_out ();
;
	jsr     _fade_out
;
; oam_clear ();
;
	jsr     _oam_clear
;
; ppu_off ();
;
	jmp     _ppu_off

.endproc

; ---------------------------------------------------------------
; void __near__ pres (__near__ const unsigned char*, __near__ __near__ function returning void*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pres: near

.segment	"CODE"

;
; cls ();
;
	jsr     _cls
;
; pal_bg (p);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _pal_bg
;
; (*func) ();
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     callax
;
; bat_in ();
;
	jsr     _bat_in
;
; pad_read ();
;
L2403:	jsr     _pad_read
;
; if (pad_this_frame & (PAD_A|PAD_B|PAD_START)) break;
;
	lda     _pad_this_frame
	and     #$0B
	beq     L2403
;
; bat_out ();
;
	jsr     _bat_out
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ scr_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scr_title: near

.segment	"CODE"

;
; unrle_vram (title_sp_rle, 0x2000);
;
	lda     #<(_title_sp_rle)
	ldx     #>(_title_sp_rle)
	jsr     pushax
	ldx     #$20
	lda     #$00
	jsr     _unrle_vram
;
; _x = 10; _y = 19; pr_str ("PULSA START!"); 
;
	lda     #$0A
	sta     __x
	lda     #$13
	sta     __y
	lda     #<(L0001)
	ldx     #>(L0001)
	jsr     pushax
	jsr     _pr_str
;
; _x = 5;  _y = 26; pr_str ("@ 2018 THE MOJON TWINS"); 
;
	lda     #$05
	sta     __x
	lda     #$1A
	sta     __y
	lda     #<(L0001+13)
	ldx     #>(L0001+13)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ scr_game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scr_game_over: near

.segment	"CODE"

;
; _x = 11; _y = 15; pr_str ("GAME OVER!");
;
	lda     #$0B
	sta     __x
	lda     #$0F
	sta     __y
	lda     #<(L0001+36)
	ldx     #>(L0001+36)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ scr_cuts (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scr_cuts: near

.segment	"CODE"

;
; _x =3; _y = 18; pr_str ("FINALLY, CHERIL MANAGED TO");
;
	lda     #$03
	sta     __x
	lda     #$12
	sta     __y
	lda     #<(L0001+47)
	ldx     #>(L0001+47)
	jsr     pushax
	jsr     _pr_str
;
; _y = 20; pr_str (" ESCAPE FROM CASTLE MOJON");
;
	lda     #$14
	sta     __y
	lda     #<(L0001+74)
	ldx     #>(L0001+74)
	jsr     pushax
	jsr     _pr_str
;
; _y = 22; pr_str ("WHAT NEW ADVENTURES AWAIT?");
;
	lda     #$16
	sta     __y
	lda     #<(L0001+100)
	ldx     #>(L0001+100)
	jsr     pushax
	jsr     _pr_str
;
; _y = 24; pr_str ("   THANKS FOR PLAYING!!");
;
	lda     #$18
	sta     __y
	lda     #<(L0001+127)
	ldx     #>(L0001+127)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ game_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_init: near

.segment	"CODE"

;
; win_level = game_over = 0;
;
	lda     #$00
	sta     _game_over
	sta     _win_level
;
; c_pal_bg =   l_pal_bg [level];
;
	tax
	lda     _level
	asl     a
	bcc     L2866
	inx
	clc
L2866:	adc     #<(_l_pal_bg)
	sta     ptr1
	txa
	adc     #>(_l_pal_bg)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_pal_bg+1
	dey
	lda     (ptr1),y
	sta     _c_pal_bg
;
; c_pal_fg =   l_pal_fg [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2867
	inx
	clc
L2867:	adc     #<(_l_pal_fg)
	sta     ptr1
	txa
	adc     #>(_l_pal_fg)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_pal_fg+1
	dey
	lda     (ptr1),y
	sta     _c_pal_fg
;
; c_ts_tmaps =  l_ts_tmaps [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2868
	inx
	clc
L2868:	adc     #<(_l_ts_tmaps)
	sta     ptr1
	txa
	adc     #>(_l_ts_tmaps)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_tmaps+1
	dey
	lda     (ptr1),y
	sta     _c_ts_tmaps
;
; c_ts_pals =  l_ts_pals [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2869
	inx
	clc
L2869:	adc     #<(_l_ts_pals)
	sta     ptr1
	txa
	adc     #>(_l_ts_pals)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_ts_pals+1
	dey
	lda     (ptr1),y
	sta     _c_ts_pals
;
; c_behs =   l_behs [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L286A
	inx
	clc
L286A:	adc     #<(_l_behs)
	sta     ptr1
	txa
	adc     #>(_l_behs)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_behs+1
	dey
	lda     (ptr1),y
	sta     _c_behs
;
; spr_enems =  l_spr_enems [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L286B
	inx
	clc
L286B:	adc     #<(_l_spr_enems)
	sta     ptr1
	txa
	adc     #>(_l_spr_enems)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _spr_enems+1
	dey
	lda     (ptr1),y
	sta     _spr_enems
;
; c_map =   l_map [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L286C
	inx
	clc
L286C:	adc     #<(_l_map)
	sta     ptr1
	txa
	adc     #>(_l_map)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_map+1
	dey
	lda     (ptr1),y
	sta     _c_map
;
; l_map_chr_rom_bank [level];
;
	ldy     _level
	lda     _l_map_chr_rom_bank,y
	sta     _c_map_chr_rom_bank
;
; c_locks =  l_locks [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L286D
	inx
	clc
L286D:	adc     #<(_l_locks)
	sta     ptr1
	txa
	adc     #>(_l_locks)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_locks+1
	dey
	lda     (ptr1),y
	sta     _c_locks
;
; l_n_bolts [level];
;
	ldy     _level
	lda     _l_n_bolts,y
	sta     _c_max_bolts
;
; c_enems =   l_enems [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L286E
	inx
	clc
L286E:	adc     #<(_l_enems)
	sta     ptr1
	txa
	adc     #>(_l_enems)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_enems+1
	dey
	lda     (ptr1),y
	sta     _c_enems
;
; c_hotspots =  l_hotspots [level]; 
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L286F
	inx
	clc
L286F:	adc     #<(_l_hotspots)
	sta     ptr1
	txa
	adc     #>(_l_hotspots)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     _c_hotspots+1
	dey
	lda     (ptr1),y
	sta     _c_hotspots
;
; c_max_enems =  l_player_max_enems [level];
;
	ldy     _level
	lda     _l_player_max_enems,y
	sta     _c_max_enems
;
; c_map_w =   l_map_w [level];
;
	ldy     _level
	lda     _l_map_w,y
	sta     _c_map_w
;
; l_interactives [level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L2870
	inx
	clc
L2870:	adc     #<(_l_interactives)
	sta     ptr1
	txa
	adc     #>(_l_interactives)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _c_interactives+1
	dey
	lda     (ptr1),y
	sta     _c_interactives
;
; pal_bg (c_pal_bg);
;
	lda     _c_pal_bg
	ldx     _c_pal_bg+1
	jsr     _pal_bg
;
; pal_spr (c_pal_fg);
;
	lda     _c_pal_fg
	ldx     _c_pal_fg+1
	jsr     _pal_spr
;
; cls ();
;
	jsr     _cls
;
; draw_game_frame ();
;
	jsr     _draw_game_frame
;
; n_pant = SCR_INI;
;
	ldy     _level
	lda     _l_scr_ini,y
	sta     _n_pant
;
; hotspots_load ();
;
	jsr     _hotspots_load
;
; memfill (lkact, 1, c_max_bolts);
;
	jsr     decsp3
	lda     #<(_lkact)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_lkact)
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	lda     _c_max_bolts
	ldx     #$00
	jsr     _memfill
;
; px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_x,y
	jsr     aslax4
	clc
	adc     #$04
	bcc     L2481
	inx
L2481:	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; py = (PLAYER_INI_Y << 4) << FIXBITS;
;
	ldy     _level
	ldx     #$00
	lda     _l_ini_y,y
	jsr     aslax4
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; player_init ();
;
	jsr     _player_init
;
; enems_persistent_load ();
;
	jsr     _enems_persistent_load
;
; enems_persistent_deaths_load ();
;
	jsr     _enems_persistent_deaths_load
;
; pkeys = 0;
;
	lda     #$00
	sta     _pkeys
;
; res_on = 0;
;
	sta     _res_on
;
; use_ct = 0;
;
	sta     _use_ct
;
; no_ct = 0;
;
	sta     _no_ct
;
; propellers_on = 0;
;
	sta     _propellers_on
;
; springs_on = 0;
;
	sta     _springs_on
;
; half_life = 0;
;
	sta     _half_life
;
; frame_counter = 0;
;
	sta     _frame_counter
;
; olife = oammo = oobjs = okeys = 0xff;
;
	lda     #$FF
	sta     _okeys
	sta     _oobjs
	sta     _oammo
	sta     _olife
;
; okilled = 0xff;
;
	sta     _okilled
;
; pal_cycle [0] = 0x18;
;
	lda     #$18
	sta     _pal_cycle
;
; pal_cycle [1] = 0x17;
;
	lda     #$17
	sta     _pal_cycle+1
;
; pal_cycle [2] = 0x27;
;
	lda     #$27
	sta     _pal_cycle+2
;
; level0_gate = 0; // There's a gate in level 0 which will be opened upon talking to Amador
;
	lda     #$00
	sta     _level0_gate
;
; level1_gate = 0; // There's a gate in level 1 which will be opened solving a puzzle
;
	sta     _level1_gate
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ prepare_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_scr: near

.segment	"CODE"

;
; if (!ft) fade_out (); else ft = 0;
;
	lda     _ft
	bne     L24B0
	jsr     _fade_out
	jmp     L24B3
L24B0:	lda     #$00
	sta     _ft
;
; ppu_off ();
;
L24B3:	jsr     _ppu_off
;
; prp_idx = 0;
;
	lda     #$00
	sta     _prp_idx
;
; enems_persistent_update ();
;
	jsr     _enems_persistent_update
;
; enems_load ();
;
	jsr     _enems_load
;
; hotspots_create (); 
;
	jsr     _hotspots_create
;
; cocos_init ();
;
	jsr     _cocos_init
;
; shine_active_ct = 0;
;
	lda     #$00
	sta     _shine_active_ct
;
; max_shines = 0;
;
	sta     _max_shines
;
; draw_scr ();
;
	jsr     _draw_scr
;
; interactives_create ();
;
	jsr     _interactives_create
;
; interactives_interact_with = 0xff;
;
	lda     #$FF
	sta     _interactives_interact_with
;
; bankswitch (l_chr_rom_bank [level]);
;
	ldy     _level
	lda     _l_chr_rom_bank,y
	jsr     _bankswitch
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; if (level == 1 && n_pant == 7) {
;
	lda     _level
	cmp     #$01
	bne     L24CA
	lda     _n_pant
	cmp     #$07
	bne     L24CA
;
; en_s [0] = en_s [1] = en_s [2] = 44; 
;
	lda     #$2C
	sta     _en_s+2
	sta     _en_s+1
	sta     _en_s
;
; gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
;
L24CA:	lda     #$03
	sta     _gpit
L24D7:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L24D8
	lda     #<(_en_spr_id)
	ldx     #>(_en_spr_id)
	clc
	adc     _gpit
	bcc     L24DC
	inx
L24DC:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_s,y
	ldy     #$00
	sta     (ptr1),y
	jmp     L24D7
;
; oam_index = 4;
;
L24D8:	lda     #$04
	sta     _oam_index
;
; prx = px >> FIXBITS; pry = py >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     asrax4
	jsr     asrax2
	sta     _prx
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_move ();
;
	jsr     _player_move
;
; player_render ();
;
	jsr     _player_render
;
; enems_move ();
;
	jsr     _enems_move
;
; if (hrt) hotspots_paint ();
;
	lda     _hrt
	beq     L24E9
	jsr     _hotspots_paint
;
; interactives_paint ();
;
L24E9:	jsr     _interactives_paint
;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; hud_update ();
;
	jsr     _hud_update
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; music_play (MUSIC_INGAME);
;
	lda     #$00
	jsr     _music_play
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; set_vram_update (UPDATE_LIST_SIZE, update_list);
;
	lda     #$20
	jsr     pusha
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; on_pant = 99; ft = 1; fade_delay = 1;
;
	lda     #$63
	sta     _on_pant
	lda     #$01
	sta     _ft
	sta     _fade_delay
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; oam_index = 0;
;
	lda     #$00
	sta     _oam_index
;
; ticker = 50;
;
	lda     #$32
	sta     _ticker
;
; if (ticker) ticker --; else ticker = 50;
;
L2509:	lda     _ticker
	beq     L250C
	lda     _ticker
	sec
	sbc     #$01
	jmp     L287E
L250C:	lda     #$32
L287E:	sta     _ticker
;
; half_life ^= 1;
;
	lda     _half_life
	eor     #$01
	sta     _half_life
;
; frame_counter ++;
;
	lda     _frame_counter
	clc
	adc     #$01
	sta     _frame_counter
;
; if (on_pant != n_pant) {
;
	lda     _n_pant
	cmp     _on_pant
	beq     L2515
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; hud_update ();
;
L2515:	jsr     _hud_update
;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; pad_read ();
;
	jsr     _pad_read
;
; a_button = (pad_this_frame & PAD_A);
;
	lda     _pad_this_frame
	and     #$01
	sta     _a_button
;
; b_button = (pad_this_frame & PAD_B);
;
	lda     _pad_this_frame
	and     #$02
	sta     _b_button
;
; if (prx == 4 && 
;
	lda     _prx
	cmp     #$04
	bne     L2528
;
; (cfx + pvx) < 0
;
	ldx     #$00
	lda     _cfx
	bpl     L252C
	dex
L252C:	clc
	adc     _pvx
	txa
	adc     _pvx+1
	tax
;
; ) {
;
	cpx     #$80
	bcc     L2528
;
; n_pant --;
;
	lda     _n_pant
	sec
	sbc     #$01
	sta     _n_pant
;
; px = 244 << FIXBITS;
;
	ldx     #$3D
	lda     #$00
	sta     _px
	stx     _px+1
;
; } else if (prx == 244 && 
;
	jmp     L254B
L2528:	lda     _prx
	cmp     #$F4
	bne     L2532
;
; (cfx + pvx) > 0
;
	ldx     #$00
	lda     _cfx
	bpl     L2536
	dex
L2536:	clc
	adc     _pvx
	pha
	txa
	adc     _pvx+1
	tax
	pla
;
; ) {
;
	cmp     #$01
	txa
	sbc     #$00
	bvs     L2537
	eor     #$80
L2537:	bpl     L2532
;
; n_pant ++;
;
	lda     _n_pant
	clc
	adc     #$01
	sta     _n_pant
;
; px = 4 << FIXBITS;
;
	ldx     #$01
	lda     #$00
	sta     _px
	stx     _px+1
;
; } else if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
;
	jmp     L254B
L2532:	lda     _pry
	bne     L253D
	ldx     _pvy+1
	cpx     #$80
	bcc     L253D
	lda     _n_pant
	cmp     _c_map_w
	bcc     L253D
;
; n_pant -= c_map_w;
;
	lda     _c_map_w
	eor     #$FF
	sec
	adc     _n_pant
	sta     _n_pant
;
; py = 192 << FIXBITS;
;
	ldx     #$30
	lda     #$00
	sta     _py
	stx     _py+1
;
; if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$FF
	bvs     L2547
	eor     #$80
L2547:	bpl     L254B
	ldx     #$FF
	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; } else if (pry >= 192 && pvy > 0) {
;
	jmp     L254B
L253D:	lda     _pry
	cmp     #$C0
	bcc     L254B
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L254E
	eor     #$80
L254E:	bpl     L254B
;
; n_pant += c_map_w;
;
	lda     _c_map_w
	clc
	adc     _n_pant
	sta     _n_pant
;
; py = 0;
;
	lda     #$00
	sta     _py
	sta     _py+1
;
; if (pkill) player_kill ();
;
L254B:	lda     _pkill
	beq     L2554
	jsr     _player_kill
;
; if (game_over) break;   
;
L2554:	lda     _game_over
	jne     L250A
;
; if (on_pant != n_pant) {
;
	lda     _n_pant
	cmp     _on_pant
	beq     L2559
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; if (c_max_enems == pkilled) {
;
L2559:	lda     _pkilled
	cmp     _c_max_enems
	bne     L2560
;
; en_cttouched [0] == 0 &&
;
	lda     _en_cttouched
	bne     L2560
;
; en_cttouched [1] == 0 &&
;
	lda     _en_cttouched+1
	bne     L2560
;
; en_cttouched [2] == 0
;
	lda     _en_cttouched+2
;
; ) win_level = 1;
;
	bne     L2560
	lda     #$01
	sta     _win_level
;
; if (level < 2 && (frame_counter & 7) == 0 ) {
;
L2560:	lda     _level
	cmp     #$02
	bcs     L2569
	lda     _frame_counter
	and     #$07
	bne     L2569
;
; rda = pal_cycle [2];
;
	lda     _pal_cycle+2
	sta     _rda
;
; pal_cycle [2] = pal_cycle [1]; 
;
	lda     _pal_cycle+1
	sta     _pal_cycle+2
;
; pal_cycle [1] = pal_cycle [0]; 
;
	lda     _pal_cycle
	sta     _pal_cycle+1
;
; pal_cycle [0] = rda;   
;
	lda     _rda
	sta     _pal_cycle
;
; pal_col (13, pal_cycle [2]);
;
	lda     #$0D
	jsr     pusha
	lda     _pal_cycle+2
	jsr     _pal_col
;
; pal_col (14, pal_cycle [1]);
;
	lda     #$0E
	jsr     pusha
	lda     _pal_cycle+1
	jsr     _pal_col
;
; pal_col (15, pal_cycle [0]);
;
	lda     #$0F
	jsr     pusha
	lda     _pal_cycle
	jsr     _pal_col
;
; if (win_level)
;
L2569:	lda     _win_level
	beq     L2589
;
; music_stop ();
;
	jsr     _music_stop
;
; delay (50);
;
	lda     #$32
	jsr     _delay
;
; break;
;
	jmp     L250A
;
; if (pstate) {
;
L2589:	lda     _pstate
	beq     L2591
;
; pctstate --;
;
	lda     _pctstate
	sec
	sbc     #$01
	sta     _pctstate
;
; if (!pctstate) pstate = EST_NORMAL;
;
	lda     _pctstate
	bne     L2591
	sta     _pstate
;
; if (propellers_on) propellers_do ();
;
L2591:	lda     _propellers_on
	beq     L2595
	jsr     _propellers_do
;
; if (res_on) {
;
L2595:	lda     _res_on
	jeq     L25B7
;
; if (hrt == HOTSPOT_TYPE_RESONATOR) {
;
	lda     _hrt
	cmp     #$04
	bne     L259A
;
; hrx + RESONATOR_COUNTER_OFFS_X, 
;
	jsr     decsp4
	lda     _hrx
	clc
	adc     #$04
	ldy     #$03
	sta     (sp),y
;
; hry + RESONATOR_COUNTER_OFFS_Y + SPRITE_ADJUST, 
;
	lda     _hry
	clc
	adc     #$07
	bcc     L2878
	clc
L2878:	adc     #$30
	sec
	sbc     #$0C
	bcs     L2879
	sec
L2879:	sbc     #$10
	bcs     L287A
	sec
L287A:	sbc     #$01
	dey
	sta     (sp),y
;
; RESONATOR_BASE_PATTERN + res_ct, 
;
	lda     _res_ct
	dey
	sta     (sp),y
;
; RESONATOR_PALETTE, 
;
	lda     #$03
	dey
	sta     (sp),y
;
; oam_index);
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (res_subct) res_subct --; else {
;
L259A:	lda     _res_subct
	beq     L25A9
	lda     _res_subct
	sec
	sbc     #$01
	sta     _res_subct
	jmp     L25B7
;
; res_subct = 50;
;
L25A9:	lda     #$32
	sta     _res_subct
;
; if (res_ct) { 
;
	lda     _res_ct
	beq     L25AF
;
; res_ct --; 
;
	lda     _res_ct
	sec
	sbc     #$01
	sta     _res_ct
;
; if (res_ct <= 5) sfx_play (SFX_COUNT, 2);
;
	cmp     #$06
	bcs     L25B7
	lda     #$0C
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; } else {
;
	jmp     L25B7
;
; res_on = 0;
;
L25AF:	sta     _res_on
;
; sfx_play (SFX_SPRING ,2); 
;
	lda     #$0B
	jsr     pusha
	lda     #$02
	jsr     _sfx_play
;
; pal_spr (c_pal_fg);
;
	lda     _c_pal_fg
	ldx     _c_pal_fg+1
	jsr     _pal_spr
;
; if (interactives_index) {
;
L25B7:	lda     _interactives_index
	jeq     L25E4
;
; && use_ct == 0
;
	lda     _b_button
	jeq     L25CE
	lda     _use_ct
;
; ) {
;
	jne     L25CE
;
; rdx = prx + 4; rdy = pry + 8;
;
	lda     _prx
	clc
	adc     #$04
	sta     _rdx
	lda     _pry
	clc
	adc     #$08
	sta     _rdy
;
; gpit = interactives_index; while (gpit --) {
;
	lda     _interactives_index
	sta     _gpit
L25CD:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L25CE
;
; rda = interactives_yx [gpit]; rdb = rda << 4; rdc = rda & 0xf0;
;
	ldy     _gpit
	lda     _interactives_yx,y
	sta     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rdb
	lda     _rda
	and     #$F0
	sta     _rdc
;
; (rdx >= rdb - 4 && rdx <= rdb + 19 && rdy >= rdc && rdy <= rdc + 15)
;
	lda     _rdx
	jsr     pusha0
	lda     _rdb
	sec
	sbc     #$04
	bcs     L25DB
	ldx     #$FF
L25DB:	jsr     tosicmp
	bcc     L25CD
	lda     _rdx
	jsr     pusha0
	lda     _rdb
	clc
	adc     #$13
	bcc     L25DD
	ldx     #$01
L25DD:	jsr     tosicmp
	beq     L287D
	bcs     L25CD
L287D:	lda     _rdy
	cmp     _rdc
	bcc     L25CD
	lda     _rdy
	jsr     pusha0
	lda     _rdc
	clc
	adc     #$0F
	bcc     L25DE
	ldx     #$01
L25DE:	jsr     tosicmp
	bcc     L25DA
	bne     L25CD
;
; interactives_interact_with = gpit;
;
L25DA:	lda     _gpit
	sta     _interactives_interact_with
;
; b_button = 0;
;
	lda     #$00
	sta     _b_button
;
; if (interactives_interact_with != 0xff) {
;
L25CE:	lda     _interactives_interact_with
	cmp     #$FF
	jeq     L25E4
;
; rdc = interactives_f [interactives_interact_with];
;
	ldy     _interactives_interact_with
	lda     _interactives_f,y
	sta     _rdc
;
; rdb = 0;
;
	lda     #$00
	sta     _rdb
;
; switch (level) {
;
	lda     _level
;
; }
;
	beq     L25F0
	cmp     #$01
	beq     L25FF
	cmp     #$02
	beq     L2605
	cmp     #$03
	beq     L2612
	cmp     #$04
	beq     L2618
	jmp     L25EE
;
; if (rdc == SPR_AMADOR) {
;
L25F0:	lda     _rdc
	cmp     #$1E
	bne     L25F1
;
; rda = 0; rdb = 2;
;
	lda     #$00
	sta     _rda
	lda     #$02
	sta     _rdb
;
; level0_gate = 1;
;
	lda     #$01
	sta     _level0_gate
;
; } else {
;
	jmp     L25EE
;
; rda = 11; rdb = 12;
;
L25F1:	lda     #$0B
	sta     _rda
	lda     #$0C
;
; break;
;
	jmp     L2876
;
; rda = 3; rdb = 5;
;
L25FF:	lda     #$03
	sta     _rda
	lda     #$05
;
; break;
;
	jmp     L2876
;
; if (rdc == SPR_GIRL) {
;
L2605:	lda     _rdc
	cmp     #$20
	bne     L2606
;
; rda = 6; rdb = 9;
;
	lda     #$06
	sta     _rda
	lda     #$09
;
; } else {
;
	jmp     L2876
;
; rda = 10; rdb = 10;
;
L2606:	lda     #$0A
	sta     _rda
;
; break;
;
	jmp     L2876
;
; rda = 13; rdb = 14;
;
L2612:	lda     #$0D
	sta     _rda
	lda     #$0E
;
; break;
;
	jmp     L2876
;
; if (rdc == SPR_CHEMA) {
;
L2618:	lda     _rdc
	cmp     #$25
	bne     L2619
;
; rda = 15; rdb = 16;
;
	lda     #$0F
	sta     _rda
	lda     #$10
;
; } else {
;
	jmp     L2876
;
; rda = 17; rdb = 18;
;
L2619:	lda     #$11
	sta     _rda
	lda     #$12
L2876:	sta     _rdb
;
; if (rdb) textbox_dialogue_do (rda, rdb);
;
L25EE:	lda     _rdb
	beq     L2624
	jsr     decsp2
	lda     _rda
	ldy     #$01
	sta     (sp),y
	lda     _rdb
	dey
	sta     (sp),y
	jsr     _textbox_dialogue_do
;
; interactives_interact_with = 0xff;
;
L2624:	lda     #$FF
	sta     _interactives_interact_with
;
; if (hrt) {
;
L25E4:	lda     _hrt
	jeq     L26CF
;
; if (collide_in (prx + 4, pry + 8, hrx, hry)) {
;
	jsr     decsp8
	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L2630
	inx
L2630:	ldy     #$06
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L2632
	inx
L2632:	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     _hrx
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _hry
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _collide_in
	tax
	jeq     L26CF
;
; if (hrt == HOTSPOT_TYPE_RESONATOR) {
;
	lda     _hrt
	cmp     #$04
	bne     L2635
;
; if (pvy > 0 && pry < hry) {
;
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L2639
	eor     #$80
L2639:	jpl     L26CF
	lda     _pry
	cmp     _hry
	jcs     L26CF
;
; if (res_on == 0) {
;
	lda     _res_on
	jne     L26CF
;
; res_on = 1; res_ct = 9; res_subct = 50;
;
	lda     #$01
	sta     _res_on
	lda     #$09
	sta     _res_ct
	lda     #$32
	sta     _res_subct
;
; pj = 1; pctj = 0; pvy = -PLAYER_VY_JUMP_INITIAL;
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
	ldx     #$FF
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; pal_spr (RESONATOR_CHANGE_SPR_PAL);
;
	lda     #<(_palssgrey)
	ldx     #>(_palssgrey)
	jsr     _pal_spr
;
; sfx_play (SFX_BREAKH, 1);
;
	lda     #$0D
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; } else
;
	jmp     L26CF
;
; use_ct == 0 && b_button 
;
L2635:	lda     _use_ct
	bne     L2650
;
; && ppossee
;
	lda     _b_button
	beq     L2650
;
; ) {
;
	lda     _ppossee
	beq     L2650
;
; use_ct = 1; use_sub_ct = USE_ANIM_FRAMES_PER_STEP;
;
	lda     #$01
	sta     _use_ct
	lda     #$04
	sta     _use_sub_ct
;
; b_button = a_button = 0;
;
	lda     #$00
	sta     _a_button
	sta     _b_button
;
; use_type = USE_TYPE_HOTSPOT;
;
	lda     #$01
	sta     _use_type
;
; if (use_ct == USE_ANIM_INTERACT_ON && use_sub_ct == USE_ANIM_FRAMES_PER_STEP && use_type == USE_TYPE_HOTSPOT)
;
L2650:	lda     _use_ct
	cmp     #$07
	jne     L26CF
	lda     _use_sub_ct
	cmp     #$04
	jne     L26CF
	lda     _use_type
	cmp     #$01
	jne     L26CF
;
; opinv = pinv;
;
	lda     _pinv
	sta     _opinv
;
; if (hrt == HS_OBJ_EMPTY) {
;
	lda     _hrt
	cmp     #$01
	bne     L2663
;
; hrt = ht [n_pant] = pinv;
;
	ldy     _n_pant
	lda     _pinv
	sta     _ht,y
	sta     _hrt
;
; pinv = HS_OBJ_EMPTY;
;
	lda     #$01
	sta     _pinv
;
; b_button = 0;
;
	lda     #$00
	sta     _b_button
;
; sfx_play (SFX_TILE, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; } else if (hrt >= HS_OBJ_MIN && hrt <= HS_OBJ_MAX) {
;
	jmp     L26C2
L2663:	lda     _hrt
	cmp     #$06
	bcc     L2672
	lda     _hrt
	cmp     #$0E
	bcs     L2672
;
; rda = hrt;
;
	lda     _hrt
	sta     _rda
;
; hrt = ht [n_pant] = pinv;
;
	ldy     _n_pant
	lda     _pinv
	sta     _ht,y
	sta     _hrt
;
; pinv = rda;
;
	lda     _rda
	sta     _pinv
;
; b_button = 0;
;
	lda     #$00
	sta     _b_button
;
; sfx_play (SFX_OBJECT, 1);
;
	lda     #$02
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; } else if (hrt >= HS_OBJ_MIN + HS_USE_OFFS && hrt <= HS_OBJ_MAX + HS_USE_OFFS) {
;
	jmp     L26C2
L2672:	lda     _hrt
	cmp     #$0E
	jcc     L2685
	lda     _hrt
	cmp     #$16
	bcs     L2685
;
; if (pinv == hrt - HS_USE_OFFS) {
;
	ldx     #$00
	lda     _hrt
	sec
	sbc     #$08
	bcs     L268B
	dex
L268B:	cpx     #$00
	bne     L2689
	cmp     _pinv
	bne     L2689
;
; rda = pinv;
;
	lda     _pinv
	sta     _rda
;
; rdb = hrt;
;
	lda     _hrt
	sta     _rdb
;
; hrt = ht [n_pant] = pinv + 2*HS_USE_OFFS;
;
	lda     #<(_ht)
	ldx     #>(_ht)
	clc
	adc     _n_pant
	bcc     L2693
	inx
L2693:	sta     ptr1
	stx     ptr1+1
	lda     _pinv
	clc
	adc     #$10
	ldy     #$00
	sta     (ptr1),y
	sta     _hrt
;
; pinv = HS_OBJ_EMPTY;
;
	lda     #$01
	sta     _pinv
;
; if (level == 3 && ht [9] == 6 + 2*HS_USE_OFFS) {
;
	lda     _level
	cmp     #$03
	bne     L2698
	lda     _ht+9
	cmp     #$16
	bne     L2698
;
; propellers_on = 1;
;
	lda     #$01
	sta     _propellers_on
;
; gp_gen = text_propellers;
;
	lda     #<(_text_propellers)
	sta     _gp_gen
	lda     #>(_text_propellers)
	sta     _gp_gen+1
;
; textbox_do ();
;
	jsr     _textbox_do
;
; b_button = 0;
;
L2698:	lda     #$00
	sta     _b_button
;
; sfx_play (SFX_USE, 1);
;
	lda     #$03
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; else no_ct = 100;
;
	jmp     L26C2
L2689:	lda     #$64
	sta     _no_ct
;
; else if (hrt >= HS_OBJ_MIN + 2*HS_USE_OFFS && hrt <= HS_OBJ_MAX + 2*HS_USE_OFFS) {
;
	jmp     L26C2
L2685:	lda     _hrt
	cmp     #$16
	bcc     L26AB
	lda     _hrt
	cmp     #$1E
	bcs     L26AB
;
; no_ct = 100;
;
	lda     #$64
	sta     _no_ct
;
; else
;
	jmp     L26C2
;
; rda = 0;
;
L26AB:	lda     #$00
	sta     _rda
;
; switch (hrt) {
;
	lda     _hrt
;
; }
;
	cmp     #$02
	beq     L26B8
	cmp     #$03
	beq     L26BD
	jmp     L26B6
;
; pkeys ++;
;
L26B8:	lda     _pkeys
	clc
	adc     #$01
	sta     _pkeys
;
; rda = SFX_OBJECT;
;
	lda     #$02
;
; break;
;
	jmp     L2877
;
; plife += PLAYER_REFILL;
;
L26BD:	inc     _plife
;
; rda = SFX_USE;
;
L2877:	sta     _rda
;
; if (rda) {
;
L26B6:	lda     _rda
	beq     L26C2
;
; sfx_play (rda, 1);
;
	lda     _rda
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; hrt = 0;
;
	lda     #$00
	sta     _hrt
;
; hact [n_pant] = 0;
;
	ldy     _n_pant
	sta     _hact,y
;
; if (opinv != pinv) {
;
L26C2:	lda     _pinv
	cmp     _opinv
	beq     L26CF
;
; level == 1 && 
;
	lda     _level
	cmp     #$01
	bne     L26CF
;
; level1_gate == 0 && 
;
	lda     _level1_gate
	bne     L26CF
;
; ht [0x12] == 9 && ht [0x16] == 10 && ht [0x0c] == 8
;
	lda     _ht+18
	cmp     #$09
	bne     L26CF
	lda     _ht+22
	cmp     #$0A
	bne     L26CF
	lda     _ht+12
;
; ) {
;
	cmp     #$08
	bne     L26CF
;
; level1_gate = 1;
;
	lda     #$01
	sta     _level1_gate
;
; gp_gen = text_open_gate;
;
	lda     #<(_text_open_gate)
	sta     _gp_gen
	lda     #>(_text_open_gate)
	sta     _gp_gen+1
;
; textbox_do ();
;
	jsr     _textbox_do
;
; player_move ();
;
L26CF:	jsr     _player_move
;
; player_render ();
;
	jsr     _player_render
;
; cocos_do ();
;
	jsr     _cocos_do
;
; enems_move ();
;
	jsr     _enems_move
;
; if (hrt) hotspots_paint ();
;
	lda     _hrt
	beq     L26DF
	jsr     _hotspots_paint
;
; interactives_paint ();
;
L26DF:	jsr     _interactives_paint
;
; shines_do ();
;
	jsr     _shines_do
;
; if (no_ct) {
;
	lda     _no_ct
	beq     L26E4
;
; no_ct --;
;
	lda     _no_ct
	sec
	sbc     #$01
	sta     _no_ct
;
; prx + NO_OFFS_X, pry + NO_OFFS_Y + SPRITE_ADJUST,
;
	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
	lda     _pry
	clc
	adc     #$E8
	pha
	lda     #$00
	adc     #$FF
	pla
	clc
	adc     #$30
	sec
	sbc     #$0C
	bcs     L287B
	sec
L287B:	sbc     #$10
	bcs     L287C
	sec
L287C:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; );
;
	lda     #<(_ssit_06)
	ldx     #>(_ssit_06)
	jsr     _oam_meta_spr
	sta     _oam_index
;
; if ((i & PAD_B) && (i & PAD_SELECT) && (i & PAD_UP)) break;
;
L26E4:	lda     _i
	and     #$02
	beq     L26F1
	lda     _i
	and     #$04
	beq     L26F1
	lda     _i
	and     #$10
	bne     L250A
;
; if (i & PAD_START) {
;
L26F1:	lda     _i
	and     #$08
	jeq     L2509
;
; while (pad_poll (0) & PAD_START);
;
L26FA:	lda     #$00
	jsr     _pad_poll
	and     #$08
	bne     L26FA
;
; music_pause (1);
;
	lda     #$01
	jsr     _music_pause
;
; sfx_play (0, 1);
;
	lda     #$00
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; pal_bright (3);
;
	lda     #$03
	jsr     _pal_bright
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; while (!(pad_poll (0) & PAD_START));
;
L2706:	lda     #$00
	jsr     _pad_poll
	and     #$08
	beq     L2706
;
; pal_bright (4);
;
	lda     #$04
	jsr     _pal_bright
;
; music_pause (0);
;
	lda     #$00
	jsr     _music_pause
;
; while (pad_poll (0) & PAD_START);
;
L270F:	lda     #$00
	jsr     _pad_poll
	and     #$08
	bne     L270F
;
; sfx_play (0, 1);
;
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; }
;
	jmp     L2509
;
; fade_delay = 4;
;
L250A:	lda     #$04
	sta     _fade_delay
;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; set_vram_update (0, 0);
;
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
;
; ppu_off ();
;
	jsr     _ppu_off
;
; oam_clear ();
;
	jmp     _oam_clear

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; bank_spr (1);
;
	lda     #$01
	jsr     _bank_spr
;
; bank_bg (0);
;
	lda     #$00
	jsr     _bank_bg
;
; ppu_off ();
;
	jsr     _ppu_off
;
; first_game = 1;
;
	lda     #$01
L287F:	sta     _first_game
;
; bankswitch (2); bank_bg (1);
;
	lda     #$02
	jsr     _bankswitch
	lda     #$01
	jsr     _bank_bg
;
; pres (paltitle, scr_title);
;
	jsr     decsp4
	lda     #<(_paltitle)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_paltitle)
	sta     (sp),y
	lda     #<(_scr_title)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_scr_title)
	sta     (sp),y
	jsr     _pres
;
; music_stop ();
;
	jsr     _music_stop
;
; bankswitch (0); bank_bg (0);
;
	lda     #$00
	jsr     _bankswitch
	lda     #$00
	jsr     _bank_bg
;
; level = 0;
;
	lda     #$00
	sta     _level
;
; plife = PLAYER_LIFE;
;
	lda     #$05
	sta     _plife
;
; scroll (0, SCROLL_Y);
;
L273A:	jsr     push0
	lda     #$0C
	jsr     _scroll
;
; game_init (); 
;
	jsr     _game_init
;
; game_loop ();
;
	jsr     _game_loop
;
; if (game_over) {
;
	lda     _game_over
	beq     L2742
;
; pres (palcuts0, scr_game_over);
;
	jsr     decsp4
	lda     #<(_palcuts0)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_palcuts0)
	sta     (sp),y
	lda     #<(_scr_game_over)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(_scr_game_over)
	sta     (sp),y
	jsr     _pres
;
; break;
;
	jmp     L273B
;
; level ++;
;
L2742:	lda     _level
	clc
	adc     #$01
	sta     _level
;
; if (level == MAX_LEVELS) 
;
	cmp     #$05
	bne     L273A
;
; first_game = 0;
;
L273B:	lda     #$00
;
; }
;
	jmp     L287F

.endproc

