// NES MK1 v1.0
// Copyleft Mojon Twins 2013, 2015, 2017, 2018

// script.h - Scripts interpreter.
// Script pools exported to script.h.bin
// generated by mscMK1 1.1 by the Mojon Twins

#define SCRIPT_POOL_0_OFFSET 0x0000

const unsigned int script_pool_offsets [] = {
    SCRIPT_POOL_0_OFFSET
};

#ifdef CLEAR_FLAGS
void msc_clear_flags (void) {
    memfill (flags, 0, MAX_FLAGS);
}
#endif

unsigned char read_byte (void) {
    return *script ++;
}

unsigned char read_vbyte (void) {
    sc_c = *script ++;
    if (sc_c & 128) return flags [sc_c & 127];
    return sc_c;
}

void readxy (void) {
    sc_x = read_vbyte ();
    sc_y = read_vbyte ();
}

void reloc_player (void) {
    prx = read_vbyte () << 4;        px = prx << FIXBITS;
    pry = (read_vbyte () << 4) + 16; py = pry << FIXBITS;
    player_stop ();
}

void run_script (unsigned char whichs) {
    // read address offset from index
    locate_res (SCRIPTS_RES);
    // Now the correct bank is paged in and
    // gp_gen contains a pointer to the pool
    script = (unsigned char *) (gp_gen + script_pool [level] + (whichs << 1));
    rda = *script ++; rdb = *script;
    script_result = 0;
    if (!(rda | rdb)) return;
    script = (unsigned char *) (gp_gen + script_pool [level] + rda + (rdb << 8));

    while ((sc_c = read_byte ()) != 0xff) {
        next_script = script + sc_c;
        sc_terminado = sc_continuar = 0;
        while (!sc_terminado) {
            switch (read_byte ()) {
                case 0x10: readxy (); sc_terminado = (flags [sc_x] != sc_y); break;
                case 0x12: readxy (); sc_terminado = (flags [sc_x] <= sc_y); break;
                case 0x20: readxy (); sc_x <<= 4; sc_y = 16 + (sc_y << 4); sc_terminado = (!(prx + 7 >= sc_x && prx <= sc_x + 15 && pry + 15 >= sc_y && pry <= sc_y + 15)); break;
                case 0x21: sc_terminado = (!(prx >= read_byte () && prx <= read_byte ())); break;
                case 0x22: sc_terminado = (!(pry >= read_byte () && pry <= read_byte ())); break;
                case 0x60: sc_terminado = (!just_pushed); break;
                case 0xf0: break;
                case 0xff: sc_terminado = sc_continuar = 1; break;
            }
        }

        if (sc_continuar) {
            fire_script_success = 1;
            sc_terminado = 0;
            while (!sc_terminado) {
                switch (read_byte ()) {
                    case 0x01: readxy (); flags [sc_x] = sc_y; break;
                    case 0x20: readxy (); _x = sc_x; _y = sc_y; _t = read_vbyte (); map_set (); break;
                    case 0x51: f_zone_ac = 1; fzx1 = read_byte (); fzy1 = read_byte (); fzx2 = read_byte (); fzy2 = read_byte (); break;
                    case 0x70: timer = read_vbyte (); break;
                    case 0x10: readxy (); flags [sc_x] += sc_y; break;
                    case 0x31: plife -= read_vbyte (); break;
                    case 0xe3: _x = LINE_OF_TEXT_X; _y = LINE_OF_TEXT; gp_gen = script; sc_n = read_byte (); script += (sc_n + 1); pr_ul_str (); break;
                    case 0x6d: n_pant = read_vbyte (); on_pant = 0xfe; reloc_player (); break;
                    case 0x6f: on_pant = 0xfe; break;
                    case 0xe4: do_extern_action (read_byte ()); break;
                    case 0xe0: sfx_play (read_vbyte (), 1); break;
                    case 0xf1: script_result = 1; return;
                    case 0xf2: return;
                    case 0xff: sc_terminado = 1; break;
                }
            }
        }
        script = next_script;
    }
}
