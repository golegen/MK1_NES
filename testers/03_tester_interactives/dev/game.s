;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_system
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_ppu_waitnmi
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_write
	.import		_memfill
	.import		_delay
	.export		_bitmasks
	.export		_bits
	.export		_palts0
	.export		_palss0
	.export		_behs0
	.export		_scr_0_00
	.export		_scr_0_01
	.export		_scr_0_02
	.export		_scr_0_03
	.export		_scr_0_04
	.export		_scr_0_06
	.export		_scr_0_08
	.export		_scr_0_09
	.export		_map_0
	.export		_enems_0
	.export		_hotspots_0
	.export		_sspl_00_a
	.export		_sspl_00_b
	.export		_sspl_01_a
	.export		_sspl_01_b
	.export		_sspl_02_a
	.export		_sspl_02_b
	.export		_sspl_03_a
	.export		_sspl_03_b
	.export		_sspl_04_a
	.export		_sspl_04_b
	.export		_sspl_05_a
	.export		_sspl_05_b
	.export		_sspl_06_a
	.export		_sspl_06_b
	.export		_sspl_07_a
	.export		_sspl_07_b
	.export		_sspl_08_a
	.export		_sspl_08_b
	.export		_sspl_09_a
	.export		_sspl_09_b
	.export		_sspl_0A_a
	.export		_sspl_0A_b
	.export		_sspl_0B_a
	.export		_sspl_0B_b
	.export		_ssen_00_a
	.export		_ssen_00_b
	.export		_ssen_01_a
	.export		_ssen_01_b
	.export		_ssen_02_a
	.export		_ssen_02_b
	.export		_ssen_03_a
	.export		_ssen_03_b
	.export		_ssen_04_a
	.export		_ssen_04_b
	.export		_ssen_05_a
	.export		_ssen_05_b
	.export		_ssplat_00
	.export		_ssplat_01
	.export		_ssit_00
	.export		_ssit_01
	.export		_ssit_02
	.export		_ssit_03
	.export		_ssit_04
	.export		_ssit_05
	.export		_ssit_06
	.export		_ssit_07
	.export		_ssit_08
	.export		_ts0_pals
	.export		_ts0_tmaps
	.export		_spr_player
	.export		_spr_enems0
	.export		_spr_hs
	.export		_custom_text0
	.export		_custom_text1
	.export		_custom_text2
	.export		_custom_texts
	.export		__x
	.export		__y
	.export		__n
	.export		__t
	.export		_pad0
	.export		_pad_this_frame
	.export		_gpit
	.export		_gpjt
	.export		_rds16
	.export		_gpint
	.export		_gp_gen
	.export		_gp_tmap
	.export		_gp_ram
	.export		_gp_addr
	.export		_rdx
	.export		_rdy
	.export		_rdt
	.export		_rdit
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdd
	.export		_rdm
	.export		_rde
	.export		_rds
	.export		_rdct
	.export		_ticker
	.export		_ast1
	.export		_at1
	.export		_at2
	.export		_cx1
	.export		_cx2
	.export		_cy1
	.export		_cy2
	.export		_caux
	.export		_oam_index
	.export		_en_initial
	.export		_en_offs
	.export		_en_fr
	.export		_en_collx
	.export		_en_colly
	.export		_en_spr
	.export		_touched
	.export		_en_is_alive
	.export		_pregotten
	.export		__en_t
	.export		__en_s
	.export		__en_x
	.export		__en_y
	.export		__en_x1
	.export		__en_y1
	.export		__en_x2
	.export		__en_y2
	.export		__en_mx
	.export		__en_my
	.export		__en_ct
	.export		__en_facing
	.export		__en_state
	.export		__enf_x
	.export		__enf_y
	.export		__enf_vx
	.export		__enf_vy
	.export		_en_sg_1
	.export		_en_sg_2
	.export		_vertical_engine_type
	.export		_px
	.export		_py
	.export		_pvx
	.export		_pvy
	.export		_prx
	.export		_pry
	.export		_pcx
	.export		_pcy
	.export		_pfacing
	.export		_pfr
	.export		_psprid
	.export		_a_button
	.export		_b_button
	.export		_pj
	.export		_pctj
	.export		_pgotten
	.export		_ppossee
	.export		_oppossee
	.export		_pflickering
	.export		_pbouncing
	.export		_phit
	.export		_pgtmx
	.export		_pgtmy
	.export		_hitv
	.export		_hith
	.export		_prx_old
	.export		_pry_old
	.export		_pkill
	.export		_pice
	.export		_pnotsafe
	.export		_pcontinues
	.export		_plife
	.export		_pobjs
	.export		_pammo
	.export		_pfiring
	.export		_n_pant_safe
	.export		_px_safe
	.export		_py_safe
	.export		_hrx
	.export		_hry
	.export		_hrt
	.export		_do_process_breakable
	.export		_ft
	.export		_c_map_w
	.export		_c_map_h
	.export		_c_map_size
	.export		_c_ts_pals
	.export		_c_ts_tmaps
	.export		_c_behs
	.export		_spr_enems
	.export		_c_pal_bg
	.export		_c_pal_fg
	.export		_c_map
	.export		_c_locks
	.export		_c_enems
	.export		_c_hotspots
	.export		_c_max_bolts
	.export		_sc_x
	.export		_sc_y
	.export		_sc_n
	.export		_sc_c
	.export		_next_script
	.export		_script
	.export		_script_result
	.export		_sc_terminado
	.export		_sc_continuar
	.export		_ntsc
	.export		_ntsc_frame
	.export		_update_index
	.export		_update_list
	.export		_attr_table
	.export		_fader
	.export		_fade_delay
	.export		_map_attr
	.export		_map_buff
	.export		_first_game
	.export		_level
	.export		_c_max_enems
	.export		_n_pant
	.export		_on_pant
	.export		_half_life
	.export		_frame_counter
	.export		_paused
	.export		_win_level
	.export		_game_over
	.export		_warp_to_level
	.export		_level_reset
	.export		_flick_override
	.export		_olife
	.export		_okeys
	.export		_oobjs
	.export		_oammo
	.export		_okilled
	.export		_oam_index_player
	.export		_use_ct
	.export		_use_sub_ct
	.export		_run_fire_script_do
	.export		_use_type
	.export		_hact
	.export		_run_script
	.export		_f_zone_ac
	.export		_fzx1
	.export		_fzx2
	.export		_fzy1
	.export		_fzy2
	.export		_fire_script_success
	.export		_just_interacted
	.export		_script_arg
	.export		_flags
	.export		_interactives_interact_with
	.export		_interactives_index
	.export		_interactives_f
	.export		_interactives_yx
	.export		_en_t
	.export		_en_x
	.export		_en_y
	.export		_en_x1
	.export		_en_y1
	.export		_en_x2
	.export		_en_y2
	.export		_en_mx
	.export		_en_my
	.export		_en_s
	.export		_en_facing
	.export		_en_state
	.export		_en_flags
	.export		_en_cttouched
	.export		_en_life
	.export		_en_status
	.export		_en_ct
	.export		_en_spr_x_mod
	.export		_en_spr_id
	.export		_player_render
	.export		_player_to_pixels
	.export		_fade_out
	.export		_fade_in
	.export		_clear_update_list
	.export		_cls
	.export		_ul_putc
	.export		_p_t
	.export		_upd_attr_table
	.export		_draw_tile
	.export		_update_list_tile
	.export		_map_set
	.export		_get_byte
	.export		_add_tile
	.export		_draw_scr
	.export		_pr_str
	.export		_cm_two_points
	.export		_collide
	.export		_add_sign
	.export		_run_fire_script
	.export		_saturate
	.export		_pad_read
	.export		_jump_start
	.export		_update_cycle
	.export		_box_buff
	.export		_textbox_frame
	.export		_textbox_draw_text
	.export		_textbox_do
	.export		_hotspots_load
	.export		_hotspots_paint
	.export		_hotspots_create
	.export		_interactives_paint
	.export		_interactives_add
	.export		_player_register_safe_spot
	.export		_player_stop
	.export		_player_init
	.export		_player_kill
	.export		_player_move
	.export		_enems_update_unsigned_char_arrays
	.export		_enems_facing
	.export		_enems_init_fp
	.export		_enems_boioiong_init
	.export		_enems_load
	.export		_enems_move
	.export		_draw_game_frame
	.export		_hud_update
	.export		_script_pool_0
	.export		_script_pool
	.export		_read_byte
	.export		_read_vbyte
	.export		_readxy
	.export		_flickscreen_do_horizontal
	.export		_flickscreen_do_vertical
	.export		_game_init
	.export		_prepare_scr
	.export		_game_loop
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_bitmasks:
	.byte	$FC
	.byte	$F3
	.byte	$CF
	.byte	$3F
_bits:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80
_palts0:
	.byte	$0F
	.byte	$04
	.byte	$27
	.byte	$35
	.byte	$0F
	.byte	$02
	.byte	$13
	.byte	$24
	.byte	$0F
	.byte	$05
	.byte	$15
	.byte	$24
	.byte	$0F
	.byte	$07
	.byte	$1A
	.byte	$29
_palss0:
	.byte	$0F
	.byte	$04
	.byte	$24
	.byte	$27
	.byte	$0F
	.byte	$06
	.byte	$1A
	.byte	$29
	.byte	$0F
	.byte	$15
	.byte	$24
	.byte	$3D
	.byte	$0F
	.byte	$02
	.byte	$12
	.byte	$38
_behs0:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$04
	.byte	$0A
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_scr_0_00:
	.byte	$05
	.byte	$15
	.byte	$65
	.byte	$12
	.byte	$E0
	.byte	$00
	.byte	$85
	.byte	$15
	.byte	$05
	.byte	$12
	.byte	$E0
	.byte	$45
	.byte	$15
	.byte	$65
	.byte	$12
	.byte	$C0
	.byte	$85
	.byte	$15
	.byte	$45
	.byte	$12
	.byte	$A0
	.byte	$01
	.byte	$C3
	.byte	$01
	.byte	$C0
	.byte	$01
	.byte	$E3
	.byte	$01
	.byte	$A0
	.byte	$02
	.byte	$C3
	.byte	$1D
	.byte	$1C
	.byte	$A0
	.byte	$01
	.byte	$C3
	.byte	$E1
	.byte	$01
	.byte	$0C
	.byte	$E3
	.byte	$83
	.byte	$22
	.byte	$13
	.byte	$E3
	.byte	$83
	.byte	$21
	.byte	$08
	.byte	$13
	.byte	$43
	.byte	$27
	.byte	$C3
	.byte	$02
	.byte	$01
	.byte	$11
	.byte	$E5
	.byte	$05
	.byte	$12
	.byte	$23
	.byte	$22
	.byte	$00
_scr_0_01:
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$02
	.byte	$E0
	.byte	$C0
	.byte	$02
	.byte	$E0
	.byte	$C0
	.byte	$02
	.byte	$E0
	.byte	$C0
	.byte	$02
	.byte	$E0
	.byte	$C0
	.byte	$E2
	.byte	$E2
	.byte	$00
_scr_0_02:
	.byte	$00
	.byte	$11
	.byte	$E5
	.byte	$05
	.byte	$12
	.byte	$23
	.byte	$22
	.byte	$00
	.byte	$0D
	.byte	$E3
	.byte	$83
	.byte	$01
	.byte	$00
	.byte	$09
	.byte	$E3
	.byte	$83
	.byte	$02
	.byte	$14
	.byte	$09
	.byte	$E3
	.byte	$83
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$03
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$83
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$03
	.byte	$01
	.byte	$29
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$23
	.byte	$1C
	.byte	$23
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$01
	.byte	$29
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$23
	.byte	$00
	.byte	$1C
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$01
	.byte	$29
	.byte	$03
	.byte	$5B
	.byte	$1C
	.byte	$03
	.byte	$20
	.byte	$03
	.byte	$5B
	.byte	$03
	.byte	$02
	.byte	$29
	.byte	$43
	.byte	$1C
	.byte	$00
	.byte	$1C
	.byte	$20
	.byte	$3C
	.byte	$03
	.byte	$1C
	.byte	$03
	.byte	$01
	.byte	$0A
	.byte	$09
	.byte	$0D
	.byte	$3C
	.byte	$40
	.byte	$1E
	.byte	$40
	.byte	$1C
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$29
	.byte	$0D
	.byte	$04
	.byte	$14
	.byte	$24
	.byte	$0D
	.byte	$44
	.byte	$14
	.byte	$00
	.byte	$13
	.byte	$01
	.byte	$0D
	.byte	$11
	.byte	$E5
	.byte	$25
	.byte	$12
	.byte	$00
	.byte	$11
	.byte	$12
	.byte	$00
_scr_0_03:
	.byte	$E1
	.byte	$E1
	.byte	$01
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$21
	.byte	$E0
	.byte	$A0
	.byte	$E1
	.byte	$E1
	.byte	$01
	.byte	$00
_scr_0_04:
	.byte	$E1
	.byte	$81
	.byte	$00
	.byte	$41
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$03
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$C3
	.byte	$21
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$83
	.byte	$13
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$63
	.byte	$11
	.byte	$05
	.byte	$15
	.byte	$21
	.byte	$5B
	.byte	$03
	.byte	$3B
	.byte	$01
	.byte	$83
	.byte	$1C
	.byte	$03
	.byte	$21
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$03
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$83
	.byte	$00
	.byte	$1C
	.byte	$01
	.byte	$02
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$23
	.byte	$02
	.byte	$03
	.byte	$1C
	.byte	$20
	.byte	$21
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$63
	.byte	$40
	.byte	$21
	.byte	$5B
	.byte	$03
	.byte	$5B
	.byte	$43
	.byte	$1C
	.byte	$40
	.byte	$02
	.byte	$01
	.byte	$43
	.byte	$22
	.byte	$83
	.byte	$60
	.byte	$02
	.byte	$01
	.byte	$43
	.byte	$22
	.byte	$23
	.byte	$1C
	.byte	$03
	.byte	$1C
	.byte	$60
	.byte	$22
	.byte	$23
	.byte	$0E
	.byte	$43
	.byte	$1C
	.byte	$00
	.byte	$1C
	.byte	$80
	.byte	$02
	.byte	$00
_scr_0_06:
	.byte	$01
	.byte	$E3
	.byte	$A3
	.byte	$21
	.byte	$02
	.byte	$63
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$83
	.byte	$1C
	.byte	$21
	.byte	$03
	.byte	$02
	.byte	$43
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$63
	.byte	$1C
	.byte	$00
	.byte	$21
	.byte	$23
	.byte	$02
	.byte	$23
	.byte	$16
	.byte	$00
	.byte	$17
	.byte	$23
	.byte	$3C
	.byte	$20
	.byte	$01
	.byte	$02
	.byte	$83
	.byte	$5B
	.byte	$23
	.byte	$60
	.byte	$02
	.byte	$01
	.byte	$43
	.byte	$3C
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$1C
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$23
	.byte	$1C
	.byte	$20
	.byte	$3C
	.byte	$00
	.byte	$1C
	.byte	$40
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$23
	.byte	$E0
	.byte	$60
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$1C
	.byte	$E0
	.byte	$00
	.byte	$0E
	.byte	$20
	.byte	$21
	.byte	$1C
	.byte	$E0
	.byte	$80
	.byte	$21
	.byte	$C0
	.byte	$0C
	.byte	$A7
	.byte	$41
	.byte	$40
	.byte	$E1
	.byte	$41
	.byte	$00
_scr_0_08:
	.byte	$21
	.byte	$40
	.byte	$E1
	.byte	$01
	.byte	$0D
	.byte	$09
	.byte	$02
	.byte	$40
	.byte	$11
	.byte	$12
	.byte	$E0
	.byte	$29
	.byte	$02
	.byte	$E0
	.byte	$80
	.byte	$0A
	.byte	$09
	.byte	$35
	.byte	$12
	.byte	$E0
	.byte	$60
	.byte	$0A
	.byte	$01
	.byte	$0C
	.byte	$E0
	.byte	$00
	.byte	$11
	.byte	$65
	.byte	$02
	.byte	$08
	.byte	$A0
	.byte	$14
	.byte	$C0
	.byte	$01
	.byte	$13
	.byte	$60
	.byte	$14
	.byte	$04
	.byte	$0D
	.byte	$C0
	.byte	$02
	.byte	$08
	.byte	$0B
	.byte	$20
	.byte	$04
	.byte	$2D
	.byte	$09
	.byte	$04
	.byte	$80
	.byte	$04
	.byte	$01
	.byte	$13
	.byte	$08
	.byte	$14
	.byte	$04
	.byte	$0D
	.byte	$49
	.byte	$0D
	.byte	$14
	.byte	$20
	.byte	$14
	.byte	$04
	.byte	$0D
	.byte	$01
	.byte	$08
	.byte	$4D
	.byte	$29
	.byte	$0A
	.byte	$29
	.byte	$0D
	.byte	$24
	.byte	$2D
	.byte	$09
	.byte	$2D
	.byte	$29
	.byte	$0A
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$2A
	.byte	$09
	.byte	$2D
	.byte	$69
	.byte	$2A
	.byte	$09
	.byte	$00
	.byte	$0A
	.byte	$60
	.byte	$0A
	.byte	$09
	.byte	$2A
	.byte	$09
	.byte	$0A
	.byte	$00
_scr_0_09:
	.byte	$0D
	.byte	$EA
	.byte	$8A
	.byte	$49
	.byte	$E0
	.byte	$80
	.byte	$0A
	.byte	$29
	.byte	$E0
	.byte	$A0
	.byte	$09
	.byte	$0A
	.byte	$E0
	.byte	$A0
	.byte	$09
	.byte	$05
	.byte	$12
	.byte	$E0
	.byte	$80
	.byte	$09
	.byte	$E0
	.byte	$C0
	.byte	$09
	.byte	$E0
	.byte	$C0
	.byte	$09
	.byte	$04
	.byte	$14
	.byte	$44
	.byte	$E0
	.byte	$20
	.byte	$09
	.byte	$8D
	.byte	$24
	.byte	$14
	.byte	$24
	.byte	$80
	.byte	$A9
	.byte	$8D
	.byte	$24
	.byte	$14
	.byte	$24
	.byte	$E9
	.byte	$49
	.byte	$8D
	.byte	$09
	.byte	$8A
	.byte	$E9
	.byte	$49
	.byte	$00
_map_0:
	.addr	_scr_0_00
	.addr	_scr_0_01
	.addr	_scr_0_02
	.addr	_scr_0_03
	.addr	_scr_0_04
	.addr	_scr_0_03
	.addr	_scr_0_06
	.addr	_scr_0_03
	.addr	_scr_0_08
	.addr	_scr_0_09
_enems_0:
	.byte	$04
	.byte	$81
	.byte	$87
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$B7
	.byte	$B4
	.byte	$01
	.byte	$02
	.byte	$B9
	.byte	$BB
	.byte	$01
	.byte	$04
	.byte	$2D
	.byte	$9D
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$81
	.byte	$8B
	.byte	$02
	.byte	$04
	.byte	$4B
	.byte	$46
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$51
	.byte	$5E
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$93
	.byte	$94
	.byte	$02
	.byte	$03
	.byte	$23
	.byte	$83
	.byte	$01
	.byte	$04
	.byte	$5A
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
_hotspots_0:
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
_sspl_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$02
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$06
	.byte	$00
	.byte	$80
_sspl_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$02
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$06
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$05
	.byte	$40
	.byte	$80
_sspl_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$08
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$0B
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$0C
	.byte	$00
	.byte	$80
_sspl_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$08
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$07
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$0C
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$0B
	.byte	$40
	.byte	$80
_sspl_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$80
_sspl_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$0F
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$12
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$80
_sspl_03_a:
	.byte	$FC
	.byte	$F8
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$08
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$15
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$80
_sspl_03_b:
	.byte	$FC
	.byte	$F8
	.byte	$08
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$07
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$14
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$13
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$16
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$15
	.byte	$40
	.byte	$80
_sspl_04_a:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$17
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$19
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1A
	.byte	$00
	.byte	$80
_sspl_04_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$18
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$17
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1A
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$19
	.byte	$40
	.byte	$80
_sspl_05_a:
	.byte	$FC
	.byte	$F8
	.byte	$1B
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$1E
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1F
	.byte	$00
	.byte	$80
_sspl_05_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$1B
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$1D
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$1C
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1F
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$1E
	.byte	$40
	.byte	$80
_sspl_06_a:
	.byte	$FC
	.byte	$F8
	.byte	$20
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$21
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$25
	.byte	$00
	.byte	$80
_sspl_06_b:
	.byte	$FC
	.byte	$F8
	.byte	$21
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$20
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$23
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$22
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$25
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$24
	.byte	$40
	.byte	$80
_sspl_07_a:
	.byte	$FC
	.byte	$F8
	.byte	$26
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$27
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$2A
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$2B
	.byte	$00
	.byte	$80
_sspl_07_b:
	.byte	$FC
	.byte	$F8
	.byte	$27
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$26
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$29
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$28
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$2B
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$2A
	.byte	$40
	.byte	$80
_sspl_08_a:
	.byte	$FC
	.byte	$F8
	.byte	$02
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$2C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$2D
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$06
	.byte	$00
	.byte	$80
_sspl_08_b:
	.byte	$FC
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$02
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$2D
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$2C
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$06
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$05
	.byte	$40
	.byte	$80
_sspl_09_a:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$17
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$2E
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$2F
	.byte	$00
	.byte	$80
_sspl_09_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$18
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$17
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$2F
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$2E
	.byte	$40
	.byte	$80
_sspl_0A_a:
	.byte	$FC
	.byte	$F8
	.byte	$30
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$31
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$32
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$34
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$35
	.byte	$00
	.byte	$80
_sspl_0A_b:
	.byte	$FC
	.byte	$F8
	.byte	$31
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$30
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$33
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$32
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$35
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$34
	.byte	$40
	.byte	$80
_sspl_0B_a:
	.byte	$FC
	.byte	$F8
	.byte	$30
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$31
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$36
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$34
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$35
	.byte	$00
	.byte	$80
_sspl_0B_b:
	.byte	$FC
	.byte	$F8
	.byte	$31
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$30
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$37
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$36
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$35
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$34
	.byte	$40
	.byte	$80
_ssen_00_a:
	.byte	$00
	.byte	$F8
	.byte	$38
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$39
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$3A
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3D
	.byte	$00
	.byte	$80
_ssen_00_b:
	.byte	$00
	.byte	$F8
	.byte	$39
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$38
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$3B
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$3A
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$3D
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$3C
	.byte	$42
	.byte	$80
_ssen_01_a:
	.byte	$00
	.byte	$F8
	.byte	$38
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$39
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$3E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$41
	.byte	$02
	.byte	$80
_ssen_01_b:
	.byte	$00
	.byte	$F8
	.byte	$39
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$38
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$3E
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$41
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$42
	.byte	$80
_ssen_02_a:
	.byte	$00
	.byte	$F8
	.byte	$42
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$43
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$45
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$46
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$47
	.byte	$02
	.byte	$80
_ssen_02_b:
	.byte	$00
	.byte	$F8
	.byte	$43
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$44
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$47
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$46
	.byte	$42
	.byte	$80
_ssen_03_a:
	.byte	$00
	.byte	$F8
	.byte	$48
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$49
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$4A
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$4B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4C
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4D
	.byte	$02
	.byte	$80
_ssen_03_b:
	.byte	$00
	.byte	$F8
	.byte	$49
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$48
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$4B
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$4A
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$42
	.byte	$80
_ssen_04_a:
	.byte	$00
	.byte	$F8
	.byte	$4E
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$4F
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$52
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$53
	.byte	$02
	.byte	$80
_ssen_04_b:
	.byte	$00
	.byte	$F8
	.byte	$4F
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$4E
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$50
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$52
	.byte	$42
	.byte	$80
_ssen_05_a:
	.byte	$00
	.byte	$F8
	.byte	$54
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$55
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$56
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$57
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$58
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$59
	.byte	$02
	.byte	$80
_ssen_05_b:
	.byte	$00
	.byte	$F8
	.byte	$55
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$54
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$57
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$56
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$59
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$58
	.byte	$42
	.byte	$80
_ssplat_00:
	.byte	$00
	.byte	$00
	.byte	$5A
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5A
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$5B
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$5C
	.byte	$02
	.byte	$80
_ssplat_01:
	.byte	$00
	.byte	$00
	.byte	$5A
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5A
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$5D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$5E
	.byte	$02
	.byte	$80
_ssit_00:
	.byte	$00
	.byte	$00
	.byte	$5F
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$5F
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$60
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$60
	.byte	$43
	.byte	$80
_ssit_01:
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$62
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$63
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$64
	.byte	$00
	.byte	$80
_ssit_02:
	.byte	$00
	.byte	$00
	.byte	$65
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$67
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$68
	.byte	$02
	.byte	$80
_ssit_03:
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$69
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$69
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$69
	.byte	$C2
	.byte	$80
_ssit_04:
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$6B
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6C
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$6D
	.byte	$01
	.byte	$80
_ssit_05:
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$6E
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$6E
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$6E
	.byte	$C1
	.byte	$80
_ssit_06:
	.byte	$00
	.byte	$00
	.byte	$6F
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$70
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$71
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$72
	.byte	$02
	.byte	$80
_ssit_07:
	.byte	$00
	.byte	$00
	.byte	$73
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$74
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$75
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$76
	.byte	$02
	.byte	$80
_ssit_08:
	.byte	$00
	.byte	$F8
	.byte	$77
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$78
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$79
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$7A
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$7B
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$7C
	.byte	$03
	.byte	$80
_ts0_pals:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts0_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$00
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$4F
	.byte	$79
	.byte	$7A
	.byte	$4F
	.byte	$7B
	.byte	$50
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$4F
	.byte	$4F
	.byte	$85
	.byte	$51
	.byte	$48
	.byte	$86
	.byte	$4A
	.byte	$86
	.byte	$87
	.byte	$49
	.byte	$87
	.byte	$4B
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$8B
	.byte	$48
	.byte	$49
	.byte	$8C
	.byte	$4B
	.byte	$8D
	.byte	$8E
	.byte	$4A
	.byte	$4B
	.byte	$8F
	.byte	$90
	.byte	$90
	.byte	$00
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$A0
	.byte	$A1
	.byte	$99
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$99
	.byte	$99
	.byte	$A6
	.byte	$A7
	.byte	$99
	.byte	$99
	.byte	$99
	.byte	$99
	.byte	$99
	.byte	$A8
	.byte	$A9
	.byte	$99
	.byte	$AA
	.byte	$99
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B3
	.byte	$B4
	.byte	$B4
	.byte	$99
	.byte	$99
	.byte	$99
	.byte	$99
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$00
	.byte	$BA
	.byte	$BA
	.byte	$00
	.byte	$00
	.byte	$BA
	.byte	$BC
	.byte	$00
	.byte	$BB
	.byte	$BB
	.byte	$00
	.byte	$BB
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$BB
	.byte	$00
	.byte	$BB
	.byte	$BB
	.byte	$00
	.byte	$BD
	.byte	$BA
	.byte	$00
	.byte	$00
	.byte	$BA
	.byte	$BA
	.byte	$00
	.byte	$BB
	.byte	$BA
	.byte	$BE
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_spr_player:
	.addr	_sspl_00_a
	.addr	_sspl_01_a
	.addr	_sspl_02_a
	.addr	_sspl_03_a
	.addr	_sspl_04_a
	.addr	_sspl_05_a
	.addr	_sspl_06_a
	.addr	_sspl_00_a
	.addr	_sspl_09_a
	.addr	_sspl_0A_a
	.addr	_sspl_0B_a
	.addr	_sspl_0B_a
	.addr	_sspl_0A_a
	.addr	_sspl_09_a
	.addr	_sspl_08_a
	.addr	_sspl_08_a
	.addr	_sspl_00_b
	.addr	_sspl_01_b
	.addr	_sspl_02_b
	.addr	_sspl_03_b
	.addr	_sspl_04_b
	.addr	_sspl_05_b
	.addr	_sspl_06_b
	.addr	_sspl_00_b
	.addr	_sspl_09_b
	.addr	_sspl_0A_b
	.addr	_sspl_0B_b
	.addr	_sspl_0B_b
	.addr	_sspl_0A_b
	.addr	_sspl_09_b
	.addr	_sspl_08_b
	.addr	_sspl_08_b
_spr_enems0:
	.addr	_ssen_00_a
	.addr	_ssen_01_a
	.word	$0000
	.word	$0000
	.addr	_ssen_00_b
	.addr	_ssen_01_b
	.word	$0000
	.word	$0000
	.addr	_ssen_02_a
	.addr	_ssen_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen_02_b
	.addr	_ssen_03_b
	.word	$0000
	.word	$0000
	.addr	_ssen_04_a
	.addr	_ssen_05_a
	.word	$0000
	.word	$0000
	.addr	_ssen_04_b
	.addr	_ssen_05_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
_spr_hs:
	.addr	_ssit_03
	.addr	_ssit_00
	.addr	_ssit_01
	.addr	_ssit_02
	.addr	_ssit_04
	.addr	_ssit_05
	.addr	_ssit_06
	.addr	_ssit_07
	.addr	_ssit_08
_custom_text0:
	.byte	$48,$49,$2C,$20,$55,$4E,$4E,$41,$4D,$45,$44,$20,$48,$45,$52,$4F
	.byte	$21,$25,$54,$48,$49,$53,$20,$49,$53,$20,$43,$48,$45,$52,$49,$4C
	.byte	$2E,$20,$49,$4E,$25,$54,$48,$49,$53,$20,$54,$45,$53,$54,$45,$52
	.byte	$20,$59,$4F,$55,$20,$48,$41,$56,$45,$25,$54,$4F,$20,$50,$4C,$41
	.byte	$43,$45,$20,$54,$48,$45,$20,$53,$4B,$55,$4C,$4C,$25,$49,$4E,$20
	.byte	$54,$48,$45,$20,$50,$45,$44,$45,$53,$54,$41,$4C,$2E,$00
_custom_text1:
	.byte	$49,$54,$20,$53,$45,$45,$4D,$53,$20,$54,$48,$41,$54,$20,$59,$4F
	.byte	$55,$25,$4D,$41,$44,$45,$20,$59,$4F,$55,$52,$20,$4F,$46,$46,$45
	.byte	$52,$21,$25,$49,$46,$20,$59,$4F,$55,$20,$41,$52,$45,$20,$4E,$4F
	.byte	$54,$20,$53,$55,$52,$45,$25,$4A,$55,$53,$54,$20,$54,$41,$4C,$4B
	.byte	$20,$54,$4F,$20,$43,$48,$45,$52,$49,$4C,$2E,$25,$54,$45,$53,$54
	.byte	$45,$52,$20,$41,$48,$4F,$59,$21,$00
_custom_text2:
	.byte	$54,$48,$49,$53,$20,$49,$53,$20,$41,$4E,$20,$45,$4D,$50,$54,$59
	.byte	$25,$50,$45,$44,$45,$53,$54,$41,$4C,$2E,$20,$50,$4C,$45,$41,$53
	.byte	$45,$25,$50,$4C,$41,$43,$45,$20,$41,$4E,$20,$4F,$46,$46,$45,$52
	.byte	$21,$00
_custom_texts:
	.addr	_custom_text0
	.addr	_custom_text1
	.addr	_custom_text2
_box_buff:
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$FF
	.byte	$FF
_script_pool_0:
	.byte	$34
	.byte	$00
	.byte	$4B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5B
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$88
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$93
	.byte	$00
	.byte	$9F
	.byte	$00
	.byte	$A8
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$10
	.byte	$05
	.byte	$06
	.byte	$FF
	.byte	$20
	.byte	$08
	.byte	$06
	.byte	$03
	.byte	$51
	.byte	$E9
	.byte	$01
	.byte	$FF
	.byte	$7F
	.byte	$FF
	.byte	$06
	.byte	$F0
	.byte	$FF
	.byte	$86
	.byte	$A2
	.byte	$08
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$21
	.byte	$E1
	.byte	$FF
	.byte	$FF
	.byte	$F1
	.byte	$FF
	.byte	$07
	.byte	$61
	.byte	$62
	.byte	$08
	.byte	$FF
	.byte	$ED
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$F0
	.byte	$FF
	.byte	$86
	.byte	$98
	.byte	$85
	.byte	$FF
	.byte	$FF
	.byte	$0B
	.byte	$61
	.byte	$63
	.byte	$85
	.byte	$13
	.byte	$05
	.byte	$00
	.byte	$FF
	.byte	$ED
	.byte	$01
	.byte	$F2
	.byte	$FF
	.byte	$07
	.byte	$61
	.byte	$63
	.byte	$85
	.byte	$FF
	.byte	$ED
	.byte	$02
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$F0
	.byte	$FF
	.byte	$86
	.byte	$94
	.byte	$81
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$F0
	.byte	$FF
	.byte	$86
	.byte	$5E
	.byte	$82
	.byte	$FF
	.byte	$FF
	.byte	$09
	.byte	$F0
	.byte	$FF
	.byte	$86
	.byte	$31
	.byte	$83
	.byte	$86
	.byte	$4D
	.byte	$84
	.byte	$FF
	.byte	$FF
	.byte	$0A
	.byte	$F0
	.byte	$FF
	.byte	$20
	.byte	$08
	.byte	$06
	.byte	$01
	.byte	$86
	.byte	$AC
	.byte	$08
	.byte	$FF
	.byte	$FF
	.byte	$07
	.byte	$61
	.byte	$62
	.byte	$08
	.byte	$FF
	.byte	$ED
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$15
	.byte	$F0
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$06
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$FF
	.byte	$FF
_script_pool:
	.addr	_script_pool_0
L0001:
	.byte	$4C,$49,$46,$45,$3A,$30,$30,$20,$20,$20,$49,$54,$45,$4D,$3A,$20
	.byte	$20,$20,$20,$20,$20,$4B,$45,$59,$53,$3A,$30,$30,$00,$49,$4E,$54
	.byte	$45,$52,$41,$43,$54,$49,$56,$45,$53,$2D,$54,$48,$45,$20,$4D,$4F
	.byte	$4A,$4F,$4E,$20,$54,$57,$49,$4E,$53,$00

.segment	"BSS"

.segment	"ZEROPAGE"
__x:
	.res	1,$00
__y:
	.res	1,$00
__n:
	.res	1,$00
__t:
	.res	1,$00
_pad0:
	.res	1,$00
_pad_this_frame:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_rds16:
	.res	2,$00
_gpint:
	.res	2,$00
_gp_gen:
	.res	2,$00
_gp_tmap:
	.res	2,$00
_gp_ram:
	.res	2,$00
_gp_addr:
	.res	2,$00
_rdx:
	.res	1,$00
_rdy:
	.res	1,$00
_rdt:
	.res	1,$00
_rdit:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdd:
	.res	1,$00
_rdm:
	.res	1,$00
_rde:
	.res	1,$00
_rds:
	.res	1,$00
_rdct:
	.res	1,$00
_ticker:
	.res	1,$00
_ast1:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
_cx1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy1:
	.res	1,$00
_cy2:
	.res	1,$00
_caux:
	.res	1,$00
_oam_index:
	.res	1,$00
_en_initial:
	.res	1,$00
_en_offs:
	.res	1,$00
_en_fr:
	.res	1,$00
_en_collx:
	.res	1,$00
_en_colly:
	.res	1,$00
_en_spr:
	.res	1,$00
_touched:
	.res	1,$00
_en_is_alive:
	.res	1,$00
_pregotten:
	.res	1,$00
__en_t:
	.res	1,$00
__en_s:
	.res	1,$00
__en_x:
	.res	1,$00
__en_y:
	.res	1,$00
__en_x1:
	.res	1,$00
__en_y1:
	.res	1,$00
__en_x2:
	.res	1,$00
__en_y2:
	.res	1,$00
__en_mx:
	.res	1,$00
__en_my:
	.res	1,$00
__en_ct:
	.res	1,$00
__en_facing:
	.res	1,$00
__en_state:
	.res	1,$00
__enf_x:
	.res	2,$00
__enf_y:
	.res	2,$00
__enf_vx:
	.res	2,$00
__enf_vy:
	.res	2,$00
_en_sg_1:
	.res	1,$00
_en_sg_2:
	.res	1,$00
_vertical_engine_type:
	.res	1,$00
_px:
	.res	2,$00
_py:
	.res	2,$00
_pvx:
	.res	2,$00
_pvy:
	.res	2,$00
_prx:
	.res	1,$00
_pry:
	.res	1,$00
_pcx:
	.res	1,$00
_pcy:
	.res	1,$00
_pfacing:
	.res	1,$00
_pfr:
	.res	1,$00
_psprid:
	.res	1,$00
_a_button:
	.res	1,$00
_b_button:
	.res	1,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_pgotten:
	.res	1,$00
_ppossee:
	.res	1,$00
_oppossee:
	.res	1,$00
_pflickering:
	.res	1,$00
_pbouncing:
	.res	1,$00
_phit:
	.res	1,$00
_pgtmx:
	.res	2,$00
_pgtmy:
	.res	2,$00
_hitv:
	.res	1,$00
_hith:
	.res	1,$00
_prx_old:
	.res	1,$00
_pry_old:
	.res	1,$00
_pkill:
	.res	1,$00
_pice:
	.res	1,$00
_pnotsafe:
	.res	1,$00
_pcontinues:
	.res	1,$00
_plife:
	.res	1,$00
_pobjs:
	.res	1,$00
_pammo:
	.res	1,$00
_pfiring:
	.res	1,$00
_n_pant_safe:
	.res	1,$00
_px_safe:
	.res	2,$00
_py_safe:
	.res	2,$00
_hrx:
	.res	1,$00
_hry:
	.res	1,$00
_hrt:
	.res	1,$00
_do_process_breakable:
	.res	1,$00
_ft:
	.res	1,$00
_c_map_w:
	.res	1,$00
_c_map_h:
	.res	1,$00
_c_map_size:
	.res	1,$00
_c_ts_pals:
	.res	2,$00
_c_ts_tmaps:
	.res	2,$00
_c_behs:
	.res	2,$00
_spr_enems:
	.res	2,$00
_c_pal_bg:
	.res	2,$00
_c_pal_fg:
	.res	2,$00
_c_map:
	.res	2,$00
_c_locks:
	.res	2,$00
_c_enems:
	.res	2,$00
_c_hotspots:
	.res	2,$00
_c_max_bolts:
	.res	1,$00
_sc_x:
	.res	1,$00
_sc_y:
	.res	1,$00
_sc_n:
	.res	1,$00
_sc_c:
	.res	1,$00
_next_script:
	.res	2,$00
_script:
	.res	2,$00
_script_result:
	.res	1,$00
_sc_terminado:
	.res	1,$00
_sc_continuar:
	.res	1,$00
.segment	"BSS"
_ntsc:
	.res	1,$00
_ntsc_frame:
	.res	1,$00
_update_index:
	.res	1,$00
_update_list:
	.res	96,$00
_attr_table:
	.res	64,$00
_fader:
	.res	1,$00
_fade_delay:
	.res	1,$00
_map_attr:
	.res	192,$00
_map_buff:
	.res	192,$00
_first_game:
	.res	1,$00
_level:
	.res	1,$00
_c_max_enems:
	.res	1,$00
_n_pant:
	.res	1,$00
_on_pant:
	.res	1,$00
_half_life:
	.res	1,$00
_frame_counter:
	.res	1,$00
_paused:
	.res	1,$00
_win_level:
	.res	1,$00
_game_over:
	.res	1,$00
_warp_to_level:
	.res	1,$00
_level_reset:
	.res	1,$00
_flick_override:
	.res	1,$00
_olife:
	.res	1,$00
_okeys:
	.res	1,$00
_oobjs:
	.res	1,$00
_oammo:
	.res	1,$00
_okilled:
	.res	1,$00
_oam_index_player:
	.res	1,$00
_use_ct:
	.res	1,$00
_use_sub_ct:
	.res	1,$00
_run_fire_script_do:
	.res	1,$00
_use_type:
	.res	1,$00
_hact:
	.res	10,$00
_f_zone_ac:
	.res	1,$00
_fzx1:
	.res	1,$00
_fzx2:
	.res	1,$00
_fzy1:
	.res	1,$00
_fzy2:
	.res	1,$00
_fire_script_success:
	.res	1,$00
_just_interacted:
	.res	1,$00
_script_arg:
	.res	1,$00
_flags:
	.res	16,$00
_interactives_interact_with:
	.res	1,$00
_interactives_index:
	.res	1,$00
_interactives_f:
	.res	4,$00
_interactives_yx:
	.res	4,$00
_en_t:
	.res	3,$00
_en_x:
	.res	3,$00
_en_y:
	.res	3,$00
_en_x1:
	.res	3,$00
_en_y1:
	.res	3,$00
_en_x2:
	.res	3,$00
_en_y2:
	.res	3,$00
_en_mx:
	.res	3,$00
_en_my:
	.res	3,$00
_en_s:
	.res	3,$00
_en_facing:
	.res	3,$00
_en_state:
	.res	3,$00
_en_flags:
	.res	3,$00
_en_cttouched:
	.res	3,$00
_en_life:
	.res	3,$00
_en_status:
	.res	3,$00
_en_ct:
	.res	3,$00
_en_spr_x_mod:
	.res	1,$00
_en_spr_id:
	.res	3,$00

; ---------------------------------------------------------------
; void __near__ run_script (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_run_script: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) script_pool [level] + (whichs << 1);
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L1335
	inx
	clc
L1335:	adc     #<(_script_pool)
	sta     ptr1
	txa
	adc     #>(_script_pool)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L1336
	inx
	clc
L1336:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	sta     _gp_gen
	stx     _gp_gen+1
;
; rda = *gp_gen ++; rdb = *gp_gen;
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L10BE
	inx
L10BE:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rda
	lda     _gp_gen
	sta     ptr1
	lda     _gp_gen+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     _rdb
;
; script_result = 0;
;
	tya
	sta     _script_result
;
; if (!(rda | rdb)) return;
;
	tax
	lda     _rdb
	ora     _rda
	pha
	pla
	jeq     incsp1
;
; script = (unsigned char *) script_pool [level] + rda + (rdb << 8);
;
	lda     _level
	asl     a
	bcc     L1337
	inx
	clc
L1337:	adc     #<(_script_pool)
	sta     ptr1
	txa
	adc     #>(_script_pool)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	clc
	adc     _rda
	bcc     L132C
	inx
L132C:	sta     ptr1
	stx     ptr1+1
	tya
	clc
	adc     ptr1
	sta     _script
	lda     _rdb
	adc     ptr1+1
L1339:	sta     _script+1
;
; while ((sc_c = read_byte ()) != 0xff) {
;
	jsr     _read_byte
	sta     _sc_c
	cmp     #$FF
	jeq     incsp1
;
; next_script = script + sc_c;
;
	lda     _script
	ldx     _script+1
	clc
	adc     _sc_c
	bcc     L132D
	inx
L132D:	sta     _next_script
	stx     _next_script+1
;
; sc_terminado = sc_continuar = 0;
;
	lda     #$00
L1338:	sta     _sc_continuar
L1333:	sta     _sc_terminado
;
; while (!sc_terminado) {
;
L10D4:	lda     _sc_terminado
	jne     L10D5
;
; switch (read_byte ()) {
;
	jsr     _read_byte
;
; }
;
	cmp     #$10
	beq     L10DB
	cmp     #$13
	beq     L10E3
	cmp     #$21
	beq     L10EB
	cmp     #$61
	beq     L10F3
	cmp     #$62
	beq     L10F8
	cmp     #$63
	beq     L10FD
	cmp     #$F0
	beq     L10D4
	cmp     #$FF
	beq     L1104
	jmp     L10D4
;
; case 0x10: readxy (); sc_terminado = (flags [sc_x] != sc_y); break;
;
L10DB:	jsr     _readxy
	ldy     _sc_x
	lda     _flags,y
	cmp     _sc_y
	jsr     boolne
	jmp     L1333
;
; case 0x13: readxy (); sc_terminado = (flags [sc_x] == sc_y); break;
;
L10E3:	jsr     _readxy
	ldy     _sc_x
	lda     _flags,y
	cmp     _sc_y
	jsr     booleq
	jmp     L1333
;
; case 0x21: sc_terminado = (!(prx >= read_byte () && prx <= read_byte ())); break;
;
L10EB:	lda     _prx
	jsr     pusha0
	jsr     _read_byte
	jsr     tosicmp
	bcc     L10F0
	lda     _prx
	jsr     pusha0
	jsr     _read_byte
	jsr     tosicmp
	bcc     L10EF
	beq     L10EF
L10F0:	lda     #$00
	jmp     L10F1
L10EF:	lda     #$01
L10F1:	jsr     bnega
	jmp     L1333
;
; case 0x61: sc_terminado = (!just_interacted); break;
;
L10F3:	lda     _just_interacted
	jsr     bnega
	jmp     L1333
;
; case 0x62: sc_terminado = (script_arg != read_vbyte ()); break;
;
L10F8:	lda     _script_arg
	jsr     pusha0
	jsr     _read_vbyte
	jsr     tosneax
	jmp     L1333
;
; case 0x63: sc_terminado = (script_arg != read_byte ()); break;
;
L10FD:	lda     _script_arg
	jsr     pusha0
	jsr     _read_byte
	jsr     tosneax
	jmp     L1333
;
; case 0xff: sc_terminado = sc_continuar = 1; break;
;
L1104:	lda     #$01
	jmp     L1338
;
; if (sc_continuar) {
;
L10D5:	lda     _sc_continuar
	jeq     L110F
;
; fire_script_success = 1;
;
	lda     #$01
	sta     _fire_script_success
;
; sc_terminado = 0;
;
	lda     #$00
L1334:	sta     _sc_terminado
;
; while (!sc_terminado) {
;
L110E:	lda     _sc_terminado
	jne     L110F
;
; switch (read_byte ()) {
;
	jsr     _read_byte
;
; }
;
	cmp     #$01
	beq     L1115
	cmp     #$20
	beq     L111C
	cmp     #$51
	beq     L1126
	cmp     #$86
	jeq     L1138
	cmp     #$ED
	beq     L1132
	cmp     #$F1
	jeq     L113F
	cmp     #$F2
	jeq     incsp1
	cmp     #$FF
	jeq     L1145
	jmp     L110E
;
; case 0x01: readxy (); flags [sc_x] = sc_y; break;
;
L1115:	jsr     _readxy
	ldy     _sc_x
	lda     _sc_y
	sta     _flags,y
	jmp     L110E
;
; case 0x20: readxy (); _x = sc_x; _y = sc_y; _t = read_vbyte (); map_set (); break;
;
L111C:	jsr     _readxy
	lda     _sc_x
	sta     __x
	lda     _sc_y
	sta     __y
	jsr     _read_vbyte
	sta     __t
	jsr     _map_set
	jmp     L110E
;
; case 0x51: f_zone_ac = 1; fzx1 = read_byte (); fzy1 = read_byte (); fzx2 = read_byte (); fzy2 = read_byte (); break;
;
L1126:	lda     #$01
	sta     _f_zone_ac
	jsr     _read_byte
	sta     _fzx1
	jsr     _read_byte
	sta     _fzy1
	jsr     _read_byte
	sta     _fzx2
	jsr     _read_byte
	sta     _fzy2
	jmp     L110E
;
; case 0xed: gp_gen = custom_texts [read_vbyte ()]; textbox_do (); break;
;
L1132:	jsr     _read_vbyte
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_custom_texts)
	sta     ptr1
	lda     tmp1
	adc     #>(_custom_texts)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _gp_gen+1
	dey
	lda     (ptr1),y
	sta     _gp_gen
	jsr     _textbox_do
	jmp     L110E
;
; case 0x86: sc_x = read_byte (); sc_y = read_byte (); interactives_add (); break;
;
L1138:	jsr     _read_byte
	sta     _sc_x
	jsr     _read_byte
	sta     _sc_y
	jsr     _interactives_add
	jmp     L110E
;
; case 0xf1: script_result = 1; return;
;
L113F:	lda     #$01
	sta     _script_result
	jmp     incsp1
;
; case 0xff: sc_terminado = 1; break;
;
L1145:	lda     #$01
	jmp     L1334
;
; script = next_script;
;
L110F:	lda     _next_script
	sta     _script
	lda     _next_script+1
;
; }
;
	jmp     L1339

.endproc

; ---------------------------------------------------------------
; void __near__ player_render (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_render: near

.segment	"CODE"

;
; if (0 == pflickering || half_life) 
;
	lda     _pflickering
	beq     L0BFE
	lda     _half_life
	bne     L0BFE
	rts
;
; prx,
;
L0BFE:	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
;
; pry + SPRITE_ADJUST, 
;
	lda     _pry
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L133C
	sec
L133C:	sbc     #$10
	bcs     L133D
	sec
L133D:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_player [psprid]
;
	ldx     #$00
	lda     _psprid
	asl     a
	bcc     L133E
	inx
	clc
L133E:	adc     #<(_spr_player)
;
; );
;
	sta     ptr1
;
; spr_player [psprid]
;
	txa
	adc     #>(_spr_player)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_to_pixels (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_to_pixels: near

.segment	"CODE"

;
; prx = px >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     shrax4
	jsr     shrax2
	sta     _prx
;
; pry = py >> FIXBITS;
;
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for (fader = 4; fader > -1; fader --) {
;
	lda     #$04
L133F:	sta     _fader
	tax
	bmi     L0926
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 4; fader > -1; fader --) {
;
	lda     _fader
	sec
	sbc     #$01
	jmp     L133F
;
; }
;
L0926:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     #$00
L1340:	sta     _fader
	sec
	sbc     #$05
	bvc     L093C
	eor     #$80
L093C:	bpl     L0935
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     _fader
	clc
	adc     #$01
	jmp     L1340
;
; }
;
L0935:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clear_update_list (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_update_list: near

.segment	"CODE"

;
; memfill (update_list, 0, UPDATE_LIST_SIZE*3);
;
	jsr     decsp3
	lda     #<(_update_list)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_update_list)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$60
	jsr     _memfill
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; vram_adr (0x2000); vram_fill(0x00, 
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
;
; );
;
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ ul_putc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_putc: near

.segment	"CODE"

;
; __asm__ ("ldx %v", update_index);
;
	ldx     _update_index
;
; __asm__ ("lda %v + 1", gp_addr);
;
	lda     _gp_addr + 1
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda %v", _n);
;
	lda     __n
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; __asm__ ("inc %v", gp_addr);
;
	inc     _gp_addr
;
; __asm__ ("bne %g", ul_putc_inc16_0);
;
	bne     L095C
;
; __asm__ ("inc %v + 1", gp_addr);
;
	inc     _gp_addr + 1
;
; __asm__ ("inc %v", update_index);
;
L095C:	inc     _update_index
;
; __asm__ ("inc %v", update_index);
;
	inc     _update_index
;
; __asm__ ("inc %v", update_index);
;
	inc     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ p_t (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t: near

.segment	"CODE"

;
; gp_addr = (_y << 5) + _x + 0x2000;
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L1341
	inx
L1341:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; __asm__ ("lda %v", _n);
;
	lda     __n
;
; __asm__ ("ldx #$ff");
;
	ldx     #$ff
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("inx");
;
L0968:	inx
;
; __asm__ ("sbc #10");
;
	sbc     #10
;
; __asm__ ("bcs %g", p_t_loop_0);
;
	bcs     L0968
;
; __asm__ ("adc #10");
;
	adc     #10
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("stx %v", _n);
;
	stx     __n
;
; _n += 16;      ul_putc ();
;
	lda     #$10
	clc
	adc     __n
	sta     __n
	jsr     _ul_putc
;
; _n = rda + 16; ul_putc ();
;
	lda     _rda
	clc
	adc     #$10
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ upd_attr_table (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_upd_attr_table: near

.segment	"CODE"

;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", rdc); // rdc = (_x >> 2)
;
	sta     _rdc
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("and #$f8");  // A = (_y << 1) & 0xf8
;
	and     #$f8
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rdc);
;
	adc     _rdc
;
; __asm__ ("sta %v", rdc); // Result
;
	sta     _rdc
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", attr_table);
;
	lda     _attr_table,x
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("sta %v", rdb); // rdb = ((_x >> 1) & 1)
;
	sta     _rdb
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("asl a");   // A = (((_y >> 1) & 1) << 1)
;
	asl     a
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rdb);
;
	adc     _rdb
;
; __asm__ ("sta %v", rdb); // Result
;
	sta     _rdb
;
; __asm__ ("lda %v", c_ts_pals);
;
	lda     _c_ts_pals
;
; __asm__ ("ldx %v + 1", c_ts_pals);
;
	ldx     _c_ts_pals + 1
;
; __asm__ ("ldy %v", _t);
;
	ldy     __t
;
; __asm__ ("sta ptr1");
;
	sta     ptr1
;
; __asm__ ("stx ptr1+1");
;
	stx     ptr1+1
;
; __asm__ ("lda (ptr1), y");
;
	lda     (ptr1),y
;
; __asm__ ("ldx %v", rdb); 
;
	ldx     _rdb
;
; __asm__ ("beq %g", upd_attr_table_loop_0_skip);
;
	beq     L0997
;
; __asm__ ("asl a");
;
L0998:	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("dex");
;
	dex
;
; __asm__ ("bne %g", upd_attr_table_loop_0);
;
	bne     L0998
;
; __asm__ ("sta %v", ast1); // ast1 = (c_ts_pals [_t] << (rdb << 1));
;
L0997:	sta     _ast1
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("ldx %v", rdb);
;
	ldx     _rdb
;
; __asm__ ("and %v, x", bitmasks);
;
	and     _bitmasks,x
;
; __asm__ ("ora %v", ast1);
;
	ora     _ast1
;
; __asm__ ("sta %v", rda); // Result
;
	sta     _rda
;
; __asm__ ("ldx %v", rdc);
;
	ldx     _rdc
;
; __asm__ ("sta %v, x", attr_table);
;
	sta     _attr_table,x
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + NAMETABLE_BASE);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L1342
	inx
L1342:	pha
	txa
	clc
	adc     #$20
	tax
	pla
	sta     _gp_addr
	stx     _gp_addr+1
;
; vram_adr (gp_addr); ++ gp_addr;
;
	jsr     _vram_adr
	inc     _gp_addr
	bne     L09B1
	inc     _gp_addr+1
;
; SET_FROM_PTR (rda, gp_tmap); ++ gp_tmap; vram_put (rda);
;
L09B1:	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	inc     _gp_tmap
	bne     L09B6
	inc     _gp_tmap+1
L09B6:	lda     _rda
	jsr     _vram_put
;
; SET_FROM_PTR (rda, gp_tmap); ++ gp_tmap; vram_put (rda);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	inc     _gp_tmap
	bne     L09BD
	inc     _gp_tmap+1
L09BD:	lda     _rda
	jsr     _vram_put
;
; gp_addr += 31;
;
	lda     #$1F
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L09C2
	inc     _gp_addr+1
;
; vram_adr (gp_addr); ++ gp_addr;
;
L09C2:	lda     _gp_addr
	ldx     _gp_addr+1
	jsr     _vram_adr
	inc     _gp_addr
	bne     L09C6
	inc     _gp_addr+1
;
; SET_FROM_PTR (rda, gp_tmap); ++ gp_tmap; vram_put (rda);
;
L09C6:	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	inc     _gp_tmap
	bne     L09CB
	inc     _gp_tmap+1
L09CB:	lda     _rda
	jsr     _vram_put
;
; SET_FROM_PTR (rda, gp_tmap);             vram_put (rda);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	jmp     _vram_put

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_addr = (NAMETABLE_BASE + 0x03c0) + rdc;
;
	lda     _rdc
	clc
	adc     #$C0
	sta     _gp_addr
	lda     #$00
	adc     #$23
	sta     _gp_addr+1
;
; _n = rda; ul_putc ();
;
	lda     _rda
	sta     __n
	jsr     _ul_putc
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + NAMETABLE_BASE);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L1343
	inx
L1343:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; SET_FROM_PTR (_n, gp_tmap); ++ gp_tmap; ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	inc     _gp_tmap
	bne     L09E6
	inc     _gp_tmap+1
L09E6:	jsr     _ul_putc
;
; SET_FROM_PTR (_n, gp_tmap); ++ gp_tmap; ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	inc     _gp_tmap
	bne     L09EC
	inc     _gp_tmap+1
L09EC:	jsr     _ul_putc
;
; gp_addr += 30;
;
	lda     #$1E
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L09F0
	inc     _gp_addr+1
;
; SET_FROM_PTR (_n, gp_tmap); ++ gp_tmap; ul_putc ();
;
L09F0:	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	inc     _gp_tmap
	bne     L09F5
	inc     _gp_tmap+1
L09F5:	jsr     _ul_putc
;
; SET_FROM_PTR (_n, gp_tmap);             ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ map_set (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_map_set: near

.segment	"CODE"

;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", ast1);
;
	sta     _ast1
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("ora %v", ast1);
;
	ora     _ast1
;
; __asm__ ("tax");    // X = COORDS (_x, _y)
;
	tax
;
; __asm__ ("lda %v", _t);
;
	lda     __t
;
; __asm__ ("sta %v, x", map_buff);
;
	sta     _map_buff,x
;
; __asm__ ("lda %v", c_behs);
;
	lda     _c_behs
;
; __asm__ ("sta ptr1");
;
	sta     ptr1
;
; __asm__ ("lda %v + 1", c_behs);
;
	lda     _c_behs + 1
;
; __asm__ ("sta ptr1 + 1");
;
	sta     ptr1 + 1
;
; __asm__ ("ldy %v", _t);
;
	ldy     __t
;
; __asm__ ("lda (ptr1), y");  // A = c_behs [_t]
;
	lda     (ptr1),y
;
; __asm__ ("sta %v, x", map_attr);
;
	sta     _map_attr,x
;
; __asm__ ("asl %v", _x);
;
	asl     __x
;
; _y = TOP_ADJUST + (_y << 1);  
;
	lda     __y
	asl     a
	bcc     L1345
	clc
L1345:	adc     #$04
	sta     __y
;
; update_list_tile (); 
;
	jmp     _update_list_tile

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_byte: near

.segment	"CODE"

;
; -- rdit; return *gp_gen ++;
;
	dec     _rdit
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0A17
	inx
L0A17:	sta     _gp_gen
	stx     _gp_gen+1
	ldx     #$00
	lda     (regsave,x)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_tile: near

.segment	"CODE"

;
; map_buff [rdm] = rda;
;
	ldy     _rdm
	lda     _rda
	sta     _map_buff,y
;
; ++ rdm;
;
	inc     _rdm
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_scr: near

.segment	"CODE"

;
; rdm = 0;
;
	lda     #$00
	sta     _rdm
;
; gp_gen = c_map [n_pant];
;
	tax
	lda     _n_pant
	asl     a
	bcc     L1349
	inx
	clc
L1349:	adc     _c_map
	sta     ptr1
	txa
	adc     _c_map+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _gp_gen+1
	dey
	lda     (ptr1),y
	sta     _gp_gen
;
; while (rdm < 192) {
;
L0A24:	lda     _rdm
	cmp     #$C0
	bcs     L0A25
;
; SET_FROM_PTR (rdt, gp_gen); 
;
	ldy     #0
	lda     (_gp_gen),y
	sta     _rdt
;
; gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	clc
	adc     #$01
	bcc     L0A2B
	inx
L0A2B:	sta     _gp_gen
	stx     _gp_gen+1
;
; rda = rdt & 0x1f;
;
	lda     _rdt
	and     #$1F
	sta     _rda
;
; rdct = rdt;
;
	lda     _rdt
L1348:	sta     _rdct
;
; while (rdct >= 32) {
;
	cmp     #$20
	bcc     L0A31
;
; add_tile (); rdct -= 32;
;
	jsr     _add_tile
	lda     _rdct
	sec
	sbc     #$20
;
; } add_tile ();
;
	jmp     L1348
L0A31:	jsr     _add_tile
;
; }
;
	jmp     L0A24
;
; _x = 0; _y = TOP_ADJUST; 
;
L0A25:	lda     #$00
	sta     __x
	lda     #$04
	sta     __y
;
; gp_ram = map_buff;
;
	lda     #<(_map_buff)
	sta     _gp_ram
	lda     #>(_map_buff)
	sta     _gp_ram+1
;
; for (rdm = 0; rdm < 192; rdm ++) {
;
	lda     #$00
L134A:	sta     _rdm
	cmp     #$C0
	bcs     L0A3E
;
; SET_FROM_PTR (rdt, gp_ram); gp_ram ++;
;
	ldy     #0
	lda     (_gp_ram),y
	sta     _rdt
	lda     _gp_ram
	ldx     _gp_ram+1
	clc
	adc     #$01
	bcc     L0A49
	inx
L0A49:	sta     _gp_ram
	stx     _gp_ram+1
;
; map_attr [rdm] = c_behs [rdt];
;
	lda     #<(_map_attr)
	ldx     #>(_map_attr)
	clc
	adc     _rdm
	bcc     L0A4C
	inx
L0A4C:	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     _rdt
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; _t = rdt; draw_tile ();
;
	lda     _rdt
	sta     __t
	jsr     _draw_tile
;
; _x = (_x + 2) & 0x1f; if (!_x) _y += 2;
;
	lda     __x
	clc
	adc     #$02
	and     #$1F
	sta     __x
	lda     __x
	bne     L0A3F
	lda     #$02
	clc
	adc     __y
	sta     __y
;
; for (rdm = 0; rdm < 192; rdm ++) {
;
L0A3F:	lda     _rdm
	clc
	adc     #$01
	jmp     L134A
;
; vram_write (attr_table, 0x23c0, 64);
;
L0A3E:	jsr     decsp4
	lda     #<(_attr_table)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_attr_table)
	sta     (sp),y
	lda     #$C0
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$23
	sta     (sp),y
	ldx     #$00
	lda     #$40
	jmp     _vram_write

.endproc

; ---------------------------------------------------------------
; void __near__ pr_str (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pr_str: near

.segment	"CODE"

;
; vram_adr (((_y << 5) | _x) + 0x2000);
;
L135A:	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     __x
	ora     ptr1
	pha
	lda     tmp1
	clc
	adc     #$20
	tax
	pla
	jsr     _vram_adr
;
; while (gpit = *s++) {
;
L0A63:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0A67
	inx
L0A67:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     _gpit
	tax
	jeq     incsp2
;
; if (gpit == '%') {
;
	lda     _gpit
	cmp     #$25
	bne     L0A68
;
; ++ _y; vram_adr (((_y << 5) | _x) + 0x2000);
;
	inc     __y
;
; else vram_put (gpit - 32); 
;
	jmp     L135A
L0A68:	lda     _gpit
	sec
	sbc     #$20
	jsr     _vram_put
;
; }
;
	jmp     L0A63

.endproc

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; if (cy1 > 12 || cy2 > 12) { at1 = at2 = 0; return; }
;
	lda     _cy1
	cmp     #$0D
	bcs     L0A75
	lda     _cy2
	cmp     #$0D
	bcc     L0A74
L0A75:	lda     #$00
	sta     _at2
	sta     _at1
	rts
;
; at1 = map_attr [COORDS (cx1, cy1 ? cy1 - 1 : 0)];
;
L0A74:	lda     _cy1
	beq     L0A81
	ldx     #$00
	lda     _cy1
	sec
	sbc     #$01
	bcs     L0A84
	dex
	jmp     L0A84
L0A81:	tax
L0A84:	jsr     shlax4
	ora     _cx1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at1
;
; at2 = map_attr [COORDS (cx2, cy2 ? cy2 - 1 : 0)];
;
	lda     _cy2
	beq     L0A8D
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L0A90
	dex
	jmp     L0A90
L0A8D:	tax
L0A90:	jsr     shlax4
	ora     _cx2
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide: near

.segment	"CODE"

;
; prx + 3 >= EN_X_ABSOLUTE && 
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$03
	bcc     L0A95
	inx
L0A95:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L0A96
;
; prx <= EN_X_ABSOLUTE + 11 && 
;
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0B
	bcc     L0A97
	ldx     #$01
L0A97:	jsr     tosicmp
	beq     L135C
	bcs     L0A96
;
; pry + 13 + ENEMS_COLLISION_VSTRETCH_FG >= _en_y &&
;
L135C:	ldx     #$00
	lda     _pry
	clc
	adc     #$0D
	bcc     L0A98
	inx
L0A98:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L0A96
;
; pry <= _en_y + 13 + PLAYER_COLLISION_VSTRETCH_FG
;
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$0D
	bcc     L135B
	ldx     #$01
;
; );
;
	clc
L135B:	adc     #$FC
	pha
	txa
	adc     #$FF
	tax
	pla
	jsr     tosicmp
	bcc     L0A94
	beq     L0A94
L0A96:	ldx     #$00
	txa
	rts
L0A94:	ldx     #$00
	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ add_sign (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_sign: near

.segment	"CODE"

;
; return sign == 0 ? 0 : sign < 0 ? -value : value;
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L0A9E
	cmp     #$00
	jeq     incsp4
L0A9E:	iny
	lda     (sp),y
	tax
	cpx     #$80
	bcc     L0AA2
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L0AA2:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ run_fire_script (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_run_fire_script: near

.segment	"CODE"

;
; fire_script_success = 0;
;
	lda     #$00
	sta     _fire_script_success
;
; run_script (2 * MAP_SIZE + 2);
;
	lda     #$16
	jsr     pusha
	jsr     _run_script
;
; run_script ((n_pant << 1) + 1); 
;
	lda     _n_pant
	asl     a
	bcc     L135E
	clc
L135E:	adc     #$01
	jsr     pusha
	jsr     _run_script
;
; just_interacted = 0;
;
	lda     #$00
	sta     _just_interacted
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ saturate (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_saturate: near

.segment	"CODE"

;
; return v >= 0 ? (v > max ? max : v) : (v < -max ? -max : v);
;
	ldy     #$03
	lda     (sp),y
	bmi     L0AB3
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L0ABD
	beq     L0ABD
	ldy     #$01
	jmp     L1365
L0AB3:	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jsr     tosicmp
	bpl     L0ABD
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L0ABD:	ldy     #$03
L1365:	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ pad_read (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pad_read: near

.segment	"CODE"

;
; pad_this_frame = pad0;
;
	lda     _pad0
	sta     _pad_this_frame
;
; pad0 = pad_poll (0);   // Read pads here.
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad0
;
; pad_this_frame = (pad_this_frame ^ pad0) & pad0;
;
	eor     _pad_this_frame
	sta     ptr1
	lda     _pad0
	and     ptr1
	sta     _pad_this_frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ jump_start (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_jump_start: near

.segment	"CODE"

;
; pj = 1; pctj = 0; 
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
;
; sfx_play (SFX_JUMP, 0);
;
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pvy = -PLAYER_VY_JUMP_INITIAL;
;
	ldx     #$FF
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_cycle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_cycle: near

.segment	"CODE"

;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ textbox_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_textbox_frame: near

.segment	"CODE"

;
; rdct = 0; _y = 12;
;
	lda     #$00
	sta     _rdct
	lda     #$0C
	sta     __y
;
; _x = 0; 
;
	lda     #$00
	sta     __x
;
; gp_ram = rdm ? ((unsigned char *) box_buff) : (map_buff + (((_y - TOP_ADJUST) >> 1) << 4));
;
	lda     _rdm
	beq     L0B24
	lda     #<(_box_buff)
	ldx     #>(_box_buff)
	jmp     L0B27
L0B24:	tax
	lda     __y
	sec
	sbc     #$04
	bcs     L0B2D
	dex
L0B2D:	jsr     shrax1
	jsr     shlax4
	clc
	adc     #<(_map_buff)
	tay
	txa
	adc     #>(_map_buff)
	tax
	tya
L0B27:	sta     _gp_ram
	stx     _gp_ram+1
;
; gpit = 64; while (gpit --) {
;
	lda     #$40
	sta     _gpit
L0B30:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L0B31
;
; rdt = *gp_ram ++; 
;
	lda     _gp_ram
	ldx     _gp_ram+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0B35
	inx
L0B35:	sta     _gp_ram
	stx     _gp_ram+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
;
; if (rdct == 0) clear_update_list ();
;
	lda     _rdct
	bne     L0B36
	jsr     _clear_update_list
;
; if (rdt != 0xff) { 
;
L0B36:	lda     _rdt
	cmp     #$FF
	beq     L0B39
;
; _t = rdt + rdm;
;
	lda     _rdt
	clc
	adc     _rdm
	sta     __t
;
; update_list_tile (); 
;
	jsr     _update_list_tile
;
; _x = (_x + 2) & 0x1f; if (_x == 0) _y += 2;
;
L0B39:	lda     __x
	clc
	adc     #$02
	and     #$1F
	sta     __x
	lda     __x
	bne     L0B42
	lda     #$02
	clc
	adc     __y
	sta     __y
;
; ++ rdct; if (rdct == 4) { ppu_waitnmi (); rdct = 0; }
;
L0B42:	inc     _rdct
	lda     _rdct
	cmp     #$04
	bne     L0B30
	jsr     _ppu_waitnmi
	lda     #$00
	sta     _rdct
;
; }
;
	jmp     L0B30
;
; }
;
L0B31:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ textbox_draw_text (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_textbox_draw_text: near

.segment	"CODE"

;
; rda = 1; // New line marker!
;
	lda     #$01
	sta     _rda
;
; rdy = 13;
;
	lda     #$0D
	sta     _rdy
;
; while (rdt = *gp_gen ++) {
;
L0B51:	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0B55
	inx
L0B55:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdt
	tax
	beq     L0B52
;
; if (rda) { clear_update_list (); rda = 0; gp_addr = NAMETABLE_BASE + 6 + (rdy << 5); }
;
	lda     _rda
	beq     L0B56
	jsr     _clear_update_list
	lda     #$00
	sta     _rda
	tax
	lda     _rdy
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #$06
	sta     _gp_addr
	lda     tmp1
	adc     #$20
	sta     _gp_addr+1
;
; if (rdt == '%') rda = 1; else { _n = rdt - 32; ul_putc (); }
;
L0B56:	lda     _rdt
	cmp     #$25
	bne     L0B5E
	lda     #$01
	sta     _rda
	jmp     L0B62
L0B5E:	lda     _rdt
	sec
	sbc     #$20
	sta     __n
	jsr     _ul_putc
;
; if (rda) { ppu_waitnmi (); ++ rdy; }
;
L0B62:	lda     _rda
	beq     L0B51
	jsr     _ppu_waitnmi
	inc     _rdy
;
; } 
;
	jmp     L0B51
;
; }
;
L0B52:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ textbox_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_textbox_do: near

.segment	"CODE"

;
; rdm = TEXT_BOX_FRAME_TILE_OFFSET; textbox_frame ();
;
	lda     #$30
	sta     _rdm
	jsr     _textbox_frame
;
; textbox_draw_text ();
;
	jsr     _textbox_draw_text
;
; ppu_waitnmi ();
;
L0B70:	jsr     _ppu_waitnmi
;
; pad_read (); if (pad_this_frame & (PAD_A|PAD_B)) break;
;
	jsr     _pad_read
	lda     _pad_this_frame
	and     #$03
	beq     L0B70
;
; rdm = 0; textbox_frame ();
;
	lda     #$00
	sta     _rdm
	jsr     _textbox_frame
;
; clear_update_list ();
;
	jmp     _clear_update_list

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) c_hotspots;
;
	lda     _c_hotspots
	sta     _gp_gen
	lda     _c_hotspots+1
	sta     _gp_gen+1
;
; for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
;
	lda     #$00
L1367:	sta     _gpit
	cmp     #$0A
	bcs     L0B80
;
; hact [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _hact,y
;
; for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L1367
;
; }
;
L0B80:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_paint: near

.segment	"CODE"

;
; rda = hrt;
;
	lda     _hrt
	sta     _rda
;
; hrx, 
;
	jsr     decsp3
	lda     _hrx
	ldy     #$02
	sta     (sp),y
;
; hry + SPRITE_ADJUST, 
;
	lda     _hry
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L1369
	sec
L1369:	sbc     #$10
	bcs     L136A
	sec
L136A:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [rda]
;
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L136B
	inx
	clc
L136B:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [rda]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_create: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_hotspots + (HS_CUR_PANT << 1));
;
	ldx     #$00
	lda     _n_pant
	asl     a
	bcc     L136D
	inx
	clc
L136D:	adc     _c_hotspots
	sta     _gp_gen
	txa
	adc     _c_hotspots+1
	sta     _gp_gen+1
;
; SET_FROM_PTR (hrt, gp_gen); gp_gen ++;
;
	ldy     #0
	lda     (_gp_gen),y
	sta     _hrt
	lda     _gp_gen
	ldx     _gp_gen+1
	clc
	adc     #$01
	bcc     L0BA2
	inx
L0BA2:	sta     _gp_gen
	stx     _gp_gen+1
;
; SET_FROM_PTR (rda, gp_gen);
;
	lda     (_gp_gen),y
	sta     _rda
;
; if (hrt && hact [HS_CUR_PANT]) {
;
	lda     _hrt
	beq     L0BA6
	ldy     _n_pant
	lda     _hact,y
	beq     L0BA6
;
; hry = rda & 0xf0; hrx = rda << 4;
;
	lda     _rda
	and     #$F0
	sta     _hry
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _hrx
;
; } else hrt = 0;
;
	rts
L0BA6:	lda     #$00
	sta     _hrt
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ interactives_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_interactives_paint: near

.segment	"CODE"

;
; gpit = interactives_index; while (gpit --) {
;
	lda     _interactives_index
	sta     _gpit
L0BB6:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L0BB7
;
; rda = interactives_f [gpit];
;
	ldy     _gpit
	lda     _interactives_f,y
	sta     _rda
;
; interactives_yx [gpit] << 4, (interactives_yx [gpit] & 0xf0) + SPRITE_ADJUST,
;
	jsr     decsp3
	ldy     _gpit
	lda     _interactives_yx,y
	asl     a
	asl     a
	asl     a
	asl     a
	ldy     #$02
	sta     (sp),y
	ldy     _gpit
	lda     _interactives_yx,y
	and     #$F0
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L1370
	sec
L1370:	sbc     #$10
	bcs     L1371
	sec
L1371:	sbc     #$01
	ldy     #$01
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [rda & 0x80 ? flags [rda & 0x7f] : rda]
;
	lda     _rda
	and     #$80
	beq     L0BCD
	lda     _rda
	and     #$7F
	sta     ptr1
	tya
	clc
	adc     #>(_flags)
	sta     ptr1+1
	ldy     #<(_flags)
	lda     (ptr1),y
	jmp     L136F
L0BCD:	lda     _rda
L136F:	ldx     #$00
	asl     a
	bcc     L1372
	inx
	clc
L1372:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [rda & 0x80 ? flags [rda & 0x7f] : rda]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	jmp     L0BB6
;
; }
;
L0BB7:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ interactives_add (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_interactives_add: near

.segment	"CODE"

;
; interactives_yx [interactives_index] = sc_x;
;
	ldy     _interactives_index
	lda     _sc_x
	sta     _interactives_yx,y
;
; interactives_f [interactives_index ++] = sc_y;
;
	lda     _interactives_index
	pha
	clc
	adc     #$01
	sta     _interactives_index
	pla
	clc
	adc     #<(_interactives_f)
	sta     ptr1
	lda     #$00
	adc     #>(_interactives_f)
	sta     ptr1+1
	lda     _sc_y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_register_safe_spot (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_register_safe_spot: near

.segment	"CODE"

;
; px_safe = px;
;
	lda     _px
	sta     _px_safe
	lda     _px+1
	sta     _px_safe+1
;
; py_safe = py;
;
	lda     _py
	sta     _py_safe
	lda     _py+1
	sta     _py_safe+1
;
; n_pant_safe = n_pant;
;
	lda     _n_pant
	sta     _n_pant_safe
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_stop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_stop: near

.segment	"CODE"

;
; pvx = pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
	sta     _pvx
	sta     _pvx+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; if (!warp_to_level) player_stop ();
;
	lda     _warp_to_level
	bne     L0BE6
	jsr     _player_stop
;
; pfacing = 0;
;
L0BE6:	lda     #$00
	sta     _pfacing
;
; pfr = 0;
;
	sta     _pfr
;
; pj = pctj = 0;
;
	sta     _pctj
	sta     _pj
;
; psprid = 0;
;
	sta     _psprid
;
; pgotten = 0;
;
	sta     _pgotten
;
; pfiring = 0;
;
	sta     _pfiring
;
; pflickering = pbouncing = 0;
;
	sta     _pbouncing
	sta     _pflickering
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; vertical_engine_type = ENGINE_TYPE_JUMP;
;
	lda     #$00
	sta     _vertical_engine_type
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_kill: near

.segment	"CODE"

;
; oam_index = oam_index_player;
;
	lda     _oam_index_player
	sta     _oam_index
;
; player_render ();
;
	jsr     _player_render
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; pkill = phit = 0;
;
	lda     #$00
	sta     _phit
	sta     _pkill
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (plife) -- plife; else game_over = 1;
;
	lda     _plife
	beq     L0C1B
	dec     _plife
	jmp     L0C1E
L0C1B:	lda     #$01
	sta     _game_over
;
; pflickering = PLAYER_FLICKERS;
;
L0C1E:	lda     #$64
	sta     _pflickering
;
; use_ct = 0;
;
	lda     #$00
	sta     _use_ct
;
; music_pause (1);
;
	lda     #$01
	jsr     _music_pause
;
; delay (60);
;
	lda     #$3C
	jsr     _delay
;
; px = px_safe; 
;
	lda     _px_safe
	sta     _px
	lda     _px_safe+1
	sta     _px+1
;
; py = py_safe; 
;
	lda     _py_safe
	sta     _py
	lda     _py_safe+1
	sta     _py+1
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; n_pant = n_pant_safe;  
;
	lda     _n_pant_safe
	sta     _n_pant
;
; player_stop ();
;
	jsr     _player_stop
;
; music_pause (0);
;
	lda     #$00
	jmp     _music_pause

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; if (pflickering) -- pflickering;
;
	lda     _pflickering
	beq     L0C34
	dec     _pflickering
;
; if (pbouncing) -- pbouncing;
;
L0C34:	lda     _pbouncing
	beq     L0C37
	dec     _pbouncing
;
; if (use_ct) {
;
L0C37:	lda     _use_ct
	beq     L0C3A
;
; if (use_sub_ct) -- use_sub_ct; else {
;
	lda     _use_sub_ct
	beq     L0C3C
	dec     _use_sub_ct
	jmp     L0C4F
;
; if (use_ct < USE_ANIM_MAX_FRAMES) {
;
L0C3C:	lda     _use_ct
	cmp     #$08
	bcs     L0C40
;
; ++ use_ct;
;
	inc     _use_ct
;
; use_sub_ct = (use_ct == USE_ANIM_MAX_FRAMES) ? 50 : USE_ANIM_FRAMES_PER_STEP;
;
	lda     _use_ct
	cmp     #$08
	bne     L0C46
	lda     #$32
	jmp     L0C48
L0C46:	lda     #$04
L0C48:	sta     _use_sub_ct
;
; use_type == USE_TYPE_SCRIPTING && 
;
	lda     _use_type
	cmp     #$03
	bne     L0C4F
;
; fire_script_success == 0 && 
;
	lda     _fire_script_success
	bne     L0C4F
;
; use_ct == USE_ANIM_MAX_FRAMES
;
	lda     _use_ct
;
; ) ++ use_ct;
;
	cmp     #$08
	bne     L0C4F
	inc     _use_ct
;
; } else use_ct = 0;
;
	jmp     L0C4F
L0C40:	lda     #$00
	sta     _use_ct
;
; a_button = b_button = pad0 = 0;
;
L0C4F:	lda     #$00
	sta     _pad0
	sta     _b_button
	sta     _a_button
;
; hitv = hith = 0;
;
L0C3A:	sta     _hith
	sta     _hitv
;
; pcx = prx; pcy = pry;
;
	lda     _prx
	sta     _pcx
	lda     _pry
	sta     _pcy
;
; pnotsafe = 0;
;
	lda     #$00
	sta     _pnotsafe
;
; oppossee = ppossee;
;
	lda     _ppossee
	sta     _oppossee
;
; ppossee = 0;
;
	lda     #$00
	sta     _ppossee
;
; if (vertical_engine_type != ENGINE_TYPE_SWIM) {
;
	lda     _vertical_engine_type
	cmp     #$02
	beq     L0C6A
;
; if (!pj) {
;
	lda     _pj
	bne     L0C6A
;
; pvy += PLAYER_G;
;
	lda     #$10
	clc
	adc     _pvy
	sta     _pvy
	bcc     L0C69
	inc     _pvy+1
;
; if (pvy > PLAYER_VY_FALLING_MAX) pvy = PLAYER_VY_FALLING_MAX; 
;
L0C69:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$01
	bvs     L0C6C
	eor     #$80
L0C6C:	bpl     L0C6A
	ldx     #$01
	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; if (pgotten) pvy = 0;   
;
L0C6A:	lda     _pgotten
	beq     L0C6F
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; py += pvy;
;
L0C6F:	lda     _pvy
	clc
	adc     _py
	sta     _py
	lda     _pvy+1
	adc     _py+1
	sta     _py+1
;
; if (py < 0) py = 0;
;
	ldx     _py+1
	cpx     #$80
	bcc     L0C75
	lda     #$00
	sta     _py
	sta     _py+1
;
; pry = py >> FIXBITS;
;
L0C75:	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; cx1 = prx >> 4;
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx1
;
; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L0C81
	inx
L0C81:	jsr     shrax4
	sta     _cx2
;
; rds16 = pvy + pgtmy;
;
	lda     _pvy
	clc
	adc     _pgtmy
	sta     _rds16
	lda     _pvy+1
	adc     _pgtmy+1
	tax
	stx     _rds16+1
;
; if (rds16 < 0)
;
	cpx     #$80
	bcc     L0C84
;
; cy1 = cy2 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;   
;
	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L0C8C
	lda     _at2
	and     #$08
	beq     L0C8B
;
; pry = ((cy1 + 1) << 4) + PLAYER_COLLISION_VSTRETCH_BG;
;
L0C8C:	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L0C94
	inx
L0C94:	jsr     shlax4
	clc
	adc     #$FC
	sta     _pry
	txa
	adc     #$FF
;
; pvy = 0; py = pry << FIXBITS;
;
	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L0CD7
L0C8B:	lda     _at1
	and     #$01
	jne     L1378
	lda     _at2
	and     #$01
	jeq     L0CD7
;
; } else if (rds16 > 0)
;
	jmp     L1378
L0C84:	lda     _rds16
	cmp     #$01
	lda     _rds16+1
	sbc     #$00
	bvs     L0CA8
	eor     #$80
L0CA8:	jpl     L0CD7
;
; cy1 = cy2 = (pry + 16) >> 4; 
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L0CAD
	inx
L0CAD:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points (); 
;
	jsr     _cm_two_points
;
; pry < ((cy1 - 1) << 4) + 4 && 
;
	lda     _pry
	jsr     pusha0
	lda     _cy1
	sec
	sbc     #$01
	bcs     L0CB3
	ldx     #$FF
L0CB3:	jsr     shlax4
	clc
	adc     #$04
	bcc     L0CB4
	inx
L0CB4:	jsr     tosicmp
	bcs     L0CAF
;
; (at1 & 12) || (at2 & 12)
;
	lda     _at1
	and     #$0C
	bne     L0CB0
	lda     _at2
	and     #$0C
;
; )
;
	beq     L0CAF
;
; pvy = 0; pry = ((cy1 - 1) << 4);py = pry << FIXBITS;
;
L0CB0:	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _cy1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; ppossee = 1;
;
	sta     _ppossee
;
; if ((at1 & 1) || (at2 & 1)) pnotsafe = 1; 
;
	lda     _at1
	and     #$01
	bne     L0CCB
	lda     _at2
	and     #$01
	beq     L0CD7
L0CCB:	lda     #$01
	sta     _pnotsafe
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L0CD7
L0CAF:	lda     _at1
	and     #$01
	bne     L0CD3
	lda     _at2
	and     #$01
	beq     L0CD7
;
; if ((pry & 15) > 4) hitv = 1;
;
L0CD3:	lda     _pry
	and     #$0F
	cmp     #$05
	bcc     L0CD7
L1378:	lda     #$01
	sta     _hitv
;
; if (vertical_engine_type == ENGINE_TYPE_JUMP) {
;
L0CD7:	lda     _vertical_engine_type
	jne     L0CFE
;
; && !pj
;
	lda     _a_button
	beq     L0CE5
;
; && (
;
	lda     _pj
	bne     L0CE5
;
; pgotten || ppossee || hitv
;
	lda     _pgotten
	bne     L0CDF
	lda     _ppossee
	bne     L0CDF
;
; )
;
	lda     _hitv
	beq     L0CE5
;
; jump_start ();
;
L0CDF:	jsr     _jump_start
;
; if (!(pgotten || hitv || pnotsafe)) {
;
	lda     _pgotten
	bne     L0CE7
	lda     _hitv
	bne     L0CE7
	lda     _pnotsafe
	beq     L0CE8
L0CE7:	lda     #$01
L0CE8:	jsr     bnega
	beq     L0CE5
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; if (pad0 & PAD_A) {
;
L0CE5:	lda     _pad0
	and     #$01
	beq     L1373
;
; if (pj) {
;
	lda     _pj
	beq     L0CFE
;
; if (pctj < PLAYER_AY_JUMP) pvy -= (PLAYER_AY_JUMP - (pctj));
;
	lda     _pctj
	cmp     #$0C
	bcs     L0CEE
	lda     #$0C
	sec
	sbc     _pctj
	eor     #$FF
	sec
	adc     _pvy
	sta     _pvy
	lda     #$FF
	adc     _pvy+1
	sta     _pvy+1
;
; if (pvy < -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
L0CEE:	lda     _pvy
	cmp     #$40
	lda     _pvy+1
	sbc     #$FF
	bvc     L0CF6
	eor     #$80
L0CF6:	bpl     L0CF4
	ldx     #$FF
	lda     #$40
	sta     _pvy
	stx     _pvy+1
;
; ++ pctj; if (pctj == 16) pj = 0; 
;
L0CF4:	inc     _pctj
	lda     _pctj
	cmp     #$10
	bne     L0CFE
	lda     #$00
;
; pj = 0; 
;
L1373:	sta     _pj
;
; if (!(pad0 & PAD_LEFT || pad0 & PAD_RIGHT)) {
;
L0CFE:	lda     _pad0
	and     #$40
	bne     L0D03
	lda     _pad0
	and     #$80
	beq     L0D04
L0D03:	lda     #$01
L0D04:	jsr     bnega
	beq     L0D15
;
; if (pvx > 0) {
;
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L0D07
	eor     #$80
L0D07:	bpl     L0D05
;
; pvx -= PLAYER_RX;
;
	lda     _pvx
	sec
	sbc     #$10
	sta     _pvx
	bcs     L0D0A
	dec     _pvx+1
;
; if (pvx < 0) pvx = 0;
;
L0D0A:	ldx     _pvx+1
	cpx     #$80
	bcc     L0D15
;
; } else if (pvx < 0) {
;
	jmp     L1379
L0D05:	ldx     _pvx+1
	cpx     #$80
	bcc     L0D15
;
; pvx += PLAYER_RX;
;
	lda     #$10
	clc
	adc     _pvx
	sta     _pvx
	bcc     L0D14
	inc     _pvx+1
;
; if (pvx > 0) pvx = 0;
;
L0D14:	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L0D17
	eor     #$80
L0D17:	bpl     L0D15
L1379:	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; if (pad0 & PAD_LEFT) {
;
L0D15:	lda     _pad0
	and     #$40
	beq     L0D1E
;
; pfacing = CELL_FACING_LEFT;  
;
	lda     #$10
	sta     _pfacing
;
; if (pvx > -PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$81
	lda     _pvx+1
	sbc     #$FF
	bvs     L0D20
	eor     #$80
L0D20:	bpl     L0D1E
;
; pvx -= PLAYER_AX;
;
	lda     _pvx
	sec
	sbc     #$10
	sta     _pvx
	bcs     L0D1E
	dec     _pvx+1
;
; if (pad0 & PAD_RIGHT) {
;
L0D1E:	lda     _pad0
	and     #$80
	beq     L0D28
;
; pfacing = CELL_FACING_RIGHT;
;
	lda     #$00
	sta     _pfacing
;
; if (pvx < PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$80
	lda     _pvx+1
	sbc     #$00
	bvc     L0D2A
	eor     #$80
L0D2A:	bpl     L0D28
;
; pvx += PLAYER_AX;
;
	lda     #$10
	clc
	adc     _pvx
	sta     _pvx
	bcc     L0D28
	inc     _pvx+1
;
; px += pvx;
;
L0D28:	lda     _pvx
	clc
	adc     _px
	sta     _px
	lda     _pvx+1
	adc     _px+1
	sta     _px+1
;
; if (pgotten) px += pgtmx;
;
	lda     _pgotten
	beq     L0D30
	lda     _pgtmx
	clc
	adc     _px
	sta     _px
	lda     _pgtmx+1
	adc     _px+1
	sta     _px+1
;
; if (px < (4<<FIXBITS)) { px = 4 << FIXBITS; prx = 4;}
;
L0D30:	ldx     _px+1
	cpx     #$01
	bcs     L0D34
	ldx     #$01
	lda     #$00
	sta     _px
	stx     _px+1
	lda     #$04
	sta     _prx
;
; else if (px > (MAX_PRX << FIXBITS)) { px = MAX_PRX << FIXBITS; prx = MAX_PRX; }
;
	jmp     L0D43
L0D34:	lda     _px
	cmp     #$01
	lda     _px+1
	sbc     #$3D
	bcc     L0D3C
	ldx     #$3D
	lda     #$00
	sta     _px
	stx     _px+1
	lda     #$F4
	sta     _prx
;
; else player_to_pixels ();
;
	jmp     L0D43
L0D3C:	jsr     _player_to_pixels
;
; cy1 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;
;
L0D43:	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L0D4B
	inx
L0D4B:	jsr     shrax4
	sta     _cy2
;
; rds16 = pvx + pgtmx;
;
	lda     _pvx
	clc
	adc     _pgtmx
	sta     _rds16
	lda     _pvx+1
	adc     _pgtmx+1
	sta     _rds16+1
;
; if (rds16)  {
;
	lda     _rds16
	ora     _rds16+1
	jeq     L0D80
;
; if (rds16 < 0) {
;
	ldx     _rds16+1
	cpx     #$80
	bcc     L0D50
;
; cx1 = cx2 = prx >> 4; 
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx2
	sta     _cx1
;
; PRXA = (cx1 + 1) << 4;
;
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; rdm = cx1 - 1;
;
	lda     _cx1
	sec
	sbc     #$01
	bcs     L0D6A
;
; } else {
;
	jmp     L0D6A
;
; cx1 = cx2 = (prx + 8) >> 4;
;
L0D50:	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L0D61
	inx
L0D61:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; PRXA = ((cx1 - 1) << 4) + 8;
;
	ldx     #$00
	lda     _cx1
	sec
	sbc     #$01
	bcs     L0D66
	dex
L0D66:	jsr     shlax4
	clc
	adc     #$08
	sta     _rda
;
; rdm = cx1 + 1;
;
	lda     _cx1
	clc
	adc     #$01
L0D6A:	sta     _rdm
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L0D6D
	lda     _at2
	and     #$08
	beq     L0D6C
;
; pvx = 0; prx = PRXA; px = prx << FIXBITS; pfiring = 1;
;
L0D6D:	ldx     #$00
	txa
	sta     _pvx
	sta     _pvx+1
	lda     _rda
	sta     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
	lda     #$01
	sta     _pfiring
;
; } else {
;
	jmp     L0D79
;
; hith = ((at1 & 1) || (at2 & 1));
;
L0D6C:	lda     _at1
	and     #$01
	bne     L0D7C
	lda     _at2
	and     #$01
	beq     L0D7F
L0D7C:	lda     #$01
L0D7F:	sta     _hith
;
; if (pvy > 0) hith &= ((pry & 15) > 4);
;
L0D79:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L0D82
	eor     #$80
L0D82:	bpl     L0D80
	lda     _pry
	and     #$0F
	cmp     #$05
	lda     #$00
	rol     a
	and     _hith
	sta     _hith
;
; phit = 0;
;
L0D80:	lda     #$00
	sta     _phit
;
; if (pgotten == 0) {
;
	lda     _pgotten
	jne     L0DCD
;
; if (hitv) { phit = 1; pvy = ADD_SIGN (-pvy, PLAYER_V_REBOUND); pry = pcy; py = pry << FIXBITS; } 
;
	lda     _hitv
	beq     L0D8B
	lda     #$01
	sta     _phit
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L0D93
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0D98
	eor     #$80
L0D98:	bpl     L0D99
	ldx     #$00
	lda     #$E0
	jmp     L0DA0
L0D99:	ldx     #$FF
	lda     #$20
	jmp     L0DA0
L0D93:	tax
L0DA0:	sta     _pvy
	stx     _pvy+1
	lda     _pcy
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; else
;
	jmp     L0DA8
;
; if (hith) { phit = 1; pvx = ADD_SIGN (-pvx, PLAYER_V_REBOUND); prx = pcx; px = prx << FIXBITS; }
;
L0D8B:	lda     _hith
	beq     L0DA8
	lda     #$01
	sta     _phit
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L0DB0
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0DB5
	eor     #$80
L0DB5:	bpl     L0DB6
	ldx     #$00
	lda     #$E0
	jmp     L0DBD
L0DB6:	ldx     #$FF
	lda     #$20
	jmp     L0DBD
L0DB0:	tax
L0DBD:	sta     _pvx
	stx     _pvx+1
	lda     _pcx
	sta     _prx
	ldx     #$00
	lda     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; if (!pflickering && !pbouncing) if (phit) { 
;
L0DA8:	lda     _pflickering
	bne     L0DCD
	lda     _pbouncing
	bne     L0DCD
	lda     _phit
	beq     L0DCD
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; en_sg_2 = 1;
;
	lda     #$01
	sta     _en_sg_2
;
; if (en_sg_2)
;
	lda     _en_sg_2
	beq     L0DCD
;
; pkill = 1; 
;
	lda     #$01
	sta     _pkill
;
; ) {
;
L0DCD:	lda     _b_button
	beq     L0DD3
;
; if (b_button && use_ct == 0) {
;
	lda     _b_button
	beq     L0DD3
	lda     _use_ct
	bne     L0DD3
;
; use_ct = 1;
;
	lda     #$01
	sta     _use_ct
;
; run_fire_script_do = 1;
;
	sta     _run_fire_script_do
;
; b_button = 0;
;
	lda     #$00
	sta     _b_button
;
; use_type = USE_TYPE_SCRIPTING;
;
	lda     #$03
	sta     _use_type
;
; if (use_ct) {
;
L0DD3:	lda     _use_ct
	beq     L0DDF
;
; psprid = CELL_USE + use_ct - 1;
;
	lda     _use_ct
	clc
	adc     #$07
	sec
	sbc     #$01
;
; } else 
;
	jmp     L1375
;
; if (ppossee || pgotten) {
;
L0DDF:	lda     _ppossee
	bne     L0DE7
	lda     _pgotten
	beq     L0DE6
;
; if (pvx > PLAYER_VX_MIN || pvx < -PLAYER_VX_MIN) {
;
L0DE7:	lda     _pvx
	cmp     #$41
	lda     _pvx+1
	sbc     #$00
	bvs     L0DEC
	eor     #$80
L0DEC:	bmi     L0DEA
	lda     _pvx
	cmp     #$C0
	lda     _pvx+1
	sbc     #$FF
	bvc     L0DEE
	eor     #$80
L0DEE:	bpl     L0DE9
;
; psprid = CELL_WALK_CYCLE + ((prx >> 3) & 3);
;
L0DEA:	ldx     #$00
	lda     _prx
	jsr     asrax3
	and     #$03
	clc
	adc     #$01
	bcc     L1375
;
; } else {
;
	jmp     L1375
;
; psprid = CELL_IDLE;
;
L0DE9:	lda     #$00
;
; } else {
;
	jmp     L1375
;
; if (pvy < PLAYER_VY_FALLING_MIN)
;
L0DE6:	lda     _pvy
	cmp     #$40
	lda     _pvy+1
	sbc     #$00
	bvc     L0DFB
	eor     #$80
L0DFB:	bpl     L0DF9
;
; psprid = CELL_ASCENDING;
;
	lda     #$05
;
; else
;
	jmp     L1375
;
; psprid = CELL_DESCENDING; 
;
L0DF9:	lda     #$06
L1375:	sta     _psprid
;
; psprid += pfacing;
;
	lda     _pfacing
	clc
	adc     _psprid
	sta     _psprid
;
; prx_old = prx;
;
	lda     _prx
	sta     _prx_old
;
; pry_old = pry;
;
	lda     _pry
	sta     _pry_old
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_update_unsigned_char_arrays (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_update_unsigned_char_arrays: near

.segment	"CODE"

;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v", _en_t);
;
	lda     __en_t
;
; __asm__ ("sta %v, y", en_t);
;
	sta     _en_t,y
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("sta %v, y", en_s);
;
	sta     _en_s,y
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("sta %v, y", en_x);
;
	sta     _en_x,y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("sta %v, y", en_y);
;
	sta     _en_y,y
;
; __asm__ ("lda %v", _en_x1);
;
	lda     __en_x1
;
; __asm__ ("sta %v, y", en_x1);
;
	sta     _en_x1,y
;
; __asm__ ("lda %v", _en_x2);
;
	lda     __en_x2
;
; __asm__ ("sta %v, y", en_x2);
;
	sta     _en_x2,y
;
; __asm__ ("lda %v", _en_y1);
;
	lda     __en_y1
;
; __asm__ ("sta %v, y", en_y1);
;
	sta     _en_y1,y
;
; __asm__ ("lda %v", _en_y2);
;
	lda     __en_y2
;
; __asm__ ("sta %v, y", en_y2);
;
	sta     _en_y2,y
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("sta %v, y", en_mx);
;
	sta     _en_mx,y
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("sta %v, y", en_my);
;
	sta     _en_my,y
;
; __asm__ ("lda %v", _en_ct);
;
	lda     __en_ct
;
; __asm__ ("sta %v, y", en_ct);
;
	sta     _en_ct,y
;
; __asm__ ("lda %v", _en_facing);
;
	lda     __en_facing
;
; __asm__ ("sta %v, y", en_facing);
;
	sta     _en_facing,y
;
; __asm__ ("lda %v", _en_state);
;
	lda     __en_state
;
; __asm__ ("sta %v, y", en_state);
;
	sta     _en_state,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_facing (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_facing: near

.segment	"CODE"

;
; _en_facing = rda << 2;
;
	lda     _rda
	asl     a
	asl     a
	sta     __en_facing
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_init_fp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_init_fp: near

.segment	"CODE"

;
; _enf_x = _en_x << 6;
;
	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y = _en_y << 6;
;
	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_boioiong_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_boioiong_init: near

.segment	"CODE"

;
; enems_init_fp ();
;
	jsr     _enems_init_fp
;
; _enf_vy = 0; 
;
	ldx     #$00
	txa
	sta     __enf_vy
	sta     __enf_vy+1
;
; _enf_vx = ADD_SIGN2 (_en_x2, _en_x1, rdm << FIXBITS);
;
	lda     __en_x1
	cmp     __en_x2
	bne     L0E34
	txa
	jmp     L0E40
L0E34:	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L0E3D
	beq     L0E3D
	lda     _rdm
	jsr     aslax4
	jsr     aslax2
	jmp     L0E40
L0E3D:	lda     _rdm
	jsr     aslax4
	jsr     aslax2
	jsr     negax
L0E40:	sta     __enf_vx
	stx     __enf_vx+1
;
; _en_ct = 0;
;
	lda     #$00
	sta     __en_ct
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_enems + (n_pant << 2) + (n_pant << 3)); // * 12
;
	ldx     #$00
	lda     _n_pant
	jsr     aslax2
	clc
	adc     _c_enems
	sta     ptr1
	txa
	adc     _c_enems+1
	sta     ptr1+1
	ldx     #$00
	lda     _n_pant
	jsr     aslax3
	clc
	adc     ptr1
	sta     _gp_gen
	txa
	adc     ptr1+1
	sta     _gp_gen+1
;
; for (gpit = 0; gpit < NENEMS; gpit ++) {
;
	lda     #$00
L137F:	sta     _gpit
	cmp     #$03
	bcc     L1380
;
; }
;
	rts
;
; SET_FROM_PTR (_en_t, gp_gen); gp_gen ++;
;
L1380:	ldy     #0
	lda     (_gp_gen),y
	sta     __en_t
	lda     _gp_gen
	ldx     _gp_gen+1
	clc
	adc     #$01
	bcc     L0E58
	inx
L0E58:	sta     _gp_gen
	stx     _gp_gen+1
;
; _en_state = 0;
;
	sty     __en_state
;
; SET_FROM_PTR (rda, gp_gen); gp_gen ++;
;
	lda     (_gp_gen),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	clc
	adc     #$01
	bcc     L0E5F
	inx
L0E5F:	sta     _gp_gen
	stx     _gp_gen+1
;
; _en_y1 = rda & 0xf0;
;
	lda     _rda
	and     #$F0
	sta     __en_y1
;
; _en_x1 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x1
;
; SET_FROM_PTR (rda, gp_gen); gp_gen ++;
;
	lda     (_gp_gen),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	clc
	adc     #$01
	bcc     L0E68
	inx
L0E68:	sta     _gp_gen
	stx     _gp_gen+1
;
; _en_y2 = rda & 0xf0;
;
	lda     _rda
	and     #$F0
	sta     __en_y2
;
; _en_x2 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x2
;
; SET_FROM_PTR (rda, gp_gen); gp_gen ++;
;
	lda     (_gp_gen),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	clc
	adc     #$01
	bcc     L0E71
	inx
L0E71:	sta     _gp_gen
	stx     _gp_gen+1
;
; rdd = rda & 0xf0;  // Used for respawn speed!
;
	lda     _rda
	and     #$F0
	sta     _rdd
;
; rdm = rda & 0x0f;  // Actual speed.
;
	lda     _rda
	and     #$0F
	sta     _rdm
;
; _en_x = _en_x1;
;
	lda     __en_x1
	sta     __en_x
;
; _en_y = _en_y1;
;
	lda     __en_y1
	sta     __en_y
;
; switch (_en_t & 0x3f) {
;
	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L0E7E
	cmp     #$02
	beq     L0E7E
	cmp     #$03
	beq     L0E7E
	cmp     #$04
	jne     L0E7C
;
; _en_ct = 0;   
;
L0E7E:	sty     __en_ct
;
; _en_s = (_en_t - 1) << 3;
;
	lda     __en_t
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	sta     __en_s
;
; _en_mx = ADD_SIGN2 (_en_x2, _en_x1, rdm);
;
	lda     __en_x1
	cmp     __en_x2
	bne     L0E90
	tya
	jmp     L0E9C
L0E90:	ldx     #$00
	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L0E99
	beq     L0E99
	lda     _rdm
	jmp     L0E9C
L0E99:	lda     _rdm
	jsr     negax
L0E9C:	sta     __en_mx
;
; _en_my = ADD_SIGN2 (_en_y2, _en_y1, rdm);
;
	lda     __en_y1
	cmp     __en_y2
	bne     L0EA5
	tya
	jmp     L0EB1
L0EA5:	ldx     #$00
	lda     __en_y2
	sec
	sbc     __en_y1
	bcc     L0EAE
	beq     L0EAE
	lda     _rdm
	jmp     L0EB1
L0EAE:	lda     _rdm
	jsr     negax
L0EB1:	sta     __en_my
;
; if (rdm == 1) {
;
	lda     _rdm
	cmp     #$01
	bne     L0EB5
;
; en_status [gpit] = 1; 
;
	ldy     _gpit
	sta     _en_status,y
;
; } else {
;
	jmp     L0EBB
;
; en_status [gpit] = 0;
;
L0EB5:	ldy     _gpit
	lda     #$00
	sta     _en_status,y
;
; _en_mx >>= 1;
;
	tax
	lda     __en_mx
	bpl     L0EC1
	dex
L0EC1:	jsr     asrax1
	sta     __en_mx
;
; _en_my >>= 1;
;
	ldx     #$00
	lda     __en_my
	bpl     L0EC4
	dex
L0EC4:	jsr     asrax1
	sta     __en_my
;
; if (_en_x1 > _en_x2) { rda = _en_x1; _en_x1 = _en_x2; _en_x2 = rda; }
;
L0EBB:	lda     __en_x1
	sec
	sbc     __en_x2
	bcc     L0EC6
	beq     L0EC6
	lda     __en_x1
	sta     _rda
	lda     __en_x2
	sta     __en_x1
	lda     _rda
	sta     __en_x2
;
; if (_en_y1 > _en_y2) { rda = _en_y1; _en_y1 = _en_y2; _en_y2 = rda; }
;
L0EC6:	lda     __en_y1
	sec
	sbc     __en_y2
	bcc     L0E7C
	beq     L0E7C
	lda     __en_y1
	sta     _rda
	lda     __en_y2
	sta     __en_y1
	lda     _rda
	sta     __en_y2
;
; en_life [gpit] = ENEMS_LIFE_GAUGE;
;
L0E7C:	ldy     _gpit
	lda     #$02
	sta     _en_life,y
;
; en_cttouched [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_cttouched,y
;
; en_flags [gpit] = 0;
;
	ldy     _gpit
	sta     _en_flags,y
;
; enems_update_unsigned_char_arrays ();
;
	jsr     _enems_update_unsigned_char_arrays
;
; for (gpit = 0; gpit < NENEMS; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L137F

.endproc

; ---------------------------------------------------------------
; void __near__ enems_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_move: near

.segment	"CODE"

;
; pgotten = pgtmx = pgtmy = 0;
;
	lda     #$00
	sta     _pgtmy
	sta     _pgtmy+1
	sta     _pgtmx
	sta     _pgtmx+1
	sta     _pgotten
;
; touched = 0;
;
	sta     _touched
;
; ++ en_initial; if (en_initial >= NENEMS) en_initial = 0;
;
	inc     _en_initial
	lda     _en_initial
	cmp     #$03
	bcc     L0EEB
	lda     #$00
	sta     _en_initial
;
; gpit = en_initial;
;
L0EEB:	lda     _en_initial
	sta     _gpit
;
; gpjt = NENEMS; while (gpjt --) {
;
	lda     #$03
	sta     _gpjt
L0EF3:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	bne     L1393
;
; }
;
	rts
;
; gpit += NENEMS-1; if (gpit > NENEMS-1) gpit -=NENEMS;
;
L1393:	lda     #$02
	clc
	adc     _gpit
	sta     _gpit
	cmp     #$03
	bcc     L0EF8
	lda     _gpit
	sec
	sbc     #$03
	sta     _gpit
;
; __asm__ ("ldy %v", gpit);
;
L0EF8:	ldy     _gpit
;
; __asm__ ("lda %v, y", en_t);
;
	lda     _en_t,y
;
; __asm__ ("sta %v", _en_t);
;
	sta     __en_t
;
; __asm__ ("lda %v, y", en_s);
;
	lda     _en_s,y
;
; __asm__ ("sta %v", _en_s);
;
	sta     __en_s
;
; __asm__ ("lda %v, y", en_x);
;
	lda     _en_x,y
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v, y", en_y);
;
	lda     _en_y,y
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v, y", en_x1);
;
	lda     _en_x1,y
;
; __asm__ ("sta %v", _en_x1);
;
	sta     __en_x1
;
; __asm__ ("lda %v, y", en_x2);
;
	lda     _en_x2,y
;
; __asm__ ("sta %v", _en_x2);
;
	sta     __en_x2
;
; __asm__ ("lda %v, y", en_y1);
;
	lda     _en_y1,y
;
; __asm__ ("sta %v", _en_y1);
;
	sta     __en_y1
;
; __asm__ ("lda %v, y", en_y2);
;
	lda     _en_y2,y
;
; __asm__ ("sta %v", _en_y2);
;
	sta     __en_y2
;
; __asm__ ("lda %v, y", en_mx);
;
	lda     _en_mx,y
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v, y", en_my);
;
	lda     _en_my,y
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; __asm__ ("lda %v, y", en_ct);
;
	lda     _en_ct,y
;
; __asm__ ("sta %v", _en_ct);
;
	sta     __en_ct
;
; __asm__ ("lda %v, y", en_facing);
;
	lda     _en_facing,y
;
; __asm__ ("sta %v", _en_facing);
;
	sta     __en_facing
;
; __asm__ ("lda %v, y", en_state);
;
	lda     _en_state,y
;
; __asm__ ("sta %v", _en_state);
;
	sta     __en_state
;
; if (_en_t == 0) continue;
;
	lda     __en_t
	beq     L0EF3
;
; en_is_alive = !(en_flags [gpit] & EN_STATE_DEAD);
;
	ldy     _gpit
	lda     _en_flags,y
	and     #$01
	jsr     bnega
	sta     _en_is_alive
;
; en_spr = 0xff;
;
	lda     #$FF
	sta     _en_spr
;
; en_spr_x_mod = 0;
;
	lda     #$00
	sta     _en_spr_x_mod
;
; if (en_is_alive) {
;
	lda     _en_is_alive
	jeq     L0FB7
;
; pregotten = (prx + 7 >= EN_X_ABSOLUTE && prx <= EN_X_ABSOLUTE + 15);
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L0F27
	inx
L0F27:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L0F28
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0F
	bcc     L0F29
	ldx     #$01
L0F29:	jsr     tosicmp
	bcc     L0F26
	beq     L0F26
L0F28:	lda     #$00
	jmp     L0F2A
L0F26:	lda     #$01
L0F2A:	sta     _pregotten
;
; en_fr = ((((_en_mx) ? _en_x : _en_y) + 4) >> 3) & 1;
;
	lda     __en_mx
	beq     L0F31
	lda     __en_x
	jmp     L138B
L0F31:	lda     __en_y
L138B:	ldx     #$00
	clc
	adc     #$04
	bcc     L0F35
	inx
L0F35:	jsr     shrax3
	and     #$01
	sta     _en_fr
;
; switch (_en_t & 63) {
;
	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L0F40
	cmp     #$02
	beq     L0F40
	cmp     #$03
	beq     L0F40
	cmp     #$04
	jne     L0F38
;
; if (!en_status [gpit] || half_life) {
;
L0F40:	ldy     _gpit
	lda     _en_status,y
	beq     L0F42
	lda     _half_life
	beq     L0F52
;
; _en_x += _en_mx;
;
L0F42:	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; _en_y += _en_my;
;
	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; if (_en_x == _en_x1 || _en_x == _en_x2) _en_mx = -_en_mx;
;
	lda     __en_x1
	cmp     __en_x
	beq     L0F4D
	lda     __en_x2
	cmp     __en_x
	bne     L0F4C
L0F4D:	ldx     #$00
	lda     __en_mx
	bpl     L0F51
	dex
L0F51:	jsr     negax
	sta     __en_mx
;
; if (_en_y == _en_y1 || _en_y == _en_y2) _en_my = -_en_my;      
;
L0F4C:	lda     __en_y1
	cmp     __en_y
	beq     L0F53
	lda     __en_y2
	cmp     __en_y
	bne     L0F52
L0F53:	ldx     #$00
	lda     __en_my
	bpl     L0F57
	dex
L0F57:	jsr     negax
	sta     __en_my
;
; rda = _en_mx ? (_en_mx < 0) : (_en_my < 0); enems_facing ();
;
L0F52:	lda     __en_mx
	beq     L0F5A
	lda     __en_mx
	jmp     L1392
L0F5A:	lda     __en_my
L1392:	asl     a
	lda     #$00
	rol     a
	sta     _rda
	jsr     _enems_facing
;
; en_spr = _en_s + en_fr + _en_facing;
;
	lda     __en_s
	clc
	adc     _en_fr
	bcc     L138D
	clc
L138D:	adc     __en_facing
	sta     _en_spr
;
; en_spr_id [gpit] = en_spr;
;
L0F38:	ldy     _gpit
	lda     _en_spr
	sta     _en_spr_id,y
;
; if (_en_t == 4 && pregotten && !pgotten && !pj) {
;
	lda     __en_t
	cmp     #$04
	jne     L0F83
	lda     _pregotten
	jeq     L0F83
	lda     _pgotten
	jne     L0F83
	lda     _pj
	jne     L0F83
;
; if (_en_mx) {
;
	lda     __en_mx
	beq     L0F6F
;
; if (pry + 16 >= _en_y && pry + 12 <= _en_y) {
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L0F71
	inx
L0F71:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L0F6F
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L0F73
	inx
L0F73:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L0F70
	bne     L0F6F
;
; pgotten = 1;
;
L0F70:	lda     #$01
	sta     _pgotten
;
; pgtmx = _en_mx << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_mx
	bpl     L0F79
	dex
L0F79:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmx
	stx     _pgtmx+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L0F80
	dex
L0F80:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; (_en_my < 0 && pry + 17 >= _en_y && pry + 12 <= _en_y) ||
;
L0F6F:	lda     __en_my
	asl     a
	bcc     L1389
	ldx     #$00
	lda     _pry
	clc
	adc     #$11
	bcc     L0F88
	inx
L0F88:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L1389
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L0F89
	inx
L0F89:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L0F84
	beq     L0F84
;
; (_en_my > 0 && pry + 16 + _en_my >= _en_y && pry + 12 <= _en_y)
;
L1389:	lda     __en_my
	sec
	sbc     #$01
	bvs     L0F8D
	eor     #$80
L0F8D:	jpl     L0F83
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L0F8F
	inx
L0F8F:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __en_my
	bpl     L0F90
	dex
L0F90:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	cmp     __en_y
	txa
	sbc     #$00
	bcc     L0F83
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L0F91
	inx
L0F91:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L0F84
	bne     L0F83
;
; pgotten = 1;
;
L0F84:	lda     #$01
	sta     _pgotten
;
; pgtmy = _en_my << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_my
	bpl     L0F98
	dex
L0F98:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmy
	stx     _pgtmy+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L0F9F
	dex
L0F9F:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; en_is_alive == 0 // General condition.
;
L0F83:	lda     _en_is_alive
;
; || _en_t == 4
;
	beq     L0FB7
	lda     __en_t
;
; ) goto skipdo;
;
	cmp     #$04
	beq     L0FB7
;
; touched == 0 &&
;
	lda     _touched
	bne     L0FB7
;
; ) {
;
	jsr     _collide
	tax
	beq     L0FB7
;
; en_sg_1 = 0;
;
	lda     #$00
	sta     _en_sg_1
;
; en_sg_2 = (pflickering == 0);
;
	lda     _pflickering
	jsr     booleq
	sta     _en_sg_2
;
; if (en_sg_2) { 
;
	lda     _en_sg_2
	beq     L0FB1
;
; pkill = 1; 
;
	lda     #$01
	sta     _pkill
;
; touched = 1; 
;
L0FB1:	lda     #$01
	sta     _touched
;
; if (en_spr != 0xff) {
;
L0FB7:	lda     _en_spr
	cmp     #$FF
	beq     L0FB9
;
; _en_x + en_spr_x_mod, 
;
	jsr     decsp3
	lda     __en_x
	clc
	adc     _en_spr_x_mod
	ldy     #$02
	sta     (sp),y
;
; _en_y + SPRITE_ADJUST, 
;
	lda     __en_y
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L138E
	sec
L138E:	sbc     #$10
	bcs     L138F
	sec
L138F:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [en_spr]
;
	ldx     #$00
	lda     _en_spr
	asl     a
	bcc     L1390
	inx
	clc
L1390:	adc     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [en_spr]
;
	txa
	adc     _spr_enems+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; enems_update_unsigned_char_arrays ();
;
L0FB9:	jsr     _enems_update_unsigned_char_arrays
;
; } 
;
	jmp     L0EF3

.endproc

; ---------------------------------------------------------------
; void __near__ draw_game_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_game_frame: near

.segment	"CODE"

;
; _x = 2; _y = 3;  pr_str ("LIFE:00   ITEM:      KEYS:00");
;
	lda     #$02
	sta     __x
	lda     #$03
	sta     __y
	lda     #<(L0001)
	ldx     #>(L0001)
	jsr     pushax
	jsr     _pr_str
;
; _y = 28; pr_str ("INTERACTIVES-THE MOJON TWINS");
;
	lda     #$1C
	sta     __y
	lda     #<(L0001+29)
	ldx     #>(L0001+29)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ hud_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_update: near

.segment	"CODE"

;
; if (olife != plife) {
;
	lda     _plife
	cmp     _olife
	beq     L0FD3
;
; olife = plife;
;
	lda     _plife
	sta     _olife
;
; _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
;
	lda     #$07
	sta     __x
	lda     #$03
	sta     __y
	lda     _plife
	sta     __n
	jsr     _p_t
;
; HS_INV_X, HS_INV_Y,
;
L0FD3:	jsr     decsp3
	lda     #$88
	ldy     #$02
	sta     (sp),y
	lda     #$0B
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [flags [FLAG_INVENTORY]]
;
	ldx     #$00
	lda     _flags
	asl     a
	bcc     L1396
	inx
	clc
L1396:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [flags [FLAG_INVENTORY]]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ read_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_byte: near

.segment	"CODE"

;
; return *script ++;
;
	lda     _script
	ldx     _script+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L10A8
	inx
L10A8:	sta     _script
	stx     _script+1
	ldx     #$00
	lda     (regsave,x)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ read_vbyte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_vbyte: near

.segment	"CODE"

;
; sc_c = *script ++;
;
	lda     _script
	ldx     _script+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L10AC
	inx
L10AC:	sta     _script
	stx     _script+1
	ldy     #$00
	lda     (regsave),y
	sta     _sc_c
;
; if (sc_c & 128) return flags [sc_c & 127];
;
	and     #$80
	beq     L10AD
	lda     _sc_c
	and     #$7F
	sta     ptr1
	tya
	clc
	adc     #>(_flags)
	sta     ptr1+1
	ldy     #<(_flags)
	ldx     #$00
	lda     (ptr1),y
	rts
;
; return sc_c;
;
L10AD:	ldx     #$00
	lda     _sc_c
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ readxy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readxy: near

.segment	"CODE"

;
; sc_x = read_vbyte ();
;
	jsr     _read_vbyte
	sta     _sc_x
;
; sc_y = read_vbyte ();
;
	jsr     _read_vbyte
	sta     _sc_y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ flickscreen_do_horizontal (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flickscreen_do_horizontal: near

.segment	"CODE"

;
; if (prx == 4 && 
;
	lda     _prx
	cmp     #$04
	bne     L114B
;
; pvx < 0
;
	ldx     _pvx+1
;
; ) {
;
	cpx     #$80
	bcc     L114B
;
; -- n_pant;
;
	dec     _n_pant
;
; px = MAX_PRX << FIXBITS;
;
	ldx     #$3D
;
; } else if (prx == MAX_PRX && 
;
	jmp     L1399
L114B:	lda     _prx
	cmp     #$F4
	bne     L1155
;
; pvx > 0
;
	lda     _pvx
;
; ) {
;
	cmp     #$01
;
; pvx > 0
;
	lda     _pvx+1
;
; ) {
;
	sbc     #$00
	bvs     L1156
	eor     #$80
L1156:	bmi     L1154
L1155:	rts
;
; ++ n_pant;
;
L1154:	inc     _n_pant
;
; px = 4 << FIXBITS;
;
	ldx     #$01
L1399:	lda     #$00
	sta     _px
	stx     _px+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ flickscreen_do_vertical (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flickscreen_do_vertical: near

.segment	"CODE"

;
; if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
;
	lda     _pry
	bne     L115C
	ldx     _pvy+1
	cpx     #$80
	bcc     L115C
	lda     _n_pant
	cmp     _c_map_w
	bcc     L115C
;
; n_pant -= c_map_w;
;
	lda     _c_map_w
	eor     #$FF
	sec
	adc     _n_pant
	sta     _n_pant
;
; py = 192 << FIXBITS;
;
	ldx     #$30
	lda     #$00
	sta     _py
	stx     _py+1
;
; if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
	lda     _pvy
	cmp     #$41
	lda     _pvy+1
	sbc     #$FF
	bvs     L1166
	eor     #$80
L1166:	bpl     L116A
	ldx     #$FF
	lda     #$40
	sta     _pvy
	stx     _pvy+1
;
; } else if (pry >= 192 && pvy > 0 && n_pant < c_map_size - c_map_w) {
;
	rts
L115C:	lda     _pry
	cmp     #$C0
	bcc     L116C
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L116D
	eor     #$80
L116D:	bpl     L116C
	lda     _n_pant
	jsr     pusha0
	lda     _c_map_size
	sec
	sbc     _c_map_w
	jsr     tosicmp0
	bcc     L116B
L116C:	rts
;
; n_pant += c_map_w;
;
L116B:	lda     _c_map_w
	clc
	adc     _n_pant
	sta     _n_pant
;
; py = 0;
;
	lda     #$00
	sta     _py
	sta     _py+1
;
; }
;
L116A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_init: near

.segment	"CODE"

;
; win_level = game_over = 0;
;
	lda     #$00
	sta     _game_over
	sta     _win_level
;
; c_pal_bg =   palts0;
;
	lda     #<(_palts0)
	sta     _c_pal_bg
	lda     #>(_palts0)
	sta     _c_pal_bg+1
;
; c_pal_fg =   palss0;
;
	lda     #<(_palss0)
	sta     _c_pal_fg
	lda     #>(_palss0)
	sta     _c_pal_fg+1
;
; c_ts_tmaps =  ts0_tmaps;
;
	lda     #<(_ts0_tmaps)
	sta     _c_ts_tmaps
	lda     #>(_ts0_tmaps)
	sta     _c_ts_tmaps+1
;
; c_ts_pals =  ts0_pals;
;
	lda     #<(_ts0_pals)
	sta     _c_ts_pals
	lda     #>(_ts0_pals)
	sta     _c_ts_pals+1
;
; c_behs =   behs0;
;
	lda     #<(_behs0)
	sta     _c_behs
	lda     #>(_behs0)
	sta     _c_behs+1
;
; spr_enems =  spr_enems0;
;
	lda     #<(_spr_enems0)
	sta     _spr_enems
	lda     #>(_spr_enems0)
	sta     _spr_enems+1
;
; c_map =  map_0;
;
	lda     #<(_map_0)
	sta     _c_map
	lda     #>(_map_0)
	sta     _c_map+1
;
; c_enems =   enems_0;
;
	lda     #<(_enems_0)
	sta     _c_enems
	lda     #>(_enems_0)
	sta     _c_enems+1
;
; c_hotspots =  hotspots_0;
;
	lda     #<(_hotspots_0)
	sta     _c_hotspots
	lda     #>(_hotspots_0)
	sta     _c_hotspots+1
;
; KILLABLE_ENEMS_0;
;
	lda     #$05
	sta     _c_max_enems
;
; c_map_w = MAP_W;
;
	lda     #$02
	sta     _c_map_w
;
; c_map_h = MAP_H;
;
	lda     #$05
	sta     _c_map_h
;
; rda = c_map_h; c_map_size = 0; while (rda --) c_map_size += c_map_w;
;
	sta     _rda
	lda     #$00
L139A:	sta     _c_map_size
	lda     _rda
	pha
	sec
	sbc     #$01
	sta     _rda
	pla
	tax
	beq     L1194
	lda     _c_map_w
	clc
	adc     _c_map_size
	jmp     L139A
;
; pal_bg (c_pal_bg);
;
L1194:	lda     _c_pal_bg
	ldx     _c_pal_bg+1
	jsr     _pal_bg
;
; pal_spr (c_pal_fg);
;
	lda     _c_pal_fg
	ldx     _c_pal_fg+1
	jsr     _pal_spr
;
; cls ();
;
	jsr     _cls
;
; draw_game_frame ();
;
	jsr     _draw_game_frame
;
; hotspots_load ();
;
	jsr     _hotspots_load
;
; if (!warp_to_level) {
;
	lda     _warp_to_level
	bne     L119F
;
; n_pant = SCR_INI;
;
	lda     #$08
	sta     _n_pant
;
; px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
;
	ldx     #$39
	lda     #$00
	sta     _px
	stx     _px+1
;
; py = (PLAYER_INI_Y << 4) << FIXBITS;
;
	ldx     #$24
	sta     _py
	stx     _py+1
;
; player_to_pixels ();
;
L119F:	jsr     _player_to_pixels
;
; player_init ();
;
	jsr     _player_init
;
; if (!warp_to_level) use_ct = 0;
;
	lda     _warp_to_level
	bne     L11AC
	sta     _use_ct
;
; half_life = 0;
;
L11AC:	lda     #$00
	sta     _half_life
;
; frame_counter = 0;
;
	sta     _frame_counter
;
; olife = oammo = oobjs = okeys = 0xff;
;
	lda     #$FF
	sta     _okeys
	sta     _oobjs
	sta     _oammo
	sta     _olife
;
; okilled = 0xff;
;
	sta     _okilled
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ prepare_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_scr: near

.segment	"CODE"

;
; if (!ft) {
;
	lda     _ft
	bne     L11BC
;
; fade_out (); 
;
	jsr     _fade_out
;
; } else {
;
	jmp     L139B
;
; ft = 0;
;
L11BC:	lda     #$00
	sta     _ft
;
; ppu_off ();
;
L139B:	jsr     _ppu_off
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; enems_load ();
;
	jsr     _enems_load
;
; hotspots_create (); 
;
	jsr     _hotspots_create
;
; f_zone_ac = 0;
;
	lda     #$00
	sta     _f_zone_ac
;
; fzx1 = fzx2 = fzy1 = fzy2 = 240;
;
	lda     #$F0
	sta     _fzy2
	sta     _fzy1
	sta     _fzx2
	sta     _fzx1
;
; draw_scr ();
;
	jsr     _draw_scr
;
; interactives_index = 0;
;
	lda     #$00
	sta     _interactives_index
;
; interactives_interact_with = 0xff;
;
	lda     #$FF
	sta     _interactives_interact_with
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; just_interacted = 0;
;
	lda     #$00
	sta     _just_interacted
;
; run_script (2 * MAP_SIZE + 1);
;
	lda     #$15
	jsr     pusha
	jsr     _run_script
;
; run_script (n_pant << 1);
;
	lda     _n_pant
	asl     a
	jsr     pusha
	jsr     _run_script
;
; gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
;
	lda     #$03
	sta     _gpit
L11DC:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L11DD
	lda     #<(_en_spr_id)
	ldx     #>(_en_spr_id)
	clc
	adc     _gpit
	bcc     L11E1
	inx
L11E1:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_s,y
	ldy     #$00
	sta     (ptr1),y
	jmp     L11DC
;
; oam_index = 4;
;
L11DD:	lda     #$04
	sta     _oam_index
;
; prx = px >> FIXBITS; pry = py >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     shrax4
	jsr     shrax2
	sta     _prx
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_move ();
;
	jsr     _player_move
;
; enems_move ();
;
	jsr     _enems_move
;
; if (hrt) hotspots_paint ();
;
	lda     _hrt
	beq     L11ED
	jsr     _hotspots_paint
;
; interactives_paint ();
;
L11ED:	jsr     _interactives_paint
;
; hud_update ();
;
	jsr     _hud_update
;
; update_cycle ();
;
	jsr     _update_cycle
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; music_play (MUSIC_INGAME);
;
	lda     #$00
	jsr     _music_play
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; set_vram_update (UPDATE_LIST_SIZE, update_list);
;
	lda     #$20
	jsr     pusha
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; on_pant = 99; ft = 1; fade_delay = 1;
;
	lda     #$63
	sta     _on_pant
	lda     #$01
	sta     _ft
	sta     _fade_delay
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; run_script (2 * MAP_SIZE);
;
	lda     #$14
	jsr     pusha
	jsr     _run_script
;
; ntsc_frame = level_reset = warp_to_level = 0; 
;
	lda     #$00
	sta     _warp_to_level
	sta     _level_reset
	sta     _ntsc_frame
;
; oam_index = 4; ticker = 50;
;
	lda     #$04
	sta     _oam_index
	lda     #$32
	sta     _ticker
;
; if (n_pant != 0xfe && on_pant != 0xfe) 
;
L120E:	lda     _n_pant
	cmp     #$FE
	beq     L1211
	lda     _on_pant
	cmp     #$FE
	beq     L1211
;
; hud_update ();
;
	jsr     _hud_update
;
; if (pkill) player_kill ();
;
L1211:	lda     _pkill
	beq     L1216
	jsr     _player_kill
;
; if (game_over || level_reset) break;   
;
L1216:	lda     _game_over
	jne     L120F
	lda     _level_reset
	jne     L120F
;
; flick_override = 0;
;
	sta     _flick_override
;
; if (flick_override == 0) {
;
	lda     _flick_override
	bne     L121E
;
; flickscreen_do_horizontal ();
;
	jsr     _flickscreen_do_horizontal
;
; flickscreen_do_vertical ();
;
	jsr     _flickscreen_do_vertical
;
; if (on_pant != n_pant) {
;
L121E:	lda     _n_pant
	cmp     _on_pant
	beq     L1222
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; update_cycle ();
;
L1222:	jsr     _update_cycle
;
; pad_read ();
;
	jsr     _pad_read
;
; a_button = (pad_this_frame & PAD_A);
;
	lda     _pad_this_frame
	and     #$01
	sta     _a_button
;
; b_button = (pad_this_frame & PAD_B);
;
	lda     _pad_this_frame
	and     #$02
	sta     _b_button
;
; ntsc_frame ++; if (ntsc_frame == 6) ntsc_frame = 0;
;
	lda     _ntsc_frame
	clc
	adc     #$01
	sta     _ntsc_frame
	cmp     #$06
	bne     L1230
	lda     #$00
	sta     _ntsc_frame
;
; if (paused == 0 && (ntsc == 0 || ntsc_frame)) {
;
L1230:	lda     _paused
	jne     L1234
	lda     _ntsc
	beq     L1235
	lda     _ntsc_frame
	jeq     L1234
;
; if (ticker) -- ticker; else ticker = 50;
;
L1235:	lda     _ticker
	beq     L123A
	dec     _ticker
	jmp     L123D
L123A:	lda     #$32
	sta     _ticker
;
; half_life ^= 1;
;
L123D:	lda     _half_life
	eor     #$01
	sta     _half_life
;
; ++ frame_counter;
;
	inc     _frame_counter
;
; if (interactives_index) {
;
	lda     _interactives_index
	jeq     L1279
;
; && use_ct == 0
;
	lda     _b_button
	jeq     L1252
	lda     _use_ct
;
; ) {
;
	jne     L1252
;
; PRXA = prx + 4; rdy = pry + 8;
;
	lda     _prx
	clc
	adc     #$04
	sta     _rda
	lda     _pry
	clc
	adc     #$08
	sta     _rdy
;
; gpit = interactives_index; while (gpit --) {
;
	lda     _interactives_index
	sta     _gpit
L1251:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	jeq     L1252
;
; rda = interactives_yx [gpit]; rdb = rda << 4; rdc = rda & 0xf0;
;
	ldy     _gpit
	lda     _interactives_yx,y
	sta     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rdb
	lda     _rda
	and     #$F0
	sta     _rdc
;
; if (PRXA + 4 >= rdb && PRXA <= rdb + 19 && rdy >= rdc && rdy <= rdc + 15) 
;
	ldx     #$00
	lda     _rda
	clc
	adc     #$04
	bcc     L125E
	inx
L125E:	cmp     _rdb
	txa
	sbc     #$00
	bcc     L1251
	lda     _rda
	jsr     pusha0
	lda     _rdb
	clc
	adc     #$13
	bcc     L1260
	ldx     #$01
L1260:	jsr     tosicmp
	beq     L139F
	bcs     L1251
L139F:	lda     _rdy
	cmp     _rdc
	bcc     L1251
	lda     _rdy
	jsr     pusha0
	lda     _rdc
	clc
	adc     #$0F
	bcc     L1261
	ldx     #$01
L1261:	jsr     tosicmp
	bcc     L125D
	bne     L1251
;
; if (interactives_f [gpit] & 0x80) {
;
L125D:	ldy     _gpit
	lda     _interactives_f,y
	and     #$80
	beq     L1263
;
; use_ct = 1; use_sub_ct = USE_ANIM_FRAMES_PER_STEP;
;
	lda     #$01
	sta     _use_ct
	lda     #$04
	sta     _use_sub_ct
;
; use_type = USE_TYPE_INTERACTIVE;
;
	lda     #$02
	sta     _use_type
;
; interactives_interact_with = gpit;
;
L1263:	lda     _gpit
	sta     _interactives_interact_with
;
; b_button = 0;
;
	lda     #$00
	sta     _b_button
;
; if (interactives_interact_with != 0xff) {
;
L1252:	lda     _interactives_interact_with
	cmp     #$FF
	beq     L1279
;
; rdc = interactives_f [interactives_interact_with];
;
	ldy     _interactives_interact_with
	lda     _interactives_f,y
	sta     _rdc
;
; script_arg = rdc;
;
	sta     _script_arg
;
; (use_ct == USE_ANIM_INTERACT_ON && use_sub_ct == USE_ANIM_FRAMES_PER_STEP)
;
	lda     _use_ct
	cmp     #$03
	bne     L139D
	lda     _use_sub_ct
	cmp     #$04
	beq     L127A
;
; || (rdc & 0x80) == 0
;
L139D:	lda     _rdc
	and     #$80
;
; )
;
	bne     L1279
;
; if (rdc & 0x80) { 
;
L127A:	lda     _rdc
	and     #$80
	beq     L1281
;
; rda = rdc & 0x7f;
;
	lda     _rdc
	and     #$7F
	sta     _rda
;
; rdb = flags [rda];
;
	ldy     _rda
	lda     _flags,y
	sta     _rdb
;
; flags [rda] = flags [FLAG_INVENTORY];
;
	ldy     _rda
	lda     _flags
	sta     _flags,y
;
; flags [FLAG_INVENTORY] = rdb;
;
	lda     _rdb
	sta     _flags
;
; sfx_play (SFX_OBJECT, 1);
;
	lda     #$02
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; just_interacted = 1;
;
L1281:	lda     #$01
	sta     _just_interacted
;
; run_fire_script ();
;
	jsr     _run_fire_script
;
; fire_script_success = 1;
;
	lda     #$01
	sta     _fire_script_success
;
; interactives_interact_with = 0xff;
;
	lda     #$FF
	sta     _interactives_interact_with
;
; if (hrt) {
;
L1279:	lda     _hrt
	jeq     L12C1
;
; prx + 4 >= hrx && 
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L129F
	inx
L129F:	cmp     _hrx
	txa
	sbc     #$00
	jcc     L12C1
;
; prx <= hrx + 11 &&
;
	lda     _prx
	jsr     pusha0
	lda     _hrx
	clc
	adc     #$0B
	bcc     L12A1
	ldx     #$01
L12A1:	jsr     tosicmp
	beq     L13A0
	jcs     L12C1
;
; pry + 8 >= hry && 
;
L13A0:	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L12A2
	inx
L12A2:	cmp     _hry
	txa
	sbc     #$00
	jcc     L12C1
;
; pry <= hry + 7
;
	lda     _pry
	jsr     pusha0
	lda     _hry
;
; ) {
;
	clc
	adc     #$07
	bcc     L12A3
	ldx     #$01
L12A3:	jsr     tosicmp
	bcc     L129E
	bne     L12C1
;
; use_ct == 0 && b_button 
;
L129E:	lda     _use_ct
	bne     L12A5
;
; && ppossee
;
	lda     _b_button
	beq     L12A5
;
; ) {
;
	lda     _ppossee
	beq     L12A5
;
; use_ct = 1; use_sub_ct = USE_ANIM_FRAMES_PER_STEP;
;
	lda     #$01
	sta     _use_ct
	lda     #$04
	sta     _use_sub_ct
;
; b_button = a_button = 0;
;
	lda     #$00
	sta     _a_button
	sta     _b_button
;
; use_type = USE_TYPE_HOTSPOT;
;
	lda     #$01
	sta     _use_type
;
; if (use_ct == USE_ANIM_INTERACT_ON && use_sub_ct == USE_ANIM_FRAMES_PER_STEP && use_type == USE_TYPE_HOTSPOT)
;
L12A5:	lda     _use_ct
	cmp     #$03
	bne     L12C1
	lda     _use_sub_ct
	cmp     #$04
	bne     L12C1
	lda     _use_type
	cmp     #$01
	bne     L12C1
;
; rda = 0;
;
	lda     #$00
	sta     _rda
;
; switch (hrt) {
;
	lda     _hrt
;
; }
;
	cmp     #$03
	bne     L12BA
;
; plife += PLAYER_REFILL;
;
	inc     _plife
;
; rda = SFX_USE;
;
	sta     _rda
;
; if (rda) {
;
L12BA:	lda     _rda
	beq     L12C1
;
; sfx_play (rda, 1);
;
	lda     _rda
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; hrt = 0;
;
	lda     #$00
	sta     _hrt
;
; hact [HS_CUR_PANT] = 0;
;
	ldy     _n_pant
	sta     _hact,y
;
; if (run_fire_script_do && 
;
L12C1:	lda     _run_fire_script_do
	beq     L12CC
;
; use_ct == USE_ANIM_INTERACT_ON && 
;
	lda     _use_ct
	cmp     #$03
	bne     L12CC
;
; use_sub_ct == USE_ANIM_FRAMES_PER_STEP &&
;
	lda     _use_sub_ct
	cmp     #$04
	bne     L12CC
;
; use_type == USE_TYPE_SCRIPTING
;
	lda     _use_type
;
; ) {
;
	cmp     #$03
	bne     L12CC
;
; run_fire_script ();
;
	jsr     _run_fire_script
;
; sfx_play (fire_script_success ? SFX_OBJECT : SFX_SPRING, 1);
;
	lda     _fire_script_success
	beq     L12D3
	lda     #$02
	jmp     L12D5
L12D3:	lda     #$0B
L12D5:	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; run_fire_script_do = 0;
;
	lda     #$00
	sta     _run_fire_script_do
;
; else
;
	jmp     L12DB
;
; if (f_zone_ac && (prx >= fzx1 && prx <= fzx2 && pry >= fzy1 && pry <= fzy2)) {
;
L12CC:	lda     _f_zone_ac
	beq     L12DB
	lda     _prx
	cmp     _fzx1
	bcc     L12DB
	lda     _prx
	sec
	sbc     _fzx2
	sta     tmp1
	lda     tmp1
	beq     L139E
	bcs     L12DB
L139E:	lda     _pry
	cmp     _fzy1
	bcc     L12DB
	lda     _pry
	sec
	sbc     _fzy2
	bcc     L12DC
	bne     L12DB
;
; run_fire_script ();
;
L12DC:	jsr     _run_fire_script
;
; if (!warp_to_level) {
;
L12DB:	lda     _warp_to_level
	bne     L12E3
;
; player_move ();
;
	jsr     _player_move
;
; script_result == 1
;
L12E3:	lda     _script_result
;
; ) {
;
	cmp     #$01
	bne     L12E6
;
; music_stop ();
;
	jsr     _music_stop
;
; delay (50);
;
	lda     #$32
	jsr     _delay
;
; break;
;
	jmp     L120F
;
; oam_index_player = oam_index; 
;
L12E6:	lda     _oam_index
	sta     _oam_index_player
;
; if (!warp_to_level) player_render ();
;
	lda     _warp_to_level
	bne     L12ED
	jsr     _player_render
;
; enems_move ();
;
L12ED:	jsr     _enems_move
;
; if (warp_to_level) {
;
	lda     _warp_to_level
	beq     L12F1
;
; update_cycle (); music_stop (); break;
;
	jsr     _update_cycle
	jsr     _music_stop
	jmp     L120F
;
; if (hrt) hotspots_paint ();
;
L12F1:	lda     _hrt
	beq     L12F5
	jsr     _hotspots_paint
;
; interactives_paint ();
;
L12F5:	jsr     _interactives_paint
;
; if ((pad0 & (PAD_B|PAD_SELECT|PAD_UP)) == (PAD_B|PAD_SELECT|PAD_UP)) break;
;
L1234:	lda     _pad0
	and     #$16
	cmp     #$16
	beq     L120F
;
; if (pad_this_frame & PAD_START) {
;
	lda     _pad_this_frame
	and     #$08
	jeq     L120E
;
; paused ^= 1;
;
	lda     _paused
	eor     #$01
	sta     _paused
;
; pal_bright (4 - paused);
;
	lda     #$04
	sec
	sbc     _paused
	jsr     _pal_bright
;
; music_pause (paused);
;
	lda     _paused
	jsr     _music_pause
;
; }
;
	jmp     L120E
;
; fade_delay = 4;
;
L120F:	lda     #$04
	sta     _fade_delay
;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; set_vram_update (0, 0);
;
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
;
; ppu_off ();
;
	jsr     _ppu_off
;
; oam_clear ();
;
	jmp     _oam_clear

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; bank_spr (1);
;
	lda     #$01
	jsr     _bank_spr
;
; bank_bg (0);
;
	lda     #$00
	jsr     _bank_bg
;
; ppu_off ();
;
	jsr     _ppu_off
;
; first_game = 1;
;
	lda     #$01
	sta     _first_game
;
; ntsc = ppu_system ();
;
	jsr     _ppu_system
	sta     _ntsc
;
; plife = PLAYER_LIFE;
;
L131A:	lda     #$05
	sta     _plife
;
; scroll (0, SCROLL_Y);
;
	jsr     push0
	lda     #$08
	jsr     _scroll
;
; game_init (); 
;
	jsr     _game_init
;
; game_loop ();
;
	jsr     _game_loop
;
; first_game = 0;
;
	lda     #$00
	sta     _first_game
;
; }
;
	jmp     L131A

.endproc

