;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_system
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_oam_hide_rest
	.import		_ppu_waitnmi
	.import		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.import		_pad_poll
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_write
	.import		_memfill
	.import		_delay
	.export		_bitmasks
	.export		_monococo_state_times
	.export		_chac_chacs_times
	.export		_chac_chacs_t1
	.export		_chac_chacs_t2
	.export		_chac_chacs_t3
	.export		_bits
	.export		_jitter
	.export		_palts0
	.export		_palss0
	.export		_behs0
	.export		_scr_0_00
	.export		_scr_0_01
	.export		_scr_0_02
	.export		_scr_0_03
	.export		_scr_0_04
	.export		_scr_0_05
	.export		_scr_0_06
	.export		_scr_0_07
	.export		_map_0
	.export		_map_0_locks
	.export		_enems_0
	.export		_hotspots_0
	.export		_sspl_00_a
	.export		_sspl_00_b
	.export		_sspl_01_a
	.export		_sspl_01_b
	.export		_sspl_02_a
	.export		_sspl_02_b
	.export		_sspl_03_a
	.export		_sspl_03_b
	.export		_sspl_04_a
	.export		_sspl_04_b
	.export		_sspl_05_a
	.export		_sspl_05_b
	.export		_sspl_06_a
	.export		_sspl_06_b
	.export		_ssen_00_a
	.export		_ssen_00_b
	.export		_ssen_01_a
	.export		_ssen_01_b
	.export		_ssen_02_a
	.export		_ssen_02_b
	.export		_ssen_03_a
	.export		_ssen_03_b
	.export		_ssen_04_a
	.export		_ssen_04_b
	.export		_ssen_05_a
	.export		_ssen_05_b
	.export		_ssplat_00
	.export		_ssplat_01
	.export		_ssfanty_00_a
	.export		_ssfanty_00_b
	.export		_ssfanty_01_a
	.export		_ssfanty_01_b
	.export		_sspezon_00
	.export		_sspezon_01
	.export		_sssaw_00
	.export		_sssaw_01
	.export		_ssexpl
	.export		_ssmono_00_a
	.export		_ssmono_00_b
	.export		_ssmono_01_a
	.export		_ssmono_01_b
	.export		_ssmono_02_a
	.export		_ssmono_02_b
	.export		_ssmono_03_a
	.export		_ssmono_03_b
	.export		_sseocc
	.export		_ssit_00
	.export		_ssit_01
	.export		_ssit_02
	.export		_ssobjs_00
	.export		_ssobjs_01
	.export		_ssobjs_02
	.export		_ts0_pals
	.export		_ts0_tmaps
	.export		_spr_player
	.export		_spr_enems0
	.export		_spr_hs
	.export		__x
	.export		__y
	.export		__n
	.export		__t
	.export		_pad0
	.export		_pad_this_frame
	.export		_gpit
	.export		_gpjt
	.export		_rds16
	.export		_gpint
	.export		_gp_gen
	.export		_gp_tmap
	.export		_gp_ram
	.export		_gp_addr
	.export		_rdx
	.export		_rdy
	.export		_rdt
	.export		_rdit
	.export		_rda
	.export		_rdb
	.export		_rdc
	.export		_rdd
	.export		_rdm
	.export		_rde
	.export		_rds
	.export		_rdct
	.export		_ticker
	.export		_ast1
	.export		_at1
	.export		_at2
	.export		_cx1
	.export		_cx2
	.export		_cy1
	.export		_cy2
	.export		_caux
	.export		_oam_index
	.export		_en_initial
	.export		_en_offs
	.export		_en_fr
	.export		_en_collx
	.export		_en_colly
	.export		_en_spr
	.export		_touched
	.export		_en_is_alive
	.export		_pregotten
	.export		__en_t
	.export		__en_s
	.export		__en_x
	.export		__en_y
	.export		__en_x1
	.export		__en_y1
	.export		__en_x2
	.export		__en_y2
	.export		__en_mx
	.export		__en_my
	.export		__en_ct
	.export		__en_facing
	.export		__en_state
	.export		__enf_x
	.export		__enf_y
	.export		__enf_vx
	.export		__enf_vy
	.export		_en_sg_1
	.export		_en_sg_2
	.export		_vertical_engine_type
	.export		_px
	.export		_py
	.export		_pvx
	.export		_pvy
	.export		_prx
	.export		_pry
	.export		_pcx
	.export		_pcy
	.export		_pfacing
	.export		_pfr
	.export		_psprid
	.export		_a_button
	.export		_b_button
	.export		_pj
	.export		_pctj
	.export		_pgotten
	.export		_ppossee
	.export		_oppossee
	.export		_pflickering
	.export		_pbouncing
	.export		_phit
	.export		_pgtmx
	.export		_pgtmy
	.export		_pinv
	.export		_opinv
	.export		_hitv
	.export		_hith
	.export		_prx_old
	.export		_pry_old
	.export		_pkill
	.export		_pice
	.export		_pnotsafe
	.export		_pcontinues
	.export		_plife
	.export		_pkeys
	.export		_pobjs
	.export		_pammo
	.export		_pkilled
	.export		_pfiring
	.export		_n_pant_safe
	.export		_px_safe
	.export		_py_safe
	.export		_bi
	.export		__bx
	.export		__by
	.export		_coco_it
	.export		_hrx
	.export		_hry
	.export		_hrt
	.export		_do_process_breakable
	.export		_ft
	.export		_c_map_w
	.export		_c_map_h
	.export		_c_map_size
	.export		_c_ts_pals
	.export		_c_ts_tmaps
	.export		_c_behs
	.export		_spr_enems
	.export		_c_pal_bg
	.export		_c_pal_fg
	.export		_c_map
	.export		_c_locks
	.export		_c_enems
	.export		_c_hotspots
	.export		_c_max_bolts
	.export		_ntsc
	.export		_ntsc_frame
	.export		_update_index
	.export		_update_list
	.export		_attr_table
	.export		_fader
	.export		_fade_delay
	.export		_map_attr
	.export		_map_buff
	.export		_first_game
	.export		_level
	.export		_c_max_enems
	.export		_n_pant
	.export		_on_pant
	.export		_half_life
	.export		_frame_counter
	.export		_paused
	.export		_win_level
	.export		_game_over
	.export		_warp_to_level
	.export		_level_reset
	.export		_flick_override
	.export		_olife
	.export		_okeys
	.export		_oobjs
	.export		_oammo
	.export		_okilled
	.export		_oam_index_player
	.export		_b_slots
	.export		_b_slots_i
	.export		_bx
	.export		_by
	.export		_bmx
	.export		_bmy
	.export		_coco_slots
	.export		_coco_slots_i
	.export		_coco_on
	.export		_coco_x
	.export		_coco_y
	.export		_coco_vx
	.export		_coco_vy
	.export		_brkf
	.export		_brkx
	.export		_brky
	.export		_pmayneedrelocation
	.export		_hyx
	.export		_ht
	.export		_hact
	.export		_lkact
	.export		_flags
	.export		_en_t
	.export		_en_x
	.export		_en_y
	.export		_en_x1
	.export		_en_y1
	.export		_en_x2
	.export		_en_y2
	.export		_en_mx
	.export		_en_my
	.export		_en_s
	.export		_en_facing
	.export		_en_state
	.export		_en_flags
	.export		_en_cttouched
	.export		_en_life
	.export		_en_status
	.export		_en_ct
	.export		_en_spr_x_mod
	.export		_enf_x
	.export		_enf_vx
	.export		_enf_y
	.export		_enf_vy
	.export		_en_spr_id
	.export		_cfx
	.export		_shaker_ct
	.export		_player_render
	.export		_player_to_pixels
	.export		_fade_out
	.export		_fade_in
	.export		_clear_update_list
	.export		_cls
	.export		_ul_putc
	.export		_p_t
	.export		_upd_attr_table
	.export		_draw_tile
	.export		_update_list_tile
	.export		_map_set
	.export		_get_byte
	.export		_draw_map_tile
	.export		_draw_scr
	.export		_pr_str
	.export		_cm_two_points
	.export		_collide
	.export		_add_sign
	.export		_saturate
	.export		_pad_read
	.export		_distance
	.export		_jump_start
	.export		_update_cycle
	.export		_breakable_do_anim
	.export		_breakable_break
	.export		_hotspots_load
	.export		_hotspots_paint
	.export		_hotspots_create
	.export		_cocos_init
	.export		_cocos_shoot_aimed
	.export		_cocos_destroy
	.export		_cocos_do
	.export		_player_register_safe_spot
	.export		_player_stop
	.export		_player_init
	.export		_player_kill
	.export		_player_process_tile
	.export		_fire_bullet
	.export		_bullets_destroy
	.export		_bullets_move
	.export		_player_move
	.export		_enems_draw_chac_chac
	.export		_enems_update_unsigned_char_arrays
	.export		_enems_facing
	.export		_enems_init_fp
	.export		_enems_boioiong_init
	.export		_enems_load
	.export		_enems_kill
	.export		_enems_hit
	.export		_enems_move
	.export		_draw_game_frame
	.export		_hud_update
	.export		_flickscreen_do_horizontal
	.export		_flickscreen_do_vertical
	.export		_game_init
	.export		_prepare_scr
	.export		_game_loop
	.export		_main

.segment	"DATA"

.segment	"ZEROPAGE"
.segment	"BSS"

.segment	"RODATA"

_bitmasks:
	.byte	$FC
	.byte	$F3
	.byte	$CF
	.byte	$3F
_monococo_state_times:
	.byte	$96
	.byte	$32
	.byte	$32
	.byte	$32
_chac_chacs_times:
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$32
	.byte	$01
	.byte	$01
_chac_chacs_t1:
	.byte	$16
	.byte	$10
	.byte	$12
	.byte	$15
	.byte	$12
	.byte	$10
_chac_chacs_t2:
	.byte	$16
	.byte	$16
	.byte	$16
	.byte	$14
	.byte	$16
	.byte	$16
_chac_chacs_t3:
	.byte	$16
	.byte	$11
	.byte	$13
	.byte	$15
	.byte	$13
	.byte	$11
_bits:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80
_jitter:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
_palts0:
	.byte	$0F
	.byte	$0C
	.byte	$00
	.byte	$38
	.byte	$0F
	.byte	$18
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$1C
	.byte	$21
	.byte	$37
	.byte	$0F
	.byte	$0C
	.byte	$15
	.byte	$27
_palss0:
	.byte	$0F
	.byte	$04
	.byte	$24
	.byte	$27
	.byte	$0F
	.byte	$06
	.byte	$1A
	.byte	$29
	.byte	$0F
	.byte	$15
	.byte	$24
	.byte	$3D
	.byte	$0F
	.byte	$1D
	.byte	$18
	.byte	$3D
_behs0:
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$01
	.byte	$44
	.byte	$02
	.byte	$04
	.byte	$18
	.byte	$09
	.byte	$28
	.byte	$29
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$0B
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
_scr_0_00:
	.byte	$44
	.byte	$00
	.byte	$20
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$F0
	.byte	$00
	.byte	$F0
	.byte	$AA
	.byte	$07
	.byte	$07
	.byte	$F1
	.byte	$21
	.byte	$02
	.byte	$00
	.byte	$0F
	.byte	$F0
	.byte	$20
	.byte	$F0
	.byte	$99
	.byte	$00
	.byte	$04
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$22
	.byte	$00
	.byte	$07
	.byte	$F0
	.byte	$44
	.byte	$00
	.byte	$05
	.byte	$F0
	.byte	$22
	.byte	$00
	.byte	$09
	.byte	$F0
	.byte	$10
	.byte	$F1
	.byte	$00
	.byte	$02
	.byte	$F0
	.byte	$22
	.byte	$F0
	.byte	$33
	.byte	$00
	.byte	$0B
	.byte	$02
	.byte	$05
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$04
	.byte	$F0
	.byte	$52
_scr_0_01:
	.byte	$48
	.byte	$00
	.byte	$0F
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$E0
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$E0
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$E0
	.byte	$00
	.byte	$06
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$F1
	.byte	$00
	.byte	$15
	.byte	$05
	.byte	$07
	.byte	$F0
	.byte	$10
	.byte	$F0
	.byte	$01
	.byte	$F1
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$F0
	.byte	$10
	.byte	$F0
	.byte	$0F
	.byte	$02
	.byte	$10
_scr_0_02:
	.byte	$41
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$01
	.byte	$04
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$05
	.byte	$F0
	.byte	$10
	.byte	$F0
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$05
	.byte	$F0
	.byte	$10
	.byte	$F0
	.byte	$00
	.byte	$07
	.byte	$07
	.byte	$F0
	.byte	$00
	.byte	$F1
	.byte	$22
	.byte	$20
	.byte	$F1
	.byte	$00
	.byte	$07
	.byte	$F1
	.byte	$77
	.byte	$07
	.byte	$F0
	.byte	$77
	.byte	$F0
	.byte	$00
	.byte	$02
	.byte	$13
_scr_0_03:
	.byte	$18
	.byte	$00
	.byte	$5F
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$22
	.byte	$00
	.byte	$0D
	.byte	$02
	.byte	$06
	.byte	$00
	.byte	$07
	.byte	$02
	.byte	$15
_scr_0_04:
	.byte	$3C
	.byte	$02
	.byte	$0E
	.byte	$F0
	.byte	$52
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0C
	.byte	$F1
	.byte	$50
	.byte	$20
	.byte	$00
	.byte	$0C
	.byte	$F1
	.byte	$50
	.byte	$20
	.byte	$00
	.byte	$0C
	.byte	$F1
	.byte	$50
	.byte	$20
	.byte	$00
	.byte	$0C
	.byte	$F1
	.byte	$50
	.byte	$20
	.byte	$00
	.byte	$0C
	.byte	$F1
	.byte	$50
	.byte	$20
	.byte	$00
	.byte	$0C
	.byte	$F1
	.byte	$50
	.byte	$20
	.byte	$00
	.byte	$0C
	.byte	$F1
	.byte	$50
	.byte	$20
	.byte	$00
	.byte	$0C
	.byte	$F1
	.byte	$50
	.byte	$20
	.byte	$00
	.byte	$0C
	.byte	$F1
	.byte	$50
	.byte	$20
	.byte	$00
	.byte	$04
	.byte	$F1
	.byte	$2C
	.byte	$25
	.byte	$05
	.byte	$06
	.byte	$02
	.byte	$10
_scr_0_05:
	.byte	$0D
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$90
	.byte	$05
	.byte	$06
	.byte	$F1
	.byte	$2D
	.byte	$20
	.byte	$00
	.byte	$06
	.byte	$02
	.byte	$10
_scr_0_06:
	.byte	$2A
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$55
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$09
	.byte	$07
	.byte	$07
	.byte	$00
	.byte	$09
	.byte	$F0
	.byte	$77
	.byte	$F1
	.byte	$00
	.byte	$07
	.byte	$F0
	.byte	$70
	.byte	$00
	.byte	$08
	.byte	$F0
	.byte	$77
	.byte	$F1
	.byte	$00
	.byte	$07
	.byte	$F0
	.byte	$70
	.byte	$00
	.byte	$08
	.byte	$F0
	.byte	$77
	.byte	$F1
	.byte	$22
	.byte	$27
	.byte	$F0
	.byte	$70
	.byte	$F1
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$0F
_scr_0_07:
	.byte	$2A
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$0F
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$F0
	.byte	$20
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$11
_map_0:
	.addr	_scr_0_00
	.addr	_scr_0_01
	.addr	_scr_0_02
	.addr	_scr_0_03
	.addr	_scr_0_04
	.addr	_scr_0_05
	.addr	_scr_0_06
	.addr	_scr_0_07
_map_0_locks:
	.byte	$01
	.byte	$AF
_enems_0:
	.byte	$03
	.byte	$BD
	.byte	$B5
	.byte	$01
	.byte	$06
	.byte	$3D
	.byte	$3C
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$04
	.byte	$6B
	.byte	$9B
	.byte	$01
	.byte	$0B
	.byte	$3D
	.byte	$3C
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$CB
	.byte	$C3
	.byte	$00
	.byte	$09
	.byte	$9E
	.byte	$8E
	.byte	$04
	.byte	$0A
	.byte	$92
	.byte	$A2
	.byte	$02
	.byte	$0A
	.byte	$96
	.byte	$B6
	.byte	$02
	.byte	$0A
	.byte	$99
	.byte	$B9
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$B5
	.byte	$B1
	.byte	$02
	.byte	$01
	.byte	$B1
	.byte	$B5
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$B9
	.byte	$BD
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$65
	.byte	$6B
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$00
_hotspots_0:
	.byte	$03
	.byte	$4E
	.byte	$02
	.byte	$25
	.byte	$05
	.byte	$B7
	.byte	$00
	.byte	$10
	.byte	$07
	.byte	$A7
	.byte	$08
	.byte	$A7
	.byte	$06
	.byte	$A8
	.byte	$00
	.byte	$10
_sspl_00_a:
	.byte	$FC
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$02
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$06
	.byte	$00
	.byte	$80
_sspl_00_b:
	.byte	$FC
	.byte	$F8
	.byte	$02
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$04
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$06
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$05
	.byte	$40
	.byte	$80
_sspl_01_a:
	.byte	$FC
	.byte	$F8
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$08
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$0B
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$0C
	.byte	$00
	.byte	$80
_sspl_01_b:
	.byte	$FC
	.byte	$F8
	.byte	$08
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$07
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$0C
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$0B
	.byte	$40
	.byte	$80
_sspl_02_a:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$80
_sspl_02_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$0F
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$12
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$80
_sspl_03_a:
	.byte	$FC
	.byte	$F8
	.byte	$07
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$08
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$15
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$80
_sspl_03_b:
	.byte	$FC
	.byte	$F8
	.byte	$08
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$07
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$14
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$13
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$16
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$15
	.byte	$40
	.byte	$80
_sspl_04_a:
	.byte	$FC
	.byte	$F8
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$17
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$19
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1A
	.byte	$00
	.byte	$80
_sspl_04_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$0D
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$18
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$17
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1A
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$19
	.byte	$40
	.byte	$80
_sspl_05_a:
	.byte	$FC
	.byte	$F8
	.byte	$1B
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$0E
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$1E
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$1F
	.byte	$00
	.byte	$80
_sspl_05_b:
	.byte	$FC
	.byte	$F8
	.byte	$0E
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$1B
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$1D
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$1C
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$1F
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$1E
	.byte	$40
	.byte	$80
_sspl_06_a:
	.byte	$FC
	.byte	$F8
	.byte	$20
	.byte	$00
	.byte	$04
	.byte	$F8
	.byte	$21
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$FC
	.byte	$08
	.byte	$24
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$25
	.byte	$00
	.byte	$80
_sspl_06_b:
	.byte	$FC
	.byte	$F8
	.byte	$21
	.byte	$40
	.byte	$04
	.byte	$F8
	.byte	$20
	.byte	$40
	.byte	$FC
	.byte	$00
	.byte	$23
	.byte	$40
	.byte	$04
	.byte	$00
	.byte	$22
	.byte	$40
	.byte	$FC
	.byte	$08
	.byte	$25
	.byte	$40
	.byte	$04
	.byte	$08
	.byte	$24
	.byte	$40
	.byte	$80
_ssen_00_a:
	.byte	$00
	.byte	$F8
	.byte	$26
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$27
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$29
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$2A
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$2B
	.byte	$00
	.byte	$80
_ssen_00_b:
	.byte	$00
	.byte	$F8
	.byte	$27
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$26
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$28
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$2B
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$2A
	.byte	$42
	.byte	$80
_ssen_01_a:
	.byte	$00
	.byte	$F8
	.byte	$26
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$27
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$2D
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$2E
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$2F
	.byte	$02
	.byte	$80
_ssen_01_b:
	.byte	$00
	.byte	$F8
	.byte	$27
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$26
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$2D
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$2C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$2F
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$2E
	.byte	$42
	.byte	$80
_ssen_02_a:
	.byte	$00
	.byte	$F8
	.byte	$30
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$31
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$32
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$33
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$34
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$35
	.byte	$02
	.byte	$80
_ssen_02_b:
	.byte	$00
	.byte	$F8
	.byte	$31
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$30
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$32
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$35
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$34
	.byte	$42
	.byte	$80
_ssen_03_a:
	.byte	$00
	.byte	$F8
	.byte	$36
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$37
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$39
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$3A
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3B
	.byte	$02
	.byte	$80
_ssen_03_b:
	.byte	$00
	.byte	$F8
	.byte	$37
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$36
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$39
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$38
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$3B
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$3A
	.byte	$42
	.byte	$80
_ssen_04_a:
	.byte	$00
	.byte	$F8
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$3D
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$3E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$41
	.byte	$02
	.byte	$80
_ssen_04_b:
	.byte	$00
	.byte	$F8
	.byte	$3D
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$3C
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$3E
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$41
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$42
	.byte	$80
_ssen_05_a:
	.byte	$00
	.byte	$F8
	.byte	$42
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$43
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$45
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$46
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$47
	.byte	$02
	.byte	$80
_ssen_05_b:
	.byte	$00
	.byte	$F8
	.byte	$43
	.byte	$42
	.byte	$08
	.byte	$F8
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$45
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$44
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$47
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$46
	.byte	$42
	.byte	$80
_ssplat_00:
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$48
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$49
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4A
	.byte	$02
	.byte	$80
_ssplat_01:
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$48
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4B
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$02
	.byte	$80
_ssfanty_00_a:
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$4E
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4F
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$80
_ssfanty_00_b:
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$4D
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4F
	.byte	$42
	.byte	$80
_ssfanty_01_a:
	.byte	$00
	.byte	$00
	.byte	$4D
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$4E
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4F
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$51
	.byte	$02
	.byte	$80
_ssfanty_01_b:
	.byte	$00
	.byte	$00
	.byte	$4E
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$4D
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$51
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4F
	.byte	$42
	.byte	$80
_sspezon_00:
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$55
	.byte	$02
	.byte	$80
_sspezon_01:
	.byte	$00
	.byte	$00
	.byte	$56
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$57
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$58
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$59
	.byte	$02
	.byte	$80
_sssaw_00:
	.byte	$00
	.byte	$00
	.byte	$5A
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$5B
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$5A
	.byte	$C2
	.byte	$80
_sssaw_01:
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5D
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$5D
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$5C
	.byte	$C2
	.byte	$80
_ssexpl:
	.byte	$00
	.byte	$00
	.byte	$5E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$5F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$60
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$61
	.byte	$02
	.byte	$80
_ssmono_00_a:
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$63
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$64
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$65
	.byte	$01
	.byte	$80
_ssmono_00_b:
	.byte	$00
	.byte	$00
	.byte	$63
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$62
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$65
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$64
	.byte	$41
	.byte	$80
_ssmono_01_a:
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$67
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$68
	.byte	$01
	.byte	$80
_ssmono_01_b:
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$62
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$68
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$67
	.byte	$41
	.byte	$80
_ssmono_02_a:
	.byte	$00
	.byte	$00
	.byte	$69
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$6A
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6B
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$6C
	.byte	$01
	.byte	$80
_ssmono_02_b:
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$69
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$6C
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$6B
	.byte	$41
	.byte	$80
_ssmono_03_a:
	.byte	$00
	.byte	$00
	.byte	$6D
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$6E
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6F
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$70
	.byte	$01
	.byte	$80
_ssmono_03_b:
	.byte	$00
	.byte	$00
	.byte	$6E
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$6D
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$70
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$6F
	.byte	$41
	.byte	$80
_sseocc:
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$23
	.byte	$08
	.byte	$00
	.byte	$71
	.byte	$63
	.byte	$00
	.byte	$08
	.byte	$71
	.byte	$A3
	.byte	$08
	.byte	$08
	.byte	$71
	.byte	$E3
	.byte	$80
_ssit_00:
	.byte	$00
	.byte	$00
	.byte	$72
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$72
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$73
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$73
	.byte	$40
	.byte	$80
_ssit_01:
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$75
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$76
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$77
	.byte	$00
	.byte	$80
_ssit_02:
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$79
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$7A
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$7B
	.byte	$02
	.byte	$80
_ssobjs_00:
	.byte	$00
	.byte	$00
	.byte	$7C
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$7C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$7C
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$7C
	.byte	$C2
	.byte	$80
_ssobjs_01:
	.byte	$00
	.byte	$00
	.byte	$7D
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$7E
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$7F
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$80
	.byte	$01
	.byte	$80
_ssobjs_02:
	.byte	$00
	.byte	$00
	.byte	$81
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$81
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$81
	.byte	$81
	.byte	$08
	.byte	$08
	.byte	$81
	.byte	$C1
	.byte	$80
_ts0_pals:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_ts0_tmaps:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$50
	.byte	$51
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$5F
	.byte	$60
	.byte	$61
	.byte	$5E
	.byte	$5F
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$76
	.byte	$76
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$76
	.byte	$76
	.byte	$77
	.byte	$77
	.byte	$7A
	.byte	$78
	.byte	$7B
	.byte	$7B
	.byte	$7C
	.byte	$7C
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_spr_player:
	.addr	_sspl_00_a
	.addr	_sspl_01_a
	.addr	_sspl_02_a
	.addr	_sspl_03_a
	.addr	_sspl_04_a
	.addr	_sspl_05_a
	.addr	_sspl_06_a
	.word	$0000
	.addr	_sspl_00_b
	.addr	_sspl_01_b
	.addr	_sspl_02_b
	.addr	_sspl_03_b
	.addr	_sspl_04_b
	.addr	_sspl_05_b
	.addr	_sspl_06_b
	.word	$0000
_spr_enems0:
	.addr	_ssen_00_a
	.addr	_ssen_01_a
	.word	$0000
	.word	$0000
	.addr	_ssen_00_b
	.addr	_ssen_01_b
	.word	$0000
	.word	$0000
	.addr	_ssen_02_a
	.addr	_ssen_03_a
	.word	$0000
	.word	$0000
	.addr	_ssen_02_b
	.addr	_ssen_03_b
	.word	$0000
	.word	$0000
	.addr	_ssen_04_a
	.addr	_ssen_05_a
	.word	$0000
	.word	$0000
	.addr	_ssen_04_b
	.addr	_ssen_05_b
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssplat_00
	.addr	_ssplat_01
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_a
	.addr	_ssfanty_01_a
	.word	$0000
	.word	$0000
	.addr	_ssfanty_00_b
	.addr	_ssfanty_01_b
	.word	$0000
	.word	$0000
	.addr	_sspezon_00
	.addr	_sspezon_01
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_sssaw_00
	.addr	_sssaw_01
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.word	$0000
	.addr	_ssmono_00_a
	.addr	_ssmono_01_a
	.word	$0000
	.word	$0000
	.addr	_ssmono_00_b
	.addr	_ssmono_01_b
	.word	$0000
	.word	$0000
	.addr	_ssmono_02_a
	.addr	_ssmono_03_a
	.word	$0000
	.word	$0000
	.addr	_ssmono_02_b
	.addr	_ssmono_03_b
	.word	$0000
	.word	$0000
	.addr	_sseocc
	.addr	_ssexpl
_spr_hs:
	.word	$0000
	.addr	_ssit_00
	.addr	_ssit_01
	.addr	_ssit_02
	.addr	_ssobjs_00
	.addr	_ssobjs_01
	.addr	_ssobjs_02
L0001:
	.byte	$4C,$49,$46,$45,$3A,$30,$30,$20,$20,$20,$49,$54,$45,$4D,$3A,$20
	.byte	$20,$20,$20,$20,$20,$4B,$45,$59,$53,$3A,$30,$30,$00,$53,$55,$50
	.byte	$50,$41,$54,$45,$53,$54,$52,$20,$2D,$20,$54,$48,$45,$20,$4D,$4F
	.byte	$4A,$4F,$4E,$20,$54,$57,$49,$4E,$53,$00

.segment	"BSS"

.segment	"ZEROPAGE"
__x:
	.res	1,$00
__y:
	.res	1,$00
__n:
	.res	1,$00
__t:
	.res	1,$00
_pad0:
	.res	1,$00
_pad_this_frame:
	.res	1,$00
_gpit:
	.res	1,$00
_gpjt:
	.res	1,$00
_rds16:
	.res	2,$00
_gpint:
	.res	2,$00
_gp_gen:
	.res	2,$00
_gp_tmap:
	.res	2,$00
_gp_ram:
	.res	2,$00
_gp_addr:
	.res	2,$00
_rdx:
	.res	1,$00
_rdy:
	.res	1,$00
_rdt:
	.res	1,$00
_rdit:
	.res	1,$00
_rda:
	.res	1,$00
_rdb:
	.res	1,$00
_rdc:
	.res	1,$00
_rdd:
	.res	1,$00
_rdm:
	.res	1,$00
_rde:
	.res	1,$00
_rds:
	.res	1,$00
_rdct:
	.res	1,$00
_ticker:
	.res	1,$00
_ast1:
	.res	1,$00
_at1:
	.res	1,$00
_at2:
	.res	1,$00
_cx1:
	.res	1,$00
_cx2:
	.res	1,$00
_cy1:
	.res	1,$00
_cy2:
	.res	1,$00
_caux:
	.res	1,$00
_oam_index:
	.res	1,$00
_en_initial:
	.res	1,$00
_en_offs:
	.res	1,$00
_en_fr:
	.res	1,$00
_en_collx:
	.res	1,$00
_en_colly:
	.res	1,$00
_en_spr:
	.res	1,$00
_touched:
	.res	1,$00
_en_is_alive:
	.res	1,$00
_pregotten:
	.res	1,$00
__en_t:
	.res	1,$00
__en_s:
	.res	1,$00
__en_x:
	.res	1,$00
__en_y:
	.res	1,$00
__en_x1:
	.res	1,$00
__en_y1:
	.res	1,$00
__en_x2:
	.res	1,$00
__en_y2:
	.res	1,$00
__en_mx:
	.res	1,$00
__en_my:
	.res	1,$00
__en_ct:
	.res	1,$00
__en_facing:
	.res	1,$00
__en_state:
	.res	1,$00
__enf_x:
	.res	2,$00
__enf_y:
	.res	2,$00
__enf_vx:
	.res	2,$00
__enf_vy:
	.res	2,$00
_en_sg_1:
	.res	1,$00
_en_sg_2:
	.res	1,$00
_vertical_engine_type:
	.res	1,$00
_px:
	.res	2,$00
_py:
	.res	2,$00
_pvx:
	.res	2,$00
_pvy:
	.res	2,$00
_prx:
	.res	1,$00
_pry:
	.res	1,$00
_pcx:
	.res	1,$00
_pcy:
	.res	1,$00
_pfacing:
	.res	1,$00
_pfr:
	.res	1,$00
_psprid:
	.res	1,$00
_a_button:
	.res	1,$00
_b_button:
	.res	1,$00
_pj:
	.res	1,$00
_pctj:
	.res	1,$00
_pgotten:
	.res	1,$00
_ppossee:
	.res	1,$00
_oppossee:
	.res	1,$00
_pflickering:
	.res	1,$00
_pbouncing:
	.res	1,$00
_phit:
	.res	1,$00
_pgtmx:
	.res	2,$00
_pgtmy:
	.res	2,$00
_pinv:
	.res	1,$00
_opinv:
	.res	1,$00
_hitv:
	.res	1,$00
_hith:
	.res	1,$00
_prx_old:
	.res	1,$00
_pry_old:
	.res	1,$00
_pkill:
	.res	1,$00
_pice:
	.res	1,$00
_pnotsafe:
	.res	1,$00
_pcontinues:
	.res	1,$00
_plife:
	.res	1,$00
_pkeys:
	.res	1,$00
_pobjs:
	.res	1,$00
_pammo:
	.res	1,$00
_pkilled:
	.res	1,$00
_pfiring:
	.res	1,$00
_n_pant_safe:
	.res	1,$00
_px_safe:
	.res	2,$00
_py_safe:
	.res	2,$00
_bi:
	.res	1,$00
__bx:
	.res	1,$00
__by:
	.res	1,$00
_coco_it:
	.res	1,$00
_hrx:
	.res	1,$00
_hry:
	.res	1,$00
_hrt:
	.res	1,$00
_do_process_breakable:
	.res	1,$00
_ft:
	.res	1,$00
_c_map_w:
	.res	1,$00
_c_map_h:
	.res	1,$00
_c_map_size:
	.res	1,$00
_c_ts_pals:
	.res	2,$00
_c_ts_tmaps:
	.res	2,$00
_c_behs:
	.res	2,$00
_spr_enems:
	.res	2,$00
_c_pal_bg:
	.res	2,$00
_c_pal_fg:
	.res	2,$00
_c_map:
	.res	2,$00
_c_locks:
	.res	2,$00
_c_enems:
	.res	2,$00
_c_hotspots:
	.res	2,$00
_c_max_bolts:
	.res	1,$00
.segment	"BSS"
_ntsc:
	.res	1,$00
_ntsc_frame:
	.res	1,$00
_update_index:
	.res	1,$00
_update_list:
	.res	96,$00
_attr_table:
	.res	64,$00
_fader:
	.res	1,$00
_fade_delay:
	.res	1,$00
_map_attr:
	.res	192,$00
_map_buff:
	.res	192,$00
_first_game:
	.res	1,$00
_level:
	.res	1,$00
_c_max_enems:
	.res	1,$00
_n_pant:
	.res	1,$00
_on_pant:
	.res	1,$00
_half_life:
	.res	1,$00
_frame_counter:
	.res	1,$00
_paused:
	.res	1,$00
_win_level:
	.res	1,$00
_game_over:
	.res	1,$00
_warp_to_level:
	.res	1,$00
_level_reset:
	.res	1,$00
_flick_override:
	.res	1,$00
_olife:
	.res	1,$00
_okeys:
	.res	1,$00
_oobjs:
	.res	1,$00
_oammo:
	.res	1,$00
_okilled:
	.res	1,$00
_oam_index_player:
	.res	1,$00
_b_slots:
	.res	4,$00
_b_slots_i:
	.res	1,$00
_bx:
	.res	4,$00
_by:
	.res	4,$00
_bmx:
	.res	4,$00
_bmy:
	.res	4,$00
_coco_slots:
	.res	1,$00
_coco_slots_i:
	.res	1,$00
_coco_on:
	.res	1,$00
_coco_x:
	.res	2,$00
_coco_y:
	.res	2,$00
_coco_vx:
	.res	2,$00
_coco_vy:
	.res	2,$00
_brkf:
	.res	4,$00
_brkx:
	.res	4,$00
_brky:
	.res	4,$00
_pmayneedrelocation:
	.res	1,$00
_hyx:
	.res	8,$00
_ht:
	.res	8,$00
_hact:
	.res	8,$00
_lkact:
	.res	16,$00
_flags:
	.res	2,$00
_en_t:
	.res	3,$00
_en_x:
	.res	3,$00
_en_y:
	.res	3,$00
_en_x1:
	.res	3,$00
_en_y1:
	.res	3,$00
_en_x2:
	.res	3,$00
_en_y2:
	.res	3,$00
_en_mx:
	.res	3,$00
_en_my:
	.res	3,$00
_en_s:
	.res	3,$00
_en_facing:
	.res	3,$00
_en_state:
	.res	3,$00
_en_flags:
	.res	3,$00
_en_cttouched:
	.res	3,$00
_en_life:
	.res	3,$00
_en_status:
	.res	3,$00
_en_ct:
	.res	3,$00
_en_spr_x_mod:
	.res	1,$00
_enf_x:
	.res	6,$00
_enf_vx:
	.res	6,$00
_enf_y:
	.res	6,$00
_enf_vy:
	.res	6,$00
_en_spr_id:
	.res	3,$00
_cfx:
	.res	1,$00
_shaker_ct:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ player_render (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_render: near

.segment	"CODE"

;
; if (0 == pflickering || half_life) 
;
	lda     _pflickering
	beq     L0B73
	lda     _half_life
	bne     L0B73
	rts
;
; prx,
;
L0B73:	jsr     decsp3
	lda     _prx
	ldy     #$02
	sta     (sp),y
;
; pry + SPRITE_ADJUST, 
;
	lda     _pry
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L15F1
	sec
L15F1:	sbc     #$10
	bcs     L15F2
	sec
L15F2:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_player [psprid]
;
	ldx     #$00
	lda     _psprid
	asl     a
	bcc     L15F3
	inx
	clc
L15F3:	adc     #<(_spr_player)
;
; );
;
	sta     ptr1
;
; spr_player [psprid]
;
	txa
	adc     #>(_spr_player)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_to_pixels (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_to_pixels: near

.segment	"CODE"

;
; prx = px >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     shrax4
	jsr     shrax2
	sta     _prx
;
; pry = py >> FIXBITS;
;
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_out (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_out: near

.segment	"CODE"

;
; for (fader = 4; fader > -1; fader --) {
;
	lda     #$04
L15F4:	sta     _fader
	tax
	bmi     L07BC
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 4; fader > -1; fader --) {
;
	lda     _fader
	sec
	sbc     #$01
	jmp     L15F4
;
; }
;
L07BC:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fade_in (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fade_in: near

.segment	"CODE"

;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     #$00
L15F5:	sta     _fader
	sec
	sbc     #$05
	bvc     L07D2
	eor     #$80
L07D2:	bpl     L07CB
;
; pal_bright (fader);
;
	lda     _fader
	jsr     _pal_bright
;
; delay (fade_delay);
;
	lda     _fade_delay
	jsr     _delay
;
; for (fader = 0; fader < 5; fader ++) {
;
	lda     _fader
	clc
	adc     #$01
	jmp     L15F5
;
; }
;
L07CB:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clear_update_list (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_update_list: near

.segment	"CODE"

;
; memfill (update_list, 0, UPDATE_LIST_SIZE*3);
;
	jsr     decsp3
	lda     #<(_update_list)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_update_list)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	tax
	lda     #$60
	jsr     _memfill
;
; update_index = 0;
;
	lda     #$00
	sta     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

.segment	"CODE"

;
; vram_adr (0x2000); vram_fill(0x00, 
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
	lda     #$00
	jsr     pusha
;
; );
;
	ldx     #$04
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ ul_putc (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ul_putc: near

.segment	"CODE"

;
; __asm__ ("ldx %v", update_index);
;
	ldx     _update_index
;
; __asm__ ("lda %v + 1", gp_addr);
;
	lda     _gp_addr + 1
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda %v", gp_addr);
;
	lda     _gp_addr
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; __asm__ ("inx");
;
	inx
;
; __asm__ ("lda %v", _n);
;
	lda     __n
;
; __asm__ ("sta %v, x", update_list);
;
	sta     _update_list,x
;
; __asm__ ("inc %v", gp_addr);
;
	inc     _gp_addr
;
; __asm__ ("bne %g", ul_putc_inc16_0);
;
	bne     L07F2
;
; __asm__ ("inc %v + 1", gp_addr);
;
	inc     _gp_addr + 1
;
; __asm__ ("inc %v", update_index);
;
L07F2:	inc     _update_index
;
; __asm__ ("inc %v", update_index);
;
	inc     _update_index
;
; __asm__ ("inc %v", update_index);
;
	inc     _update_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ p_t (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_p_t: near

.segment	"CODE"

;
; gp_addr = (_y << 5) + _x + 0x2000;
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L15F6
	inx
L15F6:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; __asm__ ("lda %v", _n);
;
	lda     __n
;
; __asm__ ("ldx #$ff");
;
	ldx     #$ff
;
; __asm__ ("sec");
;
	sec
;
; __asm__ ("inx");
;
L07FE:	inx
;
; __asm__ ("sbc #10");
;
	sbc     #10
;
; __asm__ ("bcs %g", p_t_loop_0);
;
	bcs     L07FE
;
; __asm__ ("adc #10");
;
	adc     #10
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("stx %v", _n);
;
	stx     __n
;
; _n += 16;      ul_putc ();
;
	lda     #$10
	clc
	adc     __n
	sta     __n
	jsr     _ul_putc
;
; _n = rda + 16; ul_putc ();
;
	lda     _rda
	clc
	adc     #$10
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ upd_attr_table (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_upd_attr_table: near

.segment	"CODE"

;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("sta %v", rdc); // rdc = (_x >> 2)
;
	sta     _rdc
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("and #$f8");  // A = (_y << 1) & 0xf8
;
	and     #$f8
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rdc);
;
	adc     _rdc
;
; __asm__ ("sta %v", rdc); // Result
;
	sta     _rdc
;
; __asm__ ("tax");
;
	tax
;
; __asm__ ("lda %v, x", attr_table);
;
	lda     _attr_table,x
;
; __asm__ ("sta %v", rda);
;
	sta     _rda
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("sta %v", rdb); // rdb = ((_x >> 1) & 1)
;
	sta     _rdb
;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("lsr a");
;
	lsr     a
;
; __asm__ ("and #1");
;
	and     #1
;
; __asm__ ("asl a");   // A = (((_y >> 1) & 1) << 1)
;
	asl     a
;
; __asm__ ("clc");
;
	clc
;
; __asm__ ("adc %v", rdb);
;
	adc     _rdb
;
; __asm__ ("sta %v", rdb); // Result
;
	sta     _rdb
;
; __asm__ ("lda %v", c_ts_pals);
;
	lda     _c_ts_pals
;
; __asm__ ("ldx %v + 1", c_ts_pals);
;
	ldx     _c_ts_pals + 1
;
; __asm__ ("ldy %v", _t);
;
	ldy     __t
;
; __asm__ ("sta ptr1");
;
	sta     ptr1
;
; __asm__ ("stx ptr1+1");
;
	stx     ptr1+1
;
; __asm__ ("lda (ptr1), y");
;
	lda     (ptr1),y
;
; __asm__ ("ldx %v", rdb); 
;
	ldx     _rdb
;
; __asm__ ("beq %g", upd_attr_table_loop_0_skip);
;
	beq     L082D
;
; __asm__ ("asl a");
;
L082E:	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("dex");
;
	dex
;
; __asm__ ("bne %g", upd_attr_table_loop_0);
;
	bne     L082E
;
; __asm__ ("sta %v", ast1); // ast1 = (c_ts_pals [_t] << (rdb << 1));
;
L082D:	sta     _ast1
;
; __asm__ ("lda %v", rda);
;
	lda     _rda
;
; __asm__ ("ldx %v", rdb);
;
	ldx     _rdb
;
; __asm__ ("and %v, x", bitmasks);
;
	and     _bitmasks,x
;
; __asm__ ("ora %v", ast1);
;
	ora     _ast1
;
; __asm__ ("sta %v", rda); // Result
;
	sta     _rda
;
; __asm__ ("ldx %v", rdc);
;
	ldx     _rdc
;
; __asm__ ("sta %v, x", attr_table);
;
	sta     _attr_table,x
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + NAMETABLE_BASE);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L15F7
	inx
L15F7:	pha
	txa
	clc
	adc     #$20
	tax
	pla
	sta     _gp_addr
	stx     _gp_addr+1
;
; vram_adr (gp_addr); ++ gp_addr;
;
	jsr     _vram_adr
	inc     _gp_addr
	bne     L0847
	inc     _gp_addr+1
;
; SET_FROM_PTR (rda, gp_tmap); ++ gp_tmap; vram_put (rda);
;
L0847:	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	inc     _gp_tmap
	bne     L084C
	inc     _gp_tmap+1
L084C:	lda     _rda
	jsr     _vram_put
;
; SET_FROM_PTR (rda, gp_tmap); ++ gp_tmap; vram_put (rda);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	inc     _gp_tmap
	bne     L0853
	inc     _gp_tmap+1
L0853:	lda     _rda
	jsr     _vram_put
;
; gp_addr += 31;
;
	lda     #$1F
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L0858
	inc     _gp_addr+1
;
; vram_adr (gp_addr); ++ gp_addr;
;
L0858:	lda     _gp_addr
	ldx     _gp_addr+1
	jsr     _vram_adr
	inc     _gp_addr
	bne     L085C
	inc     _gp_addr+1
;
; SET_FROM_PTR (rda, gp_tmap); ++ gp_tmap; vram_put (rda);
;
L085C:	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	inc     _gp_tmap
	bne     L0861
	inc     _gp_tmap+1
L0861:	lda     _rda
	jsr     _vram_put
;
; SET_FROM_PTR (rda, gp_tmap);             vram_put (rda);
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     _rda
	jmp     _vram_put

.endproc

; ---------------------------------------------------------------
; void __near__ update_list_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_list_tile: near

.segment	"CODE"

;
; upd_attr_table ();
;
	jsr     _upd_attr_table
;
; gp_addr = (NAMETABLE_BASE + 0x03c0) + rdc;
;
	lda     _rdc
	clc
	adc     #$C0
	sta     _gp_addr
	lda     #$00
	adc     #$23
	sta     _gp_addr+1
;
; _n = rda; ul_putc ();
;
	lda     _rda
	sta     __n
	jsr     _ul_putc
;
; gp_tmap = c_ts_tmaps + (_t << 2);
;
	ldx     #$00
	lda     __t
	jsr     aslax2
	clc
	adc     _c_ts_tmaps
	sta     _gp_tmap
	txa
	adc     _c_ts_tmaps+1
	sta     _gp_tmap+1
;
; gp_addr = ((_y << 5) + _x + NAMETABLE_BASE);
;
	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     __x
	bcc     L15F8
	inx
L15F8:	sta     _gp_addr
	txa
	clc
	adc     #$20
	sta     _gp_addr+1
;
; SET_FROM_PTR (_n, gp_tmap); ++ gp_tmap; ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	inc     _gp_tmap
	bne     L087C
	inc     _gp_tmap+1
L087C:	jsr     _ul_putc
;
; SET_FROM_PTR (_n, gp_tmap); ++ gp_tmap; ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	inc     _gp_tmap
	bne     L0882
	inc     _gp_tmap+1
L0882:	jsr     _ul_putc
;
; gp_addr += 30;
;
	lda     #$1E
	clc
	adc     _gp_addr
	sta     _gp_addr
	bcc     L0886
	inc     _gp_addr+1
;
; SET_FROM_PTR (_n, gp_tmap); ++ gp_tmap; ul_putc ();
;
L0886:	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	inc     _gp_tmap
	bne     L088B
	inc     _gp_tmap+1
L088B:	jsr     _ul_putc
;
; SET_FROM_PTR (_n, gp_tmap);             ul_putc ();
;
	ldy     #0
	lda     (_gp_tmap),y
	sta     __n
	jmp     _ul_putc

.endproc

; ---------------------------------------------------------------
; void __near__ map_set (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_map_set: near

.segment	"CODE"

;
; __asm__ ("lda %v", _y);
;
	lda     __y
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("asl a");
;
	asl     a
;
; __asm__ ("sta %v", ast1);
;
	sta     _ast1
;
; __asm__ ("lda %v", _x);
;
	lda     __x
;
; __asm__ ("ora %v", ast1);
;
	ora     _ast1
;
; __asm__ ("tax");    // X = COORDS (_x, _y)
;
	tax
;
; __asm__ ("lda %v", _t);
;
	lda     __t
;
; __asm__ ("sta %v, x", map_buff);
;
	sta     _map_buff,x
;
; __asm__ ("lda %v", c_behs);
;
	lda     _c_behs
;
; __asm__ ("sta ptr1");
;
	sta     ptr1
;
; __asm__ ("lda %v + 1", c_behs);
;
	lda     _c_behs + 1
;
; __asm__ ("sta ptr1 + 1");
;
	sta     ptr1 + 1
;
; __asm__ ("ldy %v", _t);
;
	ldy     __t
;
; __asm__ ("lda (ptr1), y");  // A = c_behs [_t]
;
	lda     (ptr1),y
;
; __asm__ ("sta %v, x", map_attr);
;
	sta     _map_attr,x
;
; __asm__ ("asl %v", _x);
;
	asl     __x
;
; _y = TOP_ADJUST + (_y << 1);  
;
	lda     __y
	asl     a
	bcc     L15FA
	clc
L15FA:	adc     #$04
	sta     __y
;
; update_list_tile (); 
;
	jmp     _update_list_tile

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_byte (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_byte: near

.segment	"CODE"

;
; -- rdit; return *gp_gen ++;
;
	dec     _rdit
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L08AD
	inx
L08AD:	sta     _gp_gen
	stx     _gp_gen+1
	ldx     #$00
	lda     (regsave,x)
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_map_tile (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_map_tile: near

.segment	"CODE"

;
; map_buff [rdm] = rdt;  
;
	ldy     _rdm
	lda     _rdt
	sta     _map_buff,y
;
; map_attr [rdm] = c_behs [rdt];
;
	lda     #<(_map_attr)
	ldx     #>(_map_attr)
	clc
	adc     _rdm
	bcc     L08B5
	inx
L08B5:	jsr     pushax
	lda     _c_behs
	ldx     _c_behs+1
	ldy     _rdt
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ldy     #$00
	jsr     staspidx
;
; ++ rdm;
;
	inc     _rdm
;
; _x = rdx << 1; _y = (rdy << 1) + TOP_ADJUST; _t = rdt;
;
	lda     _rdx
	asl     a
	sta     __x
	lda     _rdy
	asl     a
	bcc     L15FD
	clc
L15FD:	adc     #$04
	sta     __y
	lda     _rdt
	sta     __t
;
; draw_tile ();
;
	jsr     _draw_tile
;
; rdx = (rdx + 1) & 15; if (!rdx) rdy ++;
;
	lda     _rdx
	clc
	adc     #$01
	and     #$0F
	sta     _rdx
	lda     _rdx
	bne     L08C6
	lda     _rdy
	clc
	adc     #$01
	sta     _rdy
;
; }
;
L08C6:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_scr: near

.segment	"CODE"

;
; rdx = rdy = rdm = 0;
;
	lda     #$00
	sta     _rdm
	sta     _rdy
	sta     _rdx
;
; gp_gen = c_map [n_pant];
;
	tax
	lda     _n_pant
	asl     a
	bcc     L1600
	inx
	clc
L1600:	adc     _c_map
	sta     ptr1
	txa
	adc     _c_map+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     _gp_gen
	stx     _gp_gen+1
;
; if (rdit = *gp_gen ++) {
;
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L08D4
	inx
L08D4:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdit
	tax
	beq     L08D1
;
; while (rdit) {
;
L08D5:	lda     _rdit
	jeq     L08FA
;
; rdct = get_byte ();
;
	jsr     _get_byte
	sta     _rdct
;
; if (rdct & 0xf0) {
;
	and     #$F0
	beq     L08DA
;
; rdct = 1 + (rdct & 0x0f);
;
	lda     _rdct
	and     #$0F
	clc
	adc     #$01
	sta     _rdct
;
; while (rdct --) {
;
L08E0:	lda     _rdct
	pha
	sec
	sbc     #$01
	sta     _rdct
	pla
	tax
	beq     L08D5
;
; rdd = get_byte ();
;
	jsr     _get_byte
	sta     _rdd
;
; rdt = rdd >> 4; draw_map_tile ();
;
	ldx     #$00
	lda     _rdd
	jsr     asrax4
	sta     _rdt
	jsr     _draw_map_tile
;
; if (rdy < 12) { rdt = rdd & 15; draw_map_tile (); }
;
	lda     _rdy
	cmp     #$0C
	bcs     L08E0
	lda     _rdd
	and     #$0F
	sta     _rdt
	jsr     _draw_map_tile
;
; }
;
	jmp     L08E0
;
; rdt = rdct & 0x0f;
;
L08DA:	lda     _rdct
	and     #$0F
	sta     _rdt
;
; rdct = get_byte ();
;
	jsr     _get_byte
	sta     _rdct
;
; while (rdct --) draw_map_tile ();
;
L08F2:	lda     _rdct
	pha
	sec
	sbc     #$01
	sta     _rdct
	pla
	tax
	beq     L08D5
	jsr     _draw_map_tile
	jmp     L08F2
;
; rdit = 96; while (rdit --) {
;
L08D1:	lda     #$60
	sta     _rdit
L08F9:	lda     _rdit
	pha
	sec
	sbc     #$01
	sta     _rdit
	pla
	tax
	beq     L08FA
;
; rdd = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L08FE
	inx
L08FE:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rdd
;
; rdt = rdd >> 4; draw_map_tile ();
;
	ldx     #$00
	lda     _rdd
	jsr     asrax4
	sta     _rdt
	jsr     _draw_map_tile
;
; rdt = rdd & 15; draw_map_tile ();
;
	lda     _rdd
	and     #$0F
	sta     _rdt
	jsr     _draw_map_tile
;
; }
;
	jmp     L08F9
;
; gp_gen = c_locks;
;
L08FA:	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
;
; rdt = 0;
;
	lda     #$00
	sta     _rdt
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L090B:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L090C
;
; rda = *gp_gen ++; rdm = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0910
	inx
L0910:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0913
	inx
L0913:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdm
;
; if (n_pant == rda) {
;
	lda     _rda
	cmp     _n_pant
	bne     L090B
;
; if (!lkact [gpit]) {
;
	ldy     _gpit
	lda     _lkact,y
	bne     L090B
;
; rdy = (rdm >> 4); rdx = (rdm & 15);
;
	tax
	lda     _rdm
	jsr     asrax4
	sta     _rdy
	lda     _rdm
	and     #$0F
	sta     _rdx
;
; draw_map_tile ();
;
	jsr     _draw_map_tile
;
; } 
;
	jmp     L090B
;
; vram_write (attr_table, 0x23c0, 64);
;
L090C:	jsr     decsp4
	lda     #<(_attr_table)
	ldy     #$02
	sta     (sp),y
	iny
	lda     #>(_attr_table)
	sta     (sp),y
	lda     #$C0
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$23
	sta     (sp),y
	lda     #$40
	jmp     _vram_write

.endproc

; ---------------------------------------------------------------
; void __near__ pr_str (__near__ unsigned char*)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pr_str: near

.segment	"CODE"

;
; vram_adr (((_y << 5) | _x) + 0x2000);
;
L1610:	ldx     #$00
	lda     __y
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	lda     __x
	ora     ptr1
	pha
	lda     tmp1
	clc
	adc     #$20
	tax
	pla
	jsr     _vram_adr
;
; while (gpit = *s++) {
;
L092A:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L092E
	inx
L092E:	jsr     stax0sp
	ldy     #$00
	lda     (regsave),y
	sta     _gpit
	tax
	jeq     incsp2
;
; if (gpit == '%') {
;
	lda     _gpit
	cmp     #$25
	bne     L092F
;
; ++ _y; vram_adr (((_y << 5) | _x) + 0x2000);
;
	inc     __y
;
; else vram_put (gpit - 32); 
;
	jmp     L1610
L092F:	lda     _gpit
	sec
	sbc     #$20
	jsr     _vram_put
;
; }
;
	jmp     L092A

.endproc

; ---------------------------------------------------------------
; void __near__ cm_two_points (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cm_two_points: near

.segment	"CODE"

;
; if (cy1 > 12 || cy2 > 12) { at1 = at2 = 0; return; }
;
	lda     _cy1
	cmp     #$0D
	bcs     L093C
	lda     _cy2
	cmp     #$0D
	bcc     L093B
L093C:	lda     #$00
	sta     _at2
	sta     _at1
	rts
;
; at1 = map_attr [COORDS (cx1, cy1 ? cy1 - 1 : 0)];
;
L093B:	lda     _cy1
	beq     L0948
	ldx     #$00
	lda     _cy1
	sec
	sbc     #$01
	bcs     L094B
	dex
	jmp     L094B
L0948:	tax
L094B:	jsr     shlax4
	ora     _cx1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at1
;
; at2 = map_attr [COORDS (cx2, cy2 ? cy2 - 1 : 0)];
;
	lda     _cy2
	beq     L0954
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L0957
	dex
	jmp     L0957
L0954:	tax
L0957:	jsr     shlax4
	ora     _cx2
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _at2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ collide (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collide: near

.segment	"CODE"

;
; prx + 3 >= EN_X_ABSOLUTE && 
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$03
	bcc     L095C
	inx
L095C:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L095D
;
; prx <= EN_X_ABSOLUTE + 11 && 
;
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0B
	bcc     L095E
	ldx     #$01
L095E:	jsr     tosicmp
	beq     L1612
	bcs     L095D
;
; pry + 13 + ENEMS_COLLISION_VSTRETCH_FG >= _en_y &&
;
L1612:	ldx     #$00
	lda     _pry
	clc
	adc     #$0D
	bcc     L095F
	inx
L095F:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L095D
;
; pry <= _en_y + 13 + PLAYER_COLLISION_VSTRETCH_FG
;
	lda     _pry
	jsr     pusha0
	lda     __en_y
	clc
	adc     #$0D
	bcc     L1611
	ldx     #$01
;
; );
;
	clc
L1611:	adc     #$04
	bcc     L0961
	inx
L0961:	jsr     tosicmp
	bcc     L095B
	beq     L095B
L095D:	ldx     #$00
	txa
	rts
L095B:	ldx     #$00
	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ add_sign (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_sign: near

.segment	"CODE"

;
; return sign == 0 ? 0 : sign < 0 ? -value : value;
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	bne     L0966
	cmp     #$00
	jeq     incsp4
L0966:	iny
	lda     (sp),y
	tax
	cpx     #$80
	bcc     L096A
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L096A:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ saturate (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_saturate: near

.segment	"CODE"

;
; return v >= 0 ? (v > max ? max : v) : (v < -max ? -max : v);
;
	ldy     #$03
	lda     (sp),y
	bmi     L0970
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     tosicmp
	bmi     L097A
	beq     L097A
	ldy     #$01
	jmp     L1619
L0970:	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jsr     tosicmp
	bpl     L097A
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     negax
	jmp     incsp4
L097A:	ldy     #$03
L1619:	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ pad_read (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pad_read: near

.segment	"CODE"

;
; pad_this_frame = pad0;
;
	lda     _pad0
	sta     _pad_this_frame
;
; pad0 = pad_poll (0);   // Read pads here.
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad0
;
; pad_this_frame = (pad_this_frame ^ pad0) & pad0;
;
	eor     _pad_this_frame
	sta     ptr1
	lda     _pad0
	and     ptr1
	sta     _pad_this_frame
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ distance (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_distance: near

.segment	"CODE"

;
; rda = DELTA (prx, rdx); // dx
;
	ldx     #$00
	lda     _prx
	cmp     _rdx
	bcs     L098D
	lda     _rdx
	sec
	sbc     _prx
	jmp     L1620
L098D:	lda     _prx
	sec
	sbc     _rdx
L1620:	sta     _rda
;
; rdb = DELTA (pry, rdy); // dy
;
	lda     _pry
	cmp     _rdy
	bcs     L099A
	lda     _rdy
	sec
	sbc     _pry
	jmp     L1621
L099A:	lda     _pry
	sec
	sbc     _rdy
L1621:	sta     _rdb
;
; rdc = MIN (rda, rdb);
;
	lda     _rda
	cmp     _rdb
	bcs     L09A7
	lda     _rda
	jmp     L161D
L09A7:	lda     _rdb
L161D:	sta     _rdc
;
; return (rda + rdb - (rdc >> 1) - (rdc >> 2) + (rdc >> 4));
;
	lda     _rda
	clc
	adc     _rdb
	bcc     L161A
	inx
L161A:	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax1
	jsr     tossubax
	jsr     pushax
	ldx     #$00
	lda     _rdc
	jsr     asrax2
	jsr     tossubax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _rdc
	jsr     asrax4
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ jump_start (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_jump_start: near

.segment	"CODE"

;
; pj = 1; pctj = 0; 
;
	lda     #$01
	sta     _pj
	lda     #$00
	sta     _pctj
;
; sfx_play (SFX_JUMP, 0);
;
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pvy = -PLAYER_VY_JUMP_INITIAL;
;
	ldx     #$FF
	lda     #$C0
	sta     _pvy
	stx     _pvy+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_cycle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_cycle: near

.segment	"CODE"

;
; oam_hide_rest (oam_index);
;
	lda     _oam_index
	jsr     _oam_hide_rest
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; oam_index = 4;
;
	lda     #$04
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ breakable_do_anim (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_breakable_do_anim: near

.segment	"CODE"

;
; do_process_breakable = 0;
;
	lda     #$00
	sta     _do_process_breakable
;
; gpit = BREAKABLE_MAX; while (gpit --) {
;
	lda     #$04
	sta     _gpit
L09C8:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L09C9
;
; if (brkf [gpit]) {
;
	ldy     _gpit
	lda     _brkf,y
	beq     L09C8
;
; ++ brkf [gpit];
;
	lda     #<(_brkf)
	ldx     #>(_brkf)
	clc
	adc     _gpit
	bcc     L09D1
	inx
L09D1:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (brkf [gpit] == BREAKABLE_MAX_FRAMES) {
;
	ldy     _gpit
	lda     _brkf,y
	cmp     #$08
	bne     L09D2
;
; brkf [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _brkf,y
;
; _x = brkx [gpit]; _y = brky [gpit]; _t = BREAKABLE_ERASE;
;
	ldy     _gpit
	lda     _brkx,y
	sta     __x
	ldy     _gpit
	lda     _brky,y
	sta     __y
	lda     #$00
	sta     __t
;
; map_set ();
;
	jsr     _map_set
;
; } else {
;
	jmp     L09C8
;
; do_process_breakable = 1;
;
L09D2:	lda     #$01
	sta     _do_process_breakable
;
; }
;
	jmp     L09C8
;
; }
;
L09C9:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ breakable_break (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_breakable_break: near

.segment	"CODE"

;
; gpit = COORDS (x, y);
;
	ldx     #$00
	lda     (sp,x)
	jsr     aslax4
	ldy     #$01
	ora     (sp),y
	sta     _gpit
;
; sfx_play (SFX_BREAKH, 1);
;
	lda     #$0D
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; gpit = BREAKABLE_MAX; while (gpit --) {
;
	lda     #$04
	sta     _gpit
L09F4:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	jeq     incsp2
;
; if (!brkf [gpit]) {
;
	ldy     _gpit
	lda     _brkf,y
	bne     L09F4
;
; do_process_breakable = 1;
;
	lda     #$01
	sta     _do_process_breakable
;
; brkf [gpit] = 1;
;
	ldy     _gpit
	sta     _brkf,y
;
; _x = brkx [gpit] = x;
;
	lda     #<(_brkx)
	ldx     #>(_brkx)
	clc
	adc     _gpit
	bcc     L0A04
	inx
L0A04:	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (sp),y
	dey
	sta     (ptr1),y
	sta     __x
;
; _y = brky [gpit] = y;
;
	lda     #<(_brky)
	ldx     #>(_brky)
	clc
	adc     _gpit
	bcc     L0A09
	inx
L0A09:	sta     ptr1
	stx     ptr1+1
	lda     (sp),y
	sta     (ptr1),y
	sta     __y
;
; _t = BREAKABLE_BREAKING;
;
	lda     #$08
	sta     __t
;
; map_set ();     // Break tile!
;
	jsr     _map_set
;
; sfx_play (SFX_BREAKB, 1);
;
	lda     #$11
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; break;      // HA HA HA
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) c_hotspots;
;
	lda     _c_hotspots
	sta     _gp_gen
	lda     _c_hotspots+1
	sta     _gp_gen+1
;
; for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
;
	lda     #$00
L1622:	sta     _gpit
	cmp     #$08
	bcs     L0A15
;
; ht [gpit] = *gp_gen ++;
;
	lda     #<(_ht)
	ldx     #>(_ht)
	clc
	adc     _gpit
	bcc     L0A1E
	inx
L0A1E:	jsr     pushax
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0A20
	inx
L0A20:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	jsr     staspidx
;
; hyx [gpit] = *gp_gen ++;
;
	lda     #<(_hyx)
	ldx     #>(_hyx)
	clc
	adc     _gpit
	bcc     L0A23
	inx
L0A23:	jsr     pushax
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0A25
	inx
L0A25:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	jsr     staspidx
;
; hact [gpit] = 1;
;
	ldy     _gpit
	lda     #$01
	sta     _hact,y
;
; for (gpit = 0; gpit < MAP_SIZE; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L1622
;
; }
;
L0A15:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_paint (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_paint: near

.segment	"CODE"

;
; if (hrt >= HS_OBJ_MIN + 2*HS_USE_OFFS && hrt <= HS_OBJ_MAX + 2*HS_USE_OFFS) 
;
	lda     _hrt
	cmp     #$09
	bcc     L0A2B
	lda     _hrt
	cmp     #$0B
	bcs     L0A2B
;
; rda = hrt - 2*HS_USE_OFFS;
;
	lda     _hrt
	sec
	sbc     #$04
	bcs     L1624
;
; else if (hrt >= HS_OBJ_MIN + HS_USE_OFFS && hrt <= HS_OBJ_MAX + HS_USE_OFFS) 
;
	jmp     L1624
L0A2B:	lda     _hrt
	cmp     #$07
	bcc     L0A33
	lda     _hrt
	cmp     #$09
	bcs     L0A33
;
; rda = HS_OBJ_EMPTY;
;
	lda     #$04
;
; else
;
	jmp     L1624
;
; rda = hrt;
;
L0A33:	lda     _hrt
L1624:	sta     _rda
;
; hrx, 
;
	jsr     decsp3
	lda     _hrx
	ldy     #$02
	sta     (sp),y
;
; hry + SPRITE_ADJUST, 
;
	lda     _hry
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L1625
	sec
L1625:	sbc     #$10
	bcs     L1626
	sec
L1626:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [rda]
;
	ldx     #$00
	lda     _rda
	asl     a
	bcc     L1627
	inx
	clc
L1627:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [rda]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hotspots_create (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hotspots_create: near

.segment	"CODE"

;
; if (ht [HS_CUR_PANT] && hact [HS_CUR_PANT]) {
;
	ldy     _n_pant
	lda     _ht,y
	beq     L0A48
	ldy     _n_pant
	lda     _hact,y
	beq     L0A48
;
; hrt = ht [HS_CUR_PANT];
;
	ldy     _n_pant
	lda     _ht,y
	sta     _hrt
;
; hrx = hyx [HS_CUR_PANT] << 4;
;
	ldy     _n_pant
	lda     _hyx,y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _hrx
;
; hry = hyx [HS_CUR_PANT] & 0xf0;
;
	ldy     _n_pant
	lda     _hyx,y
	and     #$F0
	sta     _hry
;
; } else hrt = 0;
;
	rts
L0A48:	lda     #$00
	sta     _hrt
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_init: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it --) {
;
	lda     #$01
	sta     _coco_it
L0A62:	lda     _coco_it
	pha
	sec
	sbc     #$01
	sta     _coco_it
	pla
	tax
	beq     L0A63
;
; coco_slots [coco_it] = coco_it;
;
	ldy     _coco_it
	lda     _coco_it
	sta     _coco_slots,y
;
; coco_on [coco_it] = 0;
;
	ldy     _coco_it
	lda     #$00
	sta     _coco_on,y
;
; }
;
	jmp     L0A62
;
; coco_slots_i = COCOS_MAX;
;
L0A63:	lda     #$01
	sta     _coco_slots_i
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_shoot_aimed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_shoot_aimed: near

.segment	"CODE"

;
; if (coco_slots_i) {
;
	lda     _coco_slots_i
	bne     L1660
;
; } 
;
	rts
;
; -- coco_slots_i; coco_it = coco_slots [coco_slots_i];
;
L1660:	dec     _coco_slots_i
	ldy     _coco_slots_i
	lda     _coco_slots,y
	sta     _coco_it
;
; coco_x [coco_it] = COCO_RDX << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1637
	inx
	clc
L1637:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	ldx     #$00
	lda     _rdx
	jsr     aslax4
	jsr     aslax2
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; coco_y [coco_it] = rdy << 6;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1638
	inx
	clc
L1638:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	ldx     #$00
	lda     _rdy
	jsr     aslax4
	jsr     aslax2
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; if (ROUGHLY_EQUAL (COCO_RDX, prx, 16)) {
;
	lda     _rdx
	sec
	sbc     _prx
	bcc     L0A83
	beq     L0A83
	lda     _rdx
	sec
	sbc     _prx
	jmp     L164F
L0A83:	lda     _prx
	sec
	sbc     _rdx
L164F:	cmp     #$10
	jsr     boolult
	cmp     #$00
	beq     L0A7D
;
; coco_vx [coco_it] = 0;
;
	lda     _coco_it
	asl     a
	bcc     L1639
	inx
	clc
L1639:	adc     #<(_coco_vx)
	sta     ptr1
	txa
	adc     #>(_coco_vx)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
;
; } else if (COCO_RDX < prx) {
;
	jmp     L1642
L0A7D:	lda     _rdx
	cmp     _prx
	bcs     L0A97
;
; coco_vx [coco_it] = COCO_V;
;
	lda     _coco_it
	asl     a
	bcc     L163A
	inx
	clc
L163A:	adc     #<(_coco_vx)
	sta     ptr1
	txa
	adc     #>(_coco_vx)
	sta     ptr1+1
	lda     #$C0
	dey
	sta     (ptr1),y
	iny
	lda     #$00
;
; } else {
;
	jmp     L1642
;
; coco_vx [coco_it] = -COCO_V;
;
L0A97:	lda     _coco_it
	asl     a
	bcc     L163B
	inx
	clc
L163B:	adc     #<(_coco_vx)
	sta     ptr1
	txa
	adc     #>(_coco_vx)
	sta     ptr1+1
	lda     #$40
	dey
	sta     (ptr1),y
	iny
	lda     #$FF
L1642:	sta     (ptr1),y
;
; if (ROUGHLY_EQUAL (rdy, pry, 16)) {
;
	lda     _rdy
	sec
	sbc     _pry
	bcc     L0AA6
	beq     L0AA6
	lda     _rdy
	sec
	sbc     _pry
	jmp     L1650
L0AA6:	lda     _pry
	sec
	sbc     _rdy
L1650:	cmp     #$10
	jsr     boolult
	cmp     #$00
	beq     L0AA0
;
; coco_vy [coco_it] = 0;
;
	lda     _coco_it
	asl     a
	bcc     L163C
	inx
	clc
L163C:	adc     #<(_coco_vy)
	sta     ptr1
	txa
	adc     #>(_coco_vy)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
;
; } else if (rdy < pry) {
;
	jmp     L1644
L0AA0:	lda     _rdy
	cmp     _pry
	bcs     L0ABA
;
; coco_vy [coco_it] = COCO_V;
;
	lda     _coco_it
	asl     a
	bcc     L163D
	inx
	clc
L163D:	adc     #<(_coco_vy)
	sta     ptr1
	txa
	adc     #>(_coco_vy)
	sta     ptr1+1
	lda     #$C0
	dey
	sta     (ptr1),y
	iny
	lda     #$00
;
; } else {
;
	jmp     L1644
;
; coco_vy [coco_it] = -COCO_V;
;
L0ABA:	lda     _coco_it
	asl     a
	bcc     L163E
	inx
	clc
L163E:	adc     #<(_coco_vy)
	sta     ptr1
	txa
	adc     #>(_coco_vy)
	sta     ptr1+1
	lda     #$40
	dey
	sta     (ptr1),y
	iny
	lda     #$FF
L1644:	sta     (ptr1),y
;
; rda = DELTA (COCO_RDX, prx);
;
	lda     _rdx
	cmp     _prx
	bcs     L0AC8
	lda     _prx
	sec
	sbc     _rdx
	jmp     L164B
L0AC8:	lda     _rdx
	sec
	sbc     _prx
L164B:	sta     _rda
;
; rdb = DELTA (rdy, pry);
;
	lda     _rdy
	cmp     _pry
	bcs     L0AD5
	lda     _pry
	sec
	sbc     _rdy
	jmp     L164C
L0AD5:	lda     _rdy
	sec
	sbc     _pry
L164C:	sta     _rdb
;
; if (ROUGHLY_EQUAL (rda, rdb, 8)) {
;
	lda     _rda
	sec
	sbc     _rdb
	bcc     L0AE3
	beq     L0AE3
	lda     _rda
	sec
	sbc     _rdb
	jmp     L1651
L0AE3:	lda     _rdb
	sec
	sbc     _rda
L1651:	cmp     #$08
	jsr     boolult
	cmp     #$00
;
; } else if (rda > rdb) {
;
	bne     L0AF3
	lda     _rda
	sec
	sbc     _rdb
	bcc     L0AF4
	beq     L0AF4
;
; coco_vy [coco_it] >>= 1;
;
	lda     _coco_it
	asl     a
	bcc     L163F
	inx
	clc
L163F:	adc     #<(_coco_vy)
	tay
	txa
	adc     #>(_coco_vy)
;
; } else {
;
	jmp     L165F
;
; coco_vx [coco_it] >>= 1;
;
L0AF4:	lda     _coco_it
	asl     a
	bcc     L1640
	inx
	clc
L1640:	adc     #<(_coco_vx)
	tay
	txa
	adc     #>(_coco_vx)
L165F:	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax1
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; coco_on [coco_it] = 1;
;
L0AF3:	ldy     _coco_it
	lda     #$01
	sta     _coco_on,y
;
; sfx_play (SFX_COCO, 2);
;
	lda     #$0A
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_destroy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_destroy: near

.segment	"CODE"

;
; coco_on [coco_it] = 0;
;
	ldy     _coco_it
	lda     #$00
	sta     _coco_on,y
;
; coco_slots [coco_slots_i] = coco_it; ++ coco_slots_i;
;
	ldy     _coco_slots_i
	lda     _coco_it
	sta     _coco_slots,y
	inc     _coco_slots_i
;
; sfx_play (SFX_DUMMY1, 2);
;
	lda     #$05
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ cocos_do (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cocos_do: near

.segment	"CODE"

;
; coco_it = COCOS_MAX; while (coco_it) {
;
	lda     #$01
	sta     _coco_it
L0B14:	lda     _coco_it
	bne     L1671
;
; }
;
	rts
;
; -- coco_it;
;
L1671:	dec     _coco_it
;
; if (coco_on [coco_it]) {
;
	ldy     _coco_it
	lda     _coco_on,y
	beq     L0B14
;
; coco_x [coco_it] += coco_vx [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1667
	inx
	clc
L1667:	adc     #<(_coco_x)
	tay
	txa
	adc     #>(_coco_x)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1668
	inx
	clc
L1668:	adc     #<(_coco_vx)
	sta     ptr1
	txa
	adc     #>(_coco_vx)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; coco_y [coco_it] += coco_vy [coco_it];
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L1669
	inx
	clc
L1669:	adc     #<(_coco_y)
	tay
	txa
	adc     #>(_coco_y)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L166A
	inx
	clc
L166A:	adc     #<(_coco_vy)
	sta     ptr1
	txa
	adc     #>(_coco_vy)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	ldy     #$00
	jsr     staxspidx
;
; COCO_RDX = coco_x [coco_it] >> FIXBITS;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L166B
	inx
	clc
L166B:	adc     #<(_coco_x)
	sta     ptr1
	txa
	adc     #>(_coco_x)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     _rdx
;
; rdy      = coco_y [coco_it] >> FIXBITS;
;
	ldx     #$00
	lda     _coco_it
	asl     a
	bcc     L166C
	inx
	clc
L166C:	adc     #<(_coco_y)
	sta     ptr1
	txa
	adc     #>(_coco_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     asrax4
	jsr     asrax2
	sta     _rdy
;
; COCO_RDX > 248 ||
;
	lda     _rdx
	cmp     #$F9
	bcs     L0B2B
;
; rdy > 208
;
	lda     _rdy
;
; ) {
;
	cmp     #$D1
	bcc     L0B2A
;
; cocos_destroy (); continue;
;
L0B2B:	jsr     _cocos_destroy
	jmp     L0B14
;
; COCO_RDX, 
;
L0B2A:	jsr     decsp4
	lda     _rdx
	ldy     #$03
	sta     (sp),y
;
; rdy + SPRITE_ADJUST, 
;
	lda     _rdy
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L166D
	sec
L166D:	sbc     #$10
	bcs     L166E
	sec
L166E:	sbc     #$01
	dey
	sta     (sp),y
;
; COCO_PATTERN, 
;
	lda     #$00
	dey
	sta     (sp),y
;
; COCO_PALETTE, 
;
	lda     #$03
	dey
	sta     (sp),y
;
; );
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (pflickering == 0 && 
;
	lda     _pflickering
	jne     L0B14
;
; COCO_RDX + 7 >= prx && 
;
	tax
	lda     _rdx
	clc
	adc     #$07
	bcc     L0B3C
	inx
L0B3C:	cmp     _prx
	txa
	sbc     #$00
	jcc     L0B14
;
; COCO_RDX <= prx + 7 && 
;
	lda     _rdx
	jsr     pusha0
	lda     _prx
	clc
	adc     #$07
	bcc     L0B3D
	ldx     #$01
L0B3D:	jsr     tosicmp
	beq     L1670
	jcs     L0B14
;
; rdy + 7 + PLAYER_COLLISION_VSTRETCH_FG >= pry && 
;
L1670:	ldx     #$00
	lda     _rdy
	clc
	adc     #$07
	bcc     L166F
	inx
	clc
L166F:	adc     #$04
	bcc     L0B3F
	inx
L0B3F:	cmp     _pry
	txa
	sbc     #$00
	jcc     L0B14
;
; rdy <= pry + 12
;
	lda     _rdy
	jsr     pusha0
	lda     _pry
;
; ) {
;
	clc
	adc     #$0C
	bcc     L0B40
	ldx     #$01
L0B40:	jsr     tosicmp
	bcc     L0B3A
	jne     L0B14
;
; en_sg_2 = 1;
;
L0B3A:	lda     #$01
	sta     _en_sg_2
;
; pkill = en_sg_2;
;
	sta     _pkill
;
; cocos_destroy ();
;
	jsr     _cocos_destroy
;
; }
;
	jmp     L0B14

.endproc

; ---------------------------------------------------------------
; void __near__ player_register_safe_spot (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_register_safe_spot: near

.segment	"CODE"

;
; px_safe = px;
;
	lda     _px
	sta     _px_safe
	lda     _px+1
	sta     _px_safe+1
;
; py_safe = py;
;
	lda     _py
	sta     _py_safe
	lda     _py+1
	sta     _py_safe+1
;
; n_pant_safe = n_pant;
;
	lda     _n_pant
	sta     _n_pant_safe
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_stop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_stop: near

.segment	"CODE"

;
; pvx = pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
	sta     _pvx
	sta     _pvx+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_init: near

.segment	"CODE"

;
; if (!warp_to_level) player_stop ();
;
	lda     _warp_to_level
	bne     L0B53
	jsr     _player_stop
;
; pfacing = 0;
;
L0B53:	lda     #$00
	sta     _pfacing
;
; pfr = 0;
;
	sta     _pfr
;
; pj = pctj = 0;
;
	sta     _pctj
	sta     _pj
;
; psprid = 0;
;
	sta     _psprid
;
; pobjs = 0;
;
	sta     _pobjs
;
; pkeys = 0;
;
	sta     _pkeys
;
; pgotten = 0;
;
	sta     _pgotten
;
; pfiring = 0;
;
	sta     _pfiring
;
; pkilled = 0;
;
	sta     _pkilled
;
; pflickering = pbouncing = 0;
;
	sta     _pbouncing
	sta     _pflickering
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; pinv = HS_OBJ_EMPTY; 
;
	lda     #$04
	sta     _pinv
;
; vertical_engine_type = ENGINE_TYPE_JUMP;
;
	lda     #$00
	sta     _vertical_engine_type
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_kill: near

.segment	"CODE"

;
; oam_index = oam_index_player;
;
	lda     _oam_index_player
	sta     _oam_index
;
; player_render ();
;
	jsr     _player_render
;
; ppu_waitnmi ();
;
	jsr     _ppu_waitnmi
;
; pkill = phit = 0;
;
	lda     #$00
	sta     _phit
	sta     _pkill
;
; sfx_play (SFX_PHIT, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (plife) -- plife; else game_over = 1;
;
	lda     _plife
	beq     L0B90
	dec     _plife
	jmp     L0B93
L0B90:	lda     #$01
	sta     _game_over
;
; pflickering = PLAYER_FLICKERS;
;
L0B93:	lda     #$64
	sta     _pflickering
;
; music_pause (1);
;
	lda     #$01
	jsr     _music_pause
;
; delay (60);
;
	lda     #$3C
	jsr     _delay
;
; px = px_safe; 
;
	lda     _px_safe
	sta     _px
	lda     _px_safe+1
	sta     _px+1
;
; py = py_safe; 
;
	lda     _py_safe
	sta     _py
	lda     _py_safe+1
	sta     _py+1
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; n_pant = n_pant_safe;  
;
	lda     _n_pant_safe
	sta     _n_pant
;
; player_stop ();
;
	jsr     _player_stop
;
; music_pause (0);
;
	lda     #$00
	jsr     _music_pause
;
; pmayneedrelocation = 1;
;
	lda     #$01
	sta     _pmayneedrelocation
;
; on_pant = 0xff;
;
	lda     #$FF
	sta     _on_pant
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ player_process_tile (int, int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_process_tile: near

.segment	"CODE"

;
; if (y0) -- y0;
;
	ldy     #$05
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L0BAB
	ldx     #$00
	lda     #$01
	jsr     subeqysp
;
; if (y1) -- y1;
;
L0BAB:	ldy     #$01
	lda     (sp),y
	dey
	ora     (sp),y
	beq     L0BAE
	ldx     #$00
	lda     #$01
	jsr     subeq0sp
;
; at == 11 
;
L0BAE:	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; && b_button
;
	cpx     #$00
	jne     L0BB8
	cmp     #$0B
	jne     L0BB8
;
; ) {
;
	lda     _b_button
	jeq     L0BB8
;
; b_button = 0;
;
	stx     _b_button
;
; x0 > 0 && x0 < MAX_TILE_X && y0 > 0 && y0 < 11 &&
;
	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0BBA
	eor     #$80
L0BBA:	jpl     L0BB8
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$0F
	txa
	sbc     #$00
	bvc     L0BBC
	eor     #$80
L0BBC:	bpl     L0BB8
	dey
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0BBD
	eor     #$80
L0BBD:	bpl     L0BB8
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$0B
	txa
	sbc     #$00
	bvc     L0BBE
	eor     #$80
L0BBE:	bpl     L0BB8
;
; ATTR (x1, y1) == 0
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     aslax4
	ldy     #$02
	ora     (sp),y
	sta     ptr1
	txa
	iny
	ora     (sp),y
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
;
; ) {
;
	bne     L0BB8
;
; sfx_play (SFX_TILE, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; _x = x0; _y = y0; _t = 0;  map_set ();
;
	ldy     #$06
	lda     (sp),y
	sta     __x
	ldy     #$04
	lda     (sp),y
	sta     __y
	lda     #$00
	sta     __t
	jsr     _map_set
;
; _x = x1; _y = y1; _t = 14; map_set ();
;
	ldy     #$02
	lda     (sp),y
	sta     __x
	ldy     #$00
	lda     (sp),y
	sta     __y
	lda     #$0E
	sta     __t
	jsr     _map_set
;
; at == 10 &&
;
L0BB8:	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cpx     #$00
	jne     L0BD9
	cmp     #$0A
	jne     L0BD9
;
; ) {
;
	lda     _pkeys
	jeq     L0BD9
;
; _x = x0; _y = y0; _t = 0; map_set ();
;
	ldy     #$06
	lda     (sp),y
	sta     __x
	ldy     #$04
	lda     (sp),y
	sta     __y
	stx     __t
	jsr     _map_set
;
; gp_gen = (unsigned char *) c_locks;
;
	lda     _c_locks
	sta     _gp_gen
	lda     _c_locks+1
	sta     _gp_gen+1
;
; gpit = c_max_bolts; while (gpit --) {
;
	lda     _c_max_bolts
	sta     _gpit
L0BE9:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L0BEA
;
; rda = *gp_gen ++; rdb = *gp_gen ++;
;
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0BEE
	inx
L0BEE:	sta     _gp_gen
	stx     _gp_gen+1
	ldy     #$00
	lda     (regsave),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0BF1
	inx
L0BF1:	sta     _gp_gen
	stx     _gp_gen+1
	lda     (regsave),y
	sta     _rdb
;
; if (n_pant == rda && COORDS (x0, y0) == rdb) 
;
	lda     _rda
	cmp     _n_pant
	bne     L0BE9
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     aslax4
	ldy     #$06
	ora     (sp),y
	pha
	txa
	iny
	ora     (sp),y
	tax
	pla
	cpx     #$00
	bne     L0BE9
	cmp     _rdb
	bne     L0BE9
;
; lkact [gpit] = 0;
;
	ldy     _gpit
	txa
	sta     _lkact,y
;
; }
;
	jmp     L0BE9
;
; -- pkeys;
;
L0BEA:	dec     _pkeys
;
; sfx_play (SFX_TILE, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; }
;
L0BD9:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ fire_bullet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fire_bullet: near

.segment	"CODE"

;
; if (b_slots_i == 0) return;
;
	lda     _b_slots_i
	beq     L0C03
;
; -- b_slots_i; bi = b_slots [b_slots_i];
;
	dec     _b_slots_i
	ldy     _b_slots_i
	lda     _b_slots,y
	sta     _bi
;
; switch (pfacing) {
;
	lda     _pfacing
;
; } 
;
	beq     L0C1C
	cmp     #$08
	bne     L0C0D
;
; bx [bi] = prx - 8;
;
	lda     #<(_bx)
	ldx     #>(_bx)
	clc
	adc     _bi
	bcc     L0C12
	inx
L0C12:	sta     ptr1
	stx     ptr1+1
	lda     _prx
	sec
	sbc     #$08
	ldy     #$00
	sta     (ptr1),y
;
; __asm__ ("ldx %v", bi);
;
	ldx     _bi
;
; __asm__ ("lda #%b", -PLAYER_BULLET_SPEED);
;
	lda     #$FC
;
; break; 
;
	jmp     L1677
;
; bx [bi] = prx + 8;
;
L0C1C:	lda     #<(_bx)
	ldx     #>(_bx)
	clc
	adc     _bi
	bcc     L0C1F
	inx
L0C1F:	sta     ptr1
	stx     ptr1+1
	lda     _prx
	clc
	adc     #$08
	ldy     #$00
	sta     (ptr1),y
;
; __asm__ ("ldx %v", bi);
;
	ldx     _bi
;
; __asm__ ("lda #%b", PLAYER_BULLET_SPEED);
;
	lda     #$04
;
; __asm__ ("sta %v, x", bmx);
;
L1677:	sta     _bmx,x
;
; __asm__ ("lda %v", pry);
;
	lda     _pry
;
; __asm__ ("sta %v, x", by);
;
	sta     _by,x
;
; sfx_play (SFX_BULLET, 2);
;
L0C0D:	lda     #$09
	jsr     pusha
	lda     #$02
	jmp     _sfx_play
;
; }
;
L0C03:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bullets_destroy (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bullets_destroy: near

.segment	"CODE"

;
; by [bi] = 0;
;
	ldy     _bi
	lda     #$00
	sta     _by,y
;
; b_slots [b_slots_i] = bi; ++ b_slots_i;
;
	ldy     _b_slots_i
	lda     _bi
	sta     _b_slots,y
	inc     _b_slots_i
;
; sfx_play (SFX_DUMMY1, 2);
;
	lda     #$05
	jsr     pusha
	lda     #$02
	jmp     _sfx_play

.endproc

; ---------------------------------------------------------------
; void __near__ bullets_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bullets_move: near

.segment	"CODE"

;
; for (bi = 0; bi < MAX_BULLETS; ++ bi) {
;
	lda     #$00
	sta     _bi
L0C39:	lda     _bi
	cmp     #$04
	bcc     L1679
;
; }
;
	rts
;
; rde = (bi + half_life) & 1;
;
L1679:	lda     _bi
	clc
	adc     _half_life
	and     #$01
	sta     _rde
;
; if (by [bi]) {
;
	ldy     _bi
	lda     _by,y
	jeq     L0C3B
;
; _bx = bx [bi] + bmx [bi];
;
	ldy     _bi
	lda     _bx,y
	jsr     pusha0
	lda     #<(_bmx)
	ldx     #>(_bmx)
	clc
	adc     _bi
	bcc     L0C4D
	inx
L0C4D:	ldy     #$00
	jsr     ldaidx
	jsr     tosaddax
	sta     __bx
;
; _by = by [bi];
;
	ldy     _bi
	lda     _by,y
	sta     __by
;
; _bx < PLAYER_BULLET_SPEED ||
;
	lda     __bx
	cmp     #$04
	bcc     L0C53
;
; _bx > 255 - PLAYER_BULLET_SPEED
;
	lda     __bx
;
; ) {
;
	cmp     #$FC
	bcc     L0C52
;
; bullets_destroy ();
;
L0C53:	jsr     _bullets_destroy
;
; continue;
;
	jmp     L0C3B
;
; _bx, 
;
L0C52:	jsr     decsp4
	lda     __bx
	ldy     #$03
	sta     (sp),y
;
; SPRITE_ADJUST + _by, 
;
	lda     __by
	clc
	adc     #$07
	dey
	sta     (sp),y
;
; BULLET_PATTERN, BULLET_PALETTE,
;
	lda     #$00
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
;
; );
;
	lda     _oam_index
	jsr     _oam_spr
	sta     _oam_index
;
; if (rde) {
;
	lda     _rde
	beq     L0C5E
;
; cx1 = ((_bx + 4) >> 4);
;
	ldx     #$00
	lda     __bx
	clc
	adc     #$04
	bcc     L0C64
	inx
L0C64:	jsr     shrax4
	sta     _cx1
;
; cy1 = ((_by + 4 - 16) >> 4);
;
	ldx     #$00
	lda     __by
	clc
	adc     #$04
	bcc     L0C69
	inx
L0C69:	sec
	sbc     #$10
	bcs     L0C6A
	dex
L0C6A:	jsr     shrax4
	sta     _cy1
;
; rdm = map_attr [COORDS (cx1, cy1)];
;
	ldx     #$00
	lda     _cy1
	jsr     aslax4
	ora     _cx1
	sta     ptr1
	txa
	clc
	adc     #>(_map_attr)
	sta     ptr1+1
	ldy     #<(_map_attr)
	lda     (ptr1),y
	sta     _rdm
;
; if (rdm & 16) {
;
	and     #$10
	beq     L0C72
;
; breakable_break (cx1, cy1);
;
	jsr     decsp2
	lda     _cx1
	ldy     #$01
	sta     (sp),y
	lda     _cy1
	dey
	sta     (sp),y
	jsr     _breakable_break
;
; bullets_destroy ();
;
	jsr     _bullets_destroy
;
; continue;
;
	jmp     L0C3B
;
; if (rdm & 8) {
;
L0C72:	lda     _rdm
	and     #$08
	beq     L0C5E
;
; bullets_destroy (); 
;
	jsr     _bullets_destroy
;
; continue;
;
	jmp     L0C3B
;
; bx [bi] = _bx;
;
L0C5E:	ldy     _bi
	lda     __bx
	sta     _bx,y
;
; for (bi = 0; bi < MAX_BULLETS; ++ bi) {
;
L0C3B:	inc     _bi
	jmp     L0C39

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; if (pflickering) -- pflickering;
;
	lda     _pflickering
	beq     L0C81
	dec     _pflickering
;
; if (pbouncing) -- pbouncing;
;
L0C81:	lda     _pbouncing
	beq     L0C84
	dec     _pbouncing
;
; hitv = hith = 0;
;
L0C84:	lda     #$00
	sta     _hith
	sta     _hitv
;
; pcx = prx; pcy = pry;
;
	lda     _prx
	sta     _pcx
	lda     _pry
	sta     _pcy
;
; pnotsafe = 0;
;
	lda     #$00
	sta     _pnotsafe
;
; pice = 0;
;
	sta     _pice
;
; oppossee = ppossee;
;
	lda     _ppossee
	sta     _oppossee
;
; ppossee = 0;
;
	lda     #$00
	sta     _ppossee
;
; if (vertical_engine_type != ENGINE_TYPE_SWIM) {
;
	lda     _vertical_engine_type
	cmp     #$02
	beq     L0C9D
;
; if (!pj) {
;
	lda     _pj
	bne     L0C9D
;
; pvy += PLAYER_G;
;
	lda     #$10
	clc
	adc     _pvy
	sta     _pvy
	bcc     L0C9C
	inc     _pvy+1
;
; if (pvy > PLAYER_VY_FALLING_MAX) pvy = PLAYER_VY_FALLING_MAX; 
;
L0C9C:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$01
	bvs     L0C9F
	eor     #$80
L0C9F:	bpl     L0C9D
	ldx     #$01
	lda     #$00
	sta     _pvy
	stx     _pvy+1
;
; if (pgotten) pvy = 0;   
;
L0C9D:	lda     _pgotten
	beq     L0CA2
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; py += pvy;
;
L0CA2:	lda     _pvy
	clc
	adc     _py
	sta     _py
	lda     _pvy+1
	adc     _py+1
	sta     _py+1
;
; if (py < 0) py = 0;
;
	ldx     _py+1
	cpx     #$80
	bcc     L0CA8
	lda     #$00
	sta     _py
	sta     _py+1
;
; pry = py >> FIXBITS;
;
L0CA8:	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; cx1 = prx >> 4;
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx1
;
; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L0CB4
	inx
L0CB4:	jsr     shrax4
	sta     _cx2
;
; rds16 = pvy + pgtmy;
;
	lda     _pvy
	clc
	adc     _pgtmy
	sta     _rds16
	lda     _pvy+1
	adc     _pgtmy+1
	tax
	stx     _rds16+1
;
; if (rds16 < 0)
;
	cpx     #$80
	jcc     L0CB7
;
; cy1 = cy2 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;   
;
	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L0CBF
	lda     _at2
	and     #$08
	beq     L0CBE
;
; pry = ((cy1 + 1) << 4) + PLAYER_COLLISION_VSTRETCH_BG;
;
L0CBF:	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L0CC7
	inx
L0CC7:	jsr     shlax4
	clc
	adc     #$FC
	sta     _pry
	txa
	adc     #$FF
;
; pvy = 0; py = pry << FIXBITS;
;
	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L0D54
L0CBE:	lda     _at1
	and     #$01
	bne     L0CD2
	lda     _at2
	and     #$01
	beq     L0CD1
;
; hitv = 1;
;
L0CD2:	lda     #$01
	sta     _hitv
;
; else if ((at1 == 2) || (at2 == 2)) {
;
	jmp     L0D54
L0CD1:	lda     _at1
	cmp     #$02
	beq     L0CDA
	lda     _at2
	cmp     #$02
	jne     L0D54
;
; if (pctj > 2) pj = 0;
;
L0CDA:	lda     _pctj
	cmp     #$03
	jcc     L0D54
	lda     #$00
	sta     _pj
;
; } else if (rds16 > 0)
;
	jmp     L0D54
L0CB7:	lda     _rds16
	cmp     #$01
	lda     _rds16+1
	sbc     #$00
	bvs     L0CE5
	eor     #$80
L0CE5:	jpl     L0D54
;
; cy1 = cy2 = (pry + 16) >> 4; 
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L0CEA
	inx
L0CEA:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points (); 
;
	jsr     _cm_two_points
;
; pry < ((cy1 - 1) << 4) + 4 && 
;
	lda     _pry
	jsr     pusha0
	lda     _cy1
	sec
	sbc     #$01
	bcs     L0CF0
	ldx     #$FF
L0CF0:	jsr     shlax4
	clc
	adc     #$04
	bcc     L0CF1
	inx
L0CF1:	jsr     tosicmp
	jcs     L0CEC
;
; (at1 & 12) || (at2 & 12)
;
	lda     _at1
	and     #$0C
	bne     L0CED
	lda     _at2
	and     #$0C
;
; )
;
	jeq     L0CEC
;
; pvy = 0; pry = ((cy1 - 1) << 4);py = pry << FIXBITS;
;
L0CED:	ldx     #$00
	txa
	sta     _pvy
	sta     _pvy+1
	lda     _cy1
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; pgotten = 0;
;
	lda     #$00
	sta     _pgotten
;
; pfiring = 1;
;
	lda     #$01
	sta     _pfiring
;
; ppossee = 1;
;
	sta     _ppossee
;
; pice = (at1 & 64) || (at2 & 64);
;
	lda     _at1
	and     #$40
	bne     L0D08
	lda     _at2
	and     #$40
	beq     L0D0B
L0D08:	lda     #$01
L0D0B:	sta     _pice
;
; cfx = 0;
;
	lda     #$00
	sta     _cfx
;
; if ((at1 & 40) == 40) { if (at1 & 1) cfx = pgtmx = PLAYER_VX_CONVEYORS; else cfx = pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; } 
;
	lda     _at1
	and     #$28
	cmp     #$28
	bne     L0D0E
	lda     _at1
	and     #$01
	beq     L0D12
	ldx     #$00
	lda     #$40
	jmp     L1684
L0D12:	ldx     #$FF
	lda     #$C0
L1684:	sta     _pgtmx
	stx     _pgtmx+1
	sta     _cfx
	lda     #$01
	sta     _pgotten
;
; if (cx1 != cx2) if ((at2 & 40) == 40) { if (at2 & 1) cfx = pgtmx = PLAYER_VX_CONVEYORS; else cfx = pgtmx = -PLAYER_VX_CONVEYORS; pgotten = 1; } 
;
L0D0E:	lda     _cx2
	cmp     _cx1
	beq     L0D1F
	lda     _at2
	and     #$28
	cmp     #$28
	bne     L0D1F
	lda     _at2
	and     #$01
	beq     L0D23
	ldx     #$00
	lda     #$40
	jmp     L1685
L0D23:	ldx     #$FF
	lda     #$C0
L1685:	sta     _pgtmx
	stx     _pgtmx+1
	sta     _cfx
	lda     #$01
	sta     _pgotten
;
; if (at1 & 16) { breakable_break (cx1, cy1 - 1); pnotsafe = 1; }
;
L0D1F:	lda     _at1
	and     #$10
	beq     L0D2E
	jsr     decsp2
	lda     _cx1
	ldy     #$01
	sta     (sp),y
	lda     _cy1
	sec
	sbc     #$01
	dey
	sta     (sp),y
	jsr     _breakable_break
	lda     #$01
	sta     _pnotsafe
;
; if (cx1 != cx2 && (at2 & 16)) { breakable_break (cx2, cy1 - 1); pnotsafe = 1; }
;
L0D2E:	lda     _cx2
	cmp     _cx1
	beq     L0D36
	lda     _at2
	and     #$10
	beq     L0D36
	jsr     decsp2
	lda     _cx2
	ldy     #$01
	sta     (sp),y
	lda     _cy1
	sec
	sbc     #$01
	dey
	sta     (sp),y
	jsr     _breakable_break
	lda     #$01
	sta     _pnotsafe
;
; if ((at1 & 1) || (at2 & 1)) pnotsafe = 1; 
;
L0D36:	lda     _at1
	and     #$01
	bne     L0D42
	lda     _at2
	and     #$01
	beq     L0D54
L0D42:	lda     #$01
	sta     _pnotsafe
;
; } else if ((at1 & 1) || (at2 & 1)) {
;
	jmp     L0D54
L0CEC:	lda     _at1
	and     #$01
	bne     L0D4A
	lda     _at2
	and     #$01
	beq     L0D49
;
; if ((pry & 15) > 4) hitv = 1;
;
L0D4A:	lda     _pry
	and     #$0F
	cmp     #$05
	bcc     L0D54
	lda     #$01
	sta     _hitv
;
; else {
;
	jmp     L0D54
;
; if ((at1 == 2) || (at2 == 2)) {
;
L0D49:	lda     _at1
	cmp     #$02
	beq     L0D55
	lda     _at2
	cmp     #$02
	bne     L0D54
;
; pvy = PLAYER_VY_SINKING;
;
L0D55:	ldx     #$00
	sta     _pvy
	stx     _pvy+1
;
; ppossee = 1;
;
	lda     #$01
	sta     _ppossee
;
; if (vertical_engine_type == ENGINE_TYPE_JUMP) {
;
L0D54:	lda     _vertical_engine_type
	jne     L0D7F
;
; && !pj
;
	lda     _a_button
	beq     L0D66
;
; && (
;
	lda     _pj
	bne     L0D66
;
; pgotten || ppossee || hitv
;
	lda     _pgotten
	bne     L0D60
	lda     _ppossee
	bne     L0D60
;
; )
;
	lda     _hitv
	beq     L0D66
;
; jump_start ();
;
L0D60:	jsr     _jump_start
;
; if (!(pgotten || hitv || pnotsafe)) {
;
	lda     _pgotten
	bne     L0D68
	lda     _hitv
	bne     L0D68
	lda     _pnotsafe
	beq     L0D69
L0D68:	lda     #$01
L0D69:	jsr     bnega
	beq     L0D66
;
; player_register_safe_spot ();
;
	jsr     _player_register_safe_spot
;
; if (pad0 & PAD_A) {
;
L0D66:	lda     _pad0
	and     #$01
	beq     L167E
;
; if (pj) {
;
	lda     _pj
	beq     L0D7F
;
; if (pctj < PLAYER_AY_JUMP) pvy -= (PLAYER_AY_JUMP - (pctj));
;
	lda     _pctj
	cmp     #$0C
	bcs     L0D6F
	lda     #$0C
	sec
	sbc     _pctj
	eor     #$FF
	sec
	adc     _pvy
	sta     _pvy
	lda     #$FF
	adc     _pvy+1
	sta     _pvy+1
;
; if (pvy < -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
L0D6F:	lda     _pvy
	cmp     #$40
	lda     _pvy+1
	sbc     #$FF
	bvc     L0D77
	eor     #$80
L0D77:	bpl     L0D75
	ldx     #$FF
	lda     #$40
	sta     _pvy
	stx     _pvy+1
;
; ++ pctj; if (pctj == 16) pj = 0; 
;
L0D75:	inc     _pctj
	lda     _pctj
	cmp     #$10
	bne     L0D7F
	lda     #$00
;
; pj = 0; 
;
L167E:	sta     _pj
;
; if (!(pad0 & PAD_LEFT || pad0 & PAD_RIGHT)) {
;
L0D7F:	lda     _pad0
	and     #$40
	bne     L0D84
	lda     _pad0
	and     #$80
	beq     L0D85
L0D84:	lda     #$01
L0D85:	jsr     bnega
	beq     L0D9C
;
; if (pvx > 0) {
;
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L0D88
	eor     #$80
L0D88:	bpl     L0D86
;
; pvx -= pice ? PLAYER_RX_ICE : PLAYER_RX;
;
	lda     _pice
	beq     L0D8B
	lda     #$02
	jmp     L0D8D
L0D8B:	lda     #$10
L0D8D:	eor     #$FF
	sec
	adc     _pvx
	sta     _pvx
	lda     #$FF
	adc     _pvx+1
	sta     _pvx+1
;
; if (pvx < 0) pvx = 0;
;
	ldx     _pvx+1
	cpx     #$80
	bcc     L0D9C
;
; } else if (pvx < 0) {
;
	jmp     L1686
L0D86:	ldx     _pvx+1
	cpx     #$80
	bcc     L0D9C
;
; pvx += pice ? PLAYER_RX_ICE : PLAYER_RX;
;
	lda     _pice
	beq     L0D98
	lda     #$02
	jmp     L0D9A
L0D98:	lda     #$10
L0D9A:	clc
	adc     _pvx
	sta     _pvx
	lda     #$00
	adc     _pvx+1
	sta     _pvx+1
;
; if (pvx > 0) pvx = 0;
;
	lda     _pvx
	cmp     #$01
	lda     _pvx+1
	sbc     #$00
	bvs     L0D9E
	eor     #$80
L0D9E:	bpl     L0D9C
L1686:	lda     #$00
	sta     _pvx
	sta     _pvx+1
;
; if (pad0 & PAD_LEFT) {
;
L0D9C:	lda     _pad0
	and     #$40
	beq     L0DA5
;
; pfacing = CELL_FACING_LEFT;  
;
	lda     #$08
	sta     _pfacing
;
; if (pvx > -PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$81
	lda     _pvx+1
	sbc     #$FF
	bvs     L0DA7
	eor     #$80
L0DA7:	bpl     L0DA5
;
; pvx -= pice ? PLAYER_AX_ICE : PLAYER_AX;
;
	lda     _pice
	beq     L0DAA
	lda     #$04
	jmp     L0DAC
L0DAA:	lda     #$10
L0DAC:	eor     #$FF
	sec
	adc     _pvx
	sta     _pvx
	lda     #$FF
	adc     _pvx+1
	sta     _pvx+1
;
; if (pad0 & PAD_RIGHT) {
;
L0DA5:	lda     _pad0
	and     #$80
	beq     L0DB2
;
; pfacing = CELL_FACING_RIGHT;
;
	lda     #$00
	sta     _pfacing
;
; if (pvx < PLAYER_VX_MAX) {
;
	lda     _pvx
	cmp     #$80
	lda     _pvx+1
	sbc     #$00
	bvc     L0DB4
	eor     #$80
L0DB4:	bpl     L0DB2
;
; pvx += pice ? PLAYER_AX_ICE : PLAYER_AX;
;
	lda     _pice
	beq     L0DB7
	lda     #$04
	jmp     L0DB9
L0DB7:	lda     #$10
L0DB9:	clc
	adc     _pvx
	sta     _pvx
	lda     #$00
	adc     _pvx+1
	sta     _pvx+1
;
; px += pvx;
;
L0DB2:	lda     _pvx
	clc
	adc     _px
	sta     _px
	lda     _pvx+1
	adc     _px+1
	sta     _px+1
;
; if (pgotten) px += pgtmx;
;
	lda     _pgotten
	beq     L0DBD
	lda     _pgtmx
	clc
	adc     _px
	sta     _px
	lda     _pgtmx+1
	adc     _px+1
	sta     _px+1
;
; if (px < (4<<FIXBITS)) { px = 4 << FIXBITS; prx = 4;}
;
L0DBD:	ldx     _px+1
	cpx     #$01
	bcs     L0DC1
	ldx     #$01
	lda     #$00
	sta     _px
	stx     _px+1
	lda     #$04
	sta     _prx
;
; else if (px > (MAX_PRX << FIXBITS)) { px = MAX_PRX << FIXBITS; prx = MAX_PRX; }
;
	jmp     L0DD0
L0DC1:	lda     _px
	cmp     #$01
	lda     _px+1
	sbc     #$3D
	bcc     L0DC9
	ldx     #$3D
	lda     #$00
	sta     _px
	stx     _px+1
	lda     #$F4
	sta     _prx
;
; else player_to_pixels ();
;
	jmp     L0DD0
L0DC9:	jsr     _player_to_pixels
;
; cy1 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4;
;
L0DD0:	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy1
;
; cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L0DD8
	inx
L0DD8:	jsr     shrax4
	sta     _cy2
;
; rds16 = pvx + pgtmx;
;
	lda     _pvx
	clc
	adc     _pgtmx
	sta     _rds16
	lda     _pvx+1
	adc     _pgtmx+1
	sta     _rds16+1
;
; if (rds16)  {
;
	lda     _rds16
	ora     _rds16+1
	jeq     L0E1F
;
; if (rds16 < 0) {
;
	ldx     _rds16+1
	cpx     #$80
	bcc     L0DDD
;
; cx1 = cx2 = prx >> 4; 
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx2
	sta     _cx1
;
; PRXA = (cx1 + 1) << 4;
;
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _rda
;
; rdm = cx1 - 1;
;
	lda     _cx1
	sec
	sbc     #$01
	bcs     L0DF7
;
; } else {
;
	jmp     L0DF7
;
; cx1 = cx2 = (prx + 8) >> 4;
;
L0DDD:	ldx     #$00
	lda     _prx
	clc
	adc     #$08
	bcc     L0DEE
	inx
L0DEE:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; PRXA = ((cx1 - 1) << 4) + 8;
;
	ldx     #$00
	lda     _cx1
	sec
	sbc     #$01
	bcs     L0DF3
	dex
L0DF3:	jsr     shlax4
	clc
	adc     #$08
	sta     _rda
;
; rdm = cx1 + 1;
;
	lda     _cx1
	clc
	adc     #$01
L0DF7:	sta     _rdm
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L0DFA
	lda     _at2
	and     #$08
	jeq     L0DF9
;
; pvx = 0; prx = PRXA; px = prx << FIXBITS; pfiring = 1;
;
L0DFA:	ldx     #$00
	txa
	sta     _pvx
	sta     _pvx+1
	lda     _rda
	sta     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
	lda     #$01
	sta     _pfiring
;
; if (at1 & 2) player_process_tile (at1, cx1, cy1, rdm, cy1);
;
	lda     _at1
	ldx     #$00
	and     #$02
	beq     L0E06
	ldy     #$0A
	jsr     subysp
	lda     _at1
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _rdm
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy1
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _player_process_tile
;
; if (cy1 != cy2) if (at2 & 2) player_process_tile (at2, cx1, cy2, rdm, cy2);
;
L0E06:	lda     _cy1
	jsr     pusha0
	lda     _cy2
	jsr     tosicmp0
	beq     L0E18
	lda     _at2
	ldx     #$00
	and     #$02
	beq     L0E18
	ldy     #$0A
	jsr     subysp
	lda     _at2
	ldy     #$08
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cx1
	ldy     #$06
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy2
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _rdm
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     _cy2
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	jsr     _player_process_tile
;
; } else {
;
	jmp     L0E18
;
; hith = ((at1 & 1) || (at2 & 1));
;
L0DF9:	lda     _at1
	and     #$01
	bne     L0E1B
	lda     _at2
	and     #$01
	beq     L0E1E
L0E1B:	lda     #$01
L0E1E:	sta     _hith
;
; if (pvy > 0) hith &= ((pry & 15) > 4);
;
L0E18:	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L0E21
	eor     #$80
L0E21:	bpl     L0E1F
	lda     _pry
	and     #$0F
	cmp     #$05
	lda     #$00
	rol     a
	and     _hith
	sta     _hith
;
; phit = 0;
;
L0E1F:	lda     #$00
	sta     _phit
;
; if (pgotten == 0) {
;
	lda     _pgotten
	jne     L0E80
;
; if (hitv) { phit = 1; pvy = ADD_SIGN (-pvy, PLAYER_V_REBOUND); pry = pcy; py = pry << FIXBITS; } 
;
	lda     _hitv
	beq     L0E2A
	lda     #$01
	sta     _phit
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L0E32
	lda     _pvy
	ldx     _pvy+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0E37
	eor     #$80
L0E37:	bpl     L0E38
	ldx     #$00
	lda     #$E0
	jmp     L0E3F
L0E38:	ldx     #$FF
	lda     #$20
	jmp     L0E3F
L0E32:	tax
L0E3F:	sta     _pvy
	stx     _pvy+1
	lda     _pcy
	sta     _pry
	ldx     #$00
	lda     _pry
	jsr     aslax4
	jsr     aslax2
	sta     _py
	stx     _py+1
;
; else
;
	jmp     L0E47
;
; if (hith) { phit = 1; pvx = ADD_SIGN (-pvx, PLAYER_V_REBOUND); prx = pcx; px = prx << FIXBITS; }
;
L0E2A:	lda     _hith
	beq     L0E47
	lda     #$01
	sta     _phit
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	stx     tmp1
	ora     tmp1
	beq     L0E4F
	lda     _pvx
	ldx     _pvx+1
	jsr     negax
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0E54
	eor     #$80
L0E54:	bpl     L0E55
	ldx     #$00
	lda     #$E0
	jmp     L0E5C
L0E55:	ldx     #$FF
	lda     #$20
	jmp     L0E5C
L0E4F:	tax
L0E5C:	sta     _pvx
	stx     _pvx+1
	lda     _pcx
	sta     _prx
	ldx     #$00
	lda     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; cx1 = cx2 = (prx + 4) >> 4;
;
L0E47:	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L0E67
	inx
L0E67:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; cy1 = (pry - PLAYER_COLLISION_VSTRETCH_BG) >> 4; cy2 = (pry + 15) >> 4;
;
	lda     _pry
	sec
	sbc     #$FC
	pha
	lda     #$00
	sbc     #$FF
	tax
	pla
	jsr     shrax4
	sta     _cy1
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L0E6E
	inx
L0E6E:	jsr     shrax4
	sta     _cy2
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 1) || (at2 & 1)) phit = 1;
;
	lda     _at1
	and     #$01
	bne     L0E71
	lda     _at2
	and     #$01
	beq     L0E70
L0E71:	lda     #$01
	sta     _phit
;
; if (!pflickering && !pbouncing) if (phit) { 
;
L0E70:	lda     _pflickering
	bne     L0E80
	lda     _pbouncing
	bne     L0E80
	lda     _phit
	beq     L0E80
;
; player_to_pixels ();
;
	jsr     _player_to_pixels
;
; en_sg_2 = 1;
;
	lda     #$01
	sta     _en_sg_2
;
; if (en_sg_2)
;
	lda     _en_sg_2
	beq     L0E80
;
; pkill = 1; 
;
	lda     #$01
	sta     _pkill
;
; ) {
;
L0E80:	lda     _b_button
	beq     L0E86
;
; if (b_button) fire_bullet ();
;
	lda     _b_button
	beq     L0E86
	jsr     _fire_bullet
;
; if (ppossee || pgotten) {
;
L0E86:	lda     _ppossee
	bne     L0E8A
	lda     _pgotten
	beq     L0E89
;
; if (pvx > PLAYER_VX_MIN || pvx < -PLAYER_VX_MIN) {
;
L0E8A:	lda     _pvx
	cmp     #$41
	lda     _pvx+1
	sbc     #$00
	bvs     L0E8F
	eor     #$80
L0E8F:	bmi     L0E8D
	lda     _pvx
	cmp     #$C0
	lda     _pvx+1
	sbc     #$FF
	bvc     L0E91
	eor     #$80
L0E91:	bpl     L0E8C
;
; psprid = CELL_WALK_CYCLE + ((prx >> 3) & 3);
;
L0E8D:	ldx     #$00
	lda     _prx
	jsr     asrax3
	and     #$03
	clc
	adc     #$01
	bcc     L1680
;
; } else {
;
	jmp     L1680
;
; psprid = CELL_IDLE;
;
L0E8C:	lda     #$00
;
; } else {
;
	jmp     L1680
;
; if (pvy < PLAYER_VY_FALLING_MIN)
;
L0E89:	lda     _pvy
	cmp     #$40
	lda     _pvy+1
	sbc     #$00
	bvc     L0E9E
	eor     #$80
L0E9E:	bpl     L0E9C
;
; psprid = CELL_ASCENDING;
;
	lda     #$05
;
; else
;
	jmp     L1680
;
; psprid = CELL_DESCENDING; 
;
L0E9C:	lda     #$06
L1680:	sta     _psprid
;
; psprid += pfacing;
;
	lda     _pfacing
	clc
	adc     _psprid
	sta     _psprid
;
; prx_old = prx;
;
	lda     _prx
	sta     _prx_old
;
; pry_old = pry;
;
	lda     _pry
	sta     _pry_old
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_draw_chac_chac (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_draw_chac_chac: near

.segment	"CODE"

;
; _x = en_x [gpit]; _y = en_y [gpit]    ; _t = a1; map_set ();
;
	ldy     _gpit
	lda     _en_x,y
	sta     __x
	ldy     _gpit
	lda     _en_y,y
	sta     __y
	ldy     #$02
	lda     (sp),y
	sta     __t
	jsr     _map_set
;
; _x = en_x [gpit]; _y = en_y [gpit] + 1; _t = a2; map_set ();
;
	ldy     _gpit
	lda     _en_x,y
	sta     __x
	ldy     _gpit
	lda     _en_y,y
	clc
	adc     #$01
	sta     __y
	ldy     #$01
	lda     (sp),y
	sta     __t
	jsr     _map_set
;
; _x = en_x [gpit]; _y = en_y [gpit] + 2; _t = a3; map_set ();
;
	ldy     _gpit
	lda     _en_x,y
	sta     __x
	ldy     _gpit
	lda     _en_y,y
	clc
	adc     #$02
	sta     __y
	ldy     #$00
	lda     (sp),y
	sta     __t
	jsr     _map_set
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ enems_update_unsigned_char_arrays (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_update_unsigned_char_arrays: near

.segment	"CODE"

;
; __asm__ ("ldy %v", gpit);
;
	ldy     _gpit
;
; __asm__ ("lda %v", _en_t);
;
	lda     __en_t
;
; __asm__ ("sta %v, y", en_t);
;
	sta     _en_t,y
;
; __asm__ ("lda %v", _en_s);
;
	lda     __en_s
;
; __asm__ ("sta %v, y", en_s);
;
	sta     _en_s,y
;
; __asm__ ("lda %v", _en_x);
;
	lda     __en_x
;
; __asm__ ("sta %v, y", en_x);
;
	sta     _en_x,y
;
; __asm__ ("lda %v", _en_y);
;
	lda     __en_y
;
; __asm__ ("sta %v, y", en_y);
;
	sta     _en_y,y
;
; __asm__ ("lda %v", _en_x1);
;
	lda     __en_x1
;
; __asm__ ("sta %v, y", en_x1);
;
	sta     _en_x1,y
;
; __asm__ ("lda %v", _en_x2);
;
	lda     __en_x2
;
; __asm__ ("sta %v, y", en_x2);
;
	sta     _en_x2,y
;
; __asm__ ("lda %v", _en_y1);
;
	lda     __en_y1
;
; __asm__ ("sta %v, y", en_y1);
;
	sta     _en_y1,y
;
; __asm__ ("lda %v", _en_y2);
;
	lda     __en_y2
;
; __asm__ ("sta %v, y", en_y2);
;
	sta     _en_y2,y
;
; __asm__ ("lda %v", _en_mx);
;
	lda     __en_mx
;
; __asm__ ("sta %v, y", en_mx);
;
	sta     _en_mx,y
;
; __asm__ ("lda %v", _en_my);
;
	lda     __en_my
;
; __asm__ ("sta %v, y", en_my);
;
	sta     _en_my,y
;
; __asm__ ("lda %v", _en_ct);
;
	lda     __en_ct
;
; __asm__ ("sta %v, y", en_ct);
;
	sta     _en_ct,y
;
; __asm__ ("lda %v", _en_facing);
;
	lda     __en_facing
;
; __asm__ ("sta %v, y", en_facing);
;
	sta     _en_facing,y
;
; __asm__ ("lda %v", _en_state);
;
	lda     __en_state
;
; __asm__ ("sta %v, y", en_state);
;
	sta     _en_state,y
;
; enf_x [gpit] = _enf_x; enf_vx [gpit] = _enf_vx;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L168B
	inx
	clc
L168B:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	lda     __enf_x
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     __enf_x+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L168C
	inx
	clc
L168C:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	lda     __enf_vx
	dey
	sta     (ptr1),y
	iny
	lda     __enf_vx+1
	sta     (ptr1),y
;
; enf_y [gpit] = _enf_y; enf_vy [gpit] = _enf_vy;
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L168D
	inx
	clc
L168D:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	lda     __enf_y
	dey
	sta     (ptr1),y
	iny
	lda     __enf_y+1
	sta     (ptr1),y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L168E
	inx
	clc
L168E:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	lda     __enf_vy
	dey
	sta     (ptr1),y
	iny
	lda     __enf_vy+1
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_facing (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_facing: near

.segment	"CODE"

;
; _en_facing = rda << 2;
;
	lda     _rda
	asl     a
	asl     a
	sta     __en_facing
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_init_fp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_init_fp: near

.segment	"CODE"

;
; _enf_x = _en_x << 6;
;
	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y = _en_y << 6;
;
	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_boioiong_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_boioiong_init: near

.segment	"CODE"

;
; enems_init_fp ();
;
	jsr     _enems_init_fp
;
; _enf_vy = 0; 
;
	ldx     #$00
	txa
	sta     __enf_vy
	sta     __enf_vy+1
;
; _enf_vx = ADD_SIGN2 (_en_x2, _en_x1, rdm << FIXBITS);
;
	lda     __en_x1
	cmp     __en_x2
	bne     L0F07
	txa
	jmp     L0F13
L0F07:	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L0F10
	beq     L0F10
	lda     _rdm
	jsr     aslax4
	jsr     aslax2
	jmp     L0F13
L0F10:	lda     _rdm
	jsr     aslax4
	jsr     aslax2
	jsr     negax
L0F13:	sta     __enf_vx
	stx     __enf_vx+1
;
; _en_ct = 0;
;
	lda     #$00
	sta     __en_ct
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_load (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_load: near

.segment	"CODE"

;
; gp_gen = (unsigned char *) (c_enems + (n_pant << 2) + (n_pant << 3)); // * 12
;
	ldx     #$00
	lda     _n_pant
	jsr     aslax2
	clc
	adc     _c_enems
	sta     ptr1
	txa
	adc     _c_enems+1
	sta     ptr1+1
	ldx     #$00
	lda     _n_pant
	jsr     aslax3
	clc
	adc     ptr1
	sta     _gp_gen
	txa
	adc     ptr1+1
	sta     _gp_gen+1
;
; for (gpit = 0; gpit < NENEMS; gpit ++) {
;
	lda     #$00
L169D:	sta     _gpit
	cmp     #$03
	bcc     L169E
;
; }
;
	rts
;
; SET_FROM_PTR (_en_t, gp_gen); gp_gen ++;
;
L169E:	ldy     #0
	lda     (_gp_gen),y
	sta     __en_t
	lda     _gp_gen
	ldx     _gp_gen+1
	clc
	adc     #$01
	bcc     L0F2B
	inx
L0F2B:	sta     _gp_gen
	stx     _gp_gen+1
;
; _en_state = 0;
;
	sty     __en_state
;
; SET_FROM_PTR (rda, gp_gen); gp_gen ++;
;
	lda     (_gp_gen),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	clc
	adc     #$01
	bcc     L0F32
	inx
L0F32:	sta     _gp_gen
	stx     _gp_gen+1
;
; _en_y1 = rda & 0xf0;
;
	lda     _rda
	and     #$F0
	sta     __en_y1
;
; _en_x1 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x1
;
; SET_FROM_PTR (rda, gp_gen); gp_gen ++;
;
	lda     (_gp_gen),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	clc
	adc     #$01
	bcc     L0F3B
	inx
L0F3B:	sta     _gp_gen
	stx     _gp_gen+1
;
; _en_y2 = rda & 0xf0;
;
	lda     _rda
	and     #$F0
	sta     __en_y2
;
; _en_x2 = rda << 4;
;
	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_x2
;
; SET_FROM_PTR (rda, gp_gen); gp_gen ++;
;
	lda     (_gp_gen),y
	sta     _rda
	lda     _gp_gen
	ldx     _gp_gen+1
	clc
	adc     #$01
	bcc     L0F44
	inx
L0F44:	sta     _gp_gen
	stx     _gp_gen+1
;
; rdd = rda & 0xf0;  // Used for respawn speed!
;
	lda     _rda
	and     #$F0
	sta     _rdd
;
; rdm = rda & 0x0f;  // Actual speed.
;
	lda     _rda
	and     #$0F
	sta     _rdm
;
; _en_x = _en_x1;
;
	lda     __en_x1
	sta     __en_x
;
; _en_y = _en_y1;
;
	lda     __en_y1
	sta     __en_y
;
; switch (_en_t & 0x3f) {
;
	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L0F51
	cmp     #$02
	beq     L0F51
	cmp     #$03
	beq     L0F51
	cmp     #$04
	beq     L0F51
	cmp     #$06
	jeq     L0FAA
	cmp     #$08
	jeq     L0FB2
	cmp     #$09
	jeq     L1022
	cmp     #$0A
	jeq     L102D
	cmp     #$0B
	jeq     L103B
	jmp     L0F4F
;
; _en_ct = 0;   
;
L0F51:	sty     __en_ct
;
; _en_s = (_en_t - 1) << 3;
;
	lda     __en_t
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	sta     __en_s
;
; _en_mx = ADD_SIGN2 (_en_x2, _en_x1, rdm);
;
	lda     __en_x1
	cmp     __en_x2
	bne     L0F63
	tya
	jmp     L0F6F
L0F63:	ldx     #$00
	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L0F6C
	beq     L0F6C
	lda     _rdm
	jmp     L0F6F
L0F6C:	lda     _rdm
	jsr     negax
L0F6F:	sta     __en_mx
;
; _en_my = ADD_SIGN2 (_en_y2, _en_y1, rdm);
;
	lda     __en_y1
	cmp     __en_y2
	bne     L0F78
	tya
	jmp     L0F84
L0F78:	ldx     #$00
	lda     __en_y2
	sec
	sbc     __en_y1
	bcc     L0F81
	beq     L0F81
	lda     _rdm
	jmp     L0F84
L0F81:	lda     _rdm
	jsr     negax
L0F84:	sta     __en_my
;
; if (rdm == 1) {
;
	lda     _rdm
	cmp     #$01
	bne     L0F88
;
; en_status [gpit] = 1; 
;
	ldy     _gpit
	sta     _en_status,y
;
; } else {
;
	jmp     L0F8E
;
; en_status [gpit] = 0;
;
L0F88:	ldy     _gpit
	lda     #$00
	sta     _en_status,y
;
; _en_mx >>= 1;
;
	tax
	lda     __en_mx
	bpl     L0F94
	dex
L0F94:	jsr     asrax1
	sta     __en_mx
;
; _en_my >>= 1;
;
	ldx     #$00
	lda     __en_my
	bpl     L0F97
	dex
L0F97:	jsr     asrax1
	sta     __en_my
;
; if (_en_x1 > _en_x2) { rda = _en_x1; _en_x1 = _en_x2; _en_x2 = rda; }
;
L0F8E:	lda     __en_x1
	sec
	sbc     __en_x2
	bcc     L0F99
	beq     L0F99
	lda     __en_x1
	sta     _rda
	lda     __en_x2
	sta     __en_x1
	lda     _rda
	sta     __en_x2
;
; if (_en_y1 > _en_y2) { rda = _en_y1; _en_y1 = _en_y2; _en_y2 = rda; }
;
L0F99:	lda     __en_y1
	sec
	sbc     __en_y2
	jcc     L0F4F
	jeq     L0F4F
	lda     __en_y1
	sta     _rda
	lda     __en_y2
	sta     __en_y1
	lda     _rda
	sta     __en_y2
;
; break;
;
	jmp     L0F4F
;
; enems_init_fp ();
;
L0FAA:	jsr     _enems_init_fp
;
; _enf_vx = _enf_vy = 0;
;
	lda     #$00
	sta     __enf_vy
	sta     __enf_vy+1
	sta     __enf_vx
	sta     __enf_vx+1
;
; _en_s = FANTY_BASE_SPRID;
;
	lda     #$20
;
; break;
;
	jmp     L1697
;
; _en_mx = ADD_SIGN2 (_en_x2, _en_x1, rdm);
;
L0FB2:	lda     __en_x1
	cmp     __en_x2
	bne     L0FB8
	tya
	jmp     L0FC4
L0FB8:	ldx     #$00
	lda     __en_x2
	sec
	sbc     __en_x1
	bcc     L0FC1
	beq     L0FC1
	lda     _rdm
	jmp     L0FC4
L0FC1:	lda     _rdm
	jsr     negax
L0FC4:	sta     __en_mx
;
; _en_my = ADD_SIGN2 (_en_y2, _en_y1, rdm);
;
	lda     __en_y1
	cmp     __en_y2
	bne     L0FCD
	tya
	jmp     L0FD9
L0FCD:	ldx     #$00
	lda     __en_y2
	sec
	sbc     __en_y1
	bcc     L0FD6
	beq     L0FD6
	lda     _rdm
	jmp     L0FD9
L0FD6:	lda     _rdm
	jsr     negax
L0FD9:	sta     __en_my
;
; rda = ABS (_en_mx); if (!rda) rda = ABS (_en_my);
;
	lda     __en_mx
	asl     a
	bcc     L0FE2
	ldx     #$00
	lda     __en_mx
	bpl     L0FE5
	dex
L0FE5:	jsr     negax
L0FEA:	cmp     #$80
	bcc     L0FEB
	jmp     L0FEB
L0FE2:	lda     __en_mx
	cmp     #$80
	bcc     L0FEA
L0FEB:	sta     _rda
	lda     _rda
	bne     L0FEC
	lda     __en_my
	asl     a
	bcc     L0FF3
	ldx     #$00
	lda     __en_my
	bpl     L0FF6
	dex
L0FF6:	jsr     negax
L0FFB:	cmp     #$80
	bcc     L0FFC
	jmp     L0FFC
L0FF3:	lda     __en_my
	cmp     #$80
	bcc     L0FFB
L0FFC:	sta     _rda
;
; -- rda;
;
L0FEC:	dec     _rda
;
; rdb = (_en_x1 != _en_x2) ? 
;
	lda     __en_x2
	cmp     __en_x1
;
; SGNC (_en_x2, _en_x1, SAW_V_DISPL) :
;
	beq     L1001
	lda     __en_x2
	cmp     __en_x1
	bcs     L169C
	lda     #$FC
	jmp     L1014
;
; SGNC (_en_y2, _en_y1, SAW_V_DISPL);
;
L1001:	lda     __en_y2
	cmp     __en_y1
	bcs     L169C
	lda     #$FC
	jmp     L1014
L169C:	lda     #$04
L1014:	sta     _rdb
;
; _en_my = rda; // EMERGING SENSE
;
	lda     _rda
	sta     __en_my
;
; _en_mx = rdb; // MOVING SENSE
;
	lda     _rdb
	sta     __en_mx
;
; _en_state = 1;
;
	lda     #$01
	sta     __en_state
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; break;
;
	jmp     L0F4F
;
; _en_my = PEZON_WAIT + (rda << 3); // Speed in colocador defines idle time! (x8)
;
L1022:	ldx     #$00
	lda     _rda
	jsr     aslax3
	clc
	adc     #$32
	sta     __en_my
;
; _en_mx = _en_my;
;
	sta     __en_mx
;
; _en_s = PEZONS_BASE_SPRID;
;
	lda     #$28
;
; break;
;
	jmp     L1697
;
; _en_my = (rda << 4); // IDLE_1
;
L102D:	lda     _rda
	asl     a
	asl     a
	asl     a
	asl     a
	sta     __en_my
;
; _en_x = _en_x1 >> 4;
;
	ldx     #$00
	lda     __en_x1
	jsr     asrax4
	sta     __en_x
;
; _en_y = (_en_y1 >> 4) - 1;
;
	ldx     #$00
	lda     __en_y1
	jsr     asrax4
	sec
	sbc     #$01
	sta     __en_y
;
; _en_mx = _en_my;
;
	lda     __en_my
	sta     __en_mx
;
; break;
;
	jmp     L0F4F
;
; _en_state = 0; _en_ct = MONOCOCO_BASE_TIME_HIDDEN - (rand8 () & 0x15);
;
L103B:	sty     __en_state
	lda     #$96
	jsr     pusha0
	jsr     _rand8
	and     #$15
	jsr     tossuba0
	sta     __en_ct
;
; _en_s = MONOCOCO_BASE_SPRID;
;
	lda     #$38
L1697:	sta     __en_s
;
; en_life [gpit] = _en_t == 6 ? FANTY_LIFE_GAUGE : ENEMS_LIFE_GAUGE;
;
L0F4F:	lda     #<(_en_life)
	ldx     #>(_en_life)
	clc
	adc     _gpit
	bcc     L1045
	inx
L1045:	sta     ptr1
	stx     ptr1+1
	lda     __en_t
	cmp     #$06
	bne     L1047
	lda     #$05
	jmp     L1049
L1047:	lda     #$02
L1049:	ldy     #$00
	sta     (ptr1),y
;
; en_cttouched [gpit] = 0;
;
	ldy     _gpit
	lda     #$00
	sta     _en_cttouched,y
;
; en_flags [gpit] = 0;
;
	ldy     _gpit
	sta     _en_flags,y
;
; enems_update_unsigned_char_arrays ();
;
	jsr     _enems_update_unsigned_char_arrays
;
; for (gpit = 0; gpit < NENEMS; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L169D

.endproc

; ---------------------------------------------------------------
; void __near__ enems_kill (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_kill: near

.segment	"CODE"

;
; en_flags [gpit] |= EN_STATE_DEAD;
;
	lda     #<(_en_flags)
	ldx     #>(_en_flags)
	clc
	adc     _gpit
	bcc     L1057
	inx
L1057:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ora     #$01
	sta     (ptr1),y
;
; ++ pkilled;
;
	inc     _pkilled
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_hit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_hit: near

.segment	"CODE"

;
; _en_facing = ((_en_x < prx) ? 0 : 4);
;
	lda     __en_x
	cmp     _prx
	bcs     L105F
	lda     #$00
	jmp     L1061
L105F:	lda     #$04
L1061:	sta     __en_facing
;
; en_cttouched [gpit] = ENEMS_TOUCHED_FRAMES;
;
	ldy     _gpit
	lda     #$10
	sta     _en_cttouched,y
;
; -- en_life [gpit]; 
;
	lda     #<(_en_life)
	ldx     #>(_en_life)
	clc
	adc     _gpit
	bcc     L1069
	inx
L1069:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (en_life [gpit] == 0) 
;
	ldy     _gpit
	lda     _en_life,y
;
; enems_kill ();
;
	jeq     _enems_kill
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enems_move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enems_move: near

.segment	"CODE"

;
; pgotten = pgtmx = pgtmy = 0;
;
	lda     #$00
	sta     _pgtmy
	sta     _pgtmy+1
	sta     _pgtmx
	sta     _pgtmx+1
	sta     _pgotten
;
; touched = 0;
;
	sta     _touched
;
; ++ en_initial; if (en_initial >= NENEMS) en_initial = 0;
;
	inc     _en_initial
	lda     _en_initial
	cmp     #$03
	bcc     L1077
	lda     #$00
	sta     _en_initial
;
; gpit = en_initial;
;
L1077:	lda     _en_initial
	sta     _gpit
;
; gpjt = NENEMS; while (gpjt --) {
;
	lda     #$03
	sta     _gpjt
L107F:	lda     _gpjt
	pha
	sec
	sbc     #$01
	sta     _gpjt
	pla
	tax
	bne     L16DC
;
; }
;
	rts
;
; gpit += NENEMS-1; if (gpit > NENEMS-1) gpit -=NENEMS;
;
L16DC:	lda     #$02
	clc
	adc     _gpit
	sta     _gpit
	cmp     #$03
	bcc     L1084
	lda     _gpit
	sec
	sbc     #$03
	sta     _gpit
;
; __asm__ ("ldy %v", gpit);
;
L1084:	ldy     _gpit
;
; __asm__ ("lda %v, y", en_t);
;
	lda     _en_t,y
;
; __asm__ ("sta %v", _en_t);
;
	sta     __en_t
;
; __asm__ ("lda %v, y", en_s);
;
	lda     _en_s,y
;
; __asm__ ("sta %v", _en_s);
;
	sta     __en_s
;
; __asm__ ("lda %v, y", en_x);
;
	lda     _en_x,y
;
; __asm__ ("sta %v", _en_x);
;
	sta     __en_x
;
; __asm__ ("lda %v, y", en_y);
;
	lda     _en_y,y
;
; __asm__ ("sta %v", _en_y);
;
	sta     __en_y
;
; __asm__ ("lda %v, y", en_x1);
;
	lda     _en_x1,y
;
; __asm__ ("sta %v", _en_x1);
;
	sta     __en_x1
;
; __asm__ ("lda %v, y", en_x2);
;
	lda     _en_x2,y
;
; __asm__ ("sta %v", _en_x2);
;
	sta     __en_x2
;
; __asm__ ("lda %v, y", en_y1);
;
	lda     _en_y1,y
;
; __asm__ ("sta %v", _en_y1);
;
	sta     __en_y1
;
; __asm__ ("lda %v, y", en_y2);
;
	lda     _en_y2,y
;
; __asm__ ("sta %v", _en_y2);
;
	sta     __en_y2
;
; __asm__ ("lda %v, y", en_mx);
;
	lda     _en_mx,y
;
; __asm__ ("sta %v", _en_mx);
;
	sta     __en_mx
;
; __asm__ ("lda %v, y", en_my);
;
	lda     _en_my,y
;
; __asm__ ("sta %v", _en_my);
;
	sta     __en_my
;
; __asm__ ("lda %v, y", en_ct);
;
	lda     _en_ct,y
;
; __asm__ ("sta %v", _en_ct);
;
	sta     __en_ct
;
; __asm__ ("lda %v, y", en_facing);
;
	lda     _en_facing,y
;
; __asm__ ("sta %v", _en_facing);
;
	sta     __en_facing
;
; __asm__ ("lda %v, y", en_state);
;
	lda     _en_state,y
;
; __asm__ ("sta %v", _en_state);
;
	sta     __en_state
;
; _enf_x = enf_x [gpit]; _enf_vx = enf_vx [gpit];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L16C3
	inx
	clc
L16C3:	adc     #<(_enf_x)
	sta     ptr1
	txa
	adc     #>(_enf_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     __enf_x+1
	dey
	lda     (ptr1),y
	sta     __enf_x
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L16C4
	inx
	clc
L16C4:	adc     #<(_enf_vx)
	sta     ptr1
	txa
	adc     #>(_enf_vx)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_vx+1
	dey
	lda     (ptr1),y
	sta     __enf_vx
;
; _enf_y = enf_y [gpit]; _enf_vy = enf_vy [gpit];
;
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L16C5
	inx
	clc
L16C5:	adc     #<(_enf_y)
	sta     ptr1
	txa
	adc     #>(_enf_y)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_y+1
	dey
	lda     (ptr1),y
	sta     __enf_y
	ldx     #$00
	lda     _gpit
	asl     a
	bcc     L16C6
	inx
	clc
L16C6:	adc     #<(_enf_vy)
	sta     ptr1
	txa
	adc     #>(_enf_vy)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	sta     __enf_vy+1
	dey
	lda     (ptr1),y
	sta     __enf_vy
;
; if (_en_t == 0) continue;
;
	lda     __en_t
	jeq     L107F
;
; en_is_alive = !(en_flags [gpit] & EN_STATE_DEAD);
;
	ldy     _gpit
	lda     _en_flags,y
	and     #$01
	jsr     bnega
	sta     _en_is_alive
;
; en_spr = 0xff;
;
	lda     #$FF
	sta     _en_spr
;
; en_spr_x_mod = 0;
;
	lda     #$00
	sta     _en_spr_x_mod
;
; if (en_cttouched [gpit]) {
;
	ldy     _gpit
	lda     _en_cttouched,y
	jeq     L10BA
;
; -- en_cttouched [gpit];
;
	lda     #<(_en_cttouched)
	ldx     #>(_en_cttouched)
	clc
	adc     _gpit
	bcc     L10C0
	inx
L10C0:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; rda = frame_counter & 0xf;
;
	lda     _frame_counter
	and     #$0F
	sta     _rda
;
; _en_x + jitter [rda],
;
	jsr     decsp3
	ldy     _rda
	lda     _jitter,y
	clc
	adc     __en_x
	ldy     #$02
	sta     (sp),y
;
; _en_y + jitter [15 - rda] + SPRITE_ADJUST, 
;
	lda     #$0F
	sec
	sbc     _rda
	sta     ptr1
;
; _en_x + jitter [rda],
;
	lda     #$00
;
; _en_y + jitter [15 - rda] + SPRITE_ADJUST, 
;
	clc
	adc     #>(_jitter)
	sta     ptr1+1
	ldy     #<(_jitter)
	lda     (ptr1),y
	clc
	adc     __en_y
	bcc     L16DA
	clc
L16DA:	adc     #$20
	sec
	sbc     #$08
	bcs     L16C7
	sec
L16C7:	sbc     #$10
	bcs     L16C8
	sec
L16C8:	sbc     #$01
	ldy     #$01
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_EXPLODING_CELL]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$93
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; } else
;
	jmp     L1396
;
; if (en_is_alive) {
;
L10BA:	lda     _en_is_alive
	jeq     L1396
;
; pregotten = (prx + 7 >= EN_X_ABSOLUTE && prx <= EN_X_ABSOLUTE + 15);
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L10D7
	inx
L10D7:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L10D8
	lda     _prx
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0F
	bcc     L10D9
	ldx     #$01
L10D9:	jsr     tosicmp
	bcc     L10D6
	beq     L10D6
L10D8:	lda     #$00
	jmp     L10DA
L10D6:	lda     #$01
L10DA:	sta     _pregotten
;
; en_fr = ((((_en_mx) ? _en_x : _en_y) + 4) >> 3) & 1;
;
	lda     __en_mx
	beq     L10E1
	lda     __en_x
	jmp     L16BB
L10E1:	lda     __en_y
L16BB:	ldx     #$00
	clc
	adc     #$04
	bcc     L10E5
	inx
L10E5:	jsr     shrax3
	and     #$01
	sta     _en_fr
;
; switch (_en_t & 63) {
;
	lda     __en_t
	and     #$3F
;
; }
;
	cmp     #$01
	beq     L10F0
	cmp     #$02
	beq     L10F0
	cmp     #$03
	beq     L10F0
	cmp     #$04
	beq     L10F0
	cmp     #$06
	jeq     L1116
	cmp     #$08
	jeq     L1218
	cmp     #$09
	jeq     L128D
	cmp     #$0A
	jeq     L12CA
	cmp     #$0B
	jeq     L12FD
	jmp     L10E8
;
; if (!en_status [gpit] || half_life) {
;
L10F0:	ldy     _gpit
	lda     _en_status,y
	beq     L10F2
	lda     _half_life
	beq     L1102
;
; _en_x += _en_mx;
;
L10F2:	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; _en_y += _en_my;
;
	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; if (_en_x == _en_x1 || _en_x == _en_x2) _en_mx = -_en_mx;
;
	lda     __en_x1
	cmp     __en_x
	beq     L10FD
	lda     __en_x2
	cmp     __en_x
	bne     L10FC
L10FD:	ldx     #$00
	lda     __en_mx
	bpl     L1101
	dex
L1101:	jsr     negax
	sta     __en_mx
;
; if (_en_y == _en_y1 || _en_y == _en_y2) _en_my = -_en_my;      
;
L10FC:	lda     __en_y1
	cmp     __en_y
	beq     L1103
	lda     __en_y2
	cmp     __en_y
	bne     L1102
L1103:	ldx     #$00
	lda     __en_my
	bpl     L1107
	dex
L1107:	jsr     negax
	sta     __en_my
;
; rda = _en_mx ? (_en_mx < 0) : (_en_my < 0); enems_facing ();
;
L1102:	lda     __en_mx
	beq     L110A
	lda     __en_mx
	jmp     L16D8
L110A:	lda     __en_my
L16D8:	asl     a
	lda     #$00
	rol     a
	sta     _rda
	jsr     _enems_facing
;
; en_spr = _en_s + en_fr + _en_facing;
;
	lda     __en_s
	clc
	adc     _en_fr
	bcc     L16C9
	clc
L16C9:	adc     __en_facing
;
; break;
;
	jmp     L16D4
;
; rdx = EN_X_ABSOLUTE; rdy = _en_y; rdt = distance ();
;
L1116:	lda     __en_x
	sta     _rdx
	lda     __en_y
	sta     _rdy
	jsr     _distance
	sta     _rdt
;
; switch (_en_state) {
;
	lda     __en_state
;
; }
;
	beq     L1121
	cmp     #$01
	beq     L1151
	jmp     L111F
;
; _enf_vx = ADD_SIGN2 (_en_x1, EN_X_ABSOLUTE, FANTY_V_RETREAT);
;
L1121:	lda     __en_x
	cmp     __en_x1
	bne     L1127
	ldx     #$00
	txa
	jmp     L1133
L1127:	ldx     #$00
	lda     __en_x1
	sec
	sbc     __en_x
	bcc     L1130
	beq     L1130
	lda     #$10
	jmp     L1133
L1130:	dex
	lda     #$F0
L1133:	sta     __enf_vx
	stx     __enf_vx+1
;
; _enf_vy = ADD_SIGN2 (_en_y1, _en_y, FANTY_V_RETREAT);
;
	lda     __en_y
	cmp     __en_y1
	bne     L113C
	ldx     #$00
	txa
	jmp     L1148
L113C:	ldx     #$00
	lda     __en_y1
	sec
	sbc     __en_y
	bcc     L1145
	beq     L1145
	lda     #$10
	jmp     L1148
L1145:	dex
	lda     #$F0
L1148:	sta     __enf_vy
	stx     __enf_vy+1
;
; if (rdt < FANTY_DISTANCE) _en_state = 1;
;
	lda     _rdt
	cmp     #$50
	jcs     L111F
	lda     #$01
;
; break;
;
	jmp     L16BD
;
; if (px < _enf_x) {
;
L1151:	lda     _px
	cmp     __enf_x
	lda     _px+1
	sbc     __enf_x+1
	bcs     L1152
;
; _enf_vx -= FANTY_A; if (_enf_vx < -FANTY_MAXV) _enf_vx = -FANTY_MAXV;
;
	lda     __enf_vx
	sec
	sbc     #$04
	sta     __enf_vx
	bcs     L1156
	dec     __enf_vx+1
L1156:	lda     __enf_vx
	cmp     #$D0
	lda     __enf_vx+1
	sbc     #$FF
	bvc     L1159
	eor     #$80
L1159:	bpl     L1160
	ldx     #$FF
	lda     #$D0
;
; } else {
;
	jmp     L16D5
;
; _enf_vx += FANTY_A; if (_enf_vx > FANTY_MAXV) _enf_vx = FANTY_MAXV;
;
L1152:	lda     #$04
	clc
	adc     __enf_vx
	sta     __enf_vx
	bcc     L115F
	inc     __enf_vx+1
L115F:	lda     __enf_vx
	cmp     #$31
	lda     __enf_vx+1
	sbc     #$00
	bvs     L1162
	eor     #$80
L1162:	bpl     L1160
	ldx     #$00
	lda     #$30
L16D5:	sta     __enf_vx
	stx     __enf_vx+1
;
; if (py < _enf_y) {
;
L1160:	lda     _py
	cmp     __enf_y
	lda     _py+1
	sbc     __enf_y+1
	bvc     L16B0
	eor     #$80
L16B0:	bpl     L1165
;
; _enf_vy -= FANTY_A; if (_enf_vy < -FANTY_MAXV) _enf_vy = -FANTY_MAXV;
;
	lda     __enf_vy
	sec
	sbc     #$04
	sta     __enf_vy
	bcs     L1169
	dec     __enf_vy+1
L1169:	lda     __enf_vy
	cmp     #$D0
	lda     __enf_vy+1
	sbc     #$FF
	bvc     L116C
	eor     #$80
L116C:	bpl     L1173
	ldx     #$FF
	lda     #$D0
;
; } else {
;
	jmp     L16D6
;
; _enf_vy += FANTY_A; if (_enf_vy > FANTY_MAXV) _enf_vy = FANTY_MAXV;
;
L1165:	lda     #$04
	clc
	adc     __enf_vy
	sta     __enf_vy
	bcc     L1172
	inc     __enf_vy+1
L1172:	lda     __enf_vy
	cmp     #$31
	lda     __enf_vy+1
	sbc     #$00
	bvs     L1175
	eor     #$80
L1175:	bpl     L1173
	ldx     #$00
	lda     #$30
L16D6:	sta     __enf_vy
	stx     __enf_vy+1
;
; if (rdt > FANTY_DISTANCE) {
;
L1173:	lda     _rdt
	cmp     #$51
	bcc     L111F
;
; _enf_x = EN_X_ABSOLUTE << FIXBITS;
;
	ldx     #$00
	lda     __en_x
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y = _en_y << FIXBITS;
;
	ldx     #$00
	lda     __en_y
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; _en_state = 0;
;
	lda     #$00
L16BD:	sta     __en_state
;
; _enf_x += _enf_vx; 
;
L111F:	lda     __enf_vx
	clc
	adc     __enf_x
	sta     __enf_x
	lda     __enf_vx+1
	adc     __enf_x+1
	sta     __enf_x+1
;
; if (_enf_x < 0) _enf_x = 0;
;
	ldx     __enf_x+1
	cpx     #$80
	bcc     L1182
	lda     #$00
	sta     __enf_x
	sta     __enf_x+1
;
; if (_enf_x > MAX_ENX<<FIXBITS) _enf_x = MAX_ENX<<FIXBITS;
;
L1182:	lda     __enf_x
	cmp     #$01
	lda     __enf_x+1
	sbc     #$3C
	bvs     L1188
	eor     #$80
L1188:	bpl     L1186
	ldx     #$3C
	lda     #$00
	sta     __enf_x
	stx     __enf_x+1
;
; EN_X_ABSOLUTE = _enf_x >> 6;
;
L1186:	lda     __enf_x
	ldx     __enf_x+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_x
;
; if (_enf_vx) {
;
	lda     __enf_vx
	ora     __enf_vx+1
	jeq     L11B2
;
; cy1 = (_en_y + 4) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$04
	bcc     L1192
	inx
L1192:	jsr     shrax4
	sta     _cy1
;
; cy2 = (_en_y + 11) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0B
	bcc     L1196
	inx
L1196:	jsr     shrax4
	sta     _cy2
;
; if (_enf_vx > 0) {
;
	lda     __enf_vx
	cmp     #$01
	lda     __enf_vx+1
	sbc     #$00
	bvs     L1199
	eor     #$80
L1199:	bpl     L1197
;
; cx1 = cx2 = (EN_X_ABSOLUTE + 11) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L119E
	inx
L119E:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cx2
	sec
	sbc     #$01
	bcs     L11A3
	dex
L11A3:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L16C0
;
; cx1 = cx2 = (EN_X_ABSOLUTE + 4) >> 4;
;
L1197:	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L11AA
	inx
L11AA:	jsr     shrax4
	sta     _cx2
	sta     _cx1
;
; rda = ((cx1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cx1
	clc
	adc     #$01
	bcc     L11AF
	inx
L11AF:	jsr     shlax4
	sec
	sbc     #$04
L16C0:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) || (at2 & 8)) {
;
	lda     _at1
	and     #$08
	bne     L11B3
	lda     _at2
	and     #$08
	beq     L11B2
;
; _enf_vx = -_enf_vx;
;
L11B3:	lda     __enf_vx
	ldx     __enf_vx+1
	jsr     negax
	sta     __enf_vx
	stx     __enf_vx+1
;
; EN_X_ABSOLUTE = rda; 
;
	lda     _rda
	sta     __en_x
;
; _enf_x = rda << FIXBITS;
;
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	sta     __enf_x
	stx     __enf_x+1
;
; _enf_y += _enf_vy; 
;
L11B2:	lda     __enf_vy
	clc
	adc     __enf_y
	sta     __enf_y
	lda     __enf_vy+1
	adc     __enf_y+1
	sta     __enf_y+1
;
; if (_enf_y < 0) _enf_y = 0;
;
	ldx     __enf_y+1
	cpx     #$80
	bcc     L11BF
	lda     #$00
	sta     __enf_y
	sta     __enf_y+1
;
; if (_enf_y > 11264) _enf_y = 11264;
;
L11BF:	lda     __enf_y
	cmp     #$01
	lda     __enf_y+1
	sbc     #$2C
	bvs     L11C5
	eor     #$80
L11C5:	bpl     L11C3
	ldx     #$2C
	lda     #$00
	sta     __enf_y
	stx     __enf_y+1
;
; _en_y = _enf_y >> 6;
;
L11C3:	lda     __enf_y
	ldx     __enf_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
;
; if (_enf_vy) {
;
	lda     __enf_vy
	ora     __enf_vy+1
	jeq     L11F3
;
; cx1 = (EN_X_ABSOLUTE + 4) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$04
	bcc     L11CF
	inx
L11CF:	jsr     shrax4
	sta     _cx1
;
; cx2 = (EN_X_ABSOLUTE + 11) >> 4;
;
	ldx     #$00
	lda     __en_x
	clc
	adc     #$0B
	bcc     L11D3
	inx
L11D3:	jsr     shrax4
	sta     _cx2
;
; if (_enf_vy > 0) {
;
	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$00
	bvs     L11D6
	eor     #$80
L11D6:	bpl     L11D4
;
; rdb = 12;
;
	lda     #$0C
	sta     _rdb
;
; cy1 = cy2 = (_en_y + 11) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$0B
	bcc     L11DD
	inx
L11DD:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy2 - 1) << 4) + 4;
;
	ldx     #$00
	lda     _cy2
	sec
	sbc     #$01
	bcs     L11E2
	dex
L11E2:	jsr     shlax4
	clc
	adc     #$04
;
; } else {
;
	jmp     L16C1
;
; rdb = 8;
;
L11D4:	lda     #$08
	sta     _rdb
;
; cy1 = cy2 = (_en_y + 4) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$04
	bcc     L11EB
	inx
L11EB:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; rda = ((cy1 + 1) << 4) - 4;
;
	ldx     #$00
	lda     _cy1
	clc
	adc     #$01
	bcc     L11F0
	inx
L11F0:	jsr     shlax4
	sec
	sbc     #$04
L16C1:	sta     _rda
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & rdb) || (at2 & rdb)) {
;
	lda     _rdb
	and     _at1
	pha
	pla
	bne     L11F4
	lda     _rdb
	and     _at2
	pha
	pla
	beq     L11F3
;
; _enf_vy = -_enf_vy;
;
L11F4:	lda     __enf_vy
	ldx     __enf_vy+1
	jsr     negax
	sta     __enf_vy
	stx     __enf_vy+1
;
; _en_y = rda;
;
	lda     _rda
	sta     __en_y
;
; _enf_y = rda << FIXBITS;
;
	ldx     #$00
	lda     _rda
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; cx1 = (EN_X_ABSOLUTE + 8) >> 4;
;
L11F3:	ldx     #$00
	lda     __en_x
	clc
	adc     #$08
	bcc     L1201
	inx
L1201:	jsr     shrax4
	sta     _cx1
;
; cy1 = (_en_y + 8) >> 4;
;
	ldx     #$00
	lda     __en_y
	clc
	adc     #$08
	bcc     L1205
	inx
L1205:	jsr     shrax4
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if (at1 & 1) {
;
	lda     _at1
	and     #$01
	beq     L1207
;
; en_cttouched [gpit] = 8;
;
	ldy     _gpit
	lda     #$08
	sta     _en_cttouched,y
;
; enems_kill ();
;
	jsr     _enems_kill
;
; en_fr = (EN_X_ABSOLUTE >> 3) & 1;
;
L1207:	ldx     #$00
	lda     __en_x
	jsr     asrax3
	and     #$01
	sta     _en_fr
;
; rda = (prx < EN_X_ABSOLUTE); enems_facing ();
;
	lda     _prx
	cmp     __en_x
	jsr     boolult
	sta     _rda
	jsr     _enems_facing
;
; en_spr = _en_s + en_fr + _en_facing;
;
	lda     __en_s
	clc
	adc     _en_fr
	bcc     L16CA
	clc
L16CA:	adc     __en_facing
;
; break;
;
	jmp     L16D4
;
; rda = (_en_x1 == _en_x2);
;
L1218:	lda     __en_x2
	cmp     __en_x1
	jsr     booleq
	sta     _rda
;
; switch (_en_state) {
;
	lda     __en_state
;
; }
;
	beq     L1220
	cmp     #$01
	beq     L1237
	cmp     #$02
	jeq     L1249
	cmp     #$03
	jeq     L1260
	jmp     L121E
;
; if (rda) {
;
L1220:	lda     _rda
	beq     L1221
;
; _en_y -= _en_mx;
;
	lda     __en_mx
	eor     #$FF
	sec
	adc     __en_y
	sta     __en_y
;
; if (_en_y == _en_y1) {
;
	lda     __en_y1
	cmp     __en_y
	jne     L121E
;
; _en_state = 1;
;
	lda     #$01
	sta     __en_state
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; } else {
;
	jmp     L121E
;
; _en_x -= _en_mx;
;
L1221:	lda     __en_mx
	eor     #$FF
	sec
	adc     __en_x
	sta     __en_x
;
; if (_en_x == _en_x1) {
;
	lda     __en_x1
	cmp     __en_x
	jne     L121E
;
; _en_state = 1;
;
	lda     #$01
	sta     __en_state
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; break;
;
	jmp     L121E
;
; if (half_life) {
;
L1237:	lda     _half_life
	jeq     L121E
;
; if (_en_ct --) {
;
	lda     __en_ct
	pha
	sec
	sbc     #$01
	sta     __en_ct
	pla
	tax
	beq     L123A
;
; if (rda) {
;
	lda     _rda
	beq     L123C
;
; _en_x += _en_my;
;
	lda     __en_my
	clc
	adc     __en_x
	sta     __en_x
;
; } else {
;
	jmp     L121E
;
; _en_y += _en_my;
;
L123C:	lda     __en_my
	clc
	adc     __en_y
	sta     __en_y
;
; } else {
;
	jmp     L121E
;
; _en_state = 2;
;
L123A:	lda     #$02
;
; break;
;
	jmp     L1263
;
; if (rda) {
;
L1249:	lda     _rda
	beq     L124A
;
; _en_y += _en_mx;
;
	lda     __en_mx
	clc
	adc     __en_y
	sta     __en_y
;
; if (_en_y == _en_y2) {
;
	lda     __en_y2
	cmp     __en_y
	bne     L121E
;
; _en_state = 3;
;
	lda     #$03
	sta     __en_state
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; } else {
;
	jmp     L121E
;
; _en_x += _en_mx;
;
L124A:	lda     __en_mx
	clc
	adc     __en_x
	sta     __en_x
;
; if (_en_x == _en_x2) {
;
	lda     __en_x2
	cmp     __en_x
	bne     L121E
;
; _en_state = 3;
;
	lda     #$03
	sta     __en_state
;
; _en_ct = SAW_EMERGING_STEPS;
;
	lda     #$0A
	sta     __en_ct
;
; break;
;
	jmp     L121E
;
; if (half_life) {
;
L1260:	lda     _half_life
	beq     L121E
;
; if (_en_ct --) {
;
	lda     __en_ct
	pha
	sec
	sbc     #$01
	sta     __en_ct
	pla
	tax
	beq     L1263
;
; if (rda) {
;
	lda     _rda
	beq     L1265
;
; _en_x -= _en_my;
;
	lda     __en_my
	eor     #$FF
	sec
	adc     __en_x
	sta     __en_x
;
; } else {
;
	jmp     L121E
;
; _en_y -= _en_my;
;
L1265:	lda     __en_my
	eor     #$FF
	sec
	adc     __en_y
	sta     __en_y
;
; } else {
;
	jmp     L121E
;
; _en_state = 0;
;
L1263:	sta     __en_state
;
; if (rda) {
;
L121E:	lda     _rda
	beq     L1271
;
; rdx = _en_x1; rdy = _en_y;
;
	lda     __en_x1
	sta     _rdx
	lda     __en_y
;
; } else {
;
	jmp     L16C2
;
; rdx = _en_x; rdy = _en_y1;
;
L1271:	lda     __en_x
	sta     _rdx
	lda     __en_y1
L16C2:	sta     _rdy
;
; rdx, rdy + SPRITE_ADJUST,
;
	jsr     decsp3
	lda     _rdx
	ldy     #$02
	sta     (sp),y
	lda     _rdy
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L16CB
	sec
L16CB:	sbc     #$10
	bcs     L16CC
	sec
L16CC:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_OCCLUDING_CELL]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_OCCLUDING_CELL]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$91
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; en_spr = SAW_BASE_SPRID + half_life;
;
	lda     _half_life
	clc
	adc     #$30
	sta     _en_spr
;
; _en_facing = 0;
;
	lda     #$00
	sta     __en_facing
;
; break;
;
	jmp     L10E8
;
; _en_x1, _en_y1 + SPRITE_ADJUST, 
;
L128D:	jsr     decsp3
	lda     __en_x1
	ldy     #$02
	sta     (sp),y
	lda     __en_y1
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L16CD
	sec
L16CD:	sbc     #$10
	bcs     L16CE
	sec
L16CE:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [ENEMS_OCCLUDING_CELL]
;
	lda     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [ENEMS_OCCLUDING_CELL]
;
	lda     _spr_enems+1
;
; );
;
	sta     ptr1+1
	ldy     #$91
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; switch (_en_state) {
;
	lda     __en_state
;
; }
;
	beq     L129D
	cmp     #$01
	beq     L12AD
	jmp     L129B
;
; if (_en_mx) {
;
L129D:	lda     __en_mx
	beq     L129E
;
; -- _en_mx;
;
	dec     __en_mx
	lda     __en_mx
	jpl     L129B
;
; } else {
;
	jmp     L129B
;
; _en_state = 1;
;
L129E:	lda     #$01
	sta     __en_state
;
; _enf_y = _en_y1 << 6;
;
	ldx     #$00
	lda     __en_y1
	jsr     aslax4
	jsr     aslax2
	sta     __enf_y
	stx     __enf_y+1
;
; _enf_vy = -PEZON_THRUST;
;
	ldx     #$FE
	lda     #$80
	sta     __enf_vy
	stx     __enf_vy+1
;
; sfx_play (SFX_FLOAT, 1);
;
	lda     #$10
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; break;
;
	jmp     L129B
;
; _enf_vy += PEZON_G;
;
L12AD:	lda     #$10
	clc
	adc     __enf_vy
	sta     __enf_vy
	bcc     L12B0
	inc     __enf_vy+1
;
; if (_enf_vy > PEZON_VY_FALLING_MAX) _enf_vy = PEZON_VY_FALLING_MAX;
;
L12B0:	lda     __enf_vy
	cmp     #$01
	lda     __enf_vy+1
	sbc     #$01
	bvs     L12B3
	eor     #$80
L12B3:	bpl     L12B1
	ldx     #$01
	lda     #$00
	sta     __enf_vy
	stx     __enf_vy+1
;
; _enf_y += _enf_vy;
;
L12B1:	lda     __enf_vy
	clc
	adc     __enf_y
	sta     __enf_y
	lda     __enf_vy+1
	adc     __enf_y+1
	sta     __enf_y+1
;
; _en_y = _enf_y >> 6;
;
	lda     __enf_y
	ldx     __enf_y+1
	jsr     asrax4
	jsr     asrax2
	sta     __en_y
;
; if (_en_y >= _en_y1) {
;
	cmp     __en_y1
	bcc     L12BA
;
; _en_state = 0;
;
	lda     #$00
	sta     __en_state
;
; _en_mx = _en_my;
;
	lda     __en_my
	sta     __en_mx
;
; } else {
;
	jmp     L129B
;
; en_spr = PEZONS_BASE_SPRID + (_enf_vy >= -64);
;
L12BA:	lda     __enf_vy
	cmp     #$C0
	lda     __enf_vy+1
	sbc     #$FF
	bvs     L12C5
	eor     #$80
L12C5:	asl     a
	lda     #$00
	rol     a
	clc
	adc     #$28
	sta     _en_spr
;
; _en_facing = 0;
;
L129B:	lda     #$00
	sta     __en_facing
;
; break;
;
	jmp     L10E8
;
; if (_en_mx) --_en_mx; else {
;
L12CA:	lda     __en_mx
	beq     L12CB
	dec     __en_mx
	lda     __en_mx
	jpl     L10E8
	jmp     L10E8
;
; ++ _en_state;
;
L12CB:	inc     __en_state
;
; if (_en_state == 6) _en_state = 0;
;
	lda     __en_state
	cmp     #$06
	bne     L12D1
	lda     #$00
	sta     __en_state
;
; chac_chacs_times [_en_state] : _en_my;
;
L12D1:	lda     __en_state
	beq     L12D7
	ldy     __en_state
	lda     _chac_chacs_times,y
	jmp     L12DB
L12D7:	lda     __en_my
	cmp     #$80
L12DB:	sta     __en_mx
;
; _x = _en_x; _y = _en_y    ; _t = chac_chacs_t1 [_en_state]; map_set ();
;
	lda     __en_x
	sta     __x
	lda     __en_y
	sta     __y
	ldy     __en_state
	lda     _chac_chacs_t1,y
	sta     __t
	jsr     _map_set
;
; _x = _en_x; _y = _en_y + 1; _t = chac_chacs_t2 [_en_state]; map_set ();
;
	lda     __en_x
	sta     __x
	lda     __en_y
	clc
	adc     #$01
	sta     __y
	ldy     __en_state
	lda     _chac_chacs_t2,y
	sta     __t
	jsr     _map_set
;
; _x = _en_x; _y = _en_y + 2; _t = chac_chacs_t3 [_en_state]; map_set ();
;
	lda     __en_x
	sta     __x
	lda     __en_y
	clc
	adc     #$02
	sta     __y
	ldy     __en_state
	lda     _chac_chacs_t3,y
	sta     __t
	jsr     _map_set
;
; break;
;
	jmp     L10E8
;
; -- _en_ct; if (!_en_ct) {
;
L12FD:	dec     __en_ct
	lda     __en_ct
	bne     L12FF
;
; _en_state = (_en_state + 1) & 3; _en_ct = monococo_state_times [_en_state] - (rand8 () & 0x15);
;
	lda     __en_state
	clc
	adc     #$01
	and     #$03
	sta     __en_state
	ldy     __en_state
	lda     _monococo_state_times,y
	jsr     pusha0
	jsr     _rand8
	and     #$15
	jsr     tossuba0
	sta     __en_ct
;
; if (_en_state == 2 && _en_ct == MONOCOCO_FIRE_COCO_AT) {
;
L12FF:	lda     __en_state
	cmp     #$02
	bne     L130A
	lda     __en_ct
	cmp     #$19
	bne     L130A
;
; COCO_RDX = EN_X_ABSOLUTE + 4; rdy = _en_y + 4; cocos_shoot_aimed ();
;
	lda     __en_x
	clc
	adc     #$04
	sta     _rdx
	lda     __en_y
	clc
	adc     #$04
	sta     _rdy
	jsr     _cocos_shoot_aimed
;
; rda = (prx < rdx); enems_facing ();
;
L130A:	lda     _prx
	cmp     _rdx
	jsr     boolult
	sta     _rda
	jsr     _enems_facing
;
; en_spr = MONOCOCO_BASE_SPRID + _en_facing;
;
	lda     __en_facing
	clc
	adc     #$38
	sta     _en_spr
;
; switch (_en_state) {
;
	lda     __en_state
;
; }
;
	beq     L1320
	cmp     #$01
	beq     L1324
	cmp     #$02
	beq     L132A
	cmp     #$03
	beq     L1324
	jmp     L10E8
;
; en_spr += 9;
;
L1320:	lda     #$09
;
; break;
;
	jmp     L16DB
;
; en_spr += 8;
;
L1324:	lda     #$08
;
; break;
;
	jmp     L16DB
;
; en_spr += ((frame_counter >> 5) & 1);
;
L132A:	ldx     #$00
	lda     _frame_counter
	jsr     asrax4
	jsr     asrax1
	and     #$01
L16DB:	clc
	adc     _en_spr
L16D4:	sta     _en_spr
;
; en_spr_id [gpit] = en_spr;
;
L10E8:	ldy     _gpit
	lda     _en_spr
	sta     _en_spr_id,y
;
; if (_en_t == 4 && pregotten && !pgotten && !pj) {
;
	lda     __en_t
	cmp     #$04
	jne     L134D
	lda     _pregotten
	jeq     L134D
	lda     _pgotten
	jne     L134D
	lda     _pj
	jne     L134D
;
; if (_en_mx) {
;
	lda     __en_mx
	beq     L1339
;
; if (pry + 16 >= _en_y && pry + 12 <= _en_y) {
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L133B
	inx
L133B:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L1339
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L133D
	inx
L133D:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L133A
	bne     L1339
;
; pgotten = 1;
;
L133A:	lda     #$01
	sta     _pgotten
;
; pgtmx = _en_mx << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_mx
	bpl     L1343
	dex
L1343:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmx
	stx     _pgtmx+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L134A
	dex
L134A:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; (_en_my < 0 && pry + 17 >= _en_y && pry + 12 <= _en_y) ||
;
L1339:	lda     __en_my
	asl     a
	bcc     L16B6
	ldx     #$00
	lda     _pry
	clc
	adc     #$11
	bcc     L1352
	inx
L1352:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L16B6
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L1353
	inx
L1353:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L134E
	beq     L134E
;
; (_en_my > 0 && pry + 16 + _en_my >= _en_y && pry + 12 <= _en_y)
;
L16B6:	lda     __en_my
	sec
	sbc     #$01
	bvs     L1357
	eor     #$80
L1357:	jpl     L134D
	ldx     #$00
	lda     _pry
	clc
	adc     #$10
	bcc     L1359
	inx
L1359:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     __en_my
	bpl     L135A
	dex
L135A:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	cmp     __en_y
	txa
	sbc     #$00
	bcc     L134D
	ldx     #$00
	lda     _pry
	clc
	adc     #$0C
	bcc     L135B
	inx
L135B:	sec
	sbc     __en_y
	sta     tmp1
	txa
	sbc     #$00
	ora     tmp1
	bcc     L134E
	bne     L134D
;
; pgotten = 1;
;
L134E:	lda     #$01
	sta     _pgotten
;
; pgtmy = _en_my << (6 - en_status [gpit]);
;
	ldx     #$00
	lda     __en_my
	bpl     L1362
	dex
L1362:	jsr     pushax
	lda     #$06
	jsr     pusha0
	ldy     _gpit
	lda     _en_status,y
	jsr     tossuba0
	jsr     tosaslax
	sta     _pgtmy
	stx     _pgtmy+1
;
; py = (_en_y - 16) << 6; pry = py >> 6;
;
	ldx     #$00
	lda     __en_y
	sec
	sbc     #$10
	bcs     L1369
	dex
L1369:	jsr     shlax4
	jsr     shlax2
	sta     _py
	stx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; pvy = 0;
;
	lda     #$00
	sta     _pvy
	sta     _pvy+1
;
; en_is_alive == 0 // General condition.
;
L134D:	lda     _en_is_alive
;
; || en_cttouched [gpit]
;
	jeq     L1396
	ldy     _gpit
	lda     _en_cttouched,y
;
; || _en_t == 4
;
	jne     L1396
	lda     __en_t
;
; || (_en_t == 8 && _en_state != 2)
;
	cmp     #$04
	jeq     L1396
	lda     __en_t
	cmp     #$08
	bne     L16B8
	lda     __en_state
	cmp     #$02
	jne     L1396
;
; || (_en_t == 9 && _en_state == 0)
;
L16B8:	lda     __en_t
	cmp     #$09
	bne     L16B9
	lda     __en_state
	jeq     L1396
;
; || _en_t == 10
;
L16B9:	lda     __en_t
;
; || (_en_t == 11 && _en_mx != 2)
;
	cmp     #$0A
	jeq     L1396
	lda     __en_t
	cmp     #$0B
	bne     L136E
	lda     __en_mx
	cmp     #$02
	jne     L1396
;
; touched == 0 &&
;
L136E:	lda     _touched
	bne     L137E
;
; ) {
;
	jsr     _collide
	tax
	beq     L137E
;
; en_sg_1 = 0;
;
	lda     #$00
	sta     _en_sg_1
;
; en_sg_2 = (pflickering == 0);
;
	lda     _pflickering
	jsr     booleq
	sta     _en_sg_2
;
; if (en_sg_1) enems_hit ();
;
	lda     _en_sg_1
	beq     L1387
	jsr     _enems_hit
;
; if (en_sg_2) { 
;
L1387:	lda     _en_sg_2
	beq     L138A
;
; pkill = 1; 
;
	lda     #$01
	sta     _pkill
;
; touched = 1; 
;
L138A:	lda     #$01
	sta     _touched
;
; || _en_t == 8
;
L137E:	lda     _touched
	jne     L1396
	lda     __en_t
;
; ) goto skipdo;
;
	cmp     #$08
	jeq     L1396
;
; bi = MAX_BULLETS; while (bi --) if (by [bi]) {
;
	lda     #$04
	sta     _bi
L1395:	lda     _bi
	pha
	sec
	sbc     #$01
	sta     _bi
	pla
	tax
	jeq     L1396
	ldy     _bi
	lda     _by,y
	beq     L1395
;
; bx [bi] + 3 >= EN_X_ABSOLUTE &&
;
	ldy     _bi
	ldx     #$00
	lda     _bx,y
	clc
	adc     #$03
	bcc     L13A0
	inx
L13A0:	cmp     __en_x
	txa
	sbc     #$00
	bcc     L1395
;
; bx [bi] <= EN_X_ABSOLUTE + 12 &&
;
	ldy     _bi
	lda     _bx,y
	jsr     pusha0
	lda     __en_x
	clc
	adc     #$0C
	bcc     L13A4
	ldx     #$01
L13A4:	jsr     tosicmp
	beq     L16D2
	bcs     L1395
;
; by [bi] + 3 >= _en_y && 
;
L16D2:	ldy     _bi
	ldx     #$00
	lda     _by,y
	clc
	adc     #$03
	bcc     L13A7
	inx
L13A7:	cmp     __en_y
	txa
	sbc     #$00
	bcc     L1395
;
; by [bi] <= _en_y + 12
;
	ldy     _bi
	lda     _by,y
	jsr     pusha0
	lda     __en_y
;
; ) {
;
	clc
	adc     #$0C
	bcc     L13AA
	ldx     #$01
L13AA:	jsr     tosicmp
	bcc     L139D
	bne     L1395
;
; sfx_play (SFX_ENHIT, 1);
;
L139D:	lda     #$06
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; if (_en_t >= PLAYER_BULLETS_MIN_KILLABLE)
;
	lda     __en_t
	cmp     #$01
	bcc     L13AF
;
; enems_hit ();
;
	jsr     _enems_hit
;
; bullets_destroy ();
;
L13AF:	jsr     _bullets_destroy
;
; if (en_spr != 0xff) {
;
L1396:	lda     _en_spr
	cmp     #$FF
	beq     L13B3
;
; _en_x + en_spr_x_mod, 
;
	jsr     decsp3
	lda     __en_x
	clc
	adc     _en_spr_x_mod
	ldy     #$02
	sta     (sp),y
;
; _en_y + SPRITE_ADJUST, 
;
	lda     __en_y
	clc
	adc     #$20
	sec
	sbc     #$08
	bcs     L16CF
	sec
L16CF:	sbc     #$10
	bcs     L16D0
	sec
L16D0:	sbc     #$01
	dey
	sta     (sp),y
;
; oam_index, 
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_enems [en_spr]
;
	ldx     #$00
	lda     _en_spr
	asl     a
	bcc     L16D1
	inx
	clc
L16D1:	adc     _spr_enems
;
; );
;
	sta     ptr1
;
; spr_enems [en_spr]
;
	txa
	adc     _spr_enems+1
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; enems_update_unsigned_char_arrays ();
;
L13B3:	jsr     _enems_update_unsigned_char_arrays
;
; } 
;
	jmp     L107F

.endproc

; ---------------------------------------------------------------
; void __near__ draw_game_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_game_frame: near

.segment	"CODE"

;
; _x = 2; _y = 3;  pr_str ("LIFE:00   ITEM:      KEYS:00");
;
	lda     #$02
	sta     __x
	lda     #$03
	sta     __y
	lda     #<(L0001)
	ldx     #>(L0001)
	jsr     pushax
	jsr     _pr_str
;
; _y = 28; pr_str ("SUPPATESTR - THE MOJON TWINS");
;
	lda     #$1C
	sta     __y
	lda     #<(L0001+29)
	ldx     #>(L0001+29)
	jsr     pushax
	jmp     _pr_str

.endproc

; ---------------------------------------------------------------
; void __near__ hud_update (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hud_update: near

.segment	"CODE"

;
; if (okeys != pkeys) {
;
	lda     _pkeys
	cmp     _okeys
	beq     L13CD
;
; okeys = pkeys;
;
	lda     _pkeys
	sta     _okeys
;
; _x = KEYS_X; _y = KEYS_Y; _n = pkeys; p_t ();
;
	lda     #$1C
	sta     __x
	lda     #$03
	sta     __y
	lda     _pkeys
	sta     __n
	jsr     _p_t
;
; if (olife != plife) {
;
L13CD:	lda     _plife
	cmp     _olife
	beq     L13D8
;
; olife = plife;
;
	lda     _plife
	sta     _olife
;
; _x = LIFE_X; _y = LIFE_Y; _n = plife; p_t ();
;
	lda     #$07
	sta     __x
	lda     #$03
	sta     __y
	lda     _plife
	sta     __n
	jsr     _p_t
;
; HS_INV_X, HS_INV_Y,
;
L13D8:	jsr     decsp3
	lda     #$88
	ldy     #$02
	sta     (sp),y
	lda     #$0B
	dey
	sta     (sp),y
;
; oam_index,
;
	lda     _oam_index
	dey
	sta     (sp),y
;
; spr_hs [pinv]
;
	ldx     #$00
	lda     _pinv
	asl     a
	bcc     L16E0
	inx
	clc
L16E0:	adc     #<(_spr_hs)
;
; );
;
	sta     ptr1
;
; spr_hs [pinv]
;
	txa
	adc     #>(_spr_hs)
;
; );
;
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
	sta     _oam_index
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ flickscreen_do_horizontal (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flickscreen_do_horizontal: near

.segment	"CODE"

;
; if (prx == 4 && 
;
	lda     _prx
	cmp     #$04
	bne     L13EB
;
; (cfx + pvx) < 0
;
	ldx     #$00
	lda     _cfx
	bpl     L13EF
	dex
L13EF:	clc
	adc     _pvx
	txa
	adc     _pvx+1
	tax
;
; ) {
;
	cpx     #$80
	bcc     L13EB
;
; -- n_pant;
;
	dec     _n_pant
;
; px = MAX_PRX << FIXBITS;
;
	ldx     #$3D
;
; } else if (prx == MAX_PRX && 
;
	jmp     L16E3
L13EB:	lda     _prx
	cmp     #$F4
	bne     L13F7
;
; (cfx + pvx) > 0
;
	ldx     #$00
	lda     _cfx
	bpl     L13F9
	dex
L13F9:	clc
	adc     _pvx
	pha
	txa
	adc     _pvx+1
	tax
	pla
;
; ) {
;
	cmp     #$01
	txa
	sbc     #$00
	bvs     L13FA
	eor     #$80
L13FA:	bmi     L13F6
L13F7:	rts
;
; ++ n_pant;
;
L13F6:	inc     _n_pant
;
; px = 4 << FIXBITS;
;
	ldx     #$01
L16E3:	lda     #$00
	sta     _px
	stx     _px+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ flickscreen_do_vertical (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flickscreen_do_vertical: near

.segment	"CODE"

;
; if (pry == 0 && pvy < 0 && n_pant >= c_map_w) {
;
	lda     _pry
	bne     L1400
	ldx     _pvy+1
	cpx     #$80
	bcc     L1400
	lda     _n_pant
	cmp     _c_map_w
	bcc     L1400
;
; n_pant -= c_map_w;
;
	lda     _c_map_w
	eor     #$FF
	sec
	adc     _n_pant
	sta     _n_pant
;
; py = 192 << FIXBITS;
;
	ldx     #$30
	lda     #$00
	sta     _py
	stx     _py+1
;
; if (pvy > -PLAYER_VY_JUMP_MAX) pvy = -PLAYER_VY_JUMP_MAX;
;
	lda     _pvy
	cmp     #$41
	lda     _pvy+1
	sbc     #$FF
	bvs     L140A
	eor     #$80
L140A:	bpl     L140E
	ldx     #$FF
	lda     #$40
	sta     _pvy
	stx     _pvy+1
;
; } else if (pry >= 192 && pvy > 0 && n_pant < c_map_size - c_map_w) {
;
	rts
L1400:	lda     _pry
	cmp     #$C0
	bcc     L1410
	lda     _pvy
	cmp     #$01
	lda     _pvy+1
	sbc     #$00
	bvs     L1411
	eor     #$80
L1411:	bpl     L1410
	lda     _n_pant
	jsr     pusha0
	lda     _c_map_size
	sec
	sbc     _c_map_w
	jsr     tosicmp0
	bcc     L140F
L1410:	rts
;
; n_pant += c_map_w;
;
L140F:	lda     _c_map_w
	clc
	adc     _n_pant
	sta     _n_pant
;
; py = 0;
;
	lda     #$00
	sta     _py
	sta     _py+1
;
; }
;
L140E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_init: near

.segment	"CODE"

;
; win_level = game_over = 0;
;
	lda     #$00
	sta     _game_over
	sta     _win_level
;
; c_pal_bg =   palts0;
;
	lda     #<(_palts0)
	sta     _c_pal_bg
	lda     #>(_palts0)
	sta     _c_pal_bg+1
;
; c_pal_fg =   palss0;
;
	lda     #<(_palss0)
	sta     _c_pal_fg
	lda     #>(_palss0)
	sta     _c_pal_fg+1
;
; c_ts_tmaps =  ts0_tmaps;
;
	lda     #<(_ts0_tmaps)
	sta     _c_ts_tmaps
	lda     #>(_ts0_tmaps)
	sta     _c_ts_tmaps+1
;
; c_ts_pals =  ts0_pals;
;
	lda     #<(_ts0_pals)
	sta     _c_ts_pals
	lda     #>(_ts0_pals)
	sta     _c_ts_pals+1
;
; c_behs =   behs0;
;
	lda     #<(_behs0)
	sta     _c_behs
	lda     #>(_behs0)
	sta     _c_behs+1
;
; spr_enems =  spr_enems0;
;
	lda     #<(_spr_enems0)
	sta     _spr_enems
	lda     #>(_spr_enems0)
	sta     _spr_enems+1
;
; c_map =  map_0;
;
	lda     #<(_map_0)
	sta     _c_map
	lda     #>(_map_0)
	sta     _c_map+1
;
; c_locks =  map_0_locks;
;
	lda     #<(_map_0_locks)
	sta     _c_locks
	lda     #>(_map_0_locks)
	sta     _c_locks+1
;
; N_BOLTS_0;
;
	lda     #$01
	sta     _c_max_bolts
;
; c_enems =   enems_0;
;
	lda     #<(_enems_0)
	sta     _c_enems
	lda     #>(_enems_0)
	sta     _c_enems+1
;
; c_hotspots =  hotspots_0;
;
	lda     #<(_hotspots_0)
	sta     _c_hotspots
	lda     #>(_hotspots_0)
	sta     _c_hotspots+1
;
; c_max_enems =  99;
;
	lda     #$63
	sta     _c_max_enems
;
; c_map_w = MAP_W;
;
	lda     #$04
	sta     _c_map_w
;
; c_map_h = MAP_H;
;
	lda     #$02
	sta     _c_map_h
;
; rda = c_map_h; c_map_size = 0; while (rda --) c_map_size += c_map_w;
;
	sta     _rda
	lda     #$00
L16E4:	sta     _c_map_size
	lda     _rda
	pha
	sec
	sbc     #$01
	sta     _rda
	pla
	tax
	beq     L143C
	lda     _c_map_w
	clc
	adc     _c_map_size
	jmp     L16E4
;
; pal_bg (c_pal_bg);
;
L143C:	lda     _c_pal_bg
	ldx     _c_pal_bg+1
	jsr     _pal_bg
;
; pal_spr (c_pal_fg);
;
	lda     _c_pal_fg
	ldx     _c_pal_fg+1
	jsr     _pal_spr
;
; cls ();
;
	jsr     _cls
;
; draw_game_frame ();
;
	jsr     _draw_game_frame
;
; hotspots_load ();
;
	jsr     _hotspots_load
;
; memfill (lkact, 1, c_max_bolts);
;
	jsr     decsp3
	lda     #<(_lkact)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_lkact)
	sta     (sp),y
	lda     #$01
	ldy     #$00
	sta     (sp),y
	lda     _c_max_bolts
	ldx     #$00
	jsr     _memfill
;
; if (!warp_to_level) {
;
	lda     _warp_to_level
	bne     L144B
;
; n_pant = SCR_INI;
;
	sta     _n_pant
;
; px = (4 + (PLAYER_INI_X << 4)) << FIXBITS;
;
	ldx     #$05
	sta     _px
	stx     _px+1
;
; py = (PLAYER_INI_Y << 4) << FIXBITS;
;
	ldx     #$0C
	sta     _py
	stx     _py+1
;
; player_to_pixels ();
;
L144B:	jsr     _player_to_pixels
;
; player_init ();
;
	jsr     _player_init
;
; pobjs = 0;
;
	lda     #$00
	sta     _pobjs
;
; pkeys = 0;
;
	sta     _pkeys
;
; half_life = 0;
;
	sta     _half_life
;
; frame_counter = 0;
;
	sta     _frame_counter
;
; olife = oammo = oobjs = okeys = 0xff;
;
	lda     #$FF
	sta     _okeys
	sta     _oobjs
	sta     _oammo
	sta     _olife
;
; okilled = 0xff;
;
	sta     _okilled
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ prepare_scr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prepare_scr: near

.segment	"CODE"

;
; if (!ft) {
;
	lda     _ft
	bne     L1468
;
; fade_out (); 
;
	jsr     _fade_out
;
; } else {
;
	jmp     L16E5
;
; ft = 0;
;
L1468:	lda     #$00
	sta     _ft
;
; ppu_off ();
;
L16E5:	jsr     _ppu_off
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; enems_load ();
;
	jsr     _enems_load
;
; hotspots_create (); 
;
	jsr     _hotspots_create
;
; cocos_init ();
;
	jsr     _cocos_init
;
; draw_scr ();
;
	jsr     _draw_scr
;
; do_process_breakable = 0;
;
	lda     #$00
	sta     _do_process_breakable
;
; gpit = BREAKABLE_MAX; while (gpit --) brkf [gpit] = 0;
;
	lda     #$04
	sta     _gpit
L1479:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L147A
	ldy     _gpit
	lda     #$00
	sta     _brkf,y
	jmp     L1479
;
; for (gpit = 0; gpit < MAX_BULLETS; gpit ++) {
;
L147A:	sta     _gpit
	cmp     #$04
	bcs     L1481
;
; b_slots [gpit] = gpit; by [gpit] = 0;
;
	ldy     _gpit
	lda     _gpit
	sta     _b_slots,y
	ldy     _gpit
	lda     #$00
	sta     _by,y
;
; for (gpit = 0; gpit < MAX_BULLETS; gpit ++) {
;
	lda     _gpit
	clc
	adc     #$01
	jmp     L147A
;
; b_slots_i = MAX_BULLETS;
;
L1481:	lda     #$04
	sta     _b_slots_i
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; gpit = 3; while (gpit --) en_spr_id [gpit] = en_s [gpit];
;
	lda     #$03
	sta     _gpit
L1495:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L1496
	lda     #<(_en_spr_id)
	ldx     #>(_en_spr_id)
	clc
	adc     _gpit
	bcc     L149A
	inx
L149A:	sta     ptr1
	stx     ptr1+1
	ldy     _gpit
	lda     _en_s,y
	ldy     #$00
	sta     (ptr1),y
	jmp     L1495
;
; oam_index = 4;
;
L1496:	lda     #$04
	sta     _oam_index
;
; prx = px >> FIXBITS; pry = py >> FIXBITS;
;
	lda     _px
	ldx     _px+1
	jsr     shrax4
	jsr     shrax2
	sta     _prx
	lda     _py
	ldx     _py+1
	jsr     asrax4
	jsr     asrax2
	sta     _pry
;
; player_move ();
;
	jsr     _player_move
;
; enems_move ();
;
	jsr     _enems_move
;
; if (hrt) hotspots_paint ();
;
	lda     _hrt
	beq     L14A6
	jsr     _hotspots_paint
;
; hud_update ();
;
L14A6:	jsr     _hud_update
;
; update_cycle ();
;
	jsr     _update_cycle
;
; fade_in ();
;
	jmp     _fade_in

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; music_play (MUSIC_INGAME);
;
	lda     #$00
	jsr     _music_play
;
; clear_update_list ();
;
	jsr     _clear_update_list
;
; set_vram_update (UPDATE_LIST_SIZE, update_list);
;
	lda     #$20
	jsr     pusha
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; on_pant = 99; ft = 1; fade_delay = 1;
;
	lda     #$63
	sta     _on_pant
	lda     #$01
	sta     _ft
	sta     _fade_delay
;
; pal_bright (0);
;
	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all ();
;
	jsr     _ppu_on_all
;
; ntsc_frame = level_reset = warp_to_level = 0; 
;
	lda     #$00
	sta     _warp_to_level
	sta     _level_reset
	sta     _ntsc_frame
;
; oam_index = 4; ticker = 50;
;
	lda     #$04
	sta     _oam_index
	lda     #$32
	sta     _ticker
;
; hud_update ();
;
L14C4:	jsr     _hud_update
;
; if (pkill) player_kill ();
;
	lda     _pkill
	beq     L14C8
	jsr     _player_kill
;
; if (game_over || level_reset) break;   
;
L14C8:	lda     _game_over
	jne     L14C5
	lda     _level_reset
	jne     L14C5
;
; flick_override = 0;
;
	sta     _flick_override
;
; if (flick_override == 0) {
;
	lda     _flick_override
	bne     L14D0
;
; flickscreen_do_horizontal ();
;
	jsr     _flickscreen_do_horizontal
;
; flickscreen_do_vertical ();
;
	jsr     _flickscreen_do_vertical
;
; if (on_pant != n_pant) {
;
L14D0:	lda     _n_pant
	cmp     _on_pant
	beq     L14D4
;
; prepare_scr ();
;
	jsr     _prepare_scr
;
; on_pant = n_pant;
;
	lda     _n_pant
	sta     _on_pant
;
; if (pmayneedrelocation) {
;
L14D4:	lda     _pmayneedrelocation
	beq     L14D9
;
; pmayneedrelocation = 0;
;
	lda     #$00
	sta     _pmayneedrelocation
;
; gpit = 16;
;
	lda     #$10
	sta     _gpit
;
; while (gpit --) {
;
L14DF:	lda     _gpit
	pha
	sec
	sbc     #$01
	sta     _gpit
	pla
	tax
	beq     L14E0
;
; cx1 = prx >> 4; cx2 = (prx + 7) >> 4;
;
	ldx     #$00
	lda     _prx
	jsr     asrax4
	sta     _cx1
	ldx     #$00
	lda     _prx
	clc
	adc     #$07
	bcc     L14E7
	inx
L14E7:	jsr     shrax4
	sta     _cx2
;
; cy1 = cy2 = (pry + 15) >> 4;
;
	ldx     #$00
	lda     _pry
	clc
	adc     #$0F
	bcc     L14EC
	inx
L14EC:	jsr     shrax4
	sta     _cy2
	sta     _cy1
;
; cm_two_points ();
;
	jsr     _cm_two_points
;
; if ((at1 & 8) == 0 && (at2 & 8) == 0) break;
;
	lda     _at1
	and     #$08
	bne     L14EE
	lda     _at2
	and     #$08
	beq     L14E0
;
; prx += 16; // Try next cell
;
L14EE:	lda     #$10
	clc
	adc     _prx
	sta     _prx
;
; }
;
	jmp     L14DF
;
; px = prx << FIXBITS;
;
L14E0:	tax
	lda     _prx
	jsr     aslax4
	jsr     aslax2
	sta     _px
	stx     _px+1
;
; if (shaker_ct) {
;
L14D9:	lda     _shaker_ct
	beq     L1504
;
; -- shaker_ct;
;
	dec     _shaker_ct
;
; scroll (254 + (rand8 () & 3), SCROLL_Y - 2 + (rand8 () & 3));
;
	jsr     _rand8
	ldx     #$00
	and     #$03
	clc
	adc     #$FE
	bcc     L1500
	inx
L1500:	jsr     pushax
	jsr     _rand8
	ldx     #$00
	and     #$03
	clc
	adc     #$06
	bcc     L1503
	inx
L1503:	jsr     _scroll
;
; if (shaker_ct == 0) scroll (0, SCROLL_Y);
;
	lda     _shaker_ct
	bne     L1504
	jsr     push0
	lda     #$08
	jsr     _scroll
;
; update_cycle ();
;
L1504:	jsr     _update_cycle
;
; pad_read ();
;
	jsr     _pad_read
;
; a_button = (pad_this_frame & PAD_A);
;
	lda     _pad_this_frame
	and     #$01
	sta     _a_button
;
; b_button = (pad_this_frame & PAD_B);
;
	lda     _pad_this_frame
	and     #$02
	sta     _b_button
;
; ntsc_frame ++; if (ntsc_frame == 6) ntsc_frame = 0;
;
	lda     _ntsc_frame
	clc
	adc     #$01
	sta     _ntsc_frame
	cmp     #$06
	bne     L1512
	lda     #$00
	sta     _ntsc_frame
;
; if (paused == 0 && (ntsc == 0 || ntsc_frame)) {
;
L1512:	lda     _paused
	jne     L15B9
	lda     _ntsc
	beq     L1517
	lda     _ntsc_frame
	jeq     L15B9
;
; if (ticker) -- ticker; else ticker = 50;
;
L1517:	lda     _ticker
	beq     L151C
	dec     _ticker
	jmp     L151F
L151C:	lda     #$32
	sta     _ticker
;
; half_life ^= 1;
;
L151F:	lda     _half_life
	eor     #$01
	sta     _half_life
;
; ++ frame_counter;
;
	inc     _frame_counter
;
; if (hrt) {
;
	lda     _hrt
	jeq     L15A0
;
; prx + 4 >= hrx && 
;
	ldx     #$00
	lda     _prx
	clc
	adc     #$04
	bcc     L1529
	inx
L1529:	cmp     _hrx
	txa
	sbc     #$00
	jcc     L15A0
;
; prx <= hrx + 11 &&
;
	lda     _prx
	jsr     pusha0
	lda     _hrx
	clc
	adc     #$0B
	bcc     L152B
	ldx     #$01
L152B:	jsr     tosicmp
	beq     L16EA
	jcs     L15A0
;
; pry + 8 >= hry && 
;
L16EA:	ldx     #$00
	lda     _pry
	clc
	adc     #$08
	bcc     L152C
	inx
L152C:	cmp     _hry
	txa
	sbc     #$00
	jcc     L15A0
;
; pry <= hry + 7
;
	lda     _pry
	jsr     pusha0
	lda     _hry
;
; ) {
;
	clc
	adc     #$07
	bcc     L152D
	ldx     #$01
L152D:	jsr     tosicmp
	bcc     L1528
	jne     L15A0
;
; opinv = pinv;
;
L1528:	lda     _pinv
	sta     _opinv
;
; if (hrt == HS_OBJ_EMPTY) {
;
	lda     _hrt
	cmp     #$04
	bne     L1531
;
; if (b_button) 
;
	lda     _b_button
	jeq     L1595
;
; hrt = ht [HS_CUR_PANT] = pinv;
;
	ldy     _n_pant
	lda     _pinv
	sta     _ht,y
	sta     _hrt
;
; pinv = HS_OBJ_EMPTY;
;
	lda     #$04
	sta     _pinv
;
; b_button = 0;
;
	lda     #$00
	sta     _b_button
;
; sfx_play (SFX_TILE, 1);
;
	lda     #$01
	jsr     pusha
	jsr     _sfx_play
;
; } else if (hrt >= HS_OBJ_MIN && hrt <= HS_OBJ_MAX) {
;
	jmp     L1595
L1531:	lda     _hrt
	cmp     #$05
	bcc     L1542
	lda     _hrt
	cmp     #$07
	bcs     L1542
;
; if (b_button) 
;
	lda     _b_button
	jeq     L1595
;
; rda = hrt;
;
	lda     _hrt
	sta     _rda
;
; hrt = ht [HS_CUR_PANT] = pinv;
;
	ldy     _n_pant
	lda     _pinv
	sta     _ht,y
	sta     _hrt
;
; pinv = rda;
;
	lda     _rda
	sta     _pinv
;
; b_button = 0;
;
	lda     #$00
	sta     _b_button
;
; sfx_play (SFX_OBJECT, 1);
;
	lda     #$02
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; } else if (hrt >= HS_OBJ_MIN + HS_USE_OFFS && hrt <= HS_OBJ_MAX + HS_USE_OFFS) {
;
	jmp     L1595
L1542:	lda     _hrt
	cmp     #$07
	bcc     L1557
	lda     _hrt
	cmp     #$09
	bcs     L1557
;
; if (b_button) 
;
	lda     _b_button
	jeq     L1595
;
; if (pinv == hrt - HS_USE_OFFS) {
;
	ldx     #$00
	lda     _hrt
	sec
	sbc     #$02
	bcs     L155F
	dex
L155F:	cpx     #$00
	jne     L1595
	cmp     _pinv
	jne     L1595
;
; rda = pinv;
;
	lda     _pinv
	sta     _rda
;
; rdb = hrt;
;
	lda     _hrt
	sta     _rdb
;
; hrt = ht [HS_CUR_PANT] = pinv + 2*HS_USE_OFFS;
;
	lda     #<(_ht)
	ldx     #>(_ht)
	clc
	adc     _n_pant
	bcc     L1567
	inx
L1567:	sta     ptr1
	stx     ptr1+1
	lda     _pinv
	clc
	adc     #$04
	ldy     #$00
	sta     (ptr1),y
	sta     _hrt
;
; pinv = HS_OBJ_EMPTY;
;
	lda     #$04
	sta     _pinv
;
; ht [4] == 5 + 2*HS_USE_OFFS && 
;
	lda     _ht+4
	cmp     #$09
	bne     L1570
;
; ht [5] == 6 + 2*HS_USE_OFFS
;
	lda     _ht+5
;
; );
;
	cmp     #$0A
	beq     L156E
L1570:	tya
	jmp     L1572
L156E:	lda     #$01
L1572:	sta     _win_level
;
; b_button = 0;
;
	sty     _b_button
;
; sfx_play (SFX_USE, 1);
;
	lda     #$03
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; else if (hrt >= HS_OBJ_MIN + 2*HS_USE_OFFS && hrt <= HS_OBJ_MAX + 2*HS_USE_OFFS) {
;
	jmp     L1595
L1557:	lda     _hrt
	cmp     #$09
	bcc     L1579
	lda     _hrt
	cmp     #$0B
	bcs     L1579
;
; if (b_button) 
;
	lda     _b_button
	beq     L1595
;
; else
;
	jmp     L1595
;
; rda = 0;
;
L1579:	lda     #$00
	sta     _rda
;
; switch (hrt) {
;
	lda     _hrt
;
; }
;
	cmp     #$01
	beq     L1586
	cmp     #$02
	beq     L158B
	cmp     #$03
	beq     L1590
	jmp     L1584
;
; ++ pobjs;
;
L1586:	inc     _pobjs
;
; rda = SFX_OBJECT;
;
	lda     #$02
;
; break;
;
	jmp     L16E9
;
; ++ pkeys;
;
L158B:	inc     _pkeys
;
; break;
;
	jmp     L16E9
;
; plife += PLAYER_REFILL;
;
L1590:	inc     _plife
;
; rda = SFX_USE;
;
L16E9:	sta     _rda
;
; if (rda) {
;
L1584:	lda     _rda
	beq     L1595
;
; sfx_play (rda, 1);
;
	lda     _rda
	jsr     pusha
	lda     #$01
	jsr     _sfx_play
;
; hrt = 0;
;
	lda     #$00
	sta     _hrt
;
; hact [HS_CUR_PANT] = 0;
;
	ldy     _n_pant
	sta     _hact,y
;
; if (opinv != pinv) {
;
L1595:	lda     _pinv
	cmp     _opinv
	jsr     boolne
;
; if (!warp_to_level) {
;
L15A0:	lda     _warp_to_level
	bne     L15A2
;
; player_move ();
;
	jsr     _player_move
;
; ) {
;
L15A2:	lda     _win_level
	beq     L15A5
;
; music_stop ();
;
	jsr     _music_stop
;
; delay (50);
;
	lda     #$32
	jsr     _delay
;
; break;
;
	jmp     L14C5
;
; bullets_move ();
;
L15A5:	jsr     _bullets_move
;
; oam_index_player = oam_index; 
;
	lda     _oam_index
	sta     _oam_index_player
;
; if (!warp_to_level) player_render ();
;
	lda     _warp_to_level
	bne     L15AD
	jsr     _player_render
;
; enems_move ();
;
L15AD:	jsr     _enems_move
;
; cocos_do ();
;
	jsr     _cocos_do
;
; if (warp_to_level) {
;
	lda     _warp_to_level
	beq     L15B2
;
; update_cycle (); music_stop (); break;
;
	jsr     _update_cycle
	jsr     _music_stop
	jmp     L14C5
;
; if (hrt) hotspots_paint ();
;
L15B2:	lda     _hrt
	beq     L15B6
	jsr     _hotspots_paint
;
; if (do_process_breakable) breakable_do_anim ();
;
L15B6:	lda     _do_process_breakable
	beq     L15B9
	jsr     _breakable_do_anim
;
; if ((pad0 & (PAD_B|PAD_SELECT|PAD_UP)) == (PAD_B|PAD_SELECT|PAD_UP)) break;
;
L15B9:	lda     _pad0
	and     #$16
	cmp     #$16
	beq     L14C5
;
; if (pad_this_frame & PAD_START) {
;
	lda     _pad_this_frame
	and     #$08
	jeq     L14C4
;
; paused ^= 1;
;
	lda     _paused
	eor     #$01
	sta     _paused
;
; pal_bright (4 - paused);
;
	lda     #$04
	sec
	sbc     _paused
	jsr     _pal_bright
;
; music_pause (paused);
;
	lda     _paused
	jsr     _music_pause
;
; }
;
	jmp     L14C4
;
; fade_delay = 4;
;
L14C5:	lda     #$04
	sta     _fade_delay
;
; music_stop ();
;
	jsr     _music_stop
;
; fade_out ();
;
	jsr     _fade_out
;
; set_vram_update (0, 0);
;
	lda     #$00
	jsr     pusha
	tax
	jsr     _set_vram_update
;
; ppu_off ();
;
	jsr     _ppu_off
;
; oam_clear ();
;
	jmp     _oam_clear

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; bank_spr (1);
;
	lda     #$01
	jsr     _bank_spr
;
; bank_bg (0);
;
	lda     #$00
	jsr     _bank_bg
;
; ppu_off ();
;
	jsr     _ppu_off
;
; first_game = 1;
;
	lda     #$01
	sta     _first_game
;
; ntsc = ppu_system ();
;
	jsr     _ppu_system
	sta     _ntsc
;
; plife = PLAYER_LIFE;
;
L15DD:	lda     #$05
	sta     _plife
;
; scroll (0, SCROLL_Y);
;
	jsr     push0
	lda     #$08
	jsr     _scroll
;
; game_init (); 
;
	jsr     _game_init
;
; game_loop ();
;
	jsr     _game_loop
;
; first_game = 0;
;
	lda     #$00
	sta     _first_game
;
; }
;
	jmp     L15DD

.endproc

